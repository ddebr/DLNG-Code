package com.seipl.hazira.dlng.advance_payment;

import javax.naming.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.sql.*;

import java.util.*;
import java.util.Date;
import java.awt.Color;
import java.io.*;
import java.sql.*;
import java.text.*;

import com.seipl.hazira.dlng.util.RuntimeConf;
import com.seipl.hazira.dlng.util.UtilBean;
import com.lowagie.text.Chunk;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Element;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;
import com.lowagie.text.Image;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.Rectangle;
import com.lowagie.text.pdf.PdfAction;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;

public class DataBean_Advance_payment
{
    Connection conn; 
	Statement stmt;
	Statement stmt1;
	Statement stmt2;
	Statement stmt3;
	Statement stmt4;
	Statement stmt5;
	Statement stmt6;
	ResultSet rset;
	ResultSet rset1;
	ResultSet rset2;
	ResultSet rset3;
	ResultSet rset4;
	ResultSet rset5;
	ResultSet rset6;
	String queryString = "";
	String queryString1 = "";
	String queryString2 = "";
	String queryString3 = "";
	String queryString4 = "";
	String queryString5 = "";
	String queryString6 = "";
	String delete_code="";
	
	String Inv_customer_Invoice_DT="";
	
	String callFlag = "";
	String methodName = "";
	String databeanName = "DataBean_Advance_payment";
	
	Vector Customer_cd=new Vector();
	Vector Customer_nm=new Vector();
	
	Vector cust_cd=new Vector();
	Vector cust_nm=new Vector();
	Vector cust_amt=new Vector();
	Vector cust_cur=new Vector();
	Vector cust_recv_dt=new Vector();
	Vector cust_valid_dt=new Vector();
	Vector cust_bal=new Vector();
	Vector cust_seq_no=new Vector();
	Vector cust_seq_no1=new Vector();
	Vector cust_adjust_amt=new Vector();
	Vector cust_adjust_sign=new Vector();
	Vector cust_bal1=new Vector();
	
	
	String party_cd="";
	
	String tax_struct_cd="";
	String bill_period_end_date="";
	String customer_cd_tax="";
	String customer_plant_seq_no="";
	String contract_type="";
	Vector customer_Invoice_Tax_Code=new Vector();
	Vector customer_Invoice_Tax_Rate=new Vector();
	Vector customer_Invoice_Tax_Amt=new Vector();
	Vector customer_Invoice_Tax_Abbr=new Vector();
	Vector customer_Invoice_Tax_Name=new Vector();
	String customer_Invoice_Net_Amt_INR="";
	String customer_Invoice_Gross_Amt_INR="";
	NumberFormat nf = new DecimalFormat("###########0.00");
	NumberFormat nf3 = new DecimalFormat("###,###,###,##0.00");
	NumberFormat nf3a = new DecimalFormat("###,###,###,##0.0000");
	
	/*RG 20140905*/
	String CustomerCd=new String();
	String FgsaNo=new String();
	String FgsaRevNo=new String();
	String SnNo=new String();
	String SnRevNo=new String();
	String ContractType=new String();
	String CustomerPlantSeqNo=new String();
	String DueDate=new String();
	
	String Total_Collection_USD=new String();
	String Total_Collection_INR=new String();
	String pdfFinal_Total_Collection="";
	String pdfFinal_Total_Currency="";
	
	String PdfFinal_Total_Collection_tax="0";
	String PdfFinal_Total_Currency_tax="0";
	String PdfFinal_Total_Currency_SBC="0";
	String PdfFinal_Total_Collection_SBC="0";
	
	String PdfFinal_Total_Currency_KKC="0";
	String PdfFinal_Total_Collection_KKC="0";
	

	Vector Invoice_adj_amt_tax=new Vector();
	Vector Invoice_adj_cur_tax=new Vector();
	Vector Invoice_Adj_bal_tax=new Vector();
	Vector Invoice_adj_amt_SBC=new Vector();
	Vector Invoice_adj_cur_SBC=new Vector();
	Vector Invoice_Adj_bal_SBC=new Vector();
	Vector Invoice_adj_amt_KKC=new Vector();
	Vector Invoice_adj_cur_KKC=new Vector();
	Vector Invoice_Adj_bal_KKC=new Vector();
	
	
	Vector Invoice_adj_amt=new Vector();
	Vector Invoice_adj_cur=new Vector();
	Vector Invoice_dt=new Vector();
	Vector Invoice_no=new Vector();
	Vector Invoice_Adj_bal=new Vector();
	
	String invoice_hlpl_inv_no="";
	String invoice_financial_year="";
	String balanceason="0";
	
	boolean flagUSD=false;
	boolean flagINR=false;
	
	/*.................*/
	String invFinancialYear=new String();
	String invHlplinvseqno=new String();
	String invContractType=new String();
	String invadjustcur=new String();
	String invadjustmentamt=new String();
	String invexchngrt=new String();
	String invadjremark=new String();
	String invadjflag=new String();
	String invgrossamt=new String();
	String invbill_period_end_dt=new String();
	
//	report invoice
	String adjust_gross_amt_usd="0";
	String adjust_gross_amt_inr="0";
	String tariff_gross_amt_usd="0";
	String tariff_gross_amt_inr="0";
	String discount_gross_amt_usd="0";
	String discount_gross_amt_inr="0";
	String display_rate="0";
	
	String invdiscount_flag="";
	String invdiscount_price="0";
	String invtariff_flag="";
	String invtariff_total_inr="0";
	String Final_first_gross_amt="0";
	String Final_adjust_gross_amt="0";
	
	Vector advance_customer_cd=new Vector();
	Vector advance_customer_nm=new Vector();
	Vector advance_customer_amt=new Vector();
	Vector advance_customer_cur=new Vector();
	Vector advance_customer_aval_balance=new Vector();
	
	Vector plant_name=new Vector();
	Vector invoice_adj_amt1=new Vector();
	Vector invoice_adj_dt=new Vector();
	Vector invoice_adj_cur1=new Vector();
	Vector adv_amt=new Vector();
	Vector adv_amt_cur=new Vector();
	Vector adv_rec_dt=new Vector();
	Vector invoice_no1=new Vector();
	Vector total_bal=new Vector();
	
	Vector invoice_unique_seq_no=new Vector();
	Vector invoice_seq_no=new Vector();
	Vector financial_yr=new Vector();
	Vector adv_adj_amt_invoice=new Vector();
	Vector adv_adj_cur_invoice=new Vector();
	Vector invoice_dt_adj=new Vector();
	/*.....................*/
	
//	 Following variables for pdf generation
	public String customer_Invoice_Tax_Flag = "";
	public HttpServletRequest request = null;
	public String url_start = "";
	public String sn_ref_no = "";
	public String sn_no = "";
	public String customer_Invoice_SN_Dt = "";
	public String customer_Invoice_FGSA_Dt = "";
	public String invoice_title = "";
	
		//contact person supplier
	public String contact_Suppl_Name = "";
	public String contact_Customer_Name = "";
	public String contact_Suppl_Person_Address = "";
	public String contact_Suppl_Person_City = "";
	public String contact_Suppl_Person_Pin = "";
	public String contact_Suppl_GST_NO = "";
	public String contact_Suppl_CST_NO = "";
	public String contact_Suppl_GST_DT = "";
	public String contact_Suppl_CST_DT = "";
	public String contact_Suppl_Service_Tax_NO = "";
	public String contact_Suppl_Service_Tax_DT = "";
		//customer details
	
	public String contact_Suppl_PAN_NO = "";		//BK20160211
	public String contact_Suppl_PAN_DT = "";		//BK20160211
	
	String contact_Suppl_GSTIN_NO = "";
	String contact_Suppl_GSTIN_DT = "";
	String contact_Suppl_State_Code = "";
	String contact_Suppl_State = "";
	String contact_customer_State = "";
	String contact_customer_State_Code = "";
	String Rule_remark = "";
	String sac_code="";
	String sac_name="";
	String service_desc = "";
	boolean date_flag = false;
	
	public String contact_Customer_Person_Address = "";
	public String contact_Customer_Person_City = "";
	public String contact_Customer_Person_Pin = "";
	public String contact_Person_Name_And_Designation = "";
	public String contact_Customer_GST_NO = "";
	public String contact_Customer_CST_NO = "";
	public String contact_Customer_GST_DT = "";
	public String contact_Customer_CST_DT = "";
	public String contact_Customer_GVAT_NO = "";
	public String contact_Customer_GVAT_DT = "";
		//vsat
	public Vector vSTAT_CD = new Vector();
	public Vector vSTAT_NM = new Vector();
	public Vector vSTAT_NO = new Vector();
	public Vector vSTAT_EFF_DT = new Vector();
	public String customer_Invoice_DT = "";
	public String customer_Invoice_Due_DT = "";
	public String customer_Invoice_Start_DT = "";
	public String customer_Invoice_End_DT = "";
	public String hlpl_inv_no = "";
	public String hlpl_drcr_docNo = ""; //SB20160530
	public String hlpl_drcr_dt = ""; //SB20160601
	public String hlpl_inv_seq_no = "";
	public String total_Offspec_Qty = "";
	public String offspec_Sales_Rate = "";
	public String offspec_Flag = "";
	public String offspec_Amt_USD = "";
	public String total_Gas_Delivered = "";
	public String gas_Delivered_Amt_USD = "0";
	public String total_Invoice_Qty = "";
	public String invoice_Sales_Rate = "";
	public String customer_Invoice_Gross_Amt_USD = "";
	public String customer_Invoice_Exchg_Rate = "";
	public String remarks ="";
	public String invoice_att1_pdf_path = ""; 
	public String invoice_att1_file_name = "";
	public String invoice_att2_pdf_path = ""; 
	public String invoice_att2_file_name = ""; 
	public String invoice_att3_pdf_path="";
	public String invoice_att3_file_name="";
	public int sr_no = 6;
	String total_tax_amt = "";
	public String remark_1 = "";
	public String remark_2 = "";
	public String remark_3 = "";
	public String Invoice_adj_remark="";
	public String liability_exist_flag = "N";
	public Vector invoice_Period_Dates = new Vector();
	public Vector invoice_Period_DCQ = new Vector();
	public Vector invoice_Period_Buyer_Nom_Qty = new Vector();
	public Vector invoice_Period_Seller_Nom_PNQ = new Vector();
	public Vector invoice_Period_Seller_Nom_RE_Qty = new Vector();
	public Vector invoice_Period_Gas_Delivered_PNQ = new Vector();
	public Vector invoice_Period_Gas_Delivered_Re_Qty = new Vector();
	public Vector invoice_Period_Gas_Delivered_Total_Qty = new Vector();
	public Vector invoice_Period_Cumulative_Qty = new Vector();
	public Vector invoice_Period_Cumulative_SN_Qty = new Vector();
	public String DCQ_Total = "";
	public String Buyer_Nom_Qty_Total = "";
	public String Seller_Nom_PNQ_Total = "";
	public String Seller_Nom_RE_Qty_Total = "";
	public String Gas_Delivered_PNQ_Total = "";
	public String Gas_Delivered_Re_Qty_Total = "";
	public String Delivered_Total_Qty_Total = "";
	public Vector invoice_Period_Buyer_Shortfall_Qty = new Vector();
	public Vector invoice_Period_Buyer_Off_Spec_Qty = new Vector();
	public Vector invoice_Period_Buyer_Suspension_Qty = new Vector();
	public Vector invoice_Period_Delv_Failure_Qty = new Vector();
	public Vector invoice_Period_Total_Shortfall_Qty = new Vector();
	public Vector invoice_Period_LD_Credit_Payable = new Vector();
	public Vector invoice_Period_FM_Qty = new Vector();
	public String Buyer_Shortfall_Qty_Total = "";
	public String Buyer_Off_Spec_Qty_Total = "";
	public String Buyer_Suspension_Qty_Total = "";
	public String Delv_Failure_Qty_Total = "";
	public String Total_Shortfall_Qty_Total = "";
	public String LD_Credit_Payable_Total = "";
	public String FM_Qty_Total = "";
	public Vector customer_Invoice_Exchg_Rate_Code = new Vector();
	public Vector customer_Invoice_Exchg_Rate_Name = new Vector();
	public Vector customer_Invoice_Exchg_Rate_Date = new Vector();
	public Vector customer_Invoice_Exchg_Rate_Value = new Vector();
	public Vector customer_Invoice_Bank_Name = new Vector();
	public String customer_abbr = "";
	public String customer_plant_nm = "";
	String invoice_advance_inv_no="";
	
		//adjustment

	boolean advance_payment_flag=false;
	boolean Tariff_flag=false;
	boolean Discount_flag=false;
	String pdfinvadjustmentamt="";
	String pdfinvgrossamt="";
	String pdfinvadjremark="";
	String pdfinvadjustcur="";
	String pdfinvadjflag="";
	String pdfinvexchngrt="";
	String pdfinvtariffflag="";
	String pdfinvdiscountflag="";
	String pdfinv_discount_price="";
	String pdfinv_display_rate="";
	String pdfinvadjust_gross_usd="";
	String pdfinvadjust_gross_inr="";
	String pdfinvtariff_gross_usd="";
	String pdfinvtariff_gross_inr="";
	String pdfinvdiscount_gross_usd="";
	String pdfinvdiscount_gross_inr="";
	String pdfFinal_first_gross_amt="0";
	String pdfFinal_adjust_gross_amt="";
	String pdfFinal_first_gross_amt_inr="";
	String pdftotal_tariff_discount="";
	String pdfCurrency="USD";
	//String invadjustmentamt1="";
   // String invgrossamt1="";
    //String invadjustcur11="";
	
	NumberFormat nf5 = new DecimalFormat("###########0");

	String mstcontract_type=new String();
	String mstfgsa_no=new String();
	String mstsn_rev_no=new String();
	String mstsn_no=new String();
	String mstcustomer_cd=new String();
	String mstadjust_flag=new String();
	String mstfgsa_rev_no=new String();
	
	String invoice_pdf_path=new String();
	String invoice_date=new String();
	
	String invoice_bench_date="10/03/2015";
	
	String invoicedt="";
	
//	fetch invoice details for advance payment for modifyinvoice
	String modifyhlplInvoiceNo="";
	String modifyFinancialYear="";
	String modifycontract_type="";
	String modifycustomercd="";
	String modifyplantseqno="";
	String modifybillperiodenddate="";
	String modifyfgsano="";
	String modifysnno="";
	String modifyadjustamtmst="";
	String modifyfgsarevno="";
	String customer_inv_mapping_id="";
	
	String modifyadjflag="";
	String modifyadjamt="";
	String modifyadjcur="";
	String modifyadjrecv="";
	String modifyadjremark="";
	String modifygrossamtinr="";
	String modifygrossamtusd="";
	String modifynetamtinr="";
	String modifytaxaminr="";
	String modifyexchngratevalue="";
	String modifyadjsign="";
	String modifyexchangerateselected="";
	
	String modifyadvinvno="";
	
	String modifygrossamtadjusted="";
	String modifygrossamtinradjusted="";
	
	String modifycustomer_Invoice_Gross_Amt_INR="";
	String modifycustomer_Invoice_Net_Amt_INR="";
	String modifytotalavailbal1="";
	String Adjust_total_avail_bal_tax="";
	Vector modifycustomer_Invoice_Tax_Code=new Vector();
	Vector modifycustomer_Invoice_Tax_Rate=new Vector();
	Vector modifycustomer_Invoice_Tax_Amt=new Vector();
	Vector modifycustomer_Invoice_Tax_Abbr=new Vector();
	Vector modifycustomer_Invoice_Tax_Name=new Vector();
	
	String modifytariff_flag="";
	String modifydiscount_flag="";
	
	//update
	String Customer_cd_update=new String();
	String Hlpl_inv_seq_no2_update=new String();
	String Customer_plant_seq_no_update=new String();
	String Contract_type_update=new String();
	String Inv_financial_year_update=new String();
	
	Vector adjusted_seq_no_invoice=new Vector();
	Vector adjusted_amt_invoice=new Vector();
	Vector adjusted_sign_invoice=new Vector();

	//DEBIT CREDIT NOTE VARIABLES
	Vector DRCRcust_cd=new Vector();
	Vector DRCRcust_nm=new Vector();
	Vector DRCRcust_abbr=new Vector();
	Vector cust_plant_cd=new Vector();
	Vector cust_plant_nm=new Vector();
	Vector DRCR_CUST_APPLICABLE_TAX=new Vector();

	String DRCRcustomer_cd="";
	String DRCRcontact_customer_name="";
	String DRCRcontact_customer_gst_tin_no="";
	String DRCRcontact_customer_cst_tin_no="";
	String DRCRcontact_customer_cst_tin_dt="";
	String DRCRcontact_customer_gst_tin_dt="";
	String DRCRcontact_Customer_Person_Address="";
	String DRCRcontact_Customer_Person_City="";
	String DRCRcontact_Customer_Person_State="";
	String DRCRcontact_Customer_Person_Pin="";
	String DRCRcontact_Suppl_Name="";
	String DRCRcontact_Suppl_GST_NO="";
	String DRCRcontact_Suppl_CST_NO="";
	String DRCRcontact_Suppl_GST_DT="";
	String DRCRcontact_Suppl_CST_DT="";
	String DRCRcontact_Suppl_Service_Tax_NO="";
	String DRCRcontact_Suppl_Service_Tax_DT="";
	String DRCRcontact_Suppl_Person_Address = "";
	String DRCRcontact_Suppl_Person_City = "";
	String DRCRcontact_Suppl_Person_Pin = "";
	String DRCRrbi_ref_cd = "1";
	String DRCRsbi_tt_selling_cd = "2";
	String DRCRsbi_tt_buying_cd = "3";
	String DRCRsbi_avg_tt_selling_buying_cd = "6";
	NumberFormat nf2 = new DecimalFormat("##0.0000");
	String DRCRcustomer_Invoice_Exchg_Rate_Cd="";
	String DRCRexchg_rate_dt="";
	public Vector DRCRcustomer_Invoice_Exchg_Rate_Code = new Vector();
	public Vector DRCRcustomer_Invoice_Exchg_Rate_Value = new Vector();
	public Vector DRCRcustomer_Invoice_Exchg_Rate_Name = new Vector();
	public Vector DRCRcustomer_Invoice_Exchg_Rate_Date = new Vector();
	String DRCRcustomer_Attach_Exchg_Rate_Value="";
	String DRCR_attach_exchngrate_dt="";
	String DRCRcustomer_Attach_Exchg_Rate_Cd="";
	//tax details
	Vector DRCRcustomer_Invoice_Tax_Code=new Vector();
	Vector DRCRcustomer_Invoice_Tax_Rate=new Vector();
	Vector DRCRcustomer_Invoice_Tax_Amt=new Vector();
	Vector DRCRcustomer_Invoice_Tax_Abbr=new Vector();
	Vector DRCRcustomer_Invoice_Tax_Name=new Vector();
	String DRCRcustomer_Invoice_Net_Amt_INR="";
	String DRCRcustomer_Invoice_Tax_Net_Amt_INR="";
	String DRCRcustomer_Invoice_Gross_Amt_INR="";
	String DRCR_tax_customer_cd="";
	String DRCR_tax_customer_tax="";
	String DRCR_tax_note_date="";
	String DRCR_tax_structure_dtl="";
	String DRCR_tax_struct_cd="";
	
	String DRCR_tax_struct_cd_rpt="";
	String DRCR_tax_customer_cd_rpt="";
	String DRCR_tax_note_date_rpt="";
	String DRCRcustomer_Invoice_Gross_Amt_INR_rpt="";
	
	Vector DRCRcustomer_Attach_Exchng_Rate_Dts1=new Vector();
	Vector DRCRcustomer_Attach_Exchg_Rate_Value1=new Vector();
	String DRCRcustomer_Attach_Exchg_Rate_Value2="";
	String DRCRcustomer_Attach_Exchg_Rate_Cd1="";
	Vector DRCRcustomer_Invoice_Exchg_Rate_Code1=new Vector();
	Vector DRCRcustomer_Invoice_Exchg_Rate_Date1=new Vector();
	Vector DRCRcustomer_Invoice_Exchg_Rate_Name1=new Vector();
	
//	new requirement for attachment 3
	String Final_Total_Collection="0";
	String Final_Total_Currency="USD";
	
	String Customer_cd_crdr_rpt="";
	String Plant_cd_crdr_rpt="";
	String cr_dr_rpt="";
	Map CR_DR_YEAR=new HashMap();
	
	Vector CR_DR_INV_NO=new Vector();
	Vector CR_DR_DT=new Vector();
	Vector CR_DR_NET_AMT_INR=new Vector();
	Vector CR_DR_INV_DT=new Vector();
	Vector CR_DR_EXCHG_RT_DIFF=new Vector();
	Vector CR_DR_NO=new Vector();
	Vector CR_DR_PLANT_SEQ_NO=new Vector();
	Vector CR_DR=new Vector();
	Vector CR_DR_PLANT_NAME=new Vector();
	Vector CR_DR_SEQ_NO=new Vector();
	Vector CR_DR_YEAR_DIS=new Vector();
	
	String custcd="";
	String plant_cd="";
	String crdr="";
	String seqno="";
	
	String cr_dr_no="";
	String cr_dr_dt="";
	String cr_dr_prd_st_dt="";
	String cr_dr_prd_end_dt="";
	String cr_dr_year="";
	String cr_dr_inv_no="";
	String cr_dr_inv_dt="";
	String cr_dr_qty="";
	String cr_dr_rate="";
	String cr_dr_exch_cd="";
	String cr_dr_exchg_rate_dt1="";
	String cr_dr_exchg_rate_dt2="";
	String cr_dr_exchg_rate_dt3="";
	String cr_dr_exchg_rate_dt4="";
	String cr_dr_exchg_rate_diff="";
	String cr_dr_tax_structure_cd="";
	String cr_dr_gross_amt_usd="";
	String cr_dr_gross_amt_inr="";
	String cr_dr_net_amt_inr="";
	String cr_dr_header="";
	String boe_no="";
	String boe_dt="";
	String flag="";
	
//	String DRCRcustomer_Attach_Exchg_Rate_Cd1="";
//	Vector DRCRcustomer_Attach_Exchg_Rate_Value1=new Vector();
//	Vector DRCRcustomer_Attach_Exchng_Rate_Dts1=new Vector();
	String DRCR_attach_exchngrate_dt1="";
	
	String DRCRloopSize="";
	Vector DRCRexchg_rate_dt_1=new Vector();
	String DRCRplant_cd="";
	
	
	////Generate PDF for CREDIT DEBIT
	String Plant_nm_pdf="";
	String Cust_nm_pdf="";
	String Credit_Debit_pdf="";
	String Cr_dr_header_pdf="";
	String Cr_dr_dt_pdf="";
	String DRCRcontact_Suppl_Name_pdf="";
	String DRCRcontact_Suppl_Person_Address_pdf="";
	String DRCRcontact_Suppl_Person_City_pdf="";
	String DRCRcontact_Suppl_Person_Pin_pdf="";
	String DRCRcontact_customer_name_pdf="";
	String DRCRcontact_Customer_Person_Address_pdf="";
	String DRCRcontact_Customer_Person_City_pdf="";
	String DRCRcontact_Customer_Person_Pin_pdf="";
	String DRCRcontact_Suppl_GST_NO_pdf="";
	String DRCRcontact_Suppl_GST_DT_pdf="";
	String DRCRcontact_Suppl_CST_NO_pdf="";
	String DRCRcontact_Suppl_CST_DT_pdf="";
	String DRCRcontact_Suppl_Service_Tax_NO_pdf="";
	String DRCRcontact_customer_gst_tin_no_pdf="";
	String DRCRcontact_customer_gst_tin_dt_pdf="";
	String DRCRcontact_customer_cst_tin_no_pdf="";
	String DRCRcontact_customer_cst_tin_dt_pdf="";
	String Cr_dr_no_pdf="";
	String Cr_dr_prd_st_dt_pdf="";
	String Cr_dr_prd_end_dt_pdf="";
	String Cr_dr_inv_no_pdf="";
	String Cr_dr_inv_dt_pdf="";
	String Cr_dr_qty_pdf="";
	String Cr_dr_rate_pdf="";
	String Cr_dr_gross_amt_usd_pdf="";
	String Cr_dr_exchg_rate_diff_pdf="";
	String Cr_dr_gross_amt_inr_pdf="";
	Vector DRCRcust_tax_code_pdf=new Vector();
	Vector DRCRcust_tax_nm_pdf=new Vector();
	Vector DRCRcust_tax_rate_pdf=new Vector();
	Vector DRCRcust_tax_amt_pdf=new Vector();
	String DRCRcustomer_Invoice_Tax_Net_Amt_INR_pdf="";
	String Cr_dr_net_amt_inr_pdf="";
	String Boe_no_pdf="";
	String Boe_dt_pdf="";
	String Customer_tax_pdf="";
	String credit_debit_pdf_path="";
	
	
//	Vector for adjustment report
	Vector report_sn_inv_seq_no=new Vector();
	Vector report_sn_adjusted_amt=new Vector();
	Vector report_sn_balance=new Vector();
	Vector report_sn_inv_date=new Vector();
	Vector report_sn_plant_nm=new Vector();
	Vector report_sn_no=new Vector();
	Vector report_sn_rev_no=new Vector();
	Vector report_fgsa_no=new Vector();
	Vector report_fgsa_rev_no=new Vector();
	Vector report_sn_adv_inv_no=new Vector();
	Vector report_sn_adv_inv_dt=new Vector();
	Vector mst_report_sn_adv_inv_no=new Vector();
	Vector report_sn_adv_cur=new Vector();
	Vector report_sn_adv_amt=new Vector();
	
	Vector report_loa_inv_seq_no=new Vector();
	Vector report_loa_adjusted_amt=new Vector();
	Vector report_loa_balance=new Vector();
	Vector report_loa_inv_date=new Vector();
	Vector report_loa_plant_nm=new Vector();
	Vector report_loa_no=new Vector();
	Vector report_loa_rev_no=new Vector();
	Vector report_tender_no=new Vector();
	Vector report_tender_rev_no=new Vector();
	Vector report_loa_adv_inv_no=new Vector();
	Vector report_loa_adv_inv_dt=new Vector();
	Vector mst_report_loa_adv_inv_no=new Vector();
	
	
	
	
	Vector report_regas_inv_seq_no=new Vector();
	Vector report_regas_adjusted_amt=new Vector();
	Vector report_regas_balance=new Vector();
	Vector report_regas_inv_date=new Vector();
	Vector report_regas_plant_nm=new Vector();
	Vector report_regas_cargo_no=new Vector();
	Vector report_regas_cargo_rev_no=new Vector();
	Vector report_regas_no=new Vector();
	Vector report_regas_rev_no=new Vector();
	
	
	
	Vector rpt_sn_no=new Vector();
	Vector rpt_sn_rev_no=new Vector();
	Vector rpt_fgsa_no=new Vector();
	Vector rpt_fgsa_rev_no=new Vector();
	Vector rpt_sn_adv_amt=new Vector();
	Vector rpt_sn_adv_cur=new Vector();
	Vector rpt_sn_total_adj_amt=new Vector();
	
	Vector rpt_loa_no=new Vector();
	Vector rpt_loa_rev_no=new Vector();
	Vector rpt_tender_no=new Vector();
	Vector rpt_tender_rev_no=new Vector();
	Vector rpt_loa_adv_amt=new Vector();
	Vector rpt_loa_adv_cur=new Vector();
	Vector rpt_loa_total_adj_amt=new Vector();
	Vector report_loa_adv_cur=new Vector();
	Vector report_loa_adv_amt=new Vector();
	
	Vector rpt_regas_no=new Vector();
	Vector rpt_regas_rev_no=new Vector();
	Vector rpt_regas_cargo_no=new Vector();
	Vector rpt_regas_cargo_rev_no=new Vector();
	Vector rpt_regas_adv_amt=new Vector();
	Vector rpt_regas_adv_cur=new Vector();
	Vector rpt_regas_total_adj_amt=new Vector();
	Vector report_regas_adv_inv_no=new Vector();
	Vector report_regas_adv_inv_dt=new Vector();
	Vector mst_report_regas_adv_inv_no=new Vector();
	Vector report_regas_adv_cur=new Vector();
	Vector report_regas_adv_amt=new Vector();
	
	
	Vector rpt_ltcora_adv_cur=new Vector();
	Vector rpt_ltcora_adv_amt=new Vector();
	Vector rpt_ltcora_cargo_no=new Vector();
	Vector rpt_ltcora_cargo_rev_no=new Vector();
	Vector rpt_ltcora_no=new Vector();
	Vector rpt_ltcora_rev_no=new Vector();
	
	Vector rpt_ltcora_total_adj_amt=new Vector();
	Vector report_ltcora_inv_seq_no=new Vector();
	Vector report_ltcora_adjusted_amt=new Vector();
	Vector report_ltcora_balance=new Vector();
	Vector report_ltcora_inv_date=new Vector();
	Vector report_ltcora_plant_nm=new Vector();
	Vector report_ltcora_cargo_no=new Vector();
	Vector report_ltcora_cargo_rev_no=new Vector();
	Vector report_ltcora_no=new Vector();
	Vector report_ltcora_rev_no=new Vector();
	Vector report_ltcora_adv_inv_no=new Vector();
	Vector report_ltcora_adv_inv_dt=new Vector();
	Vector mst_ltcora_regas_adv_inv_no=new Vector();
	Vector report_ltcora_adv_cur=new Vector();
	Vector report_ltcora_adv_amt=new Vector();
	
	
	Vector rpt_cn_adv_cur=new Vector();
	Vector rpt_cn_adv_amt=new Vector();
	
	Vector rpt_cn_cargo_no=new Vector();
	Vector rpt_cn_cargo_rev_no=new Vector();
	Vector rpt_cn_no=new Vector();
	Vector rpt_cn_rev_no=new Vector();
	
	Vector rpt_cn_total_adj_amt=new Vector();
	Vector report_cn_inv_seq_no=new Vector();
	Vector report_cn_adjusted_amt=new Vector();
	Vector report_cn_balance=new Vector();
	Vector report_cn_inv_date=new Vector();
	Vector report_cn_plant_nm=new Vector();
	Vector report_cn_cargo_no=new Vector();
	Vector report_cn_cargo_rev_no=new Vector();
	Vector report_cn_no=new Vector();
	Vector report_cn_rev_no=new Vector();
	Vector report_cn_adv_inv_no=new Vector();
	Vector report_cn_adv_inv_dt=new Vector();
	Vector mst_cn_regas_adv_inv_no=new Vector();
	Vector report_cn_adv_cur=new Vector();
	Vector report_cn_adv_amt=new Vector();
	Vector report_cn_ltcora_no=new Vector();
	Vector report_cn_ltcora_rev_no=new Vector();
	
	String formatted_Date="";
	String input_date="";
	
	String report_customer_cd="";
	String report_year="";
	 boolean flag_DCB = false;
	 
	 Vector fgsano1=new Vector();
		Vector tenderno1=new Vector();
		Vector regasno1=new Vector();
		String Invoice_advance_inv_dt="";
		String save_customer_cd ="";
		String save_fgsa_no = "";
		String save_fgsa_rev_no = "";
		String save_sn_no = "";
		String save_sn_rev_no = "";
		String save_contract_type = "";
		String save_customer_plant_seq_no = "";
		String save_bill_period_end_dt = "";
		String save_hlpl_Inv_Seq_No = "";
		String save_financial_Year = "";
		String save_invoice_date = "";
		String save_raw_amt_usd="";
		String save_raw_amt_inr="";
		String save_mapping_id_LTCORA_CN = "";
		String save_exch_rate_val = ""; 
		
		String save_adv_inv_no = ""; 
		String save_adv_inv_dt = ""; 
		String save_currency = "";
		String save_advrecevial = "";
		String save_adjustamt = "";
		String save_priceINR2_advance_adjust = "";
		String save_adjustsign ="";
		String save_activity="";
	
		Vector cargowise_rpt_fgsa_no=new Vector();
		Vector cargowise_rpt_fgsa_rev_no=new Vector();
		Vector cargowise_rpt_sn_no=new Vector();
		Vector cargowise_rpt_sn_rev_no=new Vector();
		Vector cargowise_rpt_start_dt=new Vector();
		Vector cargowise_rpt_end_dt=new Vector();
		
		String cargo_rpt_fgsa_no="";
		String cargo_rpt_fgsa_rev_no="";
		String cargo_rpt_sn_no="";
		String cargo_rpt_sn_rev_no="";
		
		Vector cargowise_advance_amt=new Vector();
		Vector cargowise_advance_cur=new Vector();
		Vector cargowise_advance_flag=new Vector();
		Vector cargowise_advance_cargo=new Vector();
		
		String PdfTAX_ADV_ADJ_FLAG="";
		String PdfTAX_ADV_ADJ_AMT="";
		String PdfTAX_ADV_ADJ_CUR="";
		String PdfTAX_ADV_ADJ_SIGN="";
		String PdfTAX_ADV_ADJ_GROSS_INR="";
		String PdfTAX_ADV_ADJ_GROSS_USD="";
		String PdfTAX_ADV_ADJ_remark="";
		
		
		String PdfSBC_ADV_ADJ_FLAG="";
		String PdfSBC_ADV_ADJ_AMT="";
		String PdfSBC_ADV_ADJ_CUR="";
		String PdfSBC_ADV_ADJ_SIGN="";
		String PdfSBC_ADV_ADJ_GROSS_INR="";
		String PdfSBC_ADV_ADJ_GROSS_USD="";
		String PdfSBC_ADV_ADJ_remark="";
		
		String PdfKKC_ADV_ADJ_FLAG="";
		String PdfKKC_ADV_ADJ_AMT="";
		String PdfKKC_ADV_ADJ_CUR="";
		String PdfKKC_ADV_ADJ_SIGN="";
		String PdfKKC_ADV_ADJ_GROSS_INR="";
		String PdfKKC_ADV_ADJ_GROSS_USD="";
		String PdfKKC_ADV_ADJ_remark="";
		
		
		String Pdftotal_invoice_payable_usd="0";
		String Pdftotal_invoice_payable_inr="0";
		String Pdftotal_tax_payable="0",pdftotal_adv_tax_payable="0",pdftotal_adv_sbc_payable="0",pdftotal_adv_kkc_payable="0";
		String Pdfinvoice_tax_adj="0";
		String Pdfinvadjustmentamt_inr="0";
		
		
	public void init()
	{
	    try
	    {
	    	Context initContext = new InitialContext();
	    	if(initContext == null)
	    	{
	    		throw new Exception("Boom - No Context");
	    	}
		  
	    	Context envContext  = (Context)initContext.lookup("java:/comp/env");
	    	DataSource ds = (DataSource)envContext.lookup(RuntimeConf.security_database);
	    	if(ds != null) 
	    	{
	    		conn = ds.getConnection();       
	    		if(conn != null)  
	    		{
	    			stmt = conn.createStatement();
	    			stmt1 = conn.createStatement();
	    			stmt2 = conn.createStatement();
	    			stmt3 = conn.createStatement();
	    			stmt4 = conn.createStatement();
	    			stmt5 = conn.createStatement();
	    			stmt6 = conn.createStatement();
	    			
	    			
	    			System.out.println("---callflag---"+callFlag);
	    			if(callFlag.equalsIgnoreCase("Customer_details")) 
					{
	    				if(Customer_access_flag.equals("Y"))
	    				{
	    					fetch_customer_details_WITH_ACCESS();
	    				} else {
	    					fetch_customer_details();
	    				}
					}
	    			else if(callFlag.equalsIgnoreCase("party_advance_details")) 
					{
						//fetchadvancepaymentdetails();
					}
					else if(callFlag.equalsIgnoreCase("tax_details_adjustment")) 
					{
						fetchtaxstructuredetails();
					}
					else if(callFlag.equalsIgnoreCase("INVOICE_ADJUSTMENT_ATTACHMENT_DETAILS"))	//RG20140905
	    			{
	    				invoice_adjustment_attachment_dtls();
	    			}
					else if(callFlag.equalsIgnoreCase("Fetchadvanceadjustmentinvoicedetails")) 
					{
						//fetchinvadjustmentdetails();
					}
	    			else if(callFlag.equalsIgnoreCase("FetchAdjustmentofInvoiceDetails")) //SB20160503
					{
						FetchAdjustmentofInvoiceDetailsforviewinvoice(); 
					}
	    			else if(callFlag.equalsIgnoreCase("AllAdjInvDtl")) //SB20160518
					{
	    				AllAdjInvDtl(); //SB20160518
					}
	    			else if(callFlag.equalsIgnoreCase("Collection_Detail_CustomerWise"))
	    			{
	    			//	Collection_Detail_CustomerWise();
	    			}
	    			else if(callFlag.equalsIgnoreCase("ADJUSTMENT_DTL"))
	    			{
	    				//ADJUSTMENT_DTL();
	    			}
	    			else if(callFlag.equalsIgnoreCase("pdfgenerationfroAdjustmentinvoice"))
	    			{
	    				String url_DCB =""+request.getContextPath();// ""+request.getRequestURL();
		    		    if(url_DCB.contains("TEST"))
		    		    {
		    		    	flag_DCB=true;
		    		    }
		    		    else
		    		    {
		    		    	flag_DCB=false;
		    		    }
		    		    //here
	    				invoice_att1_pdf_path = createPdfFileForInvoiceAtt1();
						invoice_att2_pdf_path = createPdfFileForInvoiceAtt2();
						invoice_att3_pdf_path = createPdfFileForInvoiceAtt3();
						invoice_pdf_path = createPdfFileForInvoice();
						System.out.println("Pdfinvoice_tax_adj--"+Pdfinvoice_tax_adj+"=="+TAX_ADV_ADJ_CODE_GST);
						if(Pdfinvoice_tax_adj.equals("Y") || TAX_ADV_ADJ_CODE_GST.size()>0)
						{
							printAllPdfFileForInvoice_tax();		
						}
						else
						{
							printAllPdfFileForInvoice();			
						}
						updatetableForPdfDtlEntry();						
	    			}
	    			else if(callFlag.equalsIgnoreCase("ViewPDFInvoice"))
	    			{
	    				String url_DCB =""+request.getContextPath();// ""+request.getRequestURL();
	    				fetchPdfFileForViewInvoice();	//BK20160216
	    				
		    		    if(url_DCB.contains("TEST"))
		    		    {
		    		    	flag_DCB=true;
		    		    }
		    		    else
		    		    {
		    		    	flag_DCB=false;
		    		    }
		    		    if(TAX_ADV_ADJ_FLAG_LOG.equals("Y") || TAX_ADV_ADJ_CODE_GST.size()>0)
						{
		    		    	printAllPdfFileForInvoice_tax();	//BK20160211
						}
		    		    else
		    		    {
		    		    	printAllPdfFileForInvoice_View();	//BK20160211
		    		    }
		    		    updatetableForPdfDtlEntry_view();
	    			}
	    			
	    			else if(callFlag.equalsIgnoreCase("updateInvoiceInTable"))
	    			{
	    				////System.out.println("BEFORE UPDATE---------------------------------------");
						updateInvoiceInTable();		//BK20160216
						////System.out.println("AFTER UPDATE---------------------------------------");
	    			}
	    			else if(callFlag.equalsIgnoreCase("adjustmentforsnloaregas"))
	    			{
	    				//fetchadjustmentflagforsnloaregas();
	    			}
	    			else if(callFlag.equalsIgnoreCase("updategetadvancedetails"))
	    			{
	    				updategetadvancedetailsfrominvoice();
	    			}
	    			else if(callFlag.equalsIgnoreCase("adjustment_dtl_for_modify_invoice"))
	    			{
	    				//adjustment_dtl_for_modify_invoice();
	    			}
	    			else if(callFlag.equalsIgnoreCase("CREDIT_DEBIT_FETCH_CUSTOMERS"))
	    			{
	    				debit_credit_fetch_cust_names();
	    				debit_credit_fetch_cust_tax_dtls();
	    			}
	    			else if(callFlag.equalsIgnoreCase("CREDIT_DEBIT_FETCH_CUSTOMER_ADDRESS_DTLS"))
	    			{
	    				debit_credit_fetch_cust_addrs_dtls();
	    			}
	    			else if(callFlag.equalsIgnoreCase("CREDIT_DEBIT_FETCH_TAX_STRUCTURE"))
	    			{
	    				debit_credit_fetch_exchng_rate_structure();
	    			}
	    			else if(callFlag.equalsIgnoreCase("DEBIT_CREDIT_FETCH_EXCHNG_RATE_VALUE_ATTACHMENT"))
	    			{
	    				debit_credit_fetch_exchng_rate_attachment();
	    			}
	    			else if(callFlag.equalsIgnoreCase("DEBIT_CREDIT_FETCH_TAX_DETAILS"))
	    			{
	    				debit_credit_fetch_tax_details();
	    			}
	    			else if(callFlag.equalsIgnoreCase("updategettariffanddiscountdetails"))
	    			{
	    				updategettariffanddiscountdetailsfrominvoice();
	    			}
	    			else if(callFlag.equalsIgnoreCase("FETCH_GENERATED_CREDIT_DEBITS"))
	    			{
	    				FETCH_GENERATED_CREDIT_DEBITS();
	    			}
	    			else if(callFlag.equalsIgnoreCase("Fetch_Data_Report"))
	    			{
	    				Fetch_Data_Report();
	    			}
	    			else if(callFlag.equalsIgnoreCase("CREDIT_DEBIT_FETCH_ATTACHMENT_DTLS"))
	    			{
	    				debit_credit_fetch_attachment_dtls();
	    			}
	    			else if(callFlag.equalsIgnoreCase("DEBIT_CREDIT_FETCH_TAX_DETAILS_RPT"))
	    			{
	    				debit_credit_fetch_tax_details_rpt();
	    			}
	    			else if(callFlag.equalsIgnoreCase("DEBIT_CREDIT_GENERATE_PDF_REPORT"))
	    			{
	    				String url_DCB = ""+request.getContextPath(); //""+request.getRequestURL();
		    		    ////System.out.println("............url_DCB............."+request);
		    		    
		    		   
		    		    if(url_DCB.contains("TEST"))
		    		    {
		    		    	flag_DCB=true;
		    		    }
		    		    else
		    		    {
		    		    	flag_DCB=false;
		    		    }
		    		    
	    				credit_debit_pdf_path=createPdfFileForRegs_ene_stmt();
	    				debit_credit_generate_pdf_report();
	    			}
	    			else if(callFlag.equalsIgnoreCase("REPORT_ADANCE_ADJUSTMENT"))
	    			{
	    				report_advance_adjustment_collection_dtls();
	    			}
	    			else if(callFlag.equalsIgnoreCase("Genrate_Delete_Code"))
	    			{////System.out.println("delete_code...."+callFlag);
	    				Generate_delete_code();
	    			}
	    			else if(callFlag.equalsIgnoreCase("REPORT_ADANCE_ADJUSTMENT2"))//pp20141111
	    			{
	    				report_advance_adjustment_collection_dtls();//advance adjustment report data
	    			}
	    			else if(callFlag.equalsIgnoreCase("SAVE_ADVANCE_DATA"))
	    			{
	    				save_advance_data();
	    			}
	    			else if(callFlag.equalsIgnoreCase("SAVE_ADVANCE_DATA_TAX")) //SB20160505
	    			{
	    				save_advance_data_tax(); //SB20160505
	    			}
	    			else if(callFlag.equalsIgnoreCase("SAVE_ADVANCE_DATA_SBC")) //SB20160505
	    			{
	    				save_advance_data_sbc(); //SB20160505
	    			}
	    			else if(callFlag.equalsIgnoreCase("SAVE_ADVANCE_DATA_KKC")) //SB20160505
	    			{
	    				save_advance_data_kkc(); //SB20160505
	    			}
	    			else if(callFlag.equalsIgnoreCase("updategetadvancedetails_forinsert"))
	    			{
	    				updategetadvancedetailsfrominvoice_insert();
	    			}
	    			else if(callFlag.equalsIgnoreCase("FetchForamtedDates"))
	    			{
	    				fetchformatteddates();
	    			}
	    			else if(callFlag.equalsIgnoreCase("FETCH_ADVANCE_RPT_VIEW_LIST"))
	    			{
	    				fetch_advance_rpt_view_list();
	    			}
	    			else if(callFlag.equalsIgnoreCase("REPORT_ADVANCE_CARGO"))
	    			{
	    				fetch_report_advance_cargo();
	    			}
	    			else if(callFlag.equalsIgnoreCase("FETCH_INVOICE_PDF"))
	    			{
	    				fetch_invoice_path();
	    			}
	    			else if(callFlag.equalsIgnoreCase("SAVE_TAX_DATA")) 
	    			{
	    				SAVE_TAX_DATA(); //RS09062017
	    			}
	    			conn.close();
	    			conn = null;
	    		}
	    	}
	    }
	    catch(Exception e)
	    {
	    	//System.out.println("Exception In : ("+databeanName+") - (init()): "+e.getMessage());
	    	e.printStackTrace();
	    }
	    finally
	    {
	    	if(rset != null)
	    	{
				try
				{
					rset.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					//System.out.println("rset is not close "+e);
				}
			}
	    	if(rset1 != null)
	    	{
				try
				{
					rset1.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					//System.out.println("rset1 is not close "+e);
				}
			}
	    	if(rset2 != null)
	    	{
				try
				{
					rset2.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					//System.out.println("rset2 is not close "+e);
				}
			}
	    	if(rset3 != null)
	    	{
				try
				{
					rset3.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					//System.out.println("rset3 is not close "+e);
				}
			}
	    	if(rset4 != null)
	    	{
				try
				{
					rset4.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					//System.out.println("rset4 is not close "+e);
				}
			}
	    	if(rset5 != null)
	    	{
				try
				{
					rset5.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					//System.out.println("rset5 is not close "+e);
				}
			}
	    	if(rset6 != null)
	    	{
				try
				{
					rset6.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					//System.out.println("rset6 is not close "+e);
				}
			}
			if(stmt != null)
			{
				try
				{
					stmt.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					//System.out.println("stmt is not close "+e);
				}
			}
			if(stmt1 != null)
			{
				try
				{
					stmt1.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					//System.out.println("stmt1 is not close "+e);
				}
			}
			if(stmt2 != null)
			{
				try
				{
					stmt2.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					//System.out.println("stmt2 is not close "+e);
				}
			}
			if(stmt3 != null)
			{
				try
				{
					stmt3.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					//System.out.println("stmt3 is not close "+e);
				}
			}
			if(stmt4 != null)
			{
				try
				{
					stmt4.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					//System.out.println("stmt4 is not close "+e);
				}
			}
			if(stmt5 != null)
			{
				try
				{
					stmt5.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					//System.out.println("stmt5 is not close "+e);
				}
			}
			if(stmt6 != null)
			{
				try
				{
					stmt6.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					//System.out.println("stmt6 is not close "+e);
				}
			}
			if(conn != null)
			{
				try
				{
					conn.close();
				}
				catch(SQLException e)
				{
					e.printStackTrace();
					//System.out.println("conn is not close "+e);
				}
			}
	    }
	}
	
	//----------HS20160603 START-----------
	String invoice_path="";
	String pdf_type="";
	String msg=""; //HS20160619
	String inv_title="";
	public void fetch_invoice_path()	throws SQLException,IOException	
	{
		String abs_path=request.getRealPath("");
		//String context=request.getRealPath();
//		System.out.println(abs_path+"--------"+invoice_title);
		File f=new File(abs_path+"/"+invoice_title);
		int file_len=invoice_title.lastIndexOf("/");
//		System.out.println("invoice_title****"+invoice_title);
		String filename=invoice_title.substring(file_len,invoice_title.length()).replace("", "").replace("/", "");
		String temp_typ=filename.substring(filename.length()-5,filename.length()-4);
		System.out.println("temp_typ*********"+temp_typ);
		System.out.println("inv_title*********"+inv_title);
		if(f.exists()){
			System.out.println("---in if---"+f+"****contract_type**"+contract_type);
			invoice_path=invoice_title;
			msg="";
			
			String sign_pdf_path=request.getRealPath("/unsigned_pdf/signed");
			
			if(temp_typ.equals("S") || temp_typ.equals("C")  || temp_typ.equals("d") || temp_typ.equals("1") || temp_typ.equals("2")){
				if(inv_title.equals("DE_signO")|| inv_title.equals("DE_signD") || inv_title.equals("DE_signT")){
					File f_signpdfdeb=new File(sign_pdf_path+"/"+"DEBIT_"+filename);
					String invoice_nm="/unsigned_pdf/signed/"+"DEBIT_"+filename;
					if(f_signpdfdeb.exists()){
						invoice_path=invoice_nm;
					}
				}else if(inv_title.equals("CR_signD") || inv_title.equals("CR_signO") ||  inv_title.equals("CR_signT")){
					File f_signpdf=new File(sign_pdf_path+"/"+"CREDIT_"+filename);
					String invoice_nm="/unsigned_pdf/signed/"+"CREDIT_"+filename;
					if(f_signpdf.exists()){
						invoice_path=invoice_nm;
					}
				}
			}
//			System.out.println("filename----"+filename);
			
			if(contract_type.equalsIgnoreCase("S")){
				File f_signpdf=new File(sign_pdf_path+"/"+"SALES_"+filename);
				String invoice_nm="/unsigned_pdf/signed/"+"SALES_"+filename;
				if(f_signpdf.exists()){
					invoice_path=invoice_nm;
				}
			}else if(contract_type.equalsIgnoreCase("L")){
				File f_signpdf=new File(sign_pdf_path+"/"+"LOA_"+filename);
				String invoice_nm="/unsigned_pdf/signed/"+"LOA_"+filename;
				if(f_signpdf.exists()){
					invoice_path=invoice_nm;
				}
			}else if(contract_type.equalsIgnoreCase("V")){
				File f_signpdf=new File(sign_pdf_path+"/"+"SERVICE_"+filename);
				String invoice_nm="/unsigned_pdf/signed/"+"SERVICE_"+filename;
//				System.out.println("invoice_nm----"+invoice_nm);
				
				if(f_signpdf.exists()){
					invoice_path=invoice_nm;
				}
//				System.out.println("invoice_path----"+invoice_path);
			}
		}else{
			System.out.println("*****in else********");
			String inv_type="";
			String invoice_type="";
			if(filename.contains("-O.pdf")){
				filename=filename.replace("-O.pdf", "");
				inv_type="O";
				invoice_type="ORIGINAL";
			}else if(filename.contains("-D.pdf")){
				filename=filename.replace("-D.pdf", "");
				inv_type="D";
				invoice_type="DUPLICATE";
			}else if(filename.contains("-T.pdf")){
				filename=filename.replace("-T.pdf", "");
				inv_type="T";
				invoice_type="TRIPLICATE";
			}else if(filename.contains("-C.pdf")){
				filename=filename.replace("-C.pdf", "");
				inv_type="C";
				invoice_type="CREDIT";
			}else if(filename.contains("-S.pdf")){
				filename=filename.replace("-S.pdf", "");
				inv_type="S";
				invoice_type="Supplementary Note";
			}
			else if(filename.contains("-d.pdf")){
				filename=filename.replace("-d.pdf", "");
				inv_type="d";
				invoice_type="DEBIT";
			}
//			System.out.println("------f-java--->  "+pdf_type);
			if(pdf_type.equals("V")){
				////System.out.println("---hss--");
				String query="select count(pdf_inv_nm) from dlng_inv_pdf_dtl"
						+ " where pdf_inv_nm='"+filename.toString()+"' and INV_TYPE='"+inv_type.toString()+"'";	
				////System.out.println("query---> "+query);
				rset=stmt.executeQuery(query);
				if(rset.next()){
					if(rset.getInt(1)>0){
						String quer="delete from dlng_inv_pdf_dtl"
						+ " where pdf_inv_nm='"+filename.toString()+"' and INV_TYPE='"+inv_type.toString()+"'";
						////System.out.println("---quer for delete--"+quer);
						stmt1.executeUpdate(quer);
					}
				}
			}
			msg=invoice_type+" -PDF is not available...Click on Print button for Regenration...!! ";
			
		}
	}
	
	
	
	
	
	//----------HS20160603 END-----------
	String new_inv_seq_no = "";
	public void printAllPdfFileForInvoice_tax() throws Exception		//BK20160211
	{
		Rectangle pageSize = new Rectangle(595, 842);
		Rectangle pageSize1 = new Rectangle(842,595);
		if(flag_DCB==true)
		{
			pageSize.setBackgroundColor(new java.awt.Color(0xe3f8c0));
			pageSize1.setBackgroundColor(new java.awt.Color(0xe3f8c0));
		}
		else
		{
			pageSize.setBackgroundColor(new java.awt.Color(0xffffff));
			pageSize1.setBackgroundColor(new java.awt.Color(0xffffff));
		}
		 Document document = new Document(pageSize);
        
		try
		{
			PdfWriter writer = PdfWriter.getInstance(document,new FileOutputStream(createPdfFileForInvoice()));

			document.addTitle("Invoice Details");
			document.addSubject("Invoice Details For Customer");
            document.addAuthor("FMS8@BIPL");
            document.open();
			
			//Step 4: We create Page Size, Font Size , and Font Type ... Then add some paragraphs to the document ...
			document.setPageSize(pageSize);
            document.newPage();
            
         
            Font very_small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 7, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            Font small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 8, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            Font small_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD, new Color(0x00, 0x00, 0x00));
            Font black_bold = FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, new Color(0x00, 0x00, 0x00));
            Font big_black_bold_2 = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, new Color(0x00, 0x00, 0x00));
            Font big_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 14, Font.BOLD, new Color(0x00, 0x00, 0x00));
            
            String context_nm = request.getContextPath();
			String server_nm = request.getServerName();
			String server_port = ""+request.getServerPort();
			  
			url_start = "http://"+server_nm+":"+server_port+context_nm;
			
            Image hlpl_logo = Image.getInstance(url_start+"//images//LOGO//company_Logo.png");
            sr_no=0;//ADDED NEW
            
			String inv_nm = "";
			if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
			{	
				if(customer_Invoice_Tax_Flag.equalsIgnoreCase("V"))
				{	
					inv_nm = "TAX INVOICE";
				}
				else
				{
					inv_nm = "RETAIL INVOICE";
				}
			}	
			else if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
			{
				if(date_flag) {
					inv_nm = "TAX INVOICE";
				} else {
					inv_nm = "INVOICE";
				}
			}
			
			String inv_desc = "";
			
			if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
			{	
				inv_desc = "Hazira LNG Private Limited";
			}	
			else if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN)
			{
				inv_desc = "Hazira LNG Private Limited";
				if(date_flag) {
					if(invoice_title.equals("CREDIT")) { 
						inv_nm += "\nCredit Note issued under Rule 53 of the Central Goods and Services Tax Rules, 2017";
					 } else if(invoice_title.equals("SUPPLEMENTARY INVOICE") || invoice_title.equals("DEBIT")) { 
						inv_nm += "\nDebit Note issued under Rule 53 of the Central Goods and Services Tax Rules, 2017";
					 } else { 
						 inv_nm += "\n"+Rule_remark;
					 } 
				} else {
					inv_nm += "\nInvoice issued under Rule-4A of the Service tax Rules, 1994";
				}
			}
			
			String sn = "";
			
			if(sn_ref_no.trim().equals(""))
			{
				sn = sn_no;
			}
			else
			{
				sn = sn_ref_no;
			}
			
			String inv_note = "";
			
			if(contract_type.equalsIgnoreCase("S"))
			{	
				inv_note = "In respect of Supply Notice (SN-"+sn+") executed on "+customer_Invoice_SN_Dt+" pursuant to Framework Gas Sales Agreement executed on "+customer_Invoice_FGSA_Dt+"\nbetween "+contact_Suppl_Name+" and "+contact_Customer_Name;
			}
			else if(contract_type.equalsIgnoreCase("L"))
			{
				inv_note = "In respect of Letter of Agreement (LOA-"+sn+") executed on "+customer_Invoice_SN_Dt+" pursuant to Tender executed on "+customer_Invoice_FGSA_Dt+"\nbetween "+contact_Suppl_Name+" and "+contact_Customer_Name;
			}
			else if(contract_type.equalsIgnoreCase("R"))
			{
				inv_note = "In respect of Regassification Agreement executed on "+customer_Invoice_FGSA_Dt+" and subsequent side letters\nbetween "+contact_Customer_Name+" and "+contact_Suppl_Name;
			} 
			else if(contract_type.equalsIgnoreCase("T"))//ADDED FOR LTCORA AND CN
			{
				inv_note = "In respect of LTCORA executed on "+customer_Invoice_FGSA_Dt+" \nbetween "+contact_Customer_Name+" and "+contact_Suppl_Name;
			}  
			else if(contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
			{
				inv_note = "In respect of LTCORA  executed on "+customer_Invoice_FGSA_Dt+" ";
				
				if(Double.parseDouble(FgsaNo)<9999) 
				{
					inv_note = inv_note+"& CN-"+FgsaNo+" executed on "+customer_Invoice_SN_Dt+"";
				}
						
				inv_note = inv_note + "\nbetween "+contact_Customer_Name+" and "+contact_Suppl_Name;
			}  
			String addr_supl = "Registered Office:";
            
            if(!contact_Suppl_Name.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Name;     	
            }
            if(!contact_Suppl_Person_Address.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Person_Address;     	
            }
            if(!contact_Suppl_Person_City.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Person_City;     	
            }
            if(!contact_Suppl_Person_Pin.trim().equals(""))
            {
            	addr_supl += " "+"-"+" "+contact_Suppl_Person_Pin;     	
            }
			
			String addr_customer = "";
            
			if(contact_Person_Name_And_Designation.trim().equalsIgnoreCase(contact_Customer_Name.trim()))
			{
				if(!contact_Customer_Name.trim().equals(""))
	            {
	            	addr_customer += contact_Customer_Name;    	
	            }
			}
			else
			{
	            if(!contact_Person_Name_And_Designation.trim().equals(""))
	            {
	            	addr_customer += contact_Person_Name_And_Designation;     	
	            }
	            if(!contact_Customer_Name.trim().equals(""))
	            {
	            	addr_customer += "\n"+contact_Customer_Name;     	
	            }
			}
            if(!contact_Customer_Person_Address.trim().equals(""))
            {
            	addr_customer += "\n"+contact_Customer_Person_Address;     	
            }
            if(!contact_Customer_Person_City.trim().equals(""))
            {
            	addr_customer += "\n"+contact_Customer_Person_City;     	
            }
            if(!contact_Customer_Person_Pin.trim().equals(""))
            {
            	addr_customer += " "+"-"+" "+contact_Customer_Person_Pin;     	
            }
            String inv_tit=invoice_title;
            if(contract_type.equals("C")) {
            	if(tax_gst) {
            		if(invoice_title.equalsIgnoreCase("ORIGINAL")) {
                    	inv_tit += " FOR RECIPIENT"; 
                    } else if(invoice_title.equalsIgnoreCase("DUPLICATE")) {
                    	inv_tit += " FOR SUPPLIER";
                    } 
            	}
            } 
            PdfPTable InvoiceTitleTable = new PdfPTable(1);
            InvoiceTitleTable.setWidthPercentage(100);
            InvoiceTitleTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceTitleTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
           	InvoiceTitleTable.addCell(new Phrase(new Chunk(inv_tit,black_bold)));
            
            PdfPTable InvoiceDescTable = new PdfPTable(1);
            InvoiceDescTable.setWidthPercentage(100);
            InvoiceDescTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDescTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            InvoiceDescTable.addCell(new Phrase(new Chunk(inv_desc,big_black_bold)));
            
            PdfPTable InvoiceDescTable2 = new PdfPTable(1);
            InvoiceDescTable2.setWidthPercentage(100);
            InvoiceDescTable2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDescTable2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            if(invoice_title.equalsIgnoreCase("CREDIT")) //SB20160601
            	InvoiceDescTable2.addCell(new Phrase(new Chunk("CREDIT NOTE",big_black_bold_2)));
            else
            	InvoiceDescTable2.addCell(new Phrase(new Chunk(inv_nm,big_black_bold_2)));
         //HS20160615   InvoiceDescTable2.addCell(new Phrase(new Chunk(inv_nm,big_black_bold_2)));
            
            PdfPTable InvoiceNoteTable = new PdfPTable(1);
            InvoiceNoteTable.setWidthPercentage(100);
            InvoiceNoteTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNoteTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            InvoiceNoteTable.addCell(new Phrase(new Chunk(inv_note,small_black_normal)));
            
            
            float[] ContactAddrWidths = {0.50f, 0.10f, 0.40f};
            PdfPTable contact_addr_table = new PdfPTable(ContactAddrWidths);
            contact_addr_table.setWidthPercentage(100);
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(addr_supl,small_black_normal)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk("To:",small_black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(addr_customer,small_black_normal)));
			
            String supl_gst_cst_info = "";
            String customer_gst_cst_info = "";
            
            if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
    		{
            	if(!contact_Suppl_GST_NO.trim().equals(""))
            	{
            		supl_gst_cst_info = " GST TIN No. : "+contact_Suppl_GST_NO+" DT. "+contact_Suppl_GST_DT;
            	}
            	else
            	{
            		supl_gst_cst_info = "";
            	}
            	
            	if(!contact_Suppl_CST_NO.trim().equals(""))
            	{
            		supl_gst_cst_info += " \nCST TIN No. : "+contact_Suppl_CST_NO+" DT. "+contact_Suppl_CST_DT;
            	}
            	else
            	{
            		supl_gst_cst_info += "\n";
            	}
            	
            	//BK20160211
            	if(!contact_Suppl_PAN_NO.trim().equals(""))
            	{
            		supl_gst_cst_info += " \nPAN : "+contact_Suppl_PAN_NO+" ";
            	}
            	else
            	{
            		supl_gst_cst_info += "\n";
            	}
    		}
            else if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
            {
            	if(date_flag) {
	            	supl_gst_cst_info = "State : "+contact_Suppl_State+"\n";
	            	supl_gst_cst_info += "State Code : "+contact_Suppl_State_Code+"\n";
	            	
	            	 if(!contact_Suppl_GSTIN_NO.trim().equals("")) { 
	            		 supl_gst_cst_info += "GSTIN : "+contact_Suppl_GSTIN_NO+"\n";
	            	  } 
	            	 if(!contact_Suppl_PAN_NO.trim().equals("")) { 
	            		 supl_gst_cst_info += "PAN : "+contact_Suppl_PAN_NO+"\n";
	            	 }
	            	 supl_gst_cst_info += ""+sac_name +" : "+sac_code+"\n";
	            	 supl_gst_cst_info += "Description of Service : "+service_desc+"\n";
	            	 supl_gst_cst_info += "Place Of Supply : "+contact_customer_State+"\n";
	            	 
	            	  
            	} else {
            		supl_gst_cst_info = "Service Tax Registration No. : "+contact_Suppl_Service_Tax_NO+"\n(Business Auxiliary Service)";
                	if(!contact_Suppl_PAN_NO.trim().equals(""))
                	{
                		supl_gst_cst_info += "\nPAN : "+contact_Suppl_PAN_NO+" ";
                	}
                	else
                	{
                		supl_gst_cst_info += "\n";
                	}
            	}
            }
            
            
            if(vSTAT_CD.size()>0)
    		{	
    			if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
    			{
    				for(int i=0; i<vSTAT_CD.size(); i++)
					{
    					if(i==0)
    					{
    						if(vSTAT_NM.elementAt(i).toString().equalsIgnoreCase("PAN No.")) 
    						{
    							customer_gst_cst_info = "PAN : "+vSTAT_NO.elementAt(i)+" ";
    						}
    						else
    						{
    							customer_gst_cst_info = ""+vSTAT_NM.elementAt(i)+" : "+vSTAT_NO.elementAt(i)+" DT. "+vSTAT_EFF_DT.elementAt(i);
    						}
    					}
    					else if(i>0)
    					{
    						if(vSTAT_NM.elementAt(i).toString().equalsIgnoreCase("PAN No.")) 
    						{
    							customer_gst_cst_info += "\nPAN : "+vSTAT_NO.elementAt(i)+" ";
    						}
    						else
    						{
    							customer_gst_cst_info += "\n"+vSTAT_NM.elementAt(i)+" : "+vSTAT_NO.elementAt(i)+" DT. "+vSTAT_EFF_DT.elementAt(i);
    						}
    					}
					}
    			}
    			else
    			{
    				if(date_flag) {
	    				customer_gst_cst_info = "State : "+contact_customer_State+"\n";
	    				customer_gst_cst_info += "State Code : "+contact_customer_State_Code+"\n";
	    				for(int i=0; i<vSTAT_CD.size(); i++)
						{
	    					if(vSTAT_NM.elementAt(i).toString().contains("GSTIN")) { 
	    						customer_gst_cst_info += vSTAT_NM.elementAt(i).toString()+" : "+vSTAT_NO.elementAt(i)+"\n";
	    					} else if(vSTAT_NM.elementAt(i).toString().equalsIgnoreCase("PAN No.")) 
	    						{
	    							customer_gst_cst_info += "PAN : "+vSTAT_NO.elementAt(i)+"\n";	
	    						}
						}
    				} else {
    					for(int i=0; i<vSTAT_CD.size(); i++)
    					{
        					if(i==0)
        					{
        						if(vSTAT_NM.elementAt(i).toString().equalsIgnoreCase("PAN No.")) 
        						{
        							customer_gst_cst_info = "PAN : "+vSTAT_NO.elementAt(i)+" ";
        						}
        						else
        						{
        							customer_gst_cst_info = ""+vSTAT_NM.elementAt(i)+" : "+vSTAT_NO.elementAt(i)+" DT. "+vSTAT_EFF_DT.elementAt(i);
        						}
        					}
        					else if(i>0)
        					{
        						if(vSTAT_NM.elementAt(i).toString().equalsIgnoreCase("PAN No.")) 
        						{
        							customer_gst_cst_info += "\nPAN : "+vSTAT_NO.elementAt(i)+" ";	
        						}
        						else
        						{
        							customer_gst_cst_info += "\n"+vSTAT_NM.elementAt(i)+" : "+vSTAT_NO.elementAt(i)+" DT. "+vSTAT_EFF_DT.elementAt(i);
        						}
        					}
    					}
    				}
    			}
    		}
            else
            {
            	if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
        		{
            		if(!contact_Customer_GST_NO.trim().equals(""))
                	{
                		customer_gst_cst_info = "GST TIN No. : "+contact_Customer_GST_NO+" DT. "+contact_Customer_GST_DT;
                	}
                	else
                	{
                		customer_gst_cst_info = "";
                	}
                	
                	if(!contact_Customer_CST_NO.trim().equals(""))
                	{
                		customer_gst_cst_info += "\nCST TIN No. : "+contact_Customer_CST_NO+" DT. "+contact_Customer_CST_DT;
                	}
                	else
                	{
                		customer_gst_cst_info += "\n";
                	}
                	
                	if(!contact_Customer_GVAT_NO.trim().equals(""))
                	{
                		customer_gst_cst_info += "\nGVAT TIN No. : "+contact_Customer_GVAT_NO+" DT. "+contact_Customer_GVAT_DT;
                	}
                	else
                	{
                		customer_gst_cst_info += "\n";
                	}
        		}
            }
            
            float[] GstCstInfoWidths = {0.50f, 0.10f, 0.40f};
            PdfPTable GstCstInfoTable = new PdfPTable(GstCstInfoWidths);
            GstCstInfoTable.setWidthPercentage(100);
            GstCstInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            GstCstInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            GstCstInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            GstCstInfoTable.addCell(new Phrase(new Chunk("\n"+supl_gst_cst_info,small_black_normal)));
            GstCstInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            GstCstInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            GstCstInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            
            GstCstInfoTable.addCell(new Phrase(new Chunk("\n ",small_black_normal)));
            GstCstInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            GstCstInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            GstCstInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            GstCstInfoTable.addCell(new Phrase(new Chunk("\n"+customer_gst_cst_info,small_black_normal)));
            
            String invno = "";
            if(!new_inv_seq_no.equals("")) {
            	invno = new_inv_seq_no;
            } else {
	            if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C")){
	        		if(hlpl_inv_no.length()>13){
	        			invno = hlpl_inv_no.substring(0,10)+""+hlpl_inv_no.substring(12);
	        		}
	        	}else{
	        		if(hlpl_inv_no.length()>13){
	        			invno = hlpl_inv_no.substring(0,5)+""+hlpl_inv_no.substring(7,10)+""+hlpl_inv_no.substring(12);
	        		}
	        	}
            }
            
            String inv_no_info = "";
            String invoiceType = "";
			String inv_dt_Header = "Invoice Date:";
			String inv_due_dt_Header = "Payment Due Date:";
			String Inv_Ref_Dtl = ""; //HS20160614  
			
			customer_Invoice_DT =customer_Invoice_DT;//HS20160614
			if(invoice_title.equalsIgnoreCase("CREDIT")) //SB20160530
			{
				Inv_Ref_Dtl = " as per Invoice ref "+invno+" dated "+customer_Invoice_DT;
				invoiceType = "Credit Note No:";
				inv_dt_Header = "";
				customer_Invoice_DT ="";
				invno = hlpl_drcr_docNo;
				inv_due_dt_Header = "Credit Note Date:";
				customer_Invoice_Due_DT =hlpl_drcr_dt;//HS20160614
				//customer_Invoice_Due_DT ="";
			}
			else
				invoiceType = "Invoice Seq No:";
			
			if(invoice_title.equalsIgnoreCase("CREDIT")){ //HS20160616
					inv_no_info = "HLPL Credit Note No:";
			}else{
				if(contract_type.equalsIgnoreCase("R"))
				{
					inv_no_info = "HLPL R-gas Invoice Seq No:";
				}
				else if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
				{
					if(date_flag) {
						inv_no_info = "HLPL Tax Invoice Seq No:";
					} else {
						inv_no_info = "HLPL LTCORA Invoice Seq No:";
					}
				}
				else
				{
					inv_no_info = "HLPL Invoice Seq No:";
				}
			}
            
			float[] InvoiceDateInfoWidths = {0.60f, 0.25f, 0.15f};
            PdfPTable InvoiceDateInfoTable = new PdfPTable(InvoiceDateInfoWidths);
            InvoiceDateInfoTable.setWidthPercentage(100);
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            if(invoice_title.equalsIgnoreCase("CREDIT") ){ //HS20160614
	            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            }else {
	            InvoiceDateInfoTable.addCell(new Phrase(new Chunk("Invoice Date:",small_black_bold)));
	            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            }
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_DT,small_black_bold)));
            
            float[] InvoiceDueDateInfoWidths = {0.60f, 0.25f, 0.15f};
            PdfPTable InvoiceDueDateInfoTable = new PdfPTable(InvoiceDueDateInfoWidths);
            InvoiceDueDateInfoTable.setWidthPercentage(100);
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(inv_due_dt_Header,small_black_bold)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Due_DT,small_black_bold)));
            
            String no_total_inv="";
            String no_total_adj="";
            String no_total_tax="";
            String no_total_tax_adj="",sbc_adj_no="",kkc_adj_no="",total_ser_tax_no="",total_sbc_tax_no="",total_kkc_tax_no="",tax_adj_no="";
            
            float[] InvoiceNOInfoWidths = {0.60f, 0.25f, 0.15f};
            PdfPTable InvoiceNOInfoTable = new PdfPTable(InvoiceNOInfoWidths);
            InvoiceNOInfoTable.setWidthPercentage(100);
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(inv_no_info,small_black_bold)));
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(invno,small_black_bold)));
                        
            
            float[] BillingPeriodInfoWidths = {0.55f, 0.05f, 0.15f, 0.10f, 0.15f};
            PdfPTable BillingPeriodInfoTable = new PdfPTable(BillingPeriodInfoWidths);
            BillingPeriodInfoTable.setWidthPercentage(100);
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk("For the Billing Period",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Start_DT,small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk("to",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_End_DT,small_black_bold)));
            
            
            float[] BillingFieldsInfoWidths = {0.06f, 0.44f, 0.10f, 0.10f, 0.10f, 0.08f, 0.12f};
            PdfPTable BillingFieldsInfoTable = new PdfPTable(BillingFieldsInfoWidths);
            BillingFieldsInfoTable.setWidthPercentage(100);
            BillingFieldsInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsInfoTable.addCell(new Phrase(new Chunk("Sr. No.",small_black_bold)));
            BillingFieldsInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsInfoTable.addCell(new Phrase(new Chunk("Item",small_black_bold)));
            BillingFieldsInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsInfoTable.addCell(new Phrase(new Chunk("Attachment\nRef.",small_black_bold)));
            BillingFieldsInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsInfoTable.addCell(new Phrase(new Chunk("Currency",small_black_bold)));
            BillingFieldsInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsInfoTable.addCell(new Phrase(new Chunk("Quantity\n(MMBTUS)",small_black_bold)));
            BillingFieldsInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsInfoTable.addCell(new Phrase(new Chunk("Rate",small_black_bold)));
            BillingFieldsInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsInfoTable.addCell(new Phrase(new Chunk("Amount",small_black_bold)));
            
            
            String field_1 = "";
            String field_2 = "";
            String field_3 = "";
            String field_4 = "";
            String field_5 = "";
            String field_6 = "";
            String field_7 = "";
            
            if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_1 = ++sr_no+" \n\n"+(++sr_no)+" \n\n"+(++sr_no)+" \n\n"+(++sr_no)+" ";
            	}
            	else
            	{
            		field_1 = (++sr_no)+" \n\n"+(++sr_no)+" \n\n"+(++sr_no)+" ";
            	}
            	if(Discount_flag)
            	{
            		field_1 = field_1+" \n\n"+(++sr_no)+" ";
            	}
            	
            }
            else
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_1 = (++sr_no)+" \n\n"+(++sr_no)+" \n\n"+(++sr_no)+" ";
            	}
            	else
            	{
            		field_1 = (++sr_no)+" \n\n"+(++sr_no)+" ";
            	}
            	if(Discount_flag)
            	{
            		field_1 = field_1+" \n\n"+(++sr_no)+" ";
            	}
            }
            
            ////System.out.println("gas_Delivered_Amt_USD.....PDF ORIG...  "+gas_Delivered_Amt_USD);
            String discount_field_2="";
            String discount_filed_3="";
            String discount_filed_4="";
            String discount_filed_5="";
            String discount_filed_6="";
            String discount_filed_6_2="";
            String discount_filed_7="";
            String discount_filed_7_2="";
            if(Discount_flag)
        	{
            	if(contract_type.equalsIgnoreCase("R"))
                {
            		discount_field_2 = "Volume Discount on Reasification Tariff ("+pdfCurrency+"/mmbtu)\n";
            		discount_filed_3="\n\n";
            		discount_filed_4="\n\n"+pdfCurrency+"";
            		discount_filed_5="\n\n";
            		discount_filed_6=pdftotal_tariff_discount;
            		discount_filed_6_2=""+pdfinv_discount_price+"\n\n\n";
            		if(offspec_Flag.trim().equalsIgnoreCase("Y"))
                	{
            			//discount_filed_7_2="\n\n "+pdfFinal_first_gross_amt;
            			discount_filed_7_2="\n\n ";
                	}
            		else
            		{
            			discount_filed_7_2="\n\n ";
            		}
                }
            	else if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
            	{
            		discount_field_2 = "Volume Discount on LTCORA Tariff ("+pdfCurrency+"/mmbtu)\n";
            		discount_filed_3="\n\n";
            		discount_filed_4="\n\n"+pdfCurrency+"";
            		discount_filed_5="\n\n";
            		discount_filed_6=pdftotal_tariff_discount;
            		discount_filed_6_2=""+pdfinv_discount_price+"\n\n\n";
            		if(offspec_Flag.trim().equalsIgnoreCase("Y"))
                	{
            			//discount_filed_7_2="\n\n "+pdfFinal_first_gross_amt;
            			discount_filed_7_2="\n\n ";
                	}
            		else
            		{
            			discount_filed_7_2="\n\n ";
            		}
            	}
            	else
            	{
            		discount_field_2 = "Discount on Rate ("+pdfCurrency+"/mmbtu)\n\n";
            		discount_filed_3="\n\n ";
            		discount_filed_4="\n\n"+pdfCurrency+"";
            		discount_filed_5="\n\n";
            		discount_filed_6=pdftotal_tariff_discount;
            		discount_filed_6_2=""+pdfinv_discount_price+"\n\n\n";
            		if(offspec_Flag.trim().equalsIgnoreCase("Y"))
                	{
            			//discount_filed_7_2="\n\n "+pdfFinal_first_gross_amt;
            			discount_filed_7_2="\n\n ";
                	}
            		else
            		{
            			discount_filed_7_2="\n\n ";
            		}
            	}
            	
        	}
            else
            {
            	discount_filed_6=pdfinv_display_rate;
            	try
            	{
            	discount_filed_7="";//nf3.format(Double.parseDouble(""+java.text.NumberFormat.getInstance().parse(gas_Delivered_Amt_USD)));
            	}
            	catch(Exception e)
            	{e.printStackTrace();}
            	}
            
            if(contract_type.equalsIgnoreCase("R"))
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		
            		field_2 = " Natural Gas (Regasified)"+Inv_Ref_Dtl+"\n\n Regasification Tariff ("+pdfCurrency+"/mmbtu)\n\n Offspec QTY\n\n "+discount_field_2+" Gross Amount ("+pdfCurrency+")";
            	}
            	else
            	{
            		field_2 = " Natural Gas (Regasified)"+Inv_Ref_Dtl+"\n\n Regasification Tariff ("+pdfCurrency+"/mmbtu)\n\n "+discount_field_2+" Gross Amount ("+pdfCurrency+")";
            	}
            }
            else if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_2 = " Natural Gas (Regasified) "+Inv_Ref_Dtl+"\n\n LTCORA Tariff ("+pdfCurrency+"/mmbtu)\n\n Offspec QTY\n\n "+discount_field_2+" Gross Amount ("+pdfCurrency+")";
            	}
            	else
            	{
            		field_2 = " Natural Gas (Regasified) "+Inv_Ref_Dtl+"\n\n LTCORA Tariff ("+pdfCurrency+"/mmbtu)\n\n "+discount_field_2+" Gross Amount ("+pdfCurrency+")";
            	}
            }
            else
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_2 = " Natural Gas (Delivered) ("+pdfCurrency+")"+Inv_Ref_Dtl+"\n\n Offspec QTY\n\n "+discount_field_2+" Gross Amount ("+pdfCurrency+")";
            	}
            	else
            	{
            		field_2 = " Natural Gas (Delivered) ("+pdfCurrency+")"+Inv_Ref_Dtl+"\n\n "+discount_field_2+" Gross Amount ("+pdfCurrency+")";
            	}
            }
            if(!invoice_title.equalsIgnoreCase("CREDIT") ) {//HS20160613
	            if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDDED FOR LTCORA AND CN
	            {
	            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
	            	{
	            		field_3 = "Att 1\n\n \n\n \n\n \n"+discount_filed_3;
	            	}
	            	else
	            	{
	            		field_3 = "Att 1\n\n \n\n \n"+discount_filed_3;
	            	}
	            }
	            else
	            {
	            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
	            	{
	            		field_3 = "Att 1\n\n \n\n \n"+discount_filed_3;
	            	}
	            	else
	            	{
	            		field_3 = "Att1\n\n \n"+discount_filed_3;
	            	}
	            }
			}
            if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDDED FOR LTCORA AND CN
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_4 = " \n\n"+pdfCurrency+"\n\n"+pdfCurrency+"\n\n"+pdfCurrency+""+discount_filed_4;
            	}
            	else
            	{
            		field_4 = " \n\n"+pdfCurrency+"\n\n"+pdfCurrency+""+discount_filed_4;
            	}
            }
            else
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_4 = ""+pdfCurrency+"\n\n"+pdfCurrency+"\n\n"+pdfCurrency+""+discount_filed_4;
            	}
            	else
            	{
            		field_4 = ""+pdfCurrency+"\n\n"+pdfCurrency+""+discount_filed_4;
            	}
            }
            
            if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDDED FOR LTCORA AND CN)
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		//field_5 = total_Gas_Delivered+" \n\n"+total_Gas_Delivered+" \n\n"+total_Offspec_Qty+" \n\n"+discount_filed_5+""+total_Invoice_Qty+" ";
            		field_5 = total_Gas_Delivered+" \n\n \n\n"+total_Offspec_Qty+" \n\n"+discount_filed_5+""+total_Invoice_Qty+" ";
            	}
            	else
            	{
            		//field_5 = total_Gas_Delivered+" \n\n"+total_Gas_Delivered+" \n\n"+discount_filed_5+""+total_Invoice_Qty+" ";
            		field_5 = total_Gas_Delivered+" \n\n \n\n"+discount_filed_5+""+total_Invoice_Qty+" ";
            	}
            }
            else
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_5 = total_Gas_Delivered+" \n\n"+total_Offspec_Qty+" \n\n"+discount_filed_5+""+total_Invoice_Qty+" ";
            	}
            	else
            	{
            		field_5 = total_Gas_Delivered+" \n\n"+discount_filed_5+""+total_Invoice_Qty+" ";
            	}
            }
            
            if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDDED FOR LTCORA AND CN)
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_6 = " \n\n"+discount_filed_6+" \n\n"+offspec_Sales_Rate+" \n\n  "+discount_filed_6_2;
            	}
            	else
            	{
            		field_6 = " \n\n"+discount_filed_6+" \n\n "+discount_filed_6_2;
            	}
            }
            else
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_6 = discount_filed_6+" \n\n"+offspec_Sales_Rate+" \n\n "+discount_filed_6_2;
            	}
            	else
            	{
            		field_6 = discount_filed_6+" \n\n "+discount_filed_6_2;
            	}
            }
            try{
            if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDDED FOR LTCORA AND CN)
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_7 = " \n\n"+discount_filed_7+" \n\n"+offspec_Amt_USD+" "+discount_filed_7_2+" \n\n"+nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(pdfFinal_first_gross_amt)))+" ";
            	}
            	else
            	{
            		field_7 = " \n\n"+discount_filed_7+" "+discount_filed_7_2+" \n\n"+nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(pdfFinal_first_gross_amt)))+" ";
            	}
            }
            else
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_7 = discount_filed_7+" \n\n"+offspec_Amt_USD+" "+discount_filed_7_2+" \n\n"+nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(pdfFinal_first_gross_amt)))+" ";
            	}
            	else
            	{
            		field_7 = discount_filed_7+" "+discount_filed_7_2+" \n\n"+nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(pdfFinal_first_gross_amt)))+" ";
            	}
            }
            }catch(Exception e){}
            ////System.out.println("pdfFinal_first_gross_amt.......... "+pdfFinal_first_gross_amt);
            ////System.out.println("field_7.......... "+field_7);
            
            float[] BillingFieldsDetailsWidths = {0.06f, 0.44f, 0.10f, 0.10f, 0.10f, 0.08f, 0.12f};
            PdfPTable BillingFieldsDetailsTable = new PdfPTable(BillingFieldsDetailsWidths);
            BillingFieldsDetailsTable.setWidthPercentage(100);
            //BillingFieldsDetailsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingFieldsDetailsTable.getDefaultCell().setBorder(Rectangle.LEFT);
            BillingFieldsDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
            BillingFieldsDetailsTable.getDefaultCell().setBorder(Rectangle.LEFT);
            BillingFieldsDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            BillingFieldsDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
            BillingFieldsDetailsTable.getDefaultCell().setBorder(Rectangle.LEFT);
            BillingFieldsDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
            
            BillingFieldsDetailsTable.getDefaultCell().setBorder(Rectangle.LEFT);
            BillingFieldsDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
            BillingFieldsDetailsTable.getDefaultCell().setBorder(Rectangle.LEFT);
            BillingFieldsDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
            BillingFieldsDetailsTable.getDefaultCell().setBorder(Rectangle.LEFT);
            BillingFieldsDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
            BillingFieldsDetailsTable.getDefaultCell().setBorder(Rectangle.LEFT|Rectangle.RIGHT);
            BillingFieldsDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
         //  //System.out.println("-----INSIDE PRINTALL 3---"+advance_payment_flag);
            
            /////////////////////////////////////////start//////////////////////////////////////////////
            float[] BillingFieldsDetailsWidths_a = {0.06f, 0.44f, 0.10f, 0.10f, 0.10f, 0.08f, 0.12f};
            PdfPTable BillingFieldsDetailsTable_a=new PdfPTable(BillingFieldsDetailsWidths_a);
            
            float[] BillingFieldsDetailsWidths_2 = {0.06f, 0.44f, 0.10f, 0.10f, 0.10f, 0.08f, 0.12f};
            PdfPTable BillingFieldsDetailsTable_2 = new PdfPTable(BillingFieldsDetailsWidths_2);
            
            float[] BillingFieldsDetailsWidths_exch = {0.06f, 0.44f, 0.10f, 0.10f, 0.10f, 0.08f, 0.12f};
            PdfPTable BillingFieldsDetailsTable_exch = new PdfPTable(BillingFieldsDetailsWidths_exch);
            
            float[] BillingFieldsDetailsWidths_woexch = {0.06f, 0.44f, 0.10f, 0.10f, 0.10f, 0.08f, 0.12f};
            PdfPTable BillingFieldsDetailsTable_woexch = new PdfPTable(BillingFieldsDetailsWidths_woexch);
            
            
            float[] BillingFieldsDetailsWidths_adv_usd = {0.06f, 0.44f, 0.10f, 0.10f, 0.10f, 0.08f, 0.12f};
            PdfPTable BillingFieldsDetailsTable_adv_usd=new PdfPTable(BillingFieldsDetailsWidths_adv_usd);
            
            
            float[] BillingFieldsDetailsWidths_total_payable = {0.06f, 0.44f, 0.10f, 0.10f, 0.10f, 0.08f, 0.12f};
            PdfPTable BillingFieldsDetailsTable_total_pay=new PdfPTable(BillingFieldsDetailsWidths_total_payable);
            PdfPTable BillingFieldsDetailsTable_total_pay1=new PdfPTable(BillingFieldsDetailsWidths_total_payable);
            
            
            float[] BillingFieldsDetailsWidths_a_tax = {0.06f, 0.44f, 0.10f, 0.10f, 0.10f, 0.08f, 0.12f};
            PdfPTable BillingFieldsDetailsTable_a_tax=new PdfPTable(BillingFieldsDetailsWidths_a_tax);
            
            float[] BillingFieldsDetailsWidths_sbc_tax = {0.06f, 0.44f, 0.10f, 0.10f, 0.10f, 0.08f, 0.12f};
            PdfPTable BillingFieldsDetailsTable_sbc_tax=new PdfPTable(BillingFieldsDetailsWidths_sbc_tax);
            
            float[] BillingFieldsDetailsWidths_kkc_tax = {0.06f, 0.44f, 0.10f, 0.10f, 0.10f, 0.08f, 0.12f};
            PdfPTable BillingFieldsDetailsTable_kkc_tax=new PdfPTable(BillingFieldsDetailsWidths_kkc_tax);
            
            
           
           if(!Tariff_flag && (advance_payment_flag || TAX_ADV_ADJ_CODE_GST.size()>0)) {

        	   if(pdfinvadjustcur.startsWith("2")){
	             //BillingFieldsDetailsTable_adv_usd
	               if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
	               {
	               		field_1 = (++sr_no)+" \n\n";
	               }
	               else
	               {
	               		field_1 = (++sr_no)+"\n\n";
	               }
	               field_2 =" "+pdfinvadjremark+"\n\n";
//	               if(invoice_title.equalsIgnoreCase("CREDIT") ) //SB20160611
//            			field_3 = " Att 2\n\n ";
//            		else			
//            		  field_3 = "Att 3\n\n ";
	               field_3 = " \n\n ";
	               if(pdfinvadjustcur.equalsIgnoreCase("U") || pdfinvadjustcur.equalsIgnoreCase("2"))
	               {
	               		field_4 = "USD\n\n";
	               }
	               else
	               {
	               	field_4 = "Rupees \n\n";
	               	
	               }
	               field_5 = " \n\n";
	         		field_6 = " \n\n";
	          		field_7 = pdfinvadjustmentamt+" \n\n";
	               	
	               
	          		BillingFieldsDetailsTable_adv_usd = new PdfPTable(BillingFieldsDetailsWidths_adv_usd);
	          		BillingFieldsDetailsTable_adv_usd.setWidthPercentage(100);
	          		BillingFieldsDetailsTable_adv_usd.getDefaultCell().setBorder(Rectangle.LEFT);
	          		BillingFieldsDetailsTable_adv_usd.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	          		BillingFieldsDetailsTable_adv_usd.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	          		BillingFieldsDetailsTable_adv_usd.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
	          		BillingFieldsDetailsTable_adv_usd.getDefaultCell().setBorder(Rectangle.LEFT);
	          		BillingFieldsDetailsTable_adv_usd.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	          		BillingFieldsDetailsTable_adv_usd.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	          		BillingFieldsDetailsTable_adv_usd.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
	          		BillingFieldsDetailsTable_adv_usd.getDefaultCell().setBorder(Rectangle.LEFT);
	          		BillingFieldsDetailsTable_adv_usd.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	          		BillingFieldsDetailsTable_adv_usd.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	          		if(!invoice_title.equalsIgnoreCase("CREDIT") ){//HS20160614
	          			BillingFieldsDetailsTable_adv_usd.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
                   }else{
                	   BillingFieldsDetailsTable_adv_usd.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
                   }
	          		
	          		BillingFieldsDetailsTable_adv_usd.getDefaultCell().setBorder(Rectangle.LEFT);
	          		BillingFieldsDetailsTable_adv_usd.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	          		BillingFieldsDetailsTable_adv_usd.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	          		BillingFieldsDetailsTable_adv_usd.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
	          		BillingFieldsDetailsTable_adv_usd.getDefaultCell().setBorder(Rectangle.LEFT);
	          		BillingFieldsDetailsTable_adv_usd.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	          		BillingFieldsDetailsTable_adv_usd.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	          		BillingFieldsDetailsTable_adv_usd.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
	          		BillingFieldsDetailsTable_adv_usd.getDefaultCell().setBorder(Rectangle.LEFT);
	          		BillingFieldsDetailsTable_adv_usd.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	          		BillingFieldsDetailsTable_adv_usd.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	          		BillingFieldsDetailsTable_adv_usd.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
	          		BillingFieldsDetailsTable_adv_usd.getDefaultCell().setBorder(Rectangle.LEFT|Rectangle.RIGHT);
	          		BillingFieldsDetailsTable_adv_usd.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	          		BillingFieldsDetailsTable_adv_usd.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	          		BillingFieldsDetailsTable_adv_usd.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
        	   }
        	   
        	   field_1 = ""+(++sr_no)+"\n\n"+(++sr_no)+"\n";
              	
               field_2 = " Exchange Rate \n\n Gross Amount (Rupees) \n";
               if(!invoice_title.equalsIgnoreCase("CREDIT") ){
            	   field_3 = "Att 2 \n\n\n";
               }else{
            	   field_3 = "Att 1\n\n \n";
               }
               field_4 = "\n\nRupees \n";
               field_5 = "\n\n\n";
               field_6 = " "+ customer_Invoice_Exchg_Rate+" \n\n\n";
               field_7 = "\n\n"+pdfFinal_first_gross_amt_inr+" \n";
               	
              // float[] BillingFieldsDetailsWidths_exch = {0.06f, 0.34f, 0.10f, 0.10f, 0.15f, 0.10f, 0.15f};
               //PdfPTable BillingFieldsDetailsTable_exch = new PdfPTable(BillingFieldsDetailsWidths_exch);
               no_total_inv=""+sr_no;
               BillingFieldsDetailsTable_exch.setWidthPercentage(100);
               BillingFieldsDetailsTable_exch.getDefaultCell().setBorder(Rectangle.LEFT);
               BillingFieldsDetailsTable_exch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_exch.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
               BillingFieldsDetailsTable_exch.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
               BillingFieldsDetailsTable_exch.getDefaultCell().setBorder(Rectangle.LEFT);
               BillingFieldsDetailsTable_exch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
               BillingFieldsDetailsTable_exch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_exch.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
               BillingFieldsDetailsTable_exch.getDefaultCell().setBorder(Rectangle.LEFT);
               BillingFieldsDetailsTable_exch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_exch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_exch.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
               BillingFieldsDetailsTable_exch.getDefaultCell().setBorder(Rectangle.LEFT);
               BillingFieldsDetailsTable_exch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_exch.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
               BillingFieldsDetailsTable_exch.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
               BillingFieldsDetailsTable_exch.getDefaultCell().setBorder(Rectangle.LEFT);
               BillingFieldsDetailsTable_exch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_exch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_exch.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
               BillingFieldsDetailsTable_exch.getDefaultCell().setBorder(Rectangle.LEFT);
               BillingFieldsDetailsTable_exch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_exch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_exch.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
               BillingFieldsDetailsTable_exch.getDefaultCell().setBorder(Rectangle.LEFT|Rectangle.RIGHT);
               BillingFieldsDetailsTable_exch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_exch.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
               BillingFieldsDetailsTable_exch.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
        	    
               String tax_payable="",sbc_payable="",kkc_payable="";
               if(inv_advance_adj_flg.equalsIgnoreCase("AA")){
		           		field_1 = "\n"+(++sr_no)+" \n";
		           
		           no_total_adj=""+(sr_no);
		           //no_total_tax_adj=""+(sr_no);
		           field_2 ="\n "+pdfinvadjremark;
//		           if(!invoice_title.equalsIgnoreCase("CREDIT") ){//HS20160614
//		        	   field_3 = "\nAtt 3\n ";
//		           }else{
//		        	   field_3 = "\nAtt 2\n";
//		           }
		           field_3 = "\n \n";
		           if(pdfinvadjustcur.equalsIgnoreCase("U") || pdfinvadjustcur.equalsIgnoreCase("2"))
		           {
		           		field_4 = "\nRupees\n";
		           }
		           else
		           {
		           	field_4 = "\nRupees \n";
		           	
		           }
		           field_5 = " \n\n ";
		     		field_6 = " \n\n ";
		     		if(pdfinvadjustcur.startsWith("2")){
		      		field_7 = "\n"+Pdfinvadjustmentamt_inr+" \n";
		     		}
		     		else
		     		{
		     			field_7 = "\n"+pdfinvadjustmentamt+" \n";
		     		}
		           
		           BillingFieldsDetailsTable_a = new PdfPTable(BillingFieldsDetailsWidths_a);
		           BillingFieldsDetailsTable_a.setWidthPercentage(100);
		           BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.LEFT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
		           BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
		           BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.LEFT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		           BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
		           BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.LEFT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		           BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		           if(!invoice_title.equalsIgnoreCase("CREDIT") ){
		        	   BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
		           }else{
		        	   BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
		           }
		           BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.LEFT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		           BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
		           BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
		           BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.LEFT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		           BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
		           BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.LEFT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		           BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
		           BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.LEFT|Rectangle.RIGHT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
		           BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
		           
               		field_1 = (++sr_no)+" ";
	               
            	   field_2 =" Total Invoice Amount Payable ("+no_total_inv+"-"+no_total_adj+")";
	  				
	               field_3 = "";
	               if(pdfinvadjustcur.equalsIgnoreCase("U") || pdfinvadjustcur.equalsIgnoreCase("2"))
	               {
	            	   
	               		field_4 = "Rupees";
	               }
	               else
	               {
	            	   field_4 = "Rupees";
	               }
	               field_5 = "  ";
	         		field_6 = "  ";
	          		field_7 = Pdftotal_invoice_payable_inr;
	          		
	          	   BillingFieldsDetailsTable_total_pay = new PdfPTable(BillingFieldsDetailsWidths_total_payable);
	          	   BillingFieldsDetailsTable_total_pay.setWidthPercentage(100);
	          	   BillingFieldsDetailsTable_total_pay.getDefaultCell().setBorder(Rectangle.LEFT);
	          	   BillingFieldsDetailsTable_total_pay.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_total_pay.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	               BillingFieldsDetailsTable_total_pay.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
	               BillingFieldsDetailsTable_total_pay.getDefaultCell().setBorder(Rectangle.LEFT);
	               BillingFieldsDetailsTable_total_pay.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	               BillingFieldsDetailsTable_total_pay.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	               BillingFieldsDetailsTable_total_pay.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
	               BillingFieldsDetailsTable_total_pay.getDefaultCell().setBorder(Rectangle.LEFT);
	               BillingFieldsDetailsTable_total_pay.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	               BillingFieldsDetailsTable_total_pay.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               if(!invoice_title.equalsIgnoreCase("CREDIT") ){
	            	   BillingFieldsDetailsTable_total_pay.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
	               }else{
	            	   BillingFieldsDetailsTable_total_pay.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
	               }
	               
	               BillingFieldsDetailsTable_total_pay.getDefaultCell().setBorder(Rectangle.LEFT);
	               BillingFieldsDetailsTable_total_pay.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	               BillingFieldsDetailsTable_total_pay.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	               BillingFieldsDetailsTable_total_pay.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
	               BillingFieldsDetailsTable_total_pay.getDefaultCell().setBorder(Rectangle.LEFT);
	               BillingFieldsDetailsTable_total_pay.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_total_pay.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_total_pay.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
	               BillingFieldsDetailsTable_total_pay.getDefaultCell().setBorder(Rectangle.LEFT);
	               BillingFieldsDetailsTable_total_pay.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_total_pay.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_total_pay.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
	               BillingFieldsDetailsTable_total_pay.getDefaultCell().setBorder(Rectangle.LEFT|Rectangle.RIGHT);
	               BillingFieldsDetailsTable_total_pay.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_total_pay.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	               BillingFieldsDetailsTable_total_pay.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
	           	
               }
               Vector tax_nos = new Vector();
               field_1 = "";
     			
               int cnt = 0;
               	for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{	
	               	if(i!=customer_Invoice_Tax_Code.size())
	               	{
	               		field_1 += "\n"+(++sr_no)+" ";
	               	}
	               	else
	               	{
	               		field_1 += "\n"+" ";
	               	}
	               	tax_nos.add(""+sr_no);
	               	++cnt;
	   			}
               	
	               if(cnt<1)
	               {
	               		field_1 += " ";
	               }
	               else
	               {
	               		field_1 += "\n ";
	               }
	               
	               field_2 = "";
	   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{	
	   				if(i==0)
	               	{
	   					field_2 += "\n "+customer_Invoice_Tax_Name.elementAt(i);
	               	}
	   				else
	   				{
	   					field_2 += "\n "+customer_Invoice_Tax_Name.elementAt(i);
	   				}
	   			}
	   			if(cnt<1)
	            {
	   				field_2 += "";
	            }
	   			else
	   			{
	   				if(tax_gst) {
	   					field_2 += "\n Total GST ";
	   				} else {
	   					field_2 += "\n Total Tax ";
	   				}
	   			}
	   			
	   			field_3 = "";
	   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{	
	   				if(i==0)
	               	{
	   					field_3 += "\n";
	               	}
	   				else
	   				{
	   					field_3 += "\n ";
	   				}
	   			}
	   			if(cnt<1)
	               {
	   				field_3 += "";
	               }
	   			else
	   			{
	   				field_3 += "\n ";
	   			}
	   			
	   			field_4 = "";
	   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{	
	   				if(i==0)
	               	{
	   					field_4 += "\nRupees";
	               	}
	   				else
	   				{
	   					field_4 += "\nRupees";
	   				}
	   			}
	   			if(cnt<1)
	               {
	   				field_4 += "";
	               }
	   			else
	   			{
	   				field_4 += "\nRupees ";
	   			}
	               
	               field_5 = "";
	            for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{
	               	if(i==0)
	               	{
	               		field_5 += "\n";
	               	}
	               	else
	               	{
	               		field_5 += " \n ";
	               	}
	   			}
	               if(cnt<1)
	               {
	               	field_5 += "";
	               }
	               else
	               {
	               	field_5 += "\n ";
	               }
	               
	            field_6 = "";
	            for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{
	               	if(i==0)
	               	{
	               		field_6 += "\n"+customer_Invoice_Tax_Rate.elementAt(i)+" % ";
	               	}
	               	else
	               	{
	               		field_6 += "\n"+customer_Invoice_Tax_Rate.elementAt(i)+" % ";
	               	}
	   			}
	               if(cnt<1)
	               {
	               	field_6 += "";
	               }
	               else
	               {
	               	field_6 += "\n "; //06052017
	               }
	               
	            field_7 = "";
	   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{
	   				if(i==0)
	               	{
	   					field_7 += "\n"+customer_Invoice_Tax_Amt.elementAt(i)+" ";
	               	}
	   				else
	   				{
	   					field_7 += "\n"+customer_Invoice_Tax_Amt.elementAt(i)+" ";
	   				}
	   			}
	   			if(cnt<1)
	               {
	   				field_7 += "";
	   				
	   				////System.out.println("IF.............................");
	               }
	   			else
	   			{
	   				field_7 += "\n"+total_tax_amt+"";
	   				////System.out.println("ELSE.............................");
	   			}
	   			no_total_tax=""+sr_no;
	   			//BillingFieldsDetailsTable_woexch
	               BillingFieldsDetailsTable_woexch.setWidthPercentage(100);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.LEFT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.LEFT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.LEFT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               //BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_normal)));
	               //BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_normal).setAction(new PdfAction(new URL(invoice_att3_file_name)))));
	               if(!invoice_title.equalsIgnoreCase("CREDIT") ){
	            	   BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
	               }else{
	            	   BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
	               }
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.LEFT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.LEFT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.LEFT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.LEFT|Rectangle.RIGHT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
        	   
        	   //BillingFieldsDetailsTable_a
	          if(!inv_advance_adj_flg.equalsIgnoreCase("AA")){
		          field_1 = "\n"+(++sr_no)+" \n";
		           no_total_adj=""+(sr_no);
		           field_2 ="\n "+pdfinvadjremark+"\n";
//		           if(!invoice_title.equalsIgnoreCase("CREDIT") ){//HS20160614
//		        	   field_3 = "\nAtt 3\n ";
//		           }else{
//		        	   field_3 = "\nAtt 2\n";
//		           }
		           field_3 = "\n \n";
		           if(pdfinvadjustcur.equalsIgnoreCase("U") || pdfinvadjustcur.equalsIgnoreCase("2"))
		           {
		           		field_4 = "\nRupees\n";
		           }
		           else
		           {
		           	field_4 = "\nRupees \n";
		           	
		           }
		           field_5 = " \n\n ";
		     		field_6 = " \n\n ";
		     		if(pdfinvadjustcur.startsWith("2")){
		      		field_7 = "\n"+Pdfinvadjustmentamt_inr+" \n";
		     		}
		     		else
		     		{
		     			field_7 = "\n"+pdfinvadjustmentamt+" \n";
		     		}
		           
		           BillingFieldsDetailsTable_a = new PdfPTable(BillingFieldsDetailsWidths_a);
		           BillingFieldsDetailsTable_a.setWidthPercentage(100);
		           BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.LEFT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
		           BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
		           BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.LEFT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		           BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
		           BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.LEFT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		           BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		           if(!invoice_title.equalsIgnoreCase("CREDIT") ){
		        	   BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
		           }else{
		        	   BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
		           }
		           BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.LEFT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		           BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
		           BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
		           BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.LEFT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		           BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
		           BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.LEFT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		           BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
		           BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.LEFT|Rectangle.RIGHT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		           BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
		           BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
	           }
	          BillingFieldsDetailsTable_a_tax = new PdfPTable(BillingFieldsDetailsWidths_a_tax);
             //BillingFieldsDetailsTable_a_tax
	          Vector adj_no_tax = new Vector();
	          if(date_flag && TAX_ADV_ADJ_CODE_GST.size()>0) {
	        	  for(int k=0;k<customer_Invoice_Tax_Code.size();k++) {
	        		  
	  	          	String abbr = ""+TAX_ADV_ADJ_ABBR_GST.get(customer_Invoice_Tax_Abbr.elementAt(k));
	  	          	String remark_ = ""+TAX_ADV_ADJ_REMARK_GST.get(abbr);
	  	          	String amt_ = ""+TAX_ADV_ADJ_AMT_GST.get(abbr);
	  	          	if(amt_.equals("") || amt_.equals(null) || amt_.equals("null")) {
	  	          		amt_ = "0.0"; 
	  	          	} else {
	  	          		amt_ = amt_.replace(",","");
	  	          	}
	  	          	if(!remark_.equals("") && Double.parseDouble(amt_)!=0.0) {

                		field_1 = ""+(++sr_no)+" ";
	  	                adj_no_tax.add(""+sr_no);
	  	                
	  	                no_total_tax_adj=""+(sr_no);
	  	                
	  	                field_2 =""+remark_+"\n";
//	  	                if(!invoice_title.equalsIgnoreCase("CREDIT") ){
//	  	             	   field_3 = "Att 3 ";
//	  	                }else{
//	  	             	   field_3 = "Att 2 ";
//	  	                }
	  	              field_3 = " ";
                		field_4 = "Rupees";
	  	                
	  	                field_5 = " ";
	  	          		field_6 = " ";
  	          			field_7 = ""+nf3.format(Double.parseDouble(amt_))+" ";
	  	                
	  	          		BillingFieldsDetailsTable_a_tax.setWidthPercentage(100);
	  	          		BillingFieldsDetailsTable_a_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	  	          		BillingFieldsDetailsTable_a_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	  	          		BillingFieldsDetailsTable_a_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	  	          		BillingFieldsDetailsTable_a_tax.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
	  	          		BillingFieldsDetailsTable_a_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	  	          		BillingFieldsDetailsTable_a_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	  	          		BillingFieldsDetailsTable_a_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	  	          		BillingFieldsDetailsTable_a_tax.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
	  	          		BillingFieldsDetailsTable_a_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	  	          		BillingFieldsDetailsTable_a_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	  	          		BillingFieldsDetailsTable_a_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	  	          		if(!invoice_title.equalsIgnoreCase("CREDIT") ){
	  	          			BillingFieldsDetailsTable_a_tax.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
	  	                 }else{
	  	                 	BillingFieldsDetailsTable_a_tax.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
	  	                 }
	  	          		
	  	          		BillingFieldsDetailsTable_a_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	  	          		BillingFieldsDetailsTable_a_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	  	          		BillingFieldsDetailsTable_a_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	  	          		BillingFieldsDetailsTable_a_tax.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
	  	          		BillingFieldsDetailsTable_a_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	  	                 BillingFieldsDetailsTable_a_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	  	                 BillingFieldsDetailsTable_a_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	  	                 BillingFieldsDetailsTable_a_tax.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
	  	                 BillingFieldsDetailsTable_a_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	  	                 BillingFieldsDetailsTable_a_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	  	                 BillingFieldsDetailsTable_a_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	  	                 BillingFieldsDetailsTable_a_tax.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
	  	                 BillingFieldsDetailsTable_a_tax.getDefaultCell().setBorder(Rectangle.LEFT|Rectangle.RIGHT);
	  	                 BillingFieldsDetailsTable_a_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	  	                 BillingFieldsDetailsTable_a_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	  	                 BillingFieldsDetailsTable_a_tax.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
	  	                 adj_no_tax.add(""+sr_no); 
	  	          	}
	  	          
	        	  }
	          } else {
	        	  if(PdfTAX_ADV_ADJ_AMT.equalsIgnoreCase("0")){PdfTAX_ADV_ADJ_AMT="0.00";}
		          if(PdfTAX_ADV_ADJ_FLAG.equals("Y") && !PdfTAX_ADV_ADJ_AMT.equalsIgnoreCase("0.00")) {
	               
	              field_1 = ""+(++sr_no)+" ";
	               no_total_tax_adj=""+(sr_no);
	               tax_adj_no=""+(sr_no);
	               field_2 =""+PdfTAX_ADV_ADJ_remark+"\n";
//	               if(!invoice_title.equalsIgnoreCase("CREDIT") ){
//	            	   field_3 = "Att 3\n ";
//	               }else{
//	            	   field_3 = "Att 2\n ";
//	               }
	               field_3 = " \n ";
              		field_4 = "Rupees";
 	                field_5 = " \n ";
	         		field_6 = " \n ";
         			field_7 = ""+PdfTAX_ADV_ADJ_AMT+" ";
	         		
	         		BillingFieldsDetailsTable_a_tax = new PdfPTable(BillingFieldsDetailsWidths_a_tax);
	         		BillingFieldsDetailsTable_a_tax.setWidthPercentage(100);
	         		BillingFieldsDetailsTable_a_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	         		BillingFieldsDetailsTable_a_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	         		BillingFieldsDetailsTable_a_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	         		BillingFieldsDetailsTable_a_tax.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
	         		BillingFieldsDetailsTable_a_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	         		BillingFieldsDetailsTable_a_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	         		BillingFieldsDetailsTable_a_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	         		BillingFieldsDetailsTable_a_tax.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
	         		BillingFieldsDetailsTable_a_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	         		BillingFieldsDetailsTable_a_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	         		BillingFieldsDetailsTable_a_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
         			BillingFieldsDetailsTable_a_tax.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
	         		
	         		BillingFieldsDetailsTable_a_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	         		BillingFieldsDetailsTable_a_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	         		BillingFieldsDetailsTable_a_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	         		BillingFieldsDetailsTable_a_tax.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
	         		BillingFieldsDetailsTable_a_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	                BillingFieldsDetailsTable_a_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	                BillingFieldsDetailsTable_a_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	                BillingFieldsDetailsTable_a_tax.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
	                BillingFieldsDetailsTable_a_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	                BillingFieldsDetailsTable_a_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	                BillingFieldsDetailsTable_a_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	                BillingFieldsDetailsTable_a_tax.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
	                BillingFieldsDetailsTable_a_tax.getDefaultCell().setBorder(Rectangle.LEFT|Rectangle.RIGHT);
	                BillingFieldsDetailsTable_a_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	                BillingFieldsDetailsTable_a_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	                BillingFieldsDetailsTable_a_tax.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
		          }
	               
	               //------SBC-------
	               if(PdfSBC_ADV_ADJ_AMT.equalsIgnoreCase("0")){PdfSBC_ADV_ADJ_AMT="0.00";}
	               if(PdfSBC_ADV_ADJ_FLAG.equals("Y") && !PdfSBC_ADV_ADJ_AMT.equalsIgnoreCase("0.00")) {

	            	 field_1 = ""+(++sr_no)+" ";
	               
	               //no_total_adj=""+(sr_no-1);DEEP2016
	               sbc_adj_no=""+(sr_no);
	               field_2 =""+PdfSBC_ADV_ADJ_remark+"\n";
//	               if(!invoice_title.equalsIgnoreCase("CREDIT") ){
//	            	   field_3 = "Att 3\n ";
//	               }else{
//	            	   field_3 = "Att 2\n ";
//	               }
	               field_3 = " \n ";
               		field_4 = "Rupees";
	                field_5 = " \n ";
	         		field_6 = " \n ";
         			field_7 = ""+PdfSBC_ADV_ADJ_AMT+" ";
	               
	         		BillingFieldsDetailsTable_sbc_tax = new PdfPTable(BillingFieldsDetailsWidths_a_tax);
	         		BillingFieldsDetailsTable_sbc_tax.setWidthPercentage(100);
	         		BillingFieldsDetailsTable_sbc_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	         		BillingFieldsDetailsTable_sbc_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	         		BillingFieldsDetailsTable_sbc_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	         		BillingFieldsDetailsTable_sbc_tax.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
	         		BillingFieldsDetailsTable_sbc_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	         		BillingFieldsDetailsTable_sbc_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	         		BillingFieldsDetailsTable_sbc_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	         		BillingFieldsDetailsTable_sbc_tax.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
	         		BillingFieldsDetailsTable_sbc_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	         		BillingFieldsDetailsTable_sbc_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	         		BillingFieldsDetailsTable_sbc_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
         			BillingFieldsDetailsTable_sbc_tax.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
	         		BillingFieldsDetailsTable_sbc_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	         		BillingFieldsDetailsTable_sbc_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	         		BillingFieldsDetailsTable_sbc_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	         		BillingFieldsDetailsTable_sbc_tax.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
	         		BillingFieldsDetailsTable_sbc_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	                BillingFieldsDetailsTable_sbc_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	                BillingFieldsDetailsTable_sbc_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	                BillingFieldsDetailsTable_sbc_tax.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
	                BillingFieldsDetailsTable_sbc_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	                BillingFieldsDetailsTable_sbc_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	                BillingFieldsDetailsTable_sbc_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	                BillingFieldsDetailsTable_sbc_tax.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
	                BillingFieldsDetailsTable_sbc_tax.getDefaultCell().setBorder(Rectangle.LEFT|Rectangle.RIGHT);
	                BillingFieldsDetailsTable_sbc_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	                BillingFieldsDetailsTable_sbc_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	                BillingFieldsDetailsTable_sbc_tax.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
	           }
	               //------------
	               
	               
	               //----KKC-----//////
	               if(PdfKKC_ADV_ADJ_AMT.equalsIgnoreCase("0")){PdfKKC_ADV_ADJ_AMT="0.00";}
	           if(PdfKKC_ADV_ADJ_FLAG.equals("Y") && !PdfKKC_ADV_ADJ_AMT.equalsIgnoreCase("0.00")) {   

	        	   field_1 = ""+(++sr_no)+" ";
	               //no_total_adj=""+(sr_no-1);
	               kkc_adj_no=""+(sr_no);
	               field_2 =""+PdfKKC_ADV_ADJ_remark+"\n\n";
//	               if(!invoice_title.equalsIgnoreCase("CREDIT") ){
//	            	   field_3 = "Att 3\n\n ";
//	               }else{
//	            	   field_3 = "Att 2\n\n ";
//	               }
	               field_3 = " \n\n ";
              		field_4 = "Rupees";
	                field_5 = " \n\n ";
	         		field_6 = " \n\n ";
	          		field_7 = ""+PdfKKC_ADV_ADJ_AMT+" ";
	               
	         		BillingFieldsDetailsTable_kkc_tax = new PdfPTable(BillingFieldsDetailsWidths_a_tax);
	         		BillingFieldsDetailsTable_kkc_tax.setWidthPercentage(100);
	         		BillingFieldsDetailsTable_kkc_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	         		BillingFieldsDetailsTable_kkc_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	         		BillingFieldsDetailsTable_kkc_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	         		BillingFieldsDetailsTable_kkc_tax.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
	         		BillingFieldsDetailsTable_kkc_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	         		BillingFieldsDetailsTable_kkc_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	         		BillingFieldsDetailsTable_kkc_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	         		BillingFieldsDetailsTable_kkc_tax.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
	         		BillingFieldsDetailsTable_kkc_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	         		BillingFieldsDetailsTable_kkc_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	         		BillingFieldsDetailsTable_kkc_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
         			BillingFieldsDetailsTable_kkc_tax.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
	         		BillingFieldsDetailsTable_kkc_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	         		BillingFieldsDetailsTable_kkc_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	         		BillingFieldsDetailsTable_kkc_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	         		BillingFieldsDetailsTable_kkc_tax.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
	         		BillingFieldsDetailsTable_kkc_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	                BillingFieldsDetailsTable_kkc_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	                BillingFieldsDetailsTable_kkc_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	                BillingFieldsDetailsTable_kkc_tax.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
	                BillingFieldsDetailsTable_kkc_tax.getDefaultCell().setBorder(Rectangle.LEFT);
	                BillingFieldsDetailsTable_kkc_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	                BillingFieldsDetailsTable_kkc_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	                BillingFieldsDetailsTable_kkc_tax.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
	                BillingFieldsDetailsTable_kkc_tax.getDefaultCell().setBorder(Rectangle.LEFT|Rectangle.RIGHT);
	                BillingFieldsDetailsTable_kkc_tax.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	                BillingFieldsDetailsTable_kkc_tax.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	                BillingFieldsDetailsTable_kkc_tax.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
	           }
	          }
             //hs20160905  String tax_payable="",sbc_payable="",kkc_payable="";
	          
               if(!inv_advance_adj_flg.equalsIgnoreCase("AA")){
            	   
            		   if(adj_no_tax.size()>0 || (!(tax_adj_no.equals("") && sbc_adj_no.equals("") && kkc_adj_no.equals("")))) {
                     		
            			   if(date_flag) {
            			   String pay = "";
                     			
                      		field_1 = (++sr_no)+" ";
                      		for(int i=0; i<TAX_ADV_ADJ_CODE_GST.size(); i++)
           	   				{
                      			if(i==0)
                      				field_1+="\n";
                      			field_1 += "\n"+(++sr_no)+" ";
                      			if(i!=TAX_ADV_ADJ_CODE_GST.size()) { 
                      				pay += sr_no +" + "; 
                      			}
           	   				}
                      		field_1 += " \n"+(++sr_no)+" \n\n"+(++sr_no);
                      		
                      		if(pay.length()!=0 && TAX_ADV_ADJ_CODE_GST.size()>=1){
                      			pay = pay.substring(0, pay.length()-3);
                      		}
                      
                   		  field_2 =" Total Invoice Amount Payable ("+no_total_inv+"-"+no_total_adj+")";
                      for(int i=0; i<TAX_ADV_ADJ_CODE_GST.size(); i++) 
                      { 
                   	   ++cnt;
                   	   if(i==0)
                				field_2+="\n";
                   	   field_2 += "\n "+(customer_Invoice_Tax_Name.elementAt(i))+" Payable";
                   		field_2 += " ("+tax_nos.elementAt(i)+""+((""+adj_no_tax.elementAt(i)).equals("")?"":" - ")+adj_no_tax.elementAt(i)+")";   
                      } 
                      
                      if(tax_gst) {
                    	  field_2+="\n Total GST Payable ("+pay+")\n\n Invoice Amount";
                      } else {
                   	   	field_2+="\n Total Tax Payable ("+pay+")\n\n Invoice Amount";
                      }
                      
                      //field_2 =" Total Invoice Amount Payable\n\n Total Tax\n\n Invoice Amount (Rupees)";
                      field_3 = "";
//                      if(pdfinvadjustcur.equalsIgnoreCase("U") || pdfinvadjustcur.equalsIgnoreCase("2"))
//                      {
//                   	   
//                      		field_4 = "Rupees\n\nRupees\n\nRupees";
//                      }
//                      else
//                      {
                   	   field_4 = "Rupees";
                   	   for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
          	   				{
                   		   		if(i==0)
                     				field_4+="\n";
                    			field_4 += "\nRupees";
          	   				}
                      	field_4 += "\nRupees\n\nRupees";
                      	
//                      }
                      	field_5 = "";
                      	for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
                      	{
                      		if(i==0)
                      			field_5+="\n";
                      		field_5 += "\n";
                      	}
                      	field_5 += "\n\n\n";
                      	
                      	field_6 = "";
                      	for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
                      	{
                      		if(i==0)
                      			field_6+="\n";
                      		field_6 += "\n";
                      	}
                      	field_6 += "\n\n\n";
                      	
//                      field_5 = " \n\n ";
//                		field_6 = " \n\n ";
                 		field_7 = Pdftotal_invoice_payable_inr;
                 		for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
          	   			{
                 			if(i==0)
                  				field_7+="\n";
                    			field_7 += " \n"+total_compo_tax_payable.elementAt(i);
          	   			}
                 		field_7 += " \n"+Pdftotal_tax_payable+" \n\n"+customer_Invoice_Net_Amt_INR;
                 		BillingFieldsDetailsTable_total_pay = new PdfPTable(BillingFieldsDetailsWidths_total_payable);
                 		BillingFieldsDetailsTable_total_pay.setWidthPercentage(100);
                 		BillingFieldsDetailsTable_total_pay.getDefaultCell().setBorder(Rectangle.LEFT);
                 		BillingFieldsDetailsTable_total_pay.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                      BillingFieldsDetailsTable_total_pay.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                      BillingFieldsDetailsTable_total_pay.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
                      BillingFieldsDetailsTable_total_pay.getDefaultCell().setBorder(Rectangle.LEFT);
                      BillingFieldsDetailsTable_total_pay.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
                      BillingFieldsDetailsTable_total_pay.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                      BillingFieldsDetailsTable_total_pay.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
                      BillingFieldsDetailsTable_total_pay.getDefaultCell().setBorder(Rectangle.LEFT);
                      BillingFieldsDetailsTable_total_pay.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                      BillingFieldsDetailsTable_total_pay.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                   	   BillingFieldsDetailsTable_total_pay.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
                      
                      BillingFieldsDetailsTable_total_pay.getDefaultCell().setBorder(Rectangle.LEFT);
                      BillingFieldsDetailsTable_total_pay.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                      BillingFieldsDetailsTable_total_pay.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                      BillingFieldsDetailsTable_total_pay.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
                      BillingFieldsDetailsTable_total_pay.getDefaultCell().setBorder(Rectangle.LEFT);
                      BillingFieldsDetailsTable_total_pay.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                      BillingFieldsDetailsTable_total_pay.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                      BillingFieldsDetailsTable_total_pay.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
                      BillingFieldsDetailsTable_total_pay.getDefaultCell().setBorder(Rectangle.LEFT);
                      BillingFieldsDetailsTable_total_pay.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                      BillingFieldsDetailsTable_total_pay.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                      BillingFieldsDetailsTable_total_pay.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
                      BillingFieldsDetailsTable_total_pay.getDefaultCell().setBorder(Rectangle.LEFT|Rectangle.RIGHT);
                      BillingFieldsDetailsTable_total_pay.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                      BillingFieldsDetailsTable_total_pay.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                      BillingFieldsDetailsTable_total_pay.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
            		   } else {
                           		field_1 = (++sr_no)+" ";
                           		for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
                	   			{
                           			if(i==0)
                           				field_1+="\n";
                           			field_1 += "\n"+(++sr_no)+" ";
                           			if(customer_Invoice_Tax_Code.elementAt(i).equals("102")) { tax_payable=""+sr_no; } else if(customer_Invoice_Tax_Code.elementAt(i).equals("117")){ sbc_payable=""+sr_no; } else { kkc_payable=""+sr_no; }
                	   			}
                           		field_1 += " \n"+(++sr_no)+" \n\n"+(++sr_no);
                           
                        	field_2 =" Total Invoice Amount Payable ("+no_total_inv+"-"+no_total_adj+")";
                           for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
            	   			{
                        	   if(i==0)
                      				field_2+="\n";
                      			field_2 += "\n "+(customer_Invoice_Tax_Name.elementAt(i))+" payable";
                      			if(customer_Invoice_Tax_Code.elementAt(i).equals("102")) { 
                      				field_2 +=" ("+total_ser_tax_no+""+(tax_adj_no.equals("")?"":" - "+tax_adj_no)+")";
                      			} else if(customer_Invoice_Tax_Code.elementAt(i).equals("117")){
                      				field_2 +=" ("+total_sbc_tax_no+""+(sbc_adj_no.equals("")?"":" - "+sbc_adj_no)+")";
                      			} else {
                      				field_2 +=" ("+total_kkc_tax_no+""+(kkc_adj_no.equals("")?"":" - "+kkc_adj_no)+")";
                      			}
            	   			}
                           //field_2+="\n Total Tax ("+no_total_tax+"-"+no_total_tax_adj+")\n\n Invoice Amount (Rupees)";
                           
                           if(tax_gst) {
                        	   field_2+="\n Total GST Payable ("+tax_payable+""+(sbc_payable.equals("")?"":" + "+sbc_payable)+""+(kkc_payable.equals("")?"":" + "+kkc_payable)+")\n\n Invoice Amount";
                           } else {
                        	   field_2+="\n Total Tax Payable ("+tax_payable+""+(sbc_payable.equals("")?"":" + "+sbc_payable)+""+(kkc_payable.equals("")?"":" + "+kkc_payable)+")\n\n Invoice Amount";
                           }
                           
                           //field_2 =" Total Invoice Amount Payable\n\n Total Tax\n\n Invoice Amount (Rupees)";
                           field_3 = "";
                           if(pdfinvadjustcur.equalsIgnoreCase("U") || pdfinvadjustcur.equalsIgnoreCase("2"))
                           {
                        	   
                           		field_4 = "Rupees\n\nRupees\n\nRupees";
                           }
                           else
                           {
                        	   field_4 = "Rupees";
                        	   for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
               	   				{
                        		   if(i==0)
                          				field_4+="\n";
                         			field_4 += "\nRupees";
               	   				}
                           	field_4 += "\nRupees\n\nRupees";
                           	
                           }
                           field_5 = " \n\n ";
                     		field_6 = " \n\n ";
                      		field_7 = Pdftotal_invoice_payable_inr;
                      		for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
               	   			{
                      			if(i==0)
                       				field_7+="\n";
                      			if(customer_Invoice_Tax_Code.elementAt(i).toString().equalsIgnoreCase("102")) {
                         			field_7 += " \n"+pdftotal_adv_tax_payable;
                      			} else if(customer_Invoice_Tax_Code.elementAt(i).toString().equalsIgnoreCase("117")) {
                      				field_7 += " \n"+pdftotal_adv_sbc_payable;
                      			} else {
                      				field_7 += " \n"+pdftotal_adv_kkc_payable;
                      			}
               	   			}
                      		field_7 += " \n"+Pdftotal_tax_payable+" \n\n"+customer_Invoice_Net_Amt_INR;
                      		BillingFieldsDetailsTable_total_pay = new PdfPTable(BillingFieldsDetailsWidths_total_payable);
                      		BillingFieldsDetailsTable_total_pay.setWidthPercentage(100);
                      		BillingFieldsDetailsTable_total_pay.getDefaultCell().setBorder(Rectangle.LEFT);
                      		BillingFieldsDetailsTable_total_pay.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                           BillingFieldsDetailsTable_total_pay.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                           BillingFieldsDetailsTable_total_pay.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
                           BillingFieldsDetailsTable_total_pay.getDefaultCell().setBorder(Rectangle.LEFT);
                           BillingFieldsDetailsTable_total_pay.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
                           BillingFieldsDetailsTable_total_pay.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                           BillingFieldsDetailsTable_total_pay.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
                           BillingFieldsDetailsTable_total_pay.getDefaultCell().setBorder(Rectangle.LEFT);
                           BillingFieldsDetailsTable_total_pay.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                           BillingFieldsDetailsTable_total_pay.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                       	   BillingFieldsDetailsTable_total_pay.addCell(new Phrase(new Chunk(field_3,small_black_bold).setAction(PdfAction.gotoRemotePage(invoice_att2_file_name,"Att2",false,true))));
                           
                           BillingFieldsDetailsTable_total_pay.getDefaultCell().setBorder(Rectangle.LEFT);
                           BillingFieldsDetailsTable_total_pay.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                           BillingFieldsDetailsTable_total_pay.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                           BillingFieldsDetailsTable_total_pay.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
                           BillingFieldsDetailsTable_total_pay.getDefaultCell().setBorder(Rectangle.LEFT);
                           BillingFieldsDetailsTable_total_pay.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                           BillingFieldsDetailsTable_total_pay.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                           BillingFieldsDetailsTable_total_pay.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
                           BillingFieldsDetailsTable_total_pay.getDefaultCell().setBorder(Rectangle.LEFT);
                           BillingFieldsDetailsTable_total_pay.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                           BillingFieldsDetailsTable_total_pay.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                           BillingFieldsDetailsTable_total_pay.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
                           BillingFieldsDetailsTable_total_pay.getDefaultCell().setBorder(Rectangle.LEFT|Rectangle.RIGHT);
                           BillingFieldsDetailsTable_total_pay.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                           BillingFieldsDetailsTable_total_pay.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                           BillingFieldsDetailsTable_total_pay.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
            		   }
            		   } else {

                  			field_1 = "\n "+(++sr_no);
                  		
           					field_2=" \n Invoice Amount";
           				
                  			field_3=" \n ";
                  			field_4 = "\nRupees";
                  			field_5 = " \n ";
                     		field_6 = " \n ";
                  			field_7 = " \n"+customer_Invoice_Net_Amt_INR;
                      		BillingFieldsDetailsTable_total_pay1 = new PdfPTable(BillingFieldsDetailsWidths_total_payable);
                      		BillingFieldsDetailsTable_total_pay1.setWidthPercentage(100);
                      		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                      		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                      		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                      		BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
                      		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                      		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
                      		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                      		BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
                      		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                      		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                      		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                           	BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
                           
                           BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                           BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                           BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                           BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
                           BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                           BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                           BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                           BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
                           BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                           BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                           BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                           BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
                           BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT|Rectangle.RIGHT);
                           BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                           BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                           BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
                  		
            		   }
            		   
           	} else {
           		if(date_flag) {
           			if(adj_no_tax.size()>0) {

                  		String pay = "";
                        		field_1="";
                        		for(int i=0; i<TAX_ADV_ADJ_CODE_GST.size(); i++)
             	   				{
                        			if(i==0)
                        				field_1+="";
                        			field_1 += "\n"+(++sr_no)+" ";
                        			if(i!=TAX_ADV_ADJ_CODE_GST.size()) { 
                           				pay += sr_no +" + "; 
                           			}
                        			//if(customer_Invoice_Tax_Code.elementAt(i).equals("102")) { tax_payable=""+sr_no; } else if(customer_Invoice_Tax_Code.elementAt(i).equals("117")){ sbc_payable=""+sr_no; } else { kkc_payable=""+sr_no; }
             	   				}
                        		field_1 += " \n"+(++sr_no)+" \n\n"+(++sr_no);
                        		
                        		if(pay.length()!=0 && TAX_ADV_ADJ_CODE_GST.size()>=1){
                           			pay = pay.substring(0, pay.length()-3);
                           		}
                        		
                        field_2="";
                        for(int i=0; i<TAX_ADV_ADJ_CODE_GST.size(); i++)
         	   			{
                     	   if(i==0)
                   				field_2+="";
                   			field_2 += "\n "+(customer_Invoice_Tax_Name.elementAt(i))+" Payable";
                   			field_2 +=" ("+tax_nos.elementAt(i)+""+((""+adj_no_tax.elementAt(i)).equals("")?"":" - ")+adj_no_tax.elementAt(i)+")";
                   			
         	   			}
                        if(tax_gst) {
                        	field_2+="\n Total GST Payable ("+pay+")\n\n Invoice Amount";
                        } else {
                        	field_2+="\n Total Tax Payable ("+pay+")\n\n Invoice Amount";
                        }
                        
                        
                        //field_2 =" Total Invoice Amount Payable\n\n Total Tax\n\n Invoice Amount (Rupees)";
                        field_3 = "";
//                        if(pdfinvadjustcur.equalsIgnoreCase("U") || pdfinvadjustcur.equalsIgnoreCase("2"))
//                        {
//                       		field_4 = "Rupees\n\nRupees\n\nRupees";
//                        }
//                        else
//                        {
                     	   //field_4 = "Rupees";
                        	field_4 ="";
                     	   for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
            	   				{
                     		   if(i==0)
                       				field_4+="";
                      			field_4 += "\nRupees";
            	   				}
                        	field_4 += "\nRupees\n\nRupees";
                        	
//                        }
                        field_5 = " \n\n ";
                  		field_6 = " \n\n ";
                  		field_7="";
                   		//field_7 = Pdftotal_invoice_payable_inr;
                   		for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
            	   			{
                   			if(i==0)
                    				field_7+="";
                   			field_7 += " \n"+total_compo_tax_payable.elementAt(i);
            	   			}
                   		field_7 += " \n"+Pdftotal_tax_payable+" \n\n"+customer_Invoice_Net_Amt_INR;
                   		BillingFieldsDetailsTable_total_pay1 = new PdfPTable(BillingFieldsDetailsWidths_total_payable);
                   		BillingFieldsDetailsTable_total_pay1.setWidthPercentage(100);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                   		BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                   		BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                       	BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
                        
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                        BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                        BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                        BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT|Rectangle.RIGHT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                        BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
               		
           			} else {

               			field_1 = "\n "+(++sr_no);
               			
        				field_2=" \n Invoice Amount";
        				
               			field_3=" \n ";
               			field_4 = "\nRupees";
               			field_5 = " \n ";
                  		field_6 = " \n ";
               			field_7 = " \n"+customer_Invoice_Net_Amt_INR;
                   		BillingFieldsDetailsTable_total_pay1 = new PdfPTable(BillingFieldsDetailsWidths_total_payable);
                   		BillingFieldsDetailsTable_total_pay1.setWidthPercentage(100);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                   		BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                   		BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                       	BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
                        
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                        BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                        BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                        BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT|Rectangle.RIGHT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                        BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
           			}
           		} else {
           			if(!(tax_adj_no.equals("") && sbc_adj_no.equals("") && kkc_adj_no.equals(""))) {

                        		field_1="";
                        		for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
             	   				{
                        			if(i==0)
                        				field_1+="\n";
                        			field_1 += "\n"+(++sr_no)+" ";
                        			if(customer_Invoice_Tax_Code.elementAt(i).equals("102")) { tax_payable=""+sr_no; } else if(customer_Invoice_Tax_Code.elementAt(i).equals("117")){ sbc_payable=""+sr_no; } else { kkc_payable=""+sr_no; }
             	   				}
                        		field_1 += " \n"+(++sr_no)+" \n\n"+(++sr_no);

                        /* if(!invoice_title.equalsIgnoreCase("CREDIT") ) //HS20160615
           				{
                     	   //if(!inv_advance_adj_flg.equalsIgnoreCase("AA")){
                     		   field_2 =" Total Invoice Amount Payable ("+no_total_inv+"-"+no_total_adj+")";
                     	   //}
           				}else{
           					 field_2 =" Total Amount Payable ("+no_total_inv+"-"+no_total_adj+")";
           				}*/
                        field_2="";
                        for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
         	   			{
                     	   if(i==0)
                   				field_2+="\n";
                   			field_2 += "\n "+(customer_Invoice_Tax_Name.elementAt(i))+" payable";
                   			if(customer_Invoice_Tax_Code.elementAt(i).equals("102")) { 
                   				field_2 +=" ("+total_ser_tax_no+""+(tax_adj_no.equals("")?"":" - "+tax_adj_no)+")";
                   			} else if(customer_Invoice_Tax_Code.elementAt(i).equals("117")){
                   				field_2 +=" ("+total_sbc_tax_no+""+(sbc_adj_no.equals("")?"":" - "+sbc_adj_no)+")";
                   			} else {
                   				field_2 +=" ("+total_kkc_tax_no+""+(kkc_adj_no.equals("")?"":" - "+kkc_adj_no)+")";
                   			}
         	   			}
                        //field_2+="\n Total Tax ("+no_total_tax+"-"+no_total_tax_adj+")\n\n Invoice Amount (Rupees)";
                        if(tax_gst ) 
            				{
                     	   field_2+="\n Total GST Payable ("+tax_payable+""+(sbc_payable.equals("")?"":" + "+sbc_payable)+""+(kkc_payable.equals("")?"":" + "+kkc_payable)+")\n\n Invoice Amount";
            				} else {
            					field_2+="\n Total Tax Payable ("+tax_payable+""+(sbc_payable.equals("")?"":" + "+sbc_payable)+""+(kkc_payable.equals("")?"":" + "+kkc_payable)+")\n\n Invoice Amount";
            				}
                        
                        //field_2 =" Total Invoice Amount Payable\n\n Total Tax\n\n Invoice Amount (Rupees)";
                        field_3 = "";
                        if(pdfinvadjustcur.equalsIgnoreCase("U") || pdfinvadjustcur.equalsIgnoreCase("2"))
                        {
                       		field_4 = "Rupees\n\nRupees\n\nRupees";
                        }
                        else
                        {
                     	   //field_4 = "Rupees";
                        	field_4 ="";
                     	   for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
            	   				{
                     		   if(i==0)
                       				field_4+="\n";
                      			field_4 += "\nRupees";
            	   				}
                        	field_4 += "\nRupees\n\nRupees";
                        	
                        }
                        field_5 = " \n\n ";
                  		field_6 = " \n\n ";
                  		field_7="";
                   		//field_7 = Pdftotal_invoice_payable_inr;
                   		for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
            	   			{
                   			if(i==0)
                    				field_7+="\n";
                   			if(customer_Invoice_Tax_Code.elementAt(i).toString().equalsIgnoreCase("102")) {
                      			field_7 += " \n"+pdftotal_adv_tax_payable;
                   			} else if(customer_Invoice_Tax_Code.elementAt(i).toString().equalsIgnoreCase("117")) {
                   				field_7 += " \n"+pdftotal_adv_sbc_payable;
                   			} else {
                   				field_7 += " \n"+pdftotal_adv_kkc_payable;
                   			}
            	   			}
                   		field_7 += " \n"+Pdftotal_tax_payable+" \n\n"+customer_Invoice_Net_Amt_INR;
                   		BillingFieldsDetailsTable_total_pay1 = new PdfPTable(BillingFieldsDetailsWidths_total_payable);
                   		BillingFieldsDetailsTable_total_pay1.setWidthPercentage(100);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                   		BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                   		BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                       	BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_3,small_black_bold).setAction(PdfAction.gotoRemotePage(invoice_att2_file_name,"Att2",false,true))));
                        
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                        BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                        BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                        BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT|Rectangle.RIGHT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                        BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
               		
           			} else {

               			field_1 = "\n "+(++sr_no);
               			
        				field_2=" \n Invoice Amount";
        				
               			field_3=" \n ";
               			field_4 = "\nRupees";
               			field_5 = " \n ";
                  		field_6 = " \n ";
               			field_7 = " \n"+customer_Invoice_Net_Amt_INR;
                   		BillingFieldsDetailsTable_total_pay1 = new PdfPTable(BillingFieldsDetailsWidths_total_payable);
                   		BillingFieldsDetailsTable_total_pay1.setWidthPercentage(100);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                   		BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                   		BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                   		BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                       	BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_3,small_black_bold).setAction(PdfAction.gotoRemotePage(invoice_att2_file_name,"Att2",false,true))));
                        
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                        BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                        BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                        BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setBorder(Rectangle.LEFT|Rectangle.RIGHT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                        BillingFieldsDetailsTable_total_pay1.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                        BillingFieldsDetailsTable_total_pay1.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
           			}
           		}
           	}
           }
           else
           {
           		field_1 = (++sr_no)+" \n\n"+(++sr_no)+" ";
   			
               int cnt = 0;
               for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   				{	
	               	if(i==0)
	               	{
	               		field_1 += "\n\n"+(++sr_no)+" ";
	               	}
	               	else
	               	{
	               		field_1 += "\n"+" ";
	               	}
	               	++cnt;
   				}
               if(cnt<1)
               {
               		field_1 += "\n\n"+(++sr_no)+" \n ";
               }
               else
               {
               		field_1 += "\n\n\n"+(++sr_no)+" \n ";
               }
               
               field_2 = " \n Exchange Rate\n\n Gross Amount (Rupees)";
   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{	
   				if(i==0)
               	{
   					field_2 += "\n\n "+customer_Invoice_Tax_Name.elementAt(i);
               	}
   				else
   				{
   					field_2 += "\n "+customer_Invoice_Tax_Name.elementAt(i);
   				}
   			}
   			if(cnt<1)
               {
   				 field_2 += "\n\n Invoice Amount\n ";
               }
   			else
   			{
   				if(tax_gst) 
				{
   					field_2 += "\n Total GST\n\n Invoice Amount\n ";
				}else{
					field_2 += "\n Total Tax\n\n Invoice Amount\n ";
				}
   				
   			}
   			if(!invoice_title.equalsIgnoreCase("CREDIT") ){
         	   field_3 = "Att 2\n\n \n\n ";
            }else{
         	   field_3 = "Att 1\n\n \n\n ";
            }
   			//field_3 = " \nAtt 2\n\n ";
   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{	
   				if(i==0)
               	{
   					field_3 += "\n\n ";
               	}
   				else
   				{
   					field_3 += "\n ";
   				}
   			}
   			if(cnt<1)
               {
   				field_3 += "\n\n \n ";
               }
   			else
   			{
   				field_3 += "\n\n\n \n ";
   			}
   			
   			field_4 = " \n \n\nRupees";
   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{	
   				if(i==0)
               	{
   					field_4 += "\n\nRupees";
               	}
   				else
   				{
   					field_4 += "\nRupees";
   				}
   			}
   			if(cnt<1)
               {
   				field_4 += "\n\nRupees\n ";
               }
   			else
   			{
   				field_4 += "\nRupees\n\nRupees\n ";
   			}
               
               field_5 = " \n \n\n"+total_Invoice_Qty+" ";
               for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{
               	if(i==0)
               	{
               		field_5 += " \n\n ";
               	}
               	else
               	{
               		field_5 += " \n ";
               	}
   			}
               if(cnt<1)
               {
               	field_5 += "\n\n \n ";
               }
               else
               {
               	field_5 += "\n\n\n \n ";
               }
               
               field_6 = " \n"+customer_Invoice_Exchg_Rate+" \n\n ";
               for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{
               	if(i==0)
               	{
               		field_6 += "\n\n"+customer_Invoice_Tax_Rate.elementAt(i)+" % ";
               	}
               	else
               	{
               		field_6 += "\n"+customer_Invoice_Tax_Rate.elementAt(i)+" % ";
               	}
   			}
               if(cnt<1)
               {
               	field_6 += "\n\n \n ";
               }
               else
               {
               	field_6 += "\n\n\n \n ";
               }
               
               field_7 = " \n \n\n"+customer_Invoice_Gross_Amt_INR+" ";
   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{
   				if(i==0)
               	{
   					field_7 += "\n\n"+customer_Invoice_Tax_Amt.elementAt(i)+" ";
               	}
   				else
   				{
   					field_7 += "\n"+customer_Invoice_Tax_Amt.elementAt(i)+" ";
   				}
   			}
   			if(cnt<1)
               {
   				field_7 += "\n\n"+customer_Invoice_Net_Amt_INR+" \n ";
               }
   			else
   			{
   				field_7 += "\n"+total_tax_amt+" \n\n"+customer_Invoice_Net_Amt_INR+" \n ";
   			}
               
   			
               BillingFieldsDetailsTable_2.setWidthPercentage(100);
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.LEFT);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.LEFT);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.LEFT);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               //BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_normal)));
               //BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_normal).setAction(new PdfAction(new URL(invoice_att3_file_name)))));
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.LEFT);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.LEFT);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.LEFT);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.LEFT|Rectangle.RIGHT);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
           }
            
            ///////////////////////////////////////////////////////////////////
          
                        
     
           float[] BillingFieldsDetailsWidths_3 = {0.06f, 0.44f, 0.10f, 0.10f, 0.10f, 0.08f, 0.12f};
            PdfPTable BillingFieldsDetailsTable_3 = new PdfPTable(BillingFieldsDetailsWidths_3);
            BillingFieldsDetailsTable_3.setWidthPercentage(100);
            BillingFieldsDetailsTable_3.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable_3.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_3.addCell(new Phrase(new Chunk(""+(++sr_no)+" ",small_black_bold)));
            BillingFieldsDetailsTable_3.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            BillingFieldsDetailsTable_3.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            if(invoice_title.equalsIgnoreCase("CREDIT") ) //HS20160615
			{
            	BillingFieldsDetailsTable_3.addCell(new Phrase(new Chunk(" Net Amount",small_black_bold)));
			}else{
				BillingFieldsDetailsTable_3.addCell(new Phrase(new Chunk(" Net Amount Payable",small_black_bold)));
			}
            
            BillingFieldsDetailsTable_3.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsDetailsTable_3.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_3.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            BillingFieldsDetailsTable_3.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsDetailsTable_3.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_3.addCell(new Phrase(new Chunk("Rupees",small_black_bold)));
            BillingFieldsDetailsTable_3.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable_3.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_3.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            BillingFieldsDetailsTable_3.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable_3.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_3.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            BillingFieldsDetailsTable_3.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable_3.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_3.addCell(new Phrase(new Chunk(customer_Invoice_Net_Amt_INR+" ",small_black_bold)));
            BillingFieldsDetailsTable_3.getDefaultCell().setPaddingBottom(-10f);
            /*float[] table4Widths = {0.20f, 0.15f, 0.15f, 0.15f, 0.35f};
			PdfPTable table4 = new PdfPTable(table4Widths);
			table4.setWidthPercentage(100);
			table4.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			table4.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			table4.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
			table4.addCell(new Phrase(new Chunk("Container #",black_bold).setUnderline(1f, -4f)));
			table4.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			table4.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			table4.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
			table4.addCell(new Phrase(new Chunk("Size",black_bold).setUnderline(1f, -4f)));
			table4.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			table4.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			table4.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
			table4.addCell(new Phrase(new Chunk("Weight",black_bold).setUnderline(1f, -4f)));
			table4.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			table4.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			table4.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
			table4.addCell(new Phrase(new Chunk("Packages",black_bold).setUnderline(1f, -4f)));
			table4.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			table4.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			table4.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
			table4.addCell(new Phrase(new Chunk("Product",black_bold).setUnderline(1f, -4f)));*/
            //System.out.println("-in ADV_PAY--contract_type-> "+contract_type);
            if(contract_type.trim().equalsIgnoreCase("R") || contract_type.trim().equalsIgnoreCase("T") || contract_type.trim().equalsIgnoreCase("C"))
            {
            	if(!remark_3.trim().equals(""))
            	{
            		if(!invoice_title.equalsIgnoreCase("CREDIT") )
            			remark_1 += "\n"+remark_3; //HS20160615  
            		else
            			remark_1 = remark_3;  //HS20160615 --please st.--
            	}
            }
      //      //System.out.println("-----INSIDE PRINTALL 4---");
            
			PdfPTable RemarkTable = new PdfPTable(1);
            RemarkTable.setWidthPercentage(100);
//            RemarkTable.getDefaultCell().setPaddingTop(-2f);
            RemarkTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            RemarkTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            RemarkTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            if(contract_type.trim().equalsIgnoreCase("S") && invoice_title.equalsIgnoreCase("CREDIT")){//HS20160616
            	//RemarkTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            }else{
            	RemarkTable.addCell(new Phrase(new Chunk(remark_1,small_black_normal)));
            }
            
            
            PdfPTable SNRemarkTable = new PdfPTable(1);
            SNRemarkTable.setWidthPercentage(100);
            SNRemarkTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            SNRemarkTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            SNRemarkTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            if(contract_type.trim().equalsIgnoreCase("S") && invoice_title.equalsIgnoreCase("CREDIT")){//HS20160616
            	//RemarkTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            }else{
            	SNRemarkTable.addCell(new Phrase(new Chunk(remark_2,small_black_normal)));
            }
            
            
            //NB20140909 
            ////System.out.println("REMARK----------------"+Invoice_adj_remark);
            PdfPTable ADJRemarkTable = new PdfPTable(1);
            ADJRemarkTable.setWidthPercentage(100);
            ADJRemarkTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            ADJRemarkTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            ADJRemarkTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            ADJRemarkTable.addCell(new Phrase(new Chunk("\n"+pdfinvadjremark,small_black_normal)));
            //
            
			
			PdfPTable SignatureInfoTable = new PdfPTable(1);
			SignatureInfoTable.setWidthPercentage(100);
			SignatureInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			SignatureInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
			SignatureInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
			SignatureInfoTable.addCell(new Phrase(new Chunk("For Hazira LNG Private Limited\n\n\nAuthorised Signatory",black_bold)));
			                       
            
			PdfPTable GenerationInfoTable = new PdfPTable(1);
            GenerationInfoTable.setWidthPercentage(100);
            GenerationInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            GenerationInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            GenerationInfoTable.addCell(new Phrase(new Chunk("FMS7",small_black_normal)));
            
            
            PdfPTable GenerationInfoTable2 = new PdfPTable(1);
            GenerationInfoTable2.setWidthPercentage(100);
            GenerationInfoTable2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            GenerationInfoTable2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            GenerationInfoTable2.addCell(new Phrase(new Chunk("This is computer generated INVOICE and hence does not require Authorised Signatory.",small_black_normal)));
            
            
			//Adding All Cells To PDF Document - One By One ...
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            //document.add(new Paragraph("              "));
            //document.add(new Paragraph("              "));
			document.add(InvoiceTitleTable);
			document.add(InvoiceDescTable);
			document.add(InvoiceDescTable2);
			//document.add(new Paragraph("              "));
			if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
			{
				document.add(InvoiceNoteTable);
			}
			else if(contract_type.trim().equalsIgnoreCase("R") || contract_type.trim().equalsIgnoreCase("T") || contract_type.trim().equalsIgnoreCase("C"))
			{
				document.add(InvoiceNoteTable);
			}
			
			document.add(new Paragraph("              "));
			document.add(contact_addr_table);                        
            document.add(GstCstInfoTable);            
//            document.add(new Paragraph("              "));
            document.add(InvoiceDateInfoTable);
            document.add(InvoiceDueDateInfoTable);
            document.add(InvoiceNOInfoTable);
            document.add(BillingPeriodInfoTable);
            document.add(new Paragraph("              "));
            document.add(BillingFieldsInfoTable);
            document.add(BillingFieldsDetailsTable);
            
            ////System.out.println("Tariff_flag-->  "+Tariff_flag+"advance_payment_flag-->"+advance_payment_flag+"cur"+pdfinvadjustcur);
            
            if(!Tariff_flag && (advance_payment_flag || TAX_ADV_ADJ_CODE_GST.size()>0))
            {
            	if(pdfinvadjustcur.startsWith("2")){
            		document.add(BillingFieldsDetailsTable_adv_usd);
            		//document.add(BillingFieldsDetailsTable_2);
            	}
            	//else
            	{
            		////System.out.println("*******************Tariff_flag-->  "+Tariff_flag+"advance_payment_flag-->"+advance_payment_flag);
            		document.add(BillingFieldsDetailsTable_exch);
            		//System.out.println("-inv_advance_adj_flg----> "+ inv_advance_adj_flg);
            		if(inv_advance_adj_flg.equalsIgnoreCase("AA")){
            			document.add(BillingFieldsDetailsTable_a);
            			document.add(BillingFieldsDetailsTable_total_pay);
            			document.add(BillingFieldsDetailsTable_woexch);
            		}else{
            			document.add(BillingFieldsDetailsTable_woexch);
            			document.add(BillingFieldsDetailsTable_a);
            		}
            		document.add(BillingFieldsDetailsTable_a_tax);
            		if(PdfSBC_ADV_ADJ_FLAG.equals("Y") && !PdfSBC_ADV_ADJ_AMT.equalsIgnoreCase("0.00")) {
            			document.add(BillingFieldsDetailsTable_sbc_tax);
            		}
            		if(PdfKKC_ADV_ADJ_FLAG.equals("Y") && !PdfKKC_ADV_ADJ_AMT.equalsIgnoreCase("0.00")) {
            			document.add(BillingFieldsDetailsTable_kkc_tax);
            		}
            		if(!inv_advance_adj_flg.equalsIgnoreCase("AA"))
            			document.add(BillingFieldsDetailsTable_total_pay);
            		else 
            			document.add(BillingFieldsDetailsTable_total_pay1);
            		
            	}
            }
            if(Tariff_flag && advance_payment_flag) {
            	//document.add(BillingFieldsDetailsTable_exch);
            	document.add(BillingFieldsDetailsTable_a);
            	document.add(BillingFieldsDetailsTable_woexch);
            }
            
            
            if(!Tariff_flag && !advance_payment_flag)
            {
            	document.add(BillingFieldsDetailsTable_2);
            }
          
            
            document.add(BillingFieldsDetailsTable_3);
            document.add(new Paragraph("              "));
            document.add(RemarkTable);
           // if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
			{
	            document.add(SNRemarkTable);
			}            
            if(advance_payment_flag){
           // document.add(ADJRemarkTable);
            }
            document.add(new Paragraph("  "));
            document.add(SignatureInfoTable);  
            //-----------------hshs20160614===========
            // ********* Following Coding is for Showing Attachment-1 Sheet on the Next (2nd Page) of the Same PDF Document *********** //
            document.setPageSize(pageSize1);
            document.newPage();
            
	            if(!invoice_title.equalsIgnoreCase("CREDIT") ){
	            very_small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 5, Font.NORMAL, new Color(0x00, 0x00, 0x00));
	            small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 8, Font.NORMAL, new Color(0x00, 0x00, 0x00));
	            Font small_black_normal_new = FontFactory.getFont(FontFactory.HELVETICA, 7, Font.NORMAL, new Color(0x00, 0x00, 0x00));
	            small_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 6, Font.BOLD, new Color(0x00, 0x00, 0x00));
	            Font small_black_bold2 = FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD, new Color(0x00, 0x00, 0x00));
	            Font small_black_bold2_new = FontFactory.getFont(FontFactory.HELVETICA, 7, Font.BOLD, new Color(0x00, 0x00, 0x00));
	            big_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, new Color(0x00, 0x00, 0x00));
	            black_bold = FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD, new Color(0x00, 0x00, 0x00));
	            
	            			  
				url_start = "http://"+server_nm+":"+server_port+context_nm;
			//	//System.out.println("this is the pic path  "+url_start+"\\images\\LOGO\\company_Logo.png");
							  
	            hlpl_logo.setBorder(Rectangle.NO_BORDER);
	            hlpl_logo.scaleAbsolute(75,75);
	            PdfPCell hlpl_logo_cell = new PdfPCell(hlpl_logo,false);
	            hlpl_logo_cell.setBorder(Rectangle.NO_BORDER);
				
	            
	            float[] hlpl_logo_Widths = {0.45f, 0.51f, 0.08f};
	            PdfPTable hlpl_logo_table = new PdfPTable(hlpl_logo_Widths);
	            hlpl_logo_table.setWidthPercentage(100);
	            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            hlpl_logo_table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            hlpl_logo_table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            hlpl_logo_table.addCell(hlpl_logo_cell);
	            
	            
				addr_supl = "Registered Office:";
	            
	            if(!contact_Suppl_Name.trim().equals(""))
	            {
	            	addr_supl += "\n"+contact_Suppl_Name;     	
	            }
	            if(!contact_Suppl_Person_Address.trim().equals(""))
	            {
	            	addr_supl += "\n"+contact_Suppl_Person_Address;     	
	            }
	            if(!contact_Suppl_Person_City.trim().equals(""))
	            {
	            	addr_supl += "\n"+contact_Suppl_Person_City;     	
	            }
	            if(!contact_Suppl_Person_Pin.trim().equals(""))
	            {
	            	addr_supl += " "+"-"+" "+contact_Suppl_Person_Pin;     	
	            }
				
				addr_customer = "";
	            
				if(contact_Person_Name_And_Designation.trim().equalsIgnoreCase(contact_Customer_Name.trim()))
				{
					if(!contact_Customer_Name.trim().equals(""))
		            {
		            	addr_customer += contact_Customer_Name;    	
		            }
				}
				else
				{
		            if(!contact_Person_Name_And_Designation.trim().equals(""))
		            {
		            	addr_customer += contact_Person_Name_And_Designation;     	
		            }
		            if(!contact_Customer_Name.trim().equals(""))
		            {
		            	addr_customer += "\n"+contact_Customer_Name;     	
		            }
				}
	            if(!contact_Customer_Person_Address.trim().equals(""))
	            {
	            	addr_customer += "\n"+contact_Customer_Person_Address;     	
	            }
	            if(!contact_Customer_Person_City.trim().equals(""))
	            {
	            	addr_customer += "\n"+contact_Customer_Person_City;     	
	            }
	            if(!contact_Customer_Person_Pin.trim().equals(""))
	            {
	            	addr_customer += " "+"-"+" "+contact_Customer_Person_Pin;     	
	            }
	                        
	                      
	            float[] ContactAddrWidths2 = {0.25f, 0.55f, 0.20f};
	            contact_addr_table = new PdfPTable(ContactAddrWidths2);
	            contact_addr_table.setWidthPercentage(100);
	            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            contact_addr_table.addCell(new Phrase(new Chunk(contact_Suppl_Name,black_bold)));
	            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            contact_addr_table.addCell(new Phrase(new Chunk(" ",black_bold)));
	            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            contact_addr_table.addCell(new Phrase(new Chunk("To:",black_bold)));
	            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            contact_addr_table.addCell(new Phrase(new Chunk(addr_supl,small_black_normal)));
	            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            contact_addr_table.addCell(new Phrase(new Chunk(" ",small_black_normal)));
	            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            contact_addr_table.addCell(new Phrase(new Chunk(addr_customer,small_black_normal)));
				            
	            String title_note = "ATTACHMENT 1 - "; 
	            if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
	            {
	            	title_note += "Properly ";
	            }
	            title_note += "Nominated Quantities";
	            
	            PdfPTable title_note_table = new PdfPTable(1);
	            title_note_table.setWidthPercentage(100);
	            title_note_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            title_note_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            title_note_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
	            title_note_table.addCell(new Phrase(new Chunk(title_note,big_black_bold)));
	            
	            
				inv_no_info = "";
				
				if(invoice_title.equalsIgnoreCase("CREDIT")){ //HS20160616
					inv_no_info = "HLPL Credit Note No:";
				}else{
					if(contract_type.equalsIgnoreCase("R"))
					{
						inv_no_info = "HLPL R-gas Invoice Seq No:";
					}
					else if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
					{
						if(date_flag) {
							inv_no_info = "HLPL Tax Invoice Seq No:";
						} else {
							inv_no_info = "HLPL LTCORA Invoice Seq No:";
						}
					}
					else
					{
						inv_no_info = "HLPL Invoice Seq No:";
					}
				}
	            
				float[] InvoiceDateInfoWidths2 = {0.70f, 0.20f, 0.10f};
	            InvoiceDateInfoTable = new PdfPTable(InvoiceDateInfoWidths2);
	            InvoiceDateInfoTable.setWidthPercentage(100);
	            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",black_bold)));
	            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            InvoiceDateInfoTable.addCell(new Phrase(new Chunk("Invoice Date:",black_bold)));
	            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
	            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_DT,small_black_normal)));
	            
	            float[] InvoiceDueDateInfoWidths2 = {0.70f, 0.20f, 0.10f};
	            InvoiceDueDateInfoTable = new PdfPTable(InvoiceDueDateInfoWidths2);
	            InvoiceDueDateInfoTable.setWidthPercentage(100);
	            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",black_bold)));
	            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(inv_due_dt_Header,black_bold))); //HS20160615
	            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
	            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Due_DT,small_black_normal)));
	            
	            invno = "";
	            if(!new_inv_seq_no.equals("")) {
	            	if(invoice_title.equalsIgnoreCase("CREDIT")){ //HS20160616
	            		invno = hlpl_drcr_docNo;
	            	}else{
	            		invno = new_inv_seq_no;
	            	}
	            } else {
		            if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
		        	{
		            	if(invoice_title.equalsIgnoreCase("CREDIT")){ //HS20160616
		            		invno = hlpl_drcr_docNo;
		            	}else{
			        		if(hlpl_inv_no.length()>13)
			        		{
			        			invno = hlpl_inv_no.substring(0,10)+""+hlpl_inv_no.substring(12);
			        		}
		            	}
		        	}
		        	else
		        	{
		        		if(hlpl_inv_no.length()>13)
		        		{
		        			invno = hlpl_inv_no.substring(0,5)+""+hlpl_inv_no.substring(7,10)+""+hlpl_inv_no.substring(12);
		        		}
		        	}
	            }
	            float[] InvoiceNOInfoWidths2 = {0.70f, 0.20f, 0.10f};
	            InvoiceNOInfoTable = new PdfPTable(InvoiceNOInfoWidths2);
	            InvoiceNOInfoTable.setWidthPercentage(100);
	            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",black_bold)));
	            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(inv_no_info,black_bold)));
	            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
	            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(invno,small_black_normal)));
	            float[] BillingPeriodInfoWidths3 = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
	            BillingPeriodInfoTable = new PdfPTable(BillingPeriodInfoWidths3);
	            BillingPeriodInfoTable.setWidthPercentage(100);
	            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            BillingPeriodInfoTable.addCell(new Phrase(new Chunk("For the Billing Period",small_black_bold)));
	            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Start_DT,small_black_normal)));
	            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            BillingPeriodInfoTable.addCell(new Phrase(new Chunk("to",small_black_bold)));
	            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_End_DT,small_black_normal)));
	            
	            if(liability_exist_flag.trim().equals("N"))
	            {
		            float[] BillingPeriodFieldsRE1Widths = {0.31f, 0.18f, 0.28f, 0.23f};
		            PdfPTable BillingPeriodFieldsRE1Table = new PdfPTable(BillingPeriodFieldsRE1Widths);
		            BillingPeriodFieldsRE1Table.setWidthPercentage(100);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Terminal Co. Nomination",small_black_bold)));
		            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            if(contract_type.equals("C")) {
		            	BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Natural Gas (Regasified)",small_black_bold)));
		            } else {
		            	BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Regasified Gas",small_black_bold)));
		            }
		            
		            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            if(contract_type.equals("C")) {
		            	BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Cumulative Natural Gas (Regasified) Quantities",small_black_bold)));           	
		            } else {
		            	BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Cumulative Regasified Quantities",small_black_bold)));
		            }            
		            
		            float[] BillingPeriodFieldsRE2Widths = {0.04f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
		            PdfPTable BillingPeriodFieldsRE2Table = new PdfPTable(BillingPeriodFieldsRE2Widths);
		            BillingPeriodFieldsRE2Table.setWidthPercentage(100);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Billing\nPeriod\nDay No.",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Date",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Contract\nSend Out\nCapacity",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Shipper\nNomination",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("NDQ",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("RE Gas",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("NDQ",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Re Gas",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Total Natural\nGas (Regasified)",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Billing\nPeriod",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Storage\nDuration",small_black_bold)));
		                        
		            
		            float[] BillingPeriodFieldsREWidths = {0.04f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
		            PdfPTable BillingPeriodFieldsRETable = new PdfPTable(BillingPeriodFieldsREWidths);
		            BillingPeriodFieldsRETable.setWidthPercentage(100);
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.LEFT);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.RIGHT);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            	            
		            
		            float[] BillingPeriodInfoREWidths = {0.04f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
		            PdfPTable BillingPeriodInfoRETable = new PdfPTable(BillingPeriodInfoREWidths);
		            BillingPeriodInfoRETable.setWidthPercentage(100);
		            
		            for(int i=0; i<invoice_Period_DCQ.size(); i++)
		        	{
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+(i+1)+" ",small_black_normal)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Dates.elementAt(i),small_black_normal)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_DCQ.elementAt(i),small_black_normal)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Nom_Qty.elementAt(i),small_black_normal)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_PNQ.elementAt(i),small_black_normal)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_RE_Qty.elementAt(i),small_black_normal)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_PNQ.elementAt(i),small_black_normal)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Re_Qty.elementAt(i),small_black_normal)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Total_Qty.elementAt(i),small_black_normal)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_Qty.elementAt(i),small_black_normal)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_SN_Qty.elementAt(i),small_black_normal)));
			        }
		            
		            
		            float[] BillingPeriodInfoRE2Widths = {0.13f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
		            PdfPTable BillingPeriodInfoRE2Table = new PdfPTable(BillingPeriodInfoRE2Widths);
		            BillingPeriodInfoRE2Table.setWidthPercentage(100);
		            
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk("TOTAL: ",small_black_bold2)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+DCQ_Total,small_black_bold2)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Buyer_Nom_Qty_Total,small_black_bold2)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_PNQ_Total,small_black_bold2)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_RE_Qty_Total,small_black_bold2)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_PNQ_Total,small_black_bold2)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_Re_Qty_Total,small_black_bold2)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Delivered_Total_Qty_Total,small_black_bold2)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2)));
		                                  
	            
		            float[] BillingPeriodFieldsSN1Widths = {0.31f, 0.18f, 0.28f, 0.23f};
		            PdfPTable BillingPeriodFieldsSN1Table = new PdfPTable(BillingPeriodFieldsSN1Widths);
		            BillingPeriodFieldsSN1Table.setWidthPercentage(100);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk("Seller Nomination",small_black_bold)));
		            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk("Natural Gas (Delivered)",small_black_bold)));
		            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk("Cumulative Quantities",small_black_bold)));
		            
		            
		            float[] BillingPeriodFieldsSN2Widths = {0.04f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
		            PdfPTable BillingPeriodFieldsSN2Table = new PdfPTable(BillingPeriodFieldsSN2Widths);
		            BillingPeriodFieldsSN2Table.setWidthPercentage(100);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Billing\nPeriod\nDay No.",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Date",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("DCQ",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Buyer\nNomination",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("PNQ",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("RE Gas",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("PNQ",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Re Gas",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Total\nDelivered\nGas",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Billing\nPeriod",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Transaction\nSupply\nPeriod",small_black_bold)));
		            	            
		            
		            float[] BillingPeriodFieldsSNWidths = {0.04f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
		            PdfPTable BillingPeriodFieldsSNTable = new PdfPTable(BillingPeriodFieldsSNWidths);
		            BillingPeriodFieldsSNTable.setWidthPercentage(100);
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.LEFT);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.RIGHT);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            	            
		            
		            float[] BillingPeriodInfoSNWidths = {0.04f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
		            PdfPTable BillingPeriodInfoSNTable = new PdfPTable(BillingPeriodInfoSNWidths);
		            BillingPeriodInfoSNTable.setWidthPercentage(100);
		            
		            for(int i=0; i<invoice_Period_DCQ.size(); i++)
		        	{
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+(i+1)+" ",small_black_normal)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Dates.elementAt(i),small_black_normal)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_DCQ.elementAt(i),small_black_normal)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Nom_Qty.elementAt(i),small_black_normal)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_PNQ.elementAt(i),small_black_normal)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_RE_Qty.elementAt(i),small_black_normal)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_PNQ.elementAt(i),small_black_normal)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Re_Qty.elementAt(i),small_black_normal)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Total_Qty.elementAt(i),small_black_normal)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("999555000.99",small_black_normal)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_Qty.elementAt(i),small_black_normal)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("999555000.99",small_black_normal)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_SN_Qty.elementAt(i),small_black_normal)));
			            //}
		        	}
		            
	//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.LEFT);
	//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
	//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.RIGHT);
	//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
	//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
	//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
	//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
	//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
	//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
	//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
	//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
	//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
	//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
		                        
		            
		            float[] BillingPeriodInfoSN2Widths = {0.13f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
		            PdfPTable BillingPeriodInfoSN2Table = new PdfPTable(BillingPeriodInfoSN2Widths);
		            BillingPeriodInfoSN2Table.setWidthPercentage(100);
		            
		            
		                       
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk("TOTAL: ",small_black_bold2)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+nf5.format(Double.parseDouble(DCQ_Total)),small_black_bold2)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Buyer_Nom_Qty_Total,small_black_bold2)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_PNQ_Total,small_black_bold2)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_RE_Qty_Total,small_black_bold2)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_PNQ_Total,small_black_bold2)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_Re_Qty_Total,small_black_bold2)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Delivered_Total_Qty_Total,small_black_bold2)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2)));
		                       
		                       
					//Adding All Cells To PDF Document - One By One ...
					//document.add(new Paragraph("              "));
					document.add(hlpl_logo_table);
					document.add(contact_addr_table);                        
		            document.add(new Paragraph("              "));
		            document.add(title_note_table);
		            document.add(new Paragraph("              "));
		            document.add(InvoiceDateInfoTable);
		            document.add(InvoiceDueDateInfoTable);
		            document.add(InvoiceNOInfoTable);
		            document.add(BillingPeriodInfoTable);
		            document.add(new Paragraph("              "));
		            
		            if(contract_type.trim().equalsIgnoreCase("R") || contract_type.trim().equalsIgnoreCase("T") ||contract_type.trim().equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
					{
		            	document.add(BillingPeriodFieldsRE1Table);
		            	document.add(BillingPeriodFieldsRE2Table);
		            	document.add(BillingPeriodFieldsRETable);
		            	document.add(BillingPeriodInfoRETable);
		                document.add(BillingPeriodInfoRE2Table);
		            }
		            else
		            {
		            	document.add(BillingPeriodFieldsSN1Table);
		            	document.add(BillingPeriodFieldsSN2Table);
		            	document.add(BillingPeriodFieldsSNTable);
		            	document.add(BillingPeriodInfoSNTable);
		                document.add(BillingPeriodInfoSN2Table);
		            }
	            }
	            else
	            {
		            float[] BillingPeriodFieldsRE1Widths = {0.22f, 0.12f, 0.18f, 0.16f, 0.06f, 0.21f, 0.09f};
		            PdfPTable BillingPeriodFieldsRE1Table = new PdfPTable(BillingPeriodFieldsRE1Widths);
		            BillingPeriodFieldsRE1Table.setWidthPercentage(100);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Terminal Co. Nomination",small_black_bold)));
		            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            	BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Natural Gas (Regasified)",small_black_bold)));
		            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            	BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Cumulative Natural Gas (Regasified) Quantities",small_black_bold)));
		            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Shortfall Quantities",small_black_bold)));
		            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            
		            float[] BillingPeriodFieldsRE2Widths = {0.04f, 0.06f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
		            PdfPTable BillingPeriodFieldsRE2Table = new PdfPTable(BillingPeriodFieldsRE2Widths);
		            BillingPeriodFieldsRE2Table.setWidthPercentage(100);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Billing\nPeriod\nDay No.",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Date",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Contract\nSend Out\nCapacity",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Shipper\nNomination",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("NDQ",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("RE Gas",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("NDQ",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Re Gas",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Total Natural\nGas (Regasified)",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Billing\nPeriod",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Storage\nDuration",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Gas tendered\nfor Delivery,\nnot delivered\ndue to\nReasons\nAttributable\nto Shipper",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Off-Spec\nGas\nrejected\nby\nShipper",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Gas\nnot\ndelivered\ndue to\nShipper's\nSuspension",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Failure\nto\nDeliver",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Total\nShortfall\nQuantities",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("LD\nCredit\nPayable",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Gas\nnot\ndelivered\ndue to\nFM",small_black_bold)));
		            
		            
		            float[] BillingPeriodFieldsREWidths = {0.04f, 0.06f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
		            PdfPTable BillingPeriodFieldsRETable = new PdfPTable(BillingPeriodFieldsREWidths);
		            BillingPeriodFieldsRETable.setWidthPercentage(100);
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.LEFT);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.RIGHT);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("Rupees",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            
		            float[] BillingPeriodInfoREWidths = {0.04f, 0.06f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
		            PdfPTable BillingPeriodInfoRETable = new PdfPTable(BillingPeriodInfoREWidths);
		            BillingPeriodInfoRETable.setWidthPercentage(100);
		            
		            for(int i=0; i<invoice_Period_DCQ.size(); i++)
		        	{
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+(i+1)+" ",small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Dates.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_DCQ.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Nom_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_PNQ.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_RE_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_PNQ.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Re_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Total_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_SN_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Shortfall_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Off_Spec_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Suspension_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Delv_Failure_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Total_Shortfall_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_LD_Credit_Payable.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_FM_Qty.elementAt(i),small_black_normal_new)));
		        	}
		             
		            float[] BillingPeriodInfoRE2Widths = {0.10f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
		            PdfPTable BillingPeriodInfoRE2Table = new PdfPTable(BillingPeriodInfoRE2Widths);
		            BillingPeriodInfoRE2Table.setWidthPercentage(100);
		            
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk("TOTAL: ",small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+DCQ_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Buyer_Nom_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_PNQ_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_RE_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_PNQ_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_Re_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Delivered_Total_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Buyer_Shortfall_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Buyer_Off_Spec_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Buyer_Suspension_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Delv_Failure_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Total_Shortfall_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+LD_Credit_Payable_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+FM_Qty_Total,small_black_bold2_new)));
	                      
	            
		            float[] BillingPeriodFieldsSN1Widths = {0.22f, 0.12f, 0.18f, 0.16f, 0.06f, 0.21f, 0.09f};
		            PdfPTable BillingPeriodFieldsSN1Table = new PdfPTable(BillingPeriodFieldsSN1Widths);
		            BillingPeriodFieldsSN1Table.setWidthPercentage(100);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk("Seller Nomination",small_black_bold)));
		            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk("Natural Gas (Delivered)",small_black_bold)));
		            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk("Cumulative Quantities",small_black_bold)));
		            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk("Shortfall Quantities",small_black_bold)));
		            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            
		            float[] BillingPeriodFieldsSN2Widths = {0.04f, 0.06f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
		            PdfPTable BillingPeriodFieldsSN2Table = new PdfPTable(BillingPeriodFieldsSN2Widths);
		            BillingPeriodFieldsSN2Table.setWidthPercentage(100);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Billing\nPeriod\nDay No.",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Date",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("DCQ",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Buyer\nNomination",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("PNQ",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("RE Gas",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("PNQ",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Re Gas",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Total\nDelivered\nGas",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Billing\nPeriod",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Transaction\nSupply\nPeriod",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Gas tendered\nfor Delivery,\nnot delivered\ndue to\nReasons\nAttributable\nto Buyer",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Off-Spec\nGas\nrejected\nby\nBuyer",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Gas\nnot\ndelivered\ndue to\nBuyer's\nSuspension",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Failure\nto\nDeliver",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Total\nShortfall\nQuantities",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("LD\nCredit\nPayable",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Gas\nnot\ndelivered\ndue to\nFM",small_black_bold)));
		            
		            
		            float[] BillingPeriodFieldsSNWidths = {0.04f, 0.06f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
		            PdfPTable BillingPeriodFieldsSNTable = new PdfPTable(BillingPeriodFieldsSNWidths);
		            BillingPeriodFieldsSNTable.setWidthPercentage(100);
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.LEFT);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.RIGHT);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("Rupees",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            
		            
		            float[] BillingPeriodInfoSNWidths = {0.04f, 0.06f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
		            PdfPTable BillingPeriodInfoSNTable = new PdfPTable(BillingPeriodInfoSNWidths);
		            BillingPeriodInfoSNTable.setWidthPercentage(100);
		            
		            for(int i=0; i<invoice_Period_DCQ.size(); i++)
		        	{
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+(i+1)+" ",small_black_normal_new)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Dates.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_DCQ.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal_new)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Nom_Qty.elementAt(i),small_black_normal_new)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal_new)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_PNQ.elementAt(i),small_black_normal_new)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal_new)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_RE_Qty.elementAt(i),small_black_normal_new)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal_new)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_PNQ.elementAt(i),small_black_normal_new)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal_new)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Re_Qty.elementAt(i),small_black_normal_new)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal_new)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Total_Qty.elementAt(i),small_black_normal_new)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("999555000.99",small_black_normal_new)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_Qty.elementAt(i),small_black_normal_new)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			           
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_SN_Qty.elementAt(i),small_black_normal_new)));
			            
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Shortfall_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Off_Spec_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Suspension_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Delv_Failure_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Total_Shortfall_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_LD_Credit_Payable.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_FM_Qty.elementAt(i),small_black_normal_new)));
		        	}
		            
		            float[] BillingPeriodInfoSN2Widths = {0.10f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
		            PdfPTable BillingPeriodInfoSN2Table = new PdfPTable(BillingPeriodInfoSN2Widths);
		            BillingPeriodInfoSN2Table.setWidthPercentage(100);
		            
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk("TOTAL: ",small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+nf5.format(Double.parseDouble(DCQ_Total)),small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Buyer_Nom_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_PNQ_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_RE_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_PNQ_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_Re_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Delivered_Total_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Buyer_Shortfall_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Buyer_Off_Spec_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Buyer_Suspension_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Delv_Failure_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Total_Shortfall_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+LD_Credit_Payable_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+FM_Qty_Total,small_black_bold2_new)));
		            
		                       
					//Adding All Cells To PDF Document - One By One ...
					//document.add(new Paragraph("              "));
					document.add(hlpl_logo_table);
					document.add(contact_addr_table);                        
		            //document.add(new Paragraph("              "));
		            document.add(title_note_table);
		            //document.add(new Paragraph("              "));
		            document.add(InvoiceDateInfoTable);
		            document.add(InvoiceDueDateInfoTable);
		            document.add(InvoiceNOInfoTable);
		            document.add(BillingPeriodInfoTable);
		            document.add(new Paragraph("              "));
		            
		            if(contract_type.trim().equalsIgnoreCase("R") || contract_type.trim().equalsIgnoreCase("T") ||contract_type.trim().equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
					{
		            	document.add(BillingPeriodFieldsRE1Table);
		            	document.add(BillingPeriodFieldsRE2Table);
		            	document.add(BillingPeriodFieldsRETable);
		            	document.add(BillingPeriodInfoRETable);
		                document.add(BillingPeriodInfoRE2Table);
		            }
		            else
		            {
		            	document.add(BillingPeriodFieldsSN1Table);
		            	document.add(BillingPeriodFieldsSN2Table);
		            	document.add(BillingPeriodFieldsSNTable);
		            	document.add(BillingPeriodInfoSNTable);
		                document.add(BillingPeriodInfoSN2Table);
		            }
	            }
	          }
            // ******* Following Coding is for Showing Attachment-2 Sheet on the 3rd Page of the Same PDF Document ******* //
            document.setPageSize(pageSize1);
            document.newPage();

            very_small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            small_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, new Color(0x00, 0x00, 0x00));
            black_bold = FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD, new Color(0x00, 0x00, 0x00));
            big_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 15, Font.BOLD, new Color(0x00, 0x00, 0x00));
            		  
			url_start = "http://"+server_nm+":"+server_port+context_nm;
			 
            hlpl_logo.setBorder(Rectangle.NO_BORDER);
            hlpl_logo.scaleAbsolute(75,75);
            PdfPCell hlpl_logo_cell = new PdfPCell(hlpl_logo,false);
            hlpl_logo_cell.setBorder(Rectangle.NO_BORDER);
            
			
            float[] hlpl_logo_Widths2 = {0.45f, 0.41f, 0.14f};
            PdfPTable hlpl_logo_table = new PdfPTable(hlpl_logo_Widths2);
            hlpl_logo_table.setWidthPercentage(100);
            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            hlpl_logo_table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            hlpl_logo_table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            hlpl_logo_table.addCell(hlpl_logo_cell);
            
            
			addr_supl = "Registered Office:";
            
            if(!contact_Suppl_Name.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Name;     	
            }
            if(!contact_Suppl_Person_Address.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Person_Address;     	
            }
            if(!contact_Suppl_Person_City.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Person_City;     	
            }
            if(!contact_Suppl_Person_Pin.trim().equals(""))
            {
            	addr_supl += " "+"-"+" "+contact_Suppl_Person_Pin;     	
            }
			
			addr_customer = "";
            
			if(contact_Person_Name_And_Designation.trim().equalsIgnoreCase(contact_Customer_Name.trim()))
			{
				if(!contact_Customer_Name.trim().equals(""))
	            {
	            	addr_customer += contact_Customer_Name;    	
	            }
			}
			else
			{
	            if(!contact_Person_Name_And_Designation.trim().equals(""))
	            {
	            	addr_customer += contact_Person_Name_And_Designation;     	
	            }
	            if(!contact_Customer_Name.trim().equals(""))
	            {
	            	addr_customer += "\n"+contact_Customer_Name;     	
	            }
			}
            if(!contact_Customer_Person_Address.trim().equals(""))
            {
            	addr_customer += "\n"+contact_Customer_Person_Address;     	
            }
            if(!contact_Customer_Person_City.trim().equals(""))
            {
            	addr_customer += "\n"+contact_Customer_Person_City;     	
            }
            if(!contact_Customer_Person_Pin.trim().equals(""))
            {
            	addr_customer += " "+"-"+" "+contact_Customer_Person_Pin;     	
            }
                        
                      
            float[] ContactAddrWidths3 = {0.45f, 0.21f, 0.34f};
            contact_addr_table = new PdfPTable(ContactAddrWidths3);
            contact_addr_table.setWidthPercentage(100);
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(contact_Suppl_Name,small_black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk("To:",small_black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(addr_supl,small_black_normal)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(addr_customer,small_black_normal)));
            String title_note ="";
            if(!invoice_title.equalsIgnoreCase("CREDIT") )
            	 title_note = "ATTACHMENT 2 - Exchange Rate Applicable";
            else
            	 title_note = "ATTACHMENT 1 - Exchange Rate Applicable";
            
            PdfPTable title_note_table = new PdfPTable(1);
            title_note_table.setWidthPercentage(100);
            title_note_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            title_note_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            title_note_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
            title_note_table.addCell(new Phrase(new Chunk(title_note,black_bold)));
                       
			
			inv_no_info = "";
			
			if(invoice_title.equalsIgnoreCase("CREDIT")){ //HS20160616
				inv_no_info = "HLPL Credit Note No:";
			}else{
				if(contract_type.equalsIgnoreCase("R"))
				{
					inv_no_info = "HLPL R-gas Invoice Seq No:";
				}
				else if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
				{
					if(date_flag) {
						inv_no_info = "HLPL Tax Invoice Seq No:";
					} else {
						inv_no_info = "HLPL LTCORA Invoice Seq No:";
					}
				}
				else
				{
					inv_no_info = "HLPL Invoice Seq No:";
				}
			}
            
			float[] InvoiceDateInfoWidths3 = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            InvoiceDateInfoTable = new PdfPTable(InvoiceDateInfoWidths3);
            InvoiceDateInfoTable.setWidthPercentage(100);
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            if(!invoice_title.equalsIgnoreCase("CREDIT") ){
            	InvoiceDateInfoTable.addCell(new Phrase(new Chunk("Invoice Date:",small_black_bold)));
                InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            } else{
            	InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
                InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            }
            
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_DT,small_black_normal)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            
            float[] InvoiceDueDateInfoWidths3 = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            InvoiceDueDateInfoTable = new PdfPTable(InvoiceDueDateInfoWidths3);
            InvoiceDueDateInfoTable.setWidthPercentage(100);
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(inv_due_dt_Header,small_black_bold))); //HS20160615
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Due_DT,small_black_normal)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            
            invno = "";
            if(!new_inv_seq_no.equals("")) {
            	if(invoice_title.equalsIgnoreCase("CREDIT")){ //HS20160616
            		invno = hlpl_drcr_docNo;
            	}else{
            		invno = new_inv_seq_no;
            	}
            } else {
	            if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
	        	{
	            	if(invoice_title.equalsIgnoreCase("CREDIT")){ //HS20160616
	            		invno = hlpl_drcr_docNo;
	            	}else{
		        		if(hlpl_inv_no.length()>13)
		        		{
		        			invno = hlpl_inv_no.substring(0,10)+""+hlpl_inv_no.substring(12);
		        		}
	            	}
	        	}
	        	else
	        	{
	        		if(hlpl_inv_no.length()>13)
	        		{
	        			invno = hlpl_inv_no.substring(0,5)+""+hlpl_inv_no.substring(7,10)+""+hlpl_inv_no.substring(12);
	        		}
	        		
	        	}
            }
            
            float[] InvoiceNOInfoWidths3 = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            InvoiceNOInfoTable = new PdfPTable(InvoiceNOInfoWidths3);
            InvoiceNOInfoTable.setWidthPercentage(100);
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(inv_no_info,small_black_bold)));
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(invno,small_black_normal)));
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
                        
            
            float[] BillingPeriodInfoWidths3 = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            BillingPeriodInfoTable = new PdfPTable(BillingPeriodInfoWidths3);
            BillingPeriodInfoTable.setWidthPercentage(100);
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk("For the Billing Period",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Start_DT,small_black_normal)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk("to",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_End_DT,small_black_normal)));
                        
            
            float[] ExchgRateDetailsWidths = {0.45f, 0.21f, 0.34f};
            PdfPTable ExchgRateDetailsTable = new PdfPTable(ExchgRateDetailsWidths);
            ExchgRateDetailsTable.setWidthPercentage(100);
            for(int i=0; i<customer_Invoice_Exchg_Rate_Code.size(); i++)
        	{
	            ExchgRateDetailsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            ExchgRateDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	            ExchgRateDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            ExchgRateDetailsTable.addCell(new Phrase(new Chunk(""+customer_Invoice_Exchg_Rate_Name.elementAt(i)+"... On "+customer_Invoice_Exchg_Rate_Date.elementAt(i)+" (INR/USD)",small_black_normal)));
	            ExchgRateDetailsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            ExchgRateDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            ExchgRateDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            ExchgRateDetailsTable.addCell(new Phrase(new Chunk(""+customer_Invoice_Exchg_Rate_Value.elementAt(i),small_black_normal)));
	            ExchgRateDetailsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            ExchgRateDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	            ExchgRateDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            ExchgRateDetailsTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
        	}
            
            
            float[] ExchgRateApplicableWidths = {0.45f, 0.21f, 0.34f};
            PdfPTable ExchgRateApplicableTable = new PdfPTable(ExchgRateApplicableWidths);
            ExchgRateApplicableTable.setWidthPercentage(100);
            ExchgRateApplicableTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            ExchgRateApplicableTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            ExchgRateApplicableTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            ExchgRateApplicableTable.addCell(new Phrase(new Chunk("Exchange Rate Applicable (INR/USD)",small_black_bold)));
            ExchgRateApplicableTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            ExchgRateApplicableTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            ExchgRateApplicableTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            ExchgRateApplicableTable.addCell(new Phrase(new Chunk(customer_Invoice_Exchg_Rate,small_black_bold)));
            ExchgRateApplicableTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            ExchgRateApplicableTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            ExchgRateApplicableTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            ExchgRateApplicableTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            
            
            PdfPTable BankSourceTable = new PdfPTable(1);
            BankSourceTable.setWidthPercentage(100);
            BankSourceTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BankSourceTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            BankSourceTable.addCell(new Phrase(new Chunk("Source:\n"+customer_Invoice_Bank_Name.elementAt(0),small_black_normal)));
            
            if(Tariff_flag)
            {
            	
            }
            else
            {
            //Adding All Cells To PDF Document - One By One ...
			document.add(new Paragraph("              "));
			document.add(hlpl_logo_table);
			document.add(contact_addr_table);                        
            document.add(new Paragraph("              "));
            document.add(title_note_table);
            document.add(new Paragraph("              "));
            document.add(InvoiceDateInfoTable);
            document.add(InvoiceDueDateInfoTable);
            document.add(InvoiceNOInfoTable);
            document.add(BillingPeriodInfoTable);
            document.add(new Paragraph("              "));
            document.add(ExchgRateDetailsTable);
            document.add(new Paragraph("              "));
            document.add(ExchgRateApplicableTable);
            document.add(new Paragraph("              "));
            document.add(BankSourceTable);
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            }
            
            
//          ******* Following Coding is for Showing Attachment-3 Sheet on the 3rd Page of the Same PDF Document ******* //
            document.setPageSize(pageSize1);
            document.newPage();
//            //System.out.println("-HS-----Advpay--"+payment_type);
            very_small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            small_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, new Color(0x00, 0x00, 0x00));
            black_bold = FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD, new Color(0x00, 0x00, 0x00));
            big_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 15, Font.BOLD, new Color(0x00, 0x00, 0x00));
            
           
            url_start = "http://"+server_nm+":"+server_port+context_nm;
			 
            hlpl_logo.setBorder(Rectangle.NO_BORDER);
            hlpl_logo.scaleAbsolute(75,75);
             hlpl_logo_cell = new PdfPCell(hlpl_logo,false);
            hlpl_logo_cell.setBorder(Rectangle.NO_BORDER);
            
           PdfPTable CumulativeAdjustmentsTable = new PdfPTable(3);
           float[]  hlpl_logo_Widths21 = {0.45f, 0.41f, 0.14f};
            hlpl_logo_table = new PdfPTable(hlpl_logo_Widths21);
            hlpl_logo_table.setWidthPercentage(100);
            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            hlpl_logo_table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            hlpl_logo_table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            hlpl_logo_table.addCell(hlpl_logo_cell);
            
            addr_supl = "Registered Office:";
            
            if(!contact_Suppl_Name.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Name;     	
            }
            if(!contact_Suppl_Person_Address.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Person_Address;     	
            }
            if(!contact_Suppl_Person_City.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Person_City;     	
            }
            if(!contact_Suppl_Person_Pin.trim().equals(""))
            {
            	addr_supl += " "+"-"+" "+contact_Suppl_Person_Pin;     	
            }
			
			addr_customer = "";
            
			if(contact_Person_Name_And_Designation.trim().equalsIgnoreCase(contact_Customer_Name.trim()))
			{
				if(!contact_Customer_Name.trim().equals(""))
	            {
	            	addr_customer += contact_Customer_Name;    	
	            }
			}
			else
			{
	            if(!contact_Person_Name_And_Designation.trim().equals(""))
	            {
	            	addr_customer += contact_Person_Name_And_Designation;     	
	            }
	            if(!contact_Customer_Name.trim().equals(""))
	            {
	            	addr_customer += "\n"+contact_Customer_Name;     	
	            }
			}
            if(!contact_Customer_Person_Address.trim().equals(""))
            {
            	addr_customer += "\n"+contact_Customer_Person_Address;     	
            }
            if(!contact_Customer_Person_City.trim().equals(""))
            {
            	addr_customer += "\n"+contact_Customer_Person_City;     	
            }
            if(!contact_Customer_Person_Pin.trim().equals(""))
            {
            	addr_customer += " "+"-"+" "+contact_Customer_Person_Pin;     	
            }
                        
                      
            float[] ContactAddrWidthsa = {0.45f, 0.21f, 0.34f};
            contact_addr_table = new PdfPTable(ContactAddrWidthsa);
            contact_addr_table.setWidthPercentage(100);
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(contact_Suppl_Name,small_black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk("To:",small_black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(addr_supl,small_black_normal)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(addr_customer,small_black_normal)));
			
            invno = "";
            if(!new_inv_seq_no.equals("")) {
            	if(invoice_title.equalsIgnoreCase("CREDIT")){ //HS20160616
            		invno = hlpl_drcr_docNo;
            	}else{
            		invno = new_inv_seq_no;
            	}
            } else {
	            if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
	        	{
	            	if(invoice_title.equalsIgnoreCase("CREDIT")){ //HS20160616
	            		invno = hlpl_drcr_docNo;
	            	}else{
		        		if(hlpl_inv_no.length()>13)
		        		{
		        			invno = hlpl_inv_no.substring(0,10)+""+hlpl_inv_no.substring(12);
		        		}
	            	}
	        	}
	        	else
	        	{
	        		if(hlpl_inv_no.length()>13)
	        		{
	        			invno = hlpl_inv_no.substring(0,5)+""+hlpl_inv_no.substring(7,10)+""+hlpl_inv_no.substring(12);
	        		}
	        		
	        	}
            }
            
            
            if(invoice_advance_inv_no.trim().equalsIgnoreCase(""))
    		{
            	invoice_advance_inv_no=invno;
    		}
    		else
    		{
    			//invno=invoice_advance_inv_no;
    		}
            if(!invoice_title.equalsIgnoreCase("CREDIT") ){
	            if(Tariff_flag)
	            {
	            	title_note = "ATTACHMENT 2 - Reconciliation of";
	            		if(payment_type.equalsIgnoreCase("AP")){
	            			title_note += " Advance Amount Paid under";
	            		}else{
	            			title_note += " Special Payment Received against";
	            		}
	            		title_note+=" Receipt Voucher No. "+invoice_advance_inv_no;
	            }
	            else
	            {
	            	title_note = "ATTACHMENT 3 - Reconciliation of";
		            	if(payment_type.equalsIgnoreCase("AP")){
	            			title_note += " Advance Amount Paid under";
	            		}else{
	            			title_note += " Special Payment Received against";
	            		}
	            		title_note+=" Receipt Voucher No. "+invoice_advance_inv_no;
	            }
            }else{
            	if(Tariff_flag)
	            {
	            	title_note = "ATTACHMENT 1 - Reconciliation of";
		            	if(payment_type.equalsIgnoreCase("AP")){
	            			title_note += " Advance Amount Paid under";
	            		}else{
	            			title_note += " Special Payment Received against";
	            		}
	            		title_note+=" Receipt Voucher No. "+invoice_advance_inv_no;
	            }
	            else
	            {
	            	title_note = "ATTACHMENT 2 - Reconciliation of";
		            	if(payment_type.equalsIgnoreCase("AP")){
	            			title_note += " Advance Amount Paid under";
	            		}else{
	            			title_note += " Special Payment Received against";
	            		}
	            		title_note+=" Receipt Voucher No. "+invoice_advance_inv_no;
	            }
            }
            
            title_note_table = new PdfPTable(1);
            title_note_table.setWidthPercentage(100);
            title_note_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            title_note_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            title_note_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
            title_note_table.addCell(new Phrase(new Chunk(title_note,black_bold)));
            
            inv_no_info = "";
			
            if(invoice_title.equalsIgnoreCase("CREDIT")){ //HS20160616
				inv_no_info = "HLPL Credit Note No:";
			}else{
				if(contract_type.equalsIgnoreCase("R"))
				{
					inv_no_info = "HLPL R-gas Invoice Seq No:";
				}
				else if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
				{
					if(date_flag) {
						inv_no_info = "HLPL Tax Invoice Seq No:";
					} else {
						inv_no_info = "HLPL LTCORA Invoice Seq No:";
					}
				}
				else
				{
					inv_no_info = "HLPL Invoice Seq No:";
				}
			}
            
			 invno = "";
			 if(!new_inv_seq_no.equals("")) {
				 if(invoice_title.equalsIgnoreCase("CREDIT")){ //HS20160616
	            		invno = hlpl_drcr_docNo;
	            	}else{
	            		invno = new_inv_seq_no;
	            	}
			 } else {
				 if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
		        	{
					  if(invoice_title.equalsIgnoreCase("CREDIT")){ //HS20160616
		            		invno = hlpl_drcr_docNo;
		            	}else{
			        		if(hlpl_inv_no.length()>13)
			        		{
			        			invno = hlpl_inv_no.substring(0,10)+""+hlpl_inv_no.substring(12);
			        		}
		            	}
		        	}
		        	else
		        	{
		        		if(hlpl_inv_no.length()>13)
		        		{
		        			invno = hlpl_inv_no.substring(0,5)+""+hlpl_inv_no.substring(7,10)+""+hlpl_inv_no.substring(12);
		        		}
		        		
		        	}
			 }
			  
			  
			  
	            
	        float[] InvoiceNOInfoWidthsa = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
	        InvoiceNOInfoTable = new PdfPTable(InvoiceNOInfoWidthsa);
	        InvoiceNOInfoTable.setWidthPercentage(100);
	        InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	        InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	        InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	        InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	        InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	        InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	        InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	        InvoiceNOInfoTable.addCell(new Phrase(new Chunk(inv_no_info,small_black_bold)));
	        InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
	        InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	        InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	        InvoiceNOInfoTable.addCell(new Phrase(new Chunk(invno,small_black_normal)));
	        InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	        InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	        InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	        InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
	        InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	        InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	        InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	        InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            
	        float[] InvoiceDateInfoWidthsa = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            InvoiceDateInfoTable = new PdfPTable(InvoiceDateInfoWidthsa);
            InvoiceDateInfoTable.setWidthPercentage(100);
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            if(!invoice_title.equalsIgnoreCase("CREDIT")){
            	InvoiceDateInfoTable.addCell(new Phrase(new Chunk("Invoice Date:",small_black_bold)));
            	InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            }else{
            	InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
                InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            }
            
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_DT,small_black_normal)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
           
	        
            float[] InvoiceDueDateInfoWidthsa = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            InvoiceDueDateInfoTable = new PdfPTable(InvoiceDueDateInfoWidthsa);
            InvoiceDueDateInfoTable.setWidthPercentage(100);
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(inv_due_dt_Header,small_black_bold))); //HS20160615
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Due_DT,small_black_normal)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            
            float[] BillingPeriodInfoWidthsa = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            BillingPeriodInfoTable = new PdfPTable(BillingPeriodInfoWidthsa);
            BillingPeriodInfoTable.setWidthPercentage(100);
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk("For the Billing Period",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Start_DT,small_black_normal)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk("to",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_End_DT,small_black_normal)));
            
            float[] AdvanceAmountPaid = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            PdfPTable AdvanceAmountPaidTable = new PdfPTable(5);
            AdvanceAmountPaidTable.setWidthPercentage(100);
            
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(5);
            if(payment_type.equalsIgnoreCase("AP")){
            	 AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Reconciliation of Advance Amount",small_black_bold)));
    		}else{
    			 AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Reconciliation of Special Payment Amount",small_black_bold)));
    		}
            
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            if(payment_type.equalsIgnoreCase("AP")){
            	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Advance Description",small_black_normal)));
	   		}else{
	   			AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Special Payment Description",small_black_normal)));
	   		}
            
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            if(payment_type.equalsIgnoreCase("AP")){
            	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Total Advance Received",small_black_normal)));
            }else{
            	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Total Special Payment Received",small_black_normal)));
            }
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Balance Amount After Adjustment Till Last Billing Period",small_black_normal)));
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Outstanding Balance Available For Adjustment in Next Billing Period",small_black_normal)));
           
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Currency",small_black_normal)));
            
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            if(payment_type.equalsIgnoreCase("AP")){
            	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Gross Amount Advance",small_black_normal)));
            }else{
            	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Gross Amount of Special Payment",small_black_normal))); //HS
            }
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(pdfFinal_Total_Collection,small_black_normal)));
            
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(balanceason,small_black_normal)));
           
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
         //   //System.out.println("Invoice_Adj_bal"+Invoice_Adj_bal.size());
            if(advance_payment_flag && Invoice_Adj_bal.size()>=1){
            	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+Invoice_Adj_bal.elementAt(Invoice_Adj_bal.size()-1),small_black_normal)));
            }else{
            	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+balanceason,small_black_normal)));
            }
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(pdfFinal_Total_Currency,small_black_normal)));
           
            if(!date_flag) {
            if(!inv_advance_adj_flg.equalsIgnoreCase("AA")){
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            if(payment_type.equalsIgnoreCase("AP")){
            	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Service Tax Advance",small_black_normal)));
            }else{
            	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Service Tax On Special Payment",small_black_normal)));
            }
                        
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(PdfFinal_Total_Collection_tax,small_black_normal)));
            
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(balanceason_tax,small_black_normal)));
           
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            if(advance_payment_flag && Invoice_Adj_bal_tax.size()>=1){
            	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+Invoice_Adj_bal_tax.elementAt(Invoice_Adj_bal_tax.size()-1),small_black_normal)));
            }else{
           	 	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+balanceason_tax,small_black_normal)));
            }
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(PdfFinal_Total_Currency_tax,small_black_normal)));
            }
            
            //---SBC---//
            if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C")) {
            	if(!inv_advance_adj_flg.equalsIgnoreCase("AA")){
	            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
	            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
	            if(payment_type.equalsIgnoreCase("AP")){
	            	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Swachh Bharat Cess Advance",small_black_normal)));
	            }else{
	            	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Swachh Bharat Cess On Special Payment",small_black_normal)));
	            }
	            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
	            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
	            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(PdfFinal_Total_Collection_SBC,small_black_normal)));
	            
	            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
	            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
	            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(balanceason_SBC,small_black_normal)));
	           
	            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
	            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
	            if(advance_payment_flag && Invoice_Adj_bal_SBC.size()>=1){
	            	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+Invoice_Adj_bal_SBC.elementAt(Invoice_Adj_bal_SBC.size()-1),small_black_normal)));
	            }else{
	           	 	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+balanceason_SBC,small_black_normal)));
	            }
	            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
	            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
	            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(PdfFinal_Total_Currency_SBC,small_black_normal)));
            }}
            //---SBC---//
            
//          ---KKC---//
            if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C")) {
            	if(!inv_advance_adj_flg.equalsIgnoreCase("AA")){
	            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
	            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
	            if(payment_type.equalsIgnoreCase("AP")){
	            	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Krishi Kalyan Cess Advance",small_black_normal)));
	            }else{
	            	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Krishi Kalyan Cess On Special Payment",small_black_normal)));
	            }
	                        
	            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
	            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
	            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(PdfFinal_Total_Collection_KKC,small_black_normal)));
	            
	            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
	            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
	            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(balanceason_KKC,small_black_normal)));
	           
	            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
	            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
	            if(advance_payment_flag && Invoice_Adj_bal_KKC.size()>=1){
	            	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+Invoice_Adj_bal_KKC.elementAt(Invoice_Adj_bal_KKC.size()-1),small_black_normal)));
	            }else{
	           	 	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+balanceason_KKC,small_black_normal)));
	            }
	            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
	            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
	            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(PdfFinal_Total_Currency_KKC,small_black_normal)));
            }
            }
            } else {
            	for(int i=0;i<compo_cd.size();i++) {
	            	if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C")) {
	                	if(!inv_advance_adj_flg.equalsIgnoreCase("AA") || TAX_ADV_ADJ_CODE_GST.size()>0){
	    	            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
	    	            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	    	            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	    	            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
	    	            if(payment_type.equalsIgnoreCase("AP")){
	    	            	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+compo_abbr.elementAt(i)+" Advance",small_black_normal)));
	    	            }else{
	    	            	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+compo_abbr.elementAt(i)+" On Special Payment",small_black_normal)));
	    	            }
	    	                        
	    	            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
	    	            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	    	            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	    	            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
	    	            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+TAX_TOTAL_COLLECTION.get(compo_cd.elementAt(i)),small_black_normal)));
	    	            
	    	            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
	    	            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	    	            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	    	            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
	    	            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+TAX_BALANCE_ASON.get(compo_cd.elementAt(i)),small_black_normal)));
	    	           
	    	            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
	    	            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	    	            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	    	            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
	    	            String val = ""+TAX_ADJ_BAL.get(compo_cd.elementAt(i)+":"+TAX_INVOICE_NO.get(compo_cd.elementAt(i)));
						if(val=="null" || val==null || val.equals("null") || val.equals(null))
							val = "0.00";
	    	            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+val,small_black_normal)));
	    	            
	    	            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
	    	            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	    	            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	    	            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
	    	            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+TAX_TOTAL_CURRENCY.get(compo_cd.elementAt(i)),small_black_normal)));
	                }
            	}
            	
            }}
            //---KKC---//
            String inv_pay_modes="";
            if(payment_type.equalsIgnoreCase("AP")){ //HS20160726
        		inv_pay_modes="Advance";
        	}else{
        		inv_pay_modes="Special Payment";
        	}
            
            String item1="";
            String item2="";
            if(contract_type.equalsIgnoreCase("R"))
			{
            	item1="Cumulative Adjustments against Regas Invoices";
            	item2="Advance Adjusted against Regas Charges";
			}
            else if(contract_type.equalsIgnoreCase("T"))
			{
            	item1="Cumulative Adjustments against LTCORA Invoices";
            	item2="Advance Adjusted against LTCORA Charges";
			}
            else if(contract_type.equalsIgnoreCase("C"))
			{
            	item1="Cumulative Adjustments against LTCORA Invoices";
            	item2=inv_pay_modes +" Adjusted against LTCORA Charges";
			}
			else
			{
				item1="Cumulative Adjustments against Invoices";
				item2="Advance Adjusted against Charges";
			}
            
            //float[] CumulativeAdjustments = { 0.08f, 0.45f, 0.35f, 0.20f,0.20f,0.20f};
            
            if(inv_advance_adj_flg.equalsIgnoreCase("AA")){
            	float[] CumulativeAdjustments = { 0.08f, 0.45f, 0.35f};
            	CumulativeAdjustmentsTable = new PdfPTable(CumulativeAdjustments);
            } else if(!date_flag) {
            	float[] CumulativeAdjustments = { 0.08f, 0.45f, 0.35f, 0.20f,0.20f,0.20f};
            	CumulativeAdjustmentsTable = new PdfPTable(CumulativeAdjustments);
            } else if(date_flag) {
//            	float[compo_cd.size()+3] CumulativeAdjustments = { 0.08f, 0.45f, 0.35f, 0.20f,0.20f,0.20f};
            	CumulativeAdjustmentsTable = new PdfPTable(3+compo_cd.size());
            } else {
            	float[] CumulativeAdjustments = { 0.08f, 0.45f, 0.35f, 0.20f,0.20f,0.20f};
            	CumulativeAdjustmentsTable = new PdfPTable(CumulativeAdjustments);
            }
            //CumulativeAdjustmentsTable = new PdfPTable(CumulativeAdjustments);
            CumulativeAdjustmentsTable.setWidthPercentage(100);
            CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
            CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            if(!inv_advance_adj_flg.equalsIgnoreCase("AA")){
            	if(date_flag) {
            		CumulativeAdjustmentsTable.getDefaultCell().setColspan(3+compo_cd.size());
            	} else {
            		CumulativeAdjustmentsTable.getDefaultCell().setColspan(6);
            	}
            } else {
            	CumulativeAdjustmentsTable.getDefaultCell().setColspan(3);
            }
            CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(item1,small_black_bold)));
            
            CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
            CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
            CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("Sr No.",small_black_normal)));
            
            CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
            CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
            CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("Invoice Details",small_black_normal)));
            
            CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
            CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
            CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(item2+" ("+pdfFinal_Total_Currency+")",small_black_normal)));
            if(!date_flag) {
	            if(!inv_advance_adj_flg.equalsIgnoreCase("AA")){
	            CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
	            CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
	            CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(inv_pay_modes + " Adjusted against Service Tax ("+PdfFinal_Total_Currency_tax+")",small_black_normal)));
	            }
	            if(contract_type.equalsIgnoreCase("C") || contract_type.equalsIgnoreCase("T")) {
	            	if(!inv_advance_adj_flg.equalsIgnoreCase("AA")){
		            CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
		            CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
		            CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
		            CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(inv_pay_modes + " Adjusted against Swachh Bharat Cess ("+PdfFinal_Total_Currency_SBC+")",small_black_normal)));
	            	}
	            }
	            if(contract_type.equalsIgnoreCase("C") || contract_type.equalsIgnoreCase("T")) {
	            	if(!inv_advance_adj_flg.equalsIgnoreCase("AA")){
		            CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
		            CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
		            CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
		            CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(inv_pay_modes + " Adjusted against Krishi Kalyan Cess ("+PdfFinal_Total_Currency_KKC+")",small_black_normal)));
	            	}
	            }
            } else {
            	if(contract_type.equalsIgnoreCase("C") || contract_type.equalsIgnoreCase("T")) {
	            	if(!inv_advance_adj_flg.equalsIgnoreCase("AA") || TAX_ADV_ADJ_CODE_GST.size()>0){
	            		for(int k=0;k<compo_cd.size();k++) {
	            	
				            CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
				            CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				            CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
				            CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
				            CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(inv_pay_modes + " Adjusted against "+compo_abbr.elementAt(k)+" ("+TAX_TOTAL_CURRENCY.get(compo_cd.elementAt(k))+")",small_black_normal)));
	            		}
	            	}
	            }
            }
            
            double total=0,total_tax=0,total_SBC=0,total_KKC=0;
            Map total_tax_amt = new HashMap();
            
          //  //System.out.println("Invoice_no"+Invoice_no.size());
            
            if(Invoice_no.size()>0 || TAX_INVOICE_NO.size()>0) {
            	if(!date_flag) {
            
        		for(int i=0;i<Invoice_no.size();i++) { 
        			
        			try
        			{
        				total+=NumberFormat.getInstance().parse(""+Invoice_adj_amt.elementAt(i)).doubleValue();
//        				total_tax+=NumberFormat.getInstance().parse(""+Invoice_adj_amt_tax.elementAt(i)).doubleValue(); //RS24042017
//        				total_SBC+=NumberFormat.getInstance().parse(Invoice_adj_amt_SBC.size()>i?Invoice_adj_amt_SBC.elementAt(i).toString():"0.00").doubleValue();
//        				total_KKC+=NumberFormat.getInstance().parse(Invoice_adj_amt_KKC.size()>i?Invoice_adj_amt_KKC.elementAt(i).toString():"0.00").doubleValue();
//        				
        				if(Invoice_adj_amt_tax.size()>i) {
        					total_tax+=NumberFormat.getInstance().parse(""+Invoice_adj_amt_tax.elementAt(i)).doubleValue();
        				} else {
        					total_tax+=0;
        				}
        				if(Invoice_adj_amt_SBC.size()>i) {
        					total_SBC+=NumberFormat.getInstance().parse(Invoice_adj_amt_SBC.elementAt(i).toString()).doubleValue();	
        				} else {
        					total_SBC+=0;
        				}
        				if(Invoice_adj_amt_KKC.size()>i) {
        					total_KKC+=NumberFormat.getInstance().parse(Invoice_adj_amt_KKC.elementAt(i).toString()).doubleValue();	
        				} else {
        					total_KKC+=0;
        				}
        			}
        			catch(Exception e)
        			{
        				e.printStackTrace();
        			}
        			
        			int item=i+1;
        			
        			CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                    CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                    CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                    CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                    CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(item+"",small_black_normal)));
        			
                    CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                    CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                    CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                    CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                    CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(Invoice_no.elementAt(i)+" dated "+Invoice_dt.elementAt(i),small_black_normal)));
        			
                    CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                    CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                    CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                    CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                    CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(Invoice_adj_amt.elementAt(i).toString(),small_black_normal)));
                    if(!inv_advance_adj_flg.equalsIgnoreCase("AA")){
                    CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                    CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                    CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                    CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                    CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(Invoice_adj_amt_tax.size()>i?Invoice_adj_amt_tax.elementAt(i).toString():"0.00",small_black_normal)));
                    }
                    if(contract_type.equalsIgnoreCase("C") || contract_type.equalsIgnoreCase("T")) {
                    	if(!inv_advance_adj_flg.equalsIgnoreCase("AA")){
	                    CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
	                    CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	                    CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	                    CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
	                    CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(Invoice_adj_amt_SBC.size()>i?Invoice_adj_amt_SBC.elementAt(i).toString():"0.00",small_black_normal)));
                    	}
                    }
                    if(contract_type.equalsIgnoreCase("C") || contract_type.equalsIgnoreCase("T")) {
                    	if(!inv_advance_adj_flg.equalsIgnoreCase("AA")){
	                    CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
	                    CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	                    CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	                    CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
	                    CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(Invoice_adj_amt_KKC.size()>i?Invoice_adj_amt_KKC.elementAt(i).toString():"0.00",small_black_normal)));
                    	}
                    }
                    
        	} } else {
        		for(int i=0;i<Invoice_no.size();i++) {
        			total+=NumberFormat.getInstance().parse(""+Invoice_adj_amt.elementAt(i)).doubleValue();
        			
        			int item=i+1;
        			
        			CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                    CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                    CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                    CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                    CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(item+"",small_black_normal)));
        			
                    CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                    CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                    CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                    CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                    CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(Invoice_no.elementAt(i)+" dated "+Invoice_dt.elementAt(i),small_black_normal)));
        			
                    CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                    CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                    CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                    CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                    CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(Invoice_adj_amt.elementAt(i).toString(),small_black_normal)));
                    
                    for(int k=0;k<compo_cd.size();k++) { 
			    	if(!inv_advance_adj_flg.equalsIgnoreCase("AA") || TAX_ADV_ADJ_CODE_GST.size()>0) {
			    		String invoice_no = ""+TAX_INVOICE_NO.get(compo_cd.elementAt(k));
			    		String i_value = ""+TAX_ADJ_AMT.get(compo_cd.elementAt(k)+":"+Invoice_no.elementAt(i));
			    		if(i_value=="null" || i_value==null || i_value.equals("null") || i_value.equals(null)) {
			    			i_value = "0";
			    		} else {
			    			i_value = ""+NumberFormat.getInstance().parse(i_value);
			    		}
			    		String i_map = ""+total_tax_amt.get(compo_cd.elementAt(k));
			    		if(i_map=="null" || i_map==null || i_map.equals("null") || i_map.equals(null)) {
			    			i_map = "0";
			    		} else {
			    			i_map = ""+NumberFormat.getInstance().parse(i_map);
			    		}
			    		
			    		double value_invoice = Double.parseDouble(i_value);
			    		double value_map = Double.parseDouble(i_map); 
			    		total_tax_amt.put(compo_cd.elementAt(k),(value_invoice+value_map));
			    		String adj_value = ""+TAX_ADJ_AMT.get(compo_cd.elementAt(k)+":"+Invoice_no.elementAt(i));
			    		if(adj_value==null || adj_value=="null" || adj_value.equals("null") || adj_value.equals(null)) {
			    			adj_value = "0.00";
			    		}
			    		
			    		CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
	                    CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	                    CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	                    CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
	                    CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(adj_value,small_black_normal)));
			    	}}
                    
            	}
        	}
        		CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
                CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                CumulativeAdjustmentsTable.getDefaultCell().setColspan(3+compo_cd.size());
                CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("",small_black_normal)));
                
                CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
                CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                CumulativeAdjustmentsTable.getDefaultCell().setColspan(3+compo_cd.size());
                CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("",small_black_normal)));
                
                CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
                CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                CumulativeAdjustmentsTable.getDefaultCell().setColspan(3+compo_cd.size());
                CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("",small_black_normal)));
                
                CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
                CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                CumulativeAdjustmentsTable.getDefaultCell().setColspan(3+compo_cd.size());
                CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("",small_black_normal)));

                CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                CumulativeAdjustmentsTable.getDefaultCell().setColspan(2);
                CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("Total Adjustment in This Billing Period",small_black_normal)));
                
                CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(nf3.format(total)+"",small_black_normal)));
                if(!date_flag) {
	                if(!inv_advance_adj_flg.equalsIgnoreCase("AA")){
	                CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
	                CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	                CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	                CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
	                CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(nf3.format(total_tax)+"",small_black_normal)));
	                }
	                if(!inv_advance_adj_flg.equalsIgnoreCase("AA")){
	                CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
	                CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	                CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	                CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
	                CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(nf3.format(total_SBC)+"",small_black_normal)));
	                }
	                if(!inv_advance_adj_flg.equalsIgnoreCase("AA")){
	                CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
	                CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	                CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	                CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
	                CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(nf3.format(total_KKC)+"",small_black_normal)));
	                }
            	} else {
            		if(!inv_advance_adj_flg.equalsIgnoreCase("AA") || TAX_ADV_ADJ_CODE_GST.size()>0){
            			for(int k=0;k<compo_cd.size();k++) {
	    	                CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
	    	                CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	    	                CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	    	                CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
	    	                CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(nf3.format(total_tax_amt.get(compo_cd.elementAt(k)))+"",small_black_normal)));
    	                }
            		}
            	}
            } 
            
            
//          Adding All Cells To PDF Document - One By One ...
            if(advance_payment_flag){
		//	document.add(new Paragraph("              "));
			document.add(hlpl_logo_table);
			document.add(contact_addr_table);                        
          //  document.add(new Paragraph("              "));
            document.add(title_note_table);
            document.add(new Paragraph("              "));
            document.add(InvoiceDateInfoTable);
            document.add(InvoiceDueDateInfoTable);
            document.add(InvoiceNOInfoTable);
            //document.add(InvoiceDateInfoTable);
            document.add(BillingPeriodInfoTable);
            document.add(new Paragraph("              "));
            document.add(AdvanceAmountPaidTable);
            document.add(new Paragraph("              "));
           // document.add(new Paragraph("              "));
            document.add(CumulativeAdjustmentsTable);
            }
        }
		catch(DocumentException de)
		{
			System.err.println("DocumentException in printAllPdfFileForInvoice() Method :\n"+de.getMessage());
			de.printStackTrace();
		}
		catch(IOException ioe)
		{
			System.err.println("IOException in printAllPdfFileForInvoice() Method :\n"+ioe.getMessage());
			ioe.printStackTrace();
		}
		finally
		{
			document.close();
		}
	}
	
	
	public String getInv_advance_adj_flg() {
		return inv_advance_adj_flg;
	}

	public void setInv_advance_adj_flg(String inv_advance_adj_flg) {
		this.inv_advance_adj_flg = inv_advance_adj_flg;
	}

	String billCycle = "0";
	
	public void updateInvoiceInTable() throws SQLException		//BK20160216
	{

		try
		{
			conn.setAutoCommit(false);
			int count=0;
			String query1="SELECT count(SN_NO)" +
			" FROM LOG_DLNG_INVOICE_MST " +
			"where contract_type='"+invContractType+"' " +
			"and financial_year='"+invFinancialYear+"' and hlpl_inv_seq_no='"+invHlplinvseqno+"' AND FLAG!='A'";
			////System.out.println(""+queryString);
			rset=stmt.executeQuery(query1);
			if(rset.next())
			{
				count=rset.getInt(1);
			}

			if(count==0){
			
			if(contract_type.equalsIgnoreCase("S"))
			{
				queryString = "SELECT SN_REF_NO " +
							  "FROM FMS7_SN_MST WHERE " +
				  			  "fgsa_no="+FgsaNo+" AND " +
				  			  "sn_no="+SnNo+" AND sn_ref_no IS NOT NULL AND " +
				  			  "customer_cd="+CustomerCd+" ORDER BY sn_rev_no DESC";
				////System.out.println("Signing Date Fetch Query For SN Master = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					sn_ref_no = rset.getString(1)==null?"":rset.getString(1);
				}
	
				queryString = "SELECT TO_CHAR(signing_dt,'dd') " +
							  "|| '/' || TO_CHAR(signing_dt,'mm') " +
							  "|| '/' || TO_CHAR(signing_dt,'yyyy') " +
							  "FROM FMS7_FGSA_MST WHERE " +
							  "fgsa_no="+FgsaNo+" AND " +
							  "rev_no="+FgsaRevNo+" AND " +
							  "customer_cd="+CustomerCd+" " +
							  "ORDER BY rev_no DESC";
				////System.out.println("Signing Date Fetch Query For FGSA Master = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					customer_Invoice_FGSA_Dt = rset.getString(1)==null?"":rset.getString(1);
				}
				
				queryString = "SELECT TO_CHAR(signing_dt,'dd') " +
							  "|| '/' || TO_CHAR(signing_dt,'mm') " +
							  "|| '/' || TO_CHAR(signing_dt,'yyyy') " +
				  			  "FROM FMS7_SN_MST WHERE " +
				  			  "fgsa_no="+FgsaNo+" AND fgsa_rev_no="+FgsaRevNo+" AND " +
				  			  "sn_no="+SnNo+" AND sn_rev_no="+SnRevNo+" AND " +
				  			  "customer_cd="+CustomerCd+"";
				////System.out.println("Signing Date Fetch Query For SN Master = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					customer_Invoice_SN_Dt = rset.getString(1)==null?"":rset.getString(1);
				}
			}
			else if(contract_type.equalsIgnoreCase("L"))
			{
				queryString = "SELECT LOA_REF_NO " +
							  "FROM FMS7_LOA_MST WHERE " +
				  			  "tender_no="+FgsaNo+" AND " +
				  			  "loa_no="+SnNo+" AND LOA_REF_NO IS NOT NULL AND " +
				  			  "customer_cd="+CustomerCd+" ORDER BY loa_rev_no DESC";
				////System.out.println("Signing Date Fetch Query For LOA Master = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					sn_ref_no = rset.getString(1)==null?"":rset.getString(1);
				}
	
				queryString = "SELECT TO_CHAR(signing_dt,'dd') " +
							  "|| '/' || TO_CHAR(signing_dt,'mm') " +
							  "|| '/' || TO_CHAR(signing_dt,'yyyy') " +
							  "FROM FMS7_TENDER_MST WHERE " +
							  "tender_no="+FgsaNo+" AND " +
							  "customer_cd="+CustomerCd+"";
				////System.out.println("Signing Date Fetch Query For TENDER Master = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					customer_Invoice_FGSA_Dt = rset.getString(1)==null?"":rset.getString(1);
				}
				
				queryString = "SELECT TO_CHAR(signing_dt,'dd') " +
							  "|| '/' || TO_CHAR(signing_dt,'mm') " +
							  "|| '/' || TO_CHAR(signing_dt,'yyyy') " +
				  			  "FROM FMS7_LOA_MST WHERE " +
				  			  "tender_no="+FgsaNo+" AND " +
				  			  "loa_no="+SnNo+" AND loa_rev_no="+SnRevNo+" AND " +
				  			  "customer_cd="+CustomerCd+"";
				////System.out.println("Signing Date Fetch Query For LOA Master = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					customer_Invoice_SN_Dt = rset.getString(1)==null?"":rset.getString(1);
				}
			}
			else if(contract_type.equalsIgnoreCase("R"))
			{
				queryString = "SELECT TO_CHAR(signing_dt,'dd') " +
							  "|| '/' || TO_CHAR(signing_dt,'mm') " +
							  "|| '/' || TO_CHAR(signing_dt,'yyyy') " +
							  "FROM FMS7_RE_GAS_MST WHERE " +
							  "re_gas_no="+FgsaNo+" AND " +
							  "customer_cd="+CustomerCd+" " +
							  "ORDER BY rev_no DESC";
				////System.out.println("Signing Date Fetch Query For RE-GAS Master = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					customer_Invoice_FGSA_Dt = rset.getString(1)==null?"":rset.getString(1);
					customer_Invoice_SN_Dt = rset.getString(1)==null?"":rset.getString(1);
				}
			}
			else if(contract_type.equalsIgnoreCase("T")) //ADDED FOR LTCORA AND CN
			{
				queryString = "SELECT TO_CHAR(signing_dt,'dd') " +
							  "|| '/' || TO_CHAR(signing_dt,'mm') " +
							  "|| '/' || TO_CHAR(signing_dt,'yyyy') " +
							  "FROM FMS8_LNG_REGAS_MST WHERE " +
							  "AGREEMENT_NO="+FgsaNo+" AND " +
							  "customer_cd="+CustomerCd+" " +
							  "AND CN_NO='0' AND CN_REV_NO='0' " +
							  "ORDER BY rev_no DESC";
		//		////System.out.println("Signing Date Fetch Query For LTCORA Master = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					customer_Invoice_FGSA_Dt = rset.getString(1)==null?"":rset.getString(1);
					customer_Invoice_SN_Dt = rset.getString(1)==null?"":rset.getString(1);
				}
				
			}
			else if(contract_type.equalsIgnoreCase("C")) //ADDED FOR LTCORA AND CN
			{
				////System.out.println("customer_inv_mapping_id--------------->"+customer_inv_mapping_id);
				String tempmap_id[]=customer_inv_mapping_id.split("-");
				String temp_agreement_no=tempmap_id[1];
				queryString = "SELECT TO_CHAR(signing_dt,'dd') " +
				  "|| '/' || TO_CHAR(signing_dt,'mm') " +
				  "|| '/' || TO_CHAR(signing_dt,'yyyy') " +
				  "FROM FMS8_LNG_REGAS_MST WHERE " +
				  " customer_cd="+CustomerCd+" AND " +
				  "AGREEMENT_NO='"+temp_agreement_no+"' " +
				  " AND CN_NO='0' AND CN_REV_NO='0' "+
				  "ORDER BY REV_NO DESC";
					////System.out.println("Signing Date Fetch Query For CN Master = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					customer_Invoice_FGSA_Dt = rset.getString(1)==null?"":rset.getString(1);
					//customer_Invoice_SN_Dt = rset.getString(1)==null?"":rset.getString(1);
				}
	
				
				queryString = "SELECT TO_CHAR(signing_dt,'dd') " +
							  "|| '/' || TO_CHAR(signing_dt,'mm') " +
							  "|| '/' || TO_CHAR(signing_dt,'yyyy') " +
							  "FROM FMS8_LNG_REGAS_MST WHERE " +
							  "CN_NO="+FgsaNo+" AND " +
							  "customer_cd="+CustomerCd+" " +
							  "AND MAPPING_ID='"+customer_inv_mapping_id+"' "+
							  "ORDER BY CN_REV_NO DESC";
		//		////System.out.println("Signing Date Fetch Query For CN Master = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					//customer_Invoice_FGSA_Dt = rset.getString(1)==null?"":rset.getString(1);
					customer_Invoice_SN_Dt = rset.getString(1)==null?"":rset.getString(1);
				}
				
			}
			
			pdfFinal_Total_Collection=""+NumberFormat.getInstance().parse(pdfFinal_Total_Collection);
			balanceason=""+NumberFormat.getInstance().parse(balanceason);
			
			String TOTAL_COLLECTION_IGST = "0", TOTAL_COLLECTION_SGST = "0", TOTAL_COLLECTION_CGST = "0", TOTAL_COLLECTION_GST0 = "0";
			String TOTAL_CURRENCY_IGST = "", TOTAL_CURRENCY_SGST = "", TOTAL_CURRENCY_CGST = "", TOTAL_CURRENCY_GST0 = "";
			String BALANCEASON_IGST = "0", BALANCEASON_SGST = "0", BALANCEASON_CGST = "0", BALANCEASON_GST0 = "0";
			String PAYABAL_IGST = "0", PAYABAL_SGST = "0", PAYABAL_CGST = "0", PAYABAL_GST0 = "0";
			
			for(int i=0;i<compo_cd.size();i++) {
				if(compo_cd.elementAt(i).equals("10")) {
					TOTAL_COLLECTION_IGST = ""+TAX_TOTAL_COLLECTION.get(compo_cd.elementAt(i));
					TOTAL_CURRENCY_IGST = ""+TAX_TOTAL_CURRENCY.get(compo_cd.elementAt(i));
					BALANCEASON_IGST = ""+TAX_BALANCE_ASON.get(compo_cd.elementAt(i));
					PAYABAL_IGST = ""+TOTAL_TAX_PAYABLE.get(compo_cd.elementAt(i));
					
					if(TOTAL_COLLECTION_IGST==null || TOTAL_COLLECTION_IGST=="null" || TOTAL_COLLECTION_IGST.equals("null") || TOTAL_COLLECTION_IGST.equals(null)) {
						TOTAL_COLLECTION_IGST = "0";
					}
					if(BALANCEASON_IGST==null || BALANCEASON_IGST=="null" || BALANCEASON_IGST.equals("null") || BALANCEASON_IGST.equals(null)) {
						BALANCEASON_IGST = "0";
					}
					if(PAYABAL_IGST==null || PAYABAL_IGST=="null" || PAYABAL_IGST.equals("null") || PAYABAL_IGST.equals(null)) {
						PAYABAL_IGST = "0";
					}
					TOTAL_COLLECTION_IGST = TOTAL_COLLECTION_IGST.replaceAll(",", "");
					BALANCEASON_IGST = BALANCEASON_IGST.replaceAll(",", "");
					PAYABAL_IGST = PAYABAL_IGST.replaceAll(",", "");
				} else if(compo_cd.elementAt(i).equals("11")) {
					TOTAL_COLLECTION_SGST = ""+TAX_TOTAL_COLLECTION.get(compo_cd.elementAt(i));
					TOTAL_CURRENCY_SGST = ""+TAX_TOTAL_CURRENCY.get(compo_cd.elementAt(i));
					BALANCEASON_SGST = ""+TAX_BALANCE_ASON.get(compo_cd.elementAt(i));
					PAYABAL_SGST = ""+TOTAL_TAX_PAYABLE.get(compo_cd.elementAt(i));
					
					if(TOTAL_COLLECTION_SGST==null || TOTAL_COLLECTION_SGST=="null" || TOTAL_COLLECTION_SGST.equals("null") || TOTAL_COLLECTION_SGST.equals(null)) {
						TOTAL_COLLECTION_SGST = "0";
					}
					if(BALANCEASON_SGST==null || BALANCEASON_SGST=="null" || BALANCEASON_SGST.equals("null") || BALANCEASON_SGST.equals(null)) {
						BALANCEASON_SGST = "0";
					}
					if(PAYABAL_SGST==null || PAYABAL_SGST=="null" || PAYABAL_SGST.equals("null") || PAYABAL_SGST.equals(null)) {
						PAYABAL_SGST = "0";
					}
					TOTAL_COLLECTION_SGST = TOTAL_COLLECTION_SGST.replaceAll(",", "");
					BALANCEASON_SGST = BALANCEASON_SGST.replaceAll(",", "");
					PAYABAL_SGST = PAYABAL_SGST.replaceAll(",", "");
				} else if(compo_cd.elementAt(i).equals("12")) {
					TOTAL_COLLECTION_CGST = ""+TAX_TOTAL_COLLECTION.get(compo_cd.elementAt(i));
					TOTAL_CURRENCY_CGST = ""+TAX_TOTAL_CURRENCY.get(compo_cd.elementAt(i));
					BALANCEASON_CGST = ""+TAX_BALANCE_ASON.get(compo_cd.elementAt(i));
					PAYABAL_CGST = ""+TOTAL_TAX_PAYABLE.get(compo_cd.elementAt(i));
					
					if(TOTAL_COLLECTION_CGST==null || TOTAL_COLLECTION_CGST=="null" || TOTAL_COLLECTION_CGST.equals("null") || TOTAL_COLLECTION_CGST.equals(null)) {
						TOTAL_COLLECTION_CGST = "0";
					}
					if(BALANCEASON_CGST==null || BALANCEASON_CGST=="null" || BALANCEASON_CGST.equals("null") || BALANCEASON_CGST.equals(null)) {
						BALANCEASON_CGST = "0";
					}
					if(PAYABAL_CGST==null || PAYABAL_CGST=="null" || PAYABAL_CGST.equals("null") || PAYABAL_CGST.equals(null)) {
						PAYABAL_CGST = "00";
					}
					TOTAL_COLLECTION_CGST = TOTAL_COLLECTION_CGST.replaceAll(",", "");
					BALANCEASON_CGST = BALANCEASON_CGST.replaceAll(",", "");
					PAYABAL_CGST = PAYABAL_CGST.replaceAll(",", "");
				} else if(compo_cd.elementAt(i).equals("13")) {
					TOTAL_COLLECTION_GST0 = ""+TAX_TOTAL_COLLECTION.get(compo_cd.elementAt(i));
					TOTAL_CURRENCY_GST0 = ""+TAX_TOTAL_CURRENCY.get(compo_cd.elementAt(i));
					BALANCEASON_GST0 = ""+TAX_BALANCE_ASON.get(compo_cd.elementAt(i));
					PAYABAL_GST0 = ""+TOTAL_TAX_PAYABLE.get(compo_cd.elementAt(i));
					
					if(TOTAL_COLLECTION_GST0==null || TOTAL_COLLECTION_GST0=="null" || TOTAL_COLLECTION_GST0.equals("null") || TOTAL_COLLECTION_GST0.equals(null)) {
						TOTAL_COLLECTION_GST0 = "0";
					}
					if(BALANCEASON_GST0==null || BALANCEASON_GST0=="null" || BALANCEASON_GST0.equals("null") || BALANCEASON_GST0.equals(null)) {
						BALANCEASON_GST0 = "0";
					}
					if(PAYABAL_GST0==null || PAYABAL_GST0=="null" || PAYABAL_GST0.equals("null") || PAYABAL_GST0.equals(null)) {
						PAYABAL_GST0 = "0";
					}
					TOTAL_COLLECTION_GST0 = TOTAL_COLLECTION_GST0.replaceAll(",", "");
					BALANCEASON_GST0 = BALANCEASON_GST0.replaceAll(",", "");
					PAYABAL_GST0 = PAYABAL_GST0.replaceAll(",", "");
				}
			}
			
//			String queryString="INSERT INTO LOG_DLNG_INVOICE_MST SELECT SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO," +
//					"CUSTOMER_CD,PLANT_SEQ_NO,CONTRACT_TYPE,to_date(to_char(PERIOD_END_DT,'dd/mm/yyyy'),'dd/mm/yyyy'),to_date(to_char(PERIOD_START_DT,'dd/mm/yyyy'),'dd/mm/yyyy'),HLPL_INV_SEQ_NO," +
//					"CUST_INV_SEQ_NO,FINANCIAL_YEAR,CONTACT_PERSON_CD,to_date(to_char(INVOICE_DT,'dd/mm/yyyy'),'dd/mm/yyyy'),to_date(to_char(DUE_DT,'dd/mm/yyyy'),'dd/mm/yyyy'),TOTAL_QTY,SALE_PRICE," +
//					"GROSS_AMT_INR,GROSS_AMT_USD,NET_AMT_INR,TAX_AMT_INR,TAX_STRUCT_CD,TAX_FLAG,EXCHG_RATE_CD," +
//					"to_date(to_char(EXCHG_RATE_DT,'dd/mm/yyyy'),'dd/mm/yyyy'),EXCHG_RATE_VALUE,EXCHG_RATE_TYPE,EMP_CD,to_date(to_char(ENT_DT,'dd/mm/yyyy'),'dd/mm/yyyy'),FLAG,REMARK_1,REMARK_2," +
//					"CHECKED_BY,to_date(to_char(CHECKED_DT,'dd/mm/yyyy'),'dd/mm/yyyy'),CHECKED_FLAG,AUTHORIZED_BY,to_date(to_char(AUTHORIZED_DT,'dd/mm/yyyy'),'dd/mm/yyyy'),AUTHORIZED_FLAG,APPROVED_BY," +
//					"to_date(to_char(APPROVED_DT,'dd/mm/yyyy'),'dd/mm/yyyy'),APPROVED_FLAG,EXCHG_RATE_INDEX,OFFSPEC_QTY,OFFSPEC_FLAG,OFFSPEC_RATE,SUN_APPROVAL," +
//					"to_date(to_char(SUN_APPROVAL_DT,'dd/mm/yyyy'),'dd/mm/yyyy'),SUN_APPROVAL_BY,REMARK_3,INV_AMT_USD,INV_AMT_INR,INV_CUR_FLAG," +
//					"MAPPING_ID,ADV_INV_NO,to_date(to_char(ADV_INV_DT,'dd/mm/yyyy'),'dd/mm/yyyy'),PDF_INV_DTL,to_date(to_char(USER_DEFINED_DAY,'dd/mm/yyyy'),'dd/mm/yyyy') " +
//					",'"+sn_ref_no+"',to_date('"+customer_Invoice_SN_Dt+"','dd/mm/yyyy'),to_date('"+customer_Invoice_FGSA_Dt+"','dd/mm/yyyy'),'"+contact_Customer_Name+"'," +
//					"'"+contact_Suppl_Name+"','"+contact_Suppl_Person_Address+"','"+contact_Suppl_Person_Pin+"'," +
//					"'"+contact_Person_Name_And_Designation+"','"+contact_Customer_Person_Address+"','"+contact_Customer_Person_City+"'," +
//					"'"+contact_Customer_Person_Pin+"','"+contact_Suppl_Person_City+"','"+liability_exist_flag+"','"+contact_Suppl_GST_NO+"',to_date('"+contact_Suppl_GST_DT+"','dd/mm/yyyy')," +
//					"'"+contact_Suppl_CST_NO+"',to_date('"+contact_Suppl_CST_DT+"','dd/mm/yyyy'),'"+contact_Suppl_Service_Tax_NO+"',to_date('"+contact_Suppl_Service_Tax_DT+"','dd/mm/yyyy') " +
//					",'"+pdfFinal_Total_Collection+"','"+balanceason+"','"+pdfFinal_Total_Currency+"','"+hlpl_inv_no+"' " +
//					",'"+customer_abbr+"','"+customer_plant_nm+"' "+
//					",'"+NumberFormat.getInstance().parse(Pdftotal_invoice_payable_usd)+"','"+NumberFormat.getInstance().parse(Pdftotal_invoice_payable_inr)+"','"+NumberFormat.getInstance().parse(Pdftotal_tax_payable)+"' " +
//					" ,'"+NumberFormat.getInstance().parse(PdfFinal_Total_Collection_tax)+"','"+PdfFinal_Total_Currency_tax+"',"+
//					"'"+NumberFormat.getInstance().parse(Pdfinvadjustmentamt_inr)+"' ,'"+Pdfinvoice_tax_adj+"' ,"+
//					"'"+NumberFormat.getInstance().parse(balanceason_tax)+"','"+contact_Suppl_PAN_NO+"',to_date('"+contact_Suppl_PAN_DT+"','dd/mm/yyyy'),"+
//					"'"+NumberFormat.getInstance().parse(PdfFinal_Total_Collection_SBC)+"','"+PdfFinal_Total_Currency_SBC+"','"+NumberFormat.getInstance().parse(balanceason_SBC)+"',"+ //SBC-HS20160621
//					"'"+NumberFormat.getInstance().parse(pdftotal_adv_tax_payable)+"','"+NumberFormat.getInstance().parse(pdftotal_adv_sbc_payable)+"', "+
//					"'"+NumberFormat.getInstance().parse(PdfFinal_Total_Collection_KKC)+"','"+PdfFinal_Total_Currency_KKC+"','"+NumberFormat.getInstance().parse(balanceason_KKC)+"',"+ //KKC-HS20160622
//					"'"+NumberFormat.getInstance().parse(pdftotal_adv_kkc_payable)+"' , PAY_TYPE,ADV_ADJ_FLG,NEW_INV_SEQ_NO,SUPPLIER_CD,REMARK_SPECIFICATION,PRICE_UNIT,DUMMY_CARGO_NO,"
//					+ "'"+contact_Suppl_GSTIN_NO+"',to_date('"+contact_Suppl_GSTIN_DT+"','dd/mm/yyyy'),'"+sac_code+"','"+contact_Suppl_State_Code+"',"
//					+ "'"+contact_customer_State+"','"+contact_customer_State_Code+"',"
//					 +" '"+TOTAL_COLLECTION_IGST+"','"+TOTAL_CURRENCY_IGST+"','"+BALANCEASON_IGST+"','"+PAYABAL_IGST+"', " 
//					 + " '"+TOTAL_COLLECTION_CGST+"','"+TOTAL_CURRENCY_CGST+"','"+BALANCEASON_CGST+"','"+PAYABAL_CGST+"', " 
//					 + " '"+TOTAL_COLLECTION_SGST+"','"+TOTAL_CURRENCY_SGST+"','"+BALANCEASON_SGST+"','"+PAYABAL_SGST+"', " 
//					 + " '"+TOTAL_COLLECTION_GST0+"','"+TOTAL_CURRENCY_GST0+"','"+BALANCEASON_GST0+"','"+PAYABAL_GST0+"' " +
//					" FROM DLNG_INVOICE_MST " +
//					"where contract_type='"+invContractType+"' " +
//					"and financial_year='"+invFinancialYear+"' and hlpl_inv_seq_no='"+invHlplinvseqno+"' and flag!='A' ";
//			
//				System.out.println("HS===insert into LO_FMS7_INVOICE_MST==="+queryString);
//			stmt.executeUpdate(queryString);
			
			String invinvoicedt="";
			String bill_period_start_dt="";
			String bill_period_end_dt="";
			String plant_seq_no="";
			String exch_rate_date="";
			////System.out.println("---END---");
			
			String query="select to_char(INVOICE_DT,'dd/mm/yyyy'),to_char(PERIOD_END_DT,'dd/mm/yyyy'),to_char(PERIOD_START_DT,'dd/mm/yyyy')," +
					"PLANT_SEQ_NO,to_char(EXCHG_RATE_DT,'dd/mm/yyyy') " +
					" from DLNG_INVOICE_MST where " +
					" contract_type='"+invContractType+"' " +
						"and financial_year='"+invFinancialYear+"' and hlpl_inv_seq_no='"+invHlplinvseqno+"' AND FLAG='Y'";
			////System.out.println(""+query);
			rset1=stmt1.executeQuery(query);
			if(rset1.next())
			{
				invinvoicedt=rset1.getString(1)==null?"":rset1.getString(1);
				bill_period_end_dt=rset1.getString(2)==null?"":rset1.getString(2);
				bill_period_start_dt=rset1.getString(3)==null?"":rset1.getString(3);
				plant_seq_no=rset1.getString(4)==null?"":rset1.getString(4);
				exch_rate_date=rset1.getString(5)==null?"":rset1.getString(5);
			}
			
			String Mapping_seq_no=invContractType+":"+invFinancialYear+":"+invHlplinvseqno+":"+invinvoicedt;
			
			String mapid[]=customer_inv_mapping_id.split("-");
			//String queryString1="select price_cd, AMOUNT, CURRENCY, TOTAL_TARIFF, INV_AMT_INR, " +
			//		" INV_AMT_USD, REC_FLAG, REMARK, FLAG, OPERATION, BASIC_INV_AMT_INR, BASIC_INV_AMT_USD from FMS7_INV_COMPO_DTL" +
			//		" where INV_SEQ_NO='"+Mapping_seq_no+"'  and (flag_temp not like 'T' or flag_temp is null)";
			
			String queryString1="INSERT INTO LOG_FMS7_INV_COMPO_DTL SELECT * FROM FMS7_INV_COMPO_DTL WHERE " +
					"INV_SEQ_NO='"+Mapping_seq_no+"'  and (flag_temp not like 'T' or flag_temp is null)";
			
			if(invContractType.equalsIgnoreCase("T") || invContractType.equalsIgnoreCase("C"))
			{
				queryString1+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
			}
			////System.out.println("ABCDComponenet details Fetch Query = "+queryString1);
			rset1=stmt1.executeQuery(queryString1);
			
			String mapp_id=CustomerCd+":"+FgsaNo+":"+FgsaRevNo+":"+SnNo+":"+SnRevNo+":"+plant_seq_no;
			for(int i=0;i<Invoice_adj_amt.size();i++)
			{
				String queryString2="INSERT INTO LOG_FMS7_INV_ADD_DTL (MAPPING_ID,INV_SEQ_NO,TYPE_NO,SEQ_NO,INV_DT,INV_NO,INV_AMT," +
				"INV_CURR,INV_AMT_BAL) VALUES ('"+mapp_id+"','"+Mapping_seq_no+"','1','"+i+"'," +
				"to_date('"+Invoice_dt.elementAt(i)+"','dd/mm/yy'),'"+Invoice_no.elementAt(i)+"','"+NumberFormat.getInstance().parse(""+Invoice_adj_amt.elementAt(i))+"'," +
				"'"+Invoice_adj_cur.elementAt(i)+"','"+NumberFormat.getInstance().parse(""+Invoice_Adj_bal.elementAt(i))+"')";
				////System.out.println(""+queryString2);
				stmt2.executeUpdate(queryString2);
			}
				
			
			for(int i=0;i<Invoice_Tax_adj_amt.size();i++)
			{
				String queryString2="INSERT INTO LOG_FMS7_INV_ADD_DTL (MAPPING_ID,INV_SEQ_NO,TYPE_NO,SEQ_NO,INV_DT,INV_NO,INV_AMT," +
				"INV_CURR,INV_AMT_BAL) VALUES ('"+mapp_id+"','"+Mapping_seq_no+"','4','"+i+"'," +
				"to_date('"+Invoice_dt.elementAt(i)+"','dd/mm/yy'),'"+Invoice_no.elementAt(i)+"','"+NumberFormat.getInstance().parse(""+Invoice_Tax_adj_amt.elementAt(i))+"'," +
				"'"+Invoice_Tax_adj_cur.elementAt(i)+"','"+NumberFormat.getInstance().parse(""+Invoice_Tax_Adj_bal.elementAt(i))+"')";
				////System.out.println(""+queryString2);
				stmt2.executeUpdate(queryString2);
			}
			//--SBC-20160510-DEEPS//
			
			////System.out.println("-----Invoice_SBC_adj_amt-----"+Invoice_SBC_adj_amt);
			for(int i=0;i<Invoice_SBC_adj_amt.size();i++)
			{
				String queryString2="INSERT INTO LOG_FMS7_INV_ADD_DTL (MAPPING_ID,INV_SEQ_NO,TYPE_NO,SEQ_NO,INV_DT,INV_NO,INV_AMT," +
				"INV_CURR,INV_AMT_BAL) VALUES ('"+mapp_id+"','"+Mapping_seq_no+"','5','"+i+"'," +
				"to_date('"+Invoice_dt.elementAt(i)+"','dd/mm/yy'),'"+Invoice_no.elementAt(i)+"','"+NumberFormat.getInstance().parse(""+Invoice_SBC_adj_amt.elementAt(i))+"'," +
				"'"+Invoice_SBC_adj_cur.elementAt(i)+"','"+NumberFormat.getInstance().parse(""+Invoice_SBC_Adj_bal.elementAt(i))+"')";
				////System.out.println(""+queryString2);
				stmt2.executeUpdate(queryString2);
			}
			compo_cd.clear();
			compo_abbr.clear();
			queryString = "SELECT COMPO_ABR,COMPO_CD FROM FMS7_COMPO_MST WHERE COMPO_CD IN ('10','11','12','13')";
			rset = stmt.executeQuery(queryString);
			while(rset.next()) {
				compo_abbr.add(rset.getString(1)==null?"":rset.getString(1));
				compo_cd.add(rset.getString(2)==null?"":rset.getString(2));
			}
			String mapp_id1=CustomerCd+"-"+FgsaNo+"-"+FgsaRevNo+"-"+SnNo+"-"+SnRevNo+"-C";
			for(int i=0;i<compo_cd.size();i++) {
//				if(tax_Structure_Dtl.contains(""+compo_abbr.elementAt(i))) {
					queryString = "SELECT PRICE_RATE,CURRENCY_CD,FLAG,PAY_TYPE "
							+ "FROM FMS7_CONT_PRICE_DTL WHERE MAPPING_ID = '"+mapp_id1+"' "
							+ "AND PRICE_CD = '"+compo_cd.elementAt(i)+"' AND FLAG='Y' ";
					if(invContractType.equalsIgnoreCase("T") || invContractType.equalsIgnoreCase("C"))
					{
						queryString1+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
					}
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						TAX_FLAG.put(compo_cd.elementAt(i),"Y");
						TAX_TOTAL_COLLECTION.put(compo_cd.elementAt(i),rset.getString(1)==null?"0":rset.getString(1));
						TAX_TOTAL_CURRENCY.put(compo_cd.elementAt(i),"INR");
						TAX_PAYMENT_TYPE.put(compo_cd.elementAt(i),rset.getString(4)==null?"AP":rset.getString(4));
					}
					else {
						compo_cd.removeElementAt(i);
						compo_abbr.removeElementAt(i);
						if(i!=0)
							i = i-1;
						else 
							i = 0;
					}
//				}
			}
			
			for(int i=0;i<compo_cd.size();i++)
			{
				String invno = ""+TAX_INVOICE_NO.get(compo_cd.elementAt(i));
//				System.out.println("===invno=="+invno+"===");
				if(invno.equals("null") || invno.equals(null) || invno.length()==0) {
					
				} else {
					String invdt = ""+TAX_INVOICE_DT.get(compo_cd.elementAt(i)+":"+invno);
					String amt = ""+TAX_ADJ_AMT.get(compo_cd.elementAt(i)+":"+invno);
					String bal_amt = ""+TAX_ADJ_BAL.get(compo_cd.elementAt(i)+":"+invno);
					String cur = ""+TAX_ADJ_CUR.get(compo_cd.elementAt(i)+":"+invno);
					
					if(amt==null || amt=="null" || amt.equals(null) || amt.equals("null")) {
						amt = "0";
					}
					if(bal_amt==null || bal_amt=="null" || bal_amt.equals(null) || bal_amt.equals("null")) {
						bal_amt = "0";
					}
					amt = amt.replaceAll(",", "");
					bal_amt = bal_amt.replaceAll(",", "");
					
					String queryString2="INSERT INTO LOG_FMS7_INV_ADD_DTL (MAPPING_ID,INV_SEQ_NO,TYPE_NO,SEQ_NO,INV_DT,INV_NO,INV_AMT," +
					"INV_CURR,INV_AMT_BAL) VALUES ('"+mapp_id+"','"+Mapping_seq_no+"','7','"+compo_cd.elementAt(i)+"'," +
					"to_date('"+invdt+"','dd/mm/yy'),'"+invno+"','"+amt+"'," +
					"'"+cur+"','"+bal_amt+"')";
//					System.out.println(""+queryString2);
					stmt2.executeUpdate(queryString2);
				}
			}
			//----//
			
			for(int i=0;i<customer_Invoice_Exchg_Rate_Code.size();i++)
			{
				String queryString2="INSERT INTO LOG_FMS7_INV_ADD_DTL (MAPPING_ID,INV_SEQ_NO,TYPE_NO,SEQ_NO,INV_DT,INV_NO,INV_AMT," +
				"INV_CURR,INV_AMT_BAL,EXC_RATE_NM) VALUES ('"+mapp_id+"','"+Mapping_seq_no+"','2','"+i+"'," +
				"to_date('"+exch_rate_date+"','dd/mm/yy'),'"+customer_Invoice_Exchg_Rate_Code.elementAt(i)+"'," +
				"'"+customer_Invoice_Exchg_Rate_Value.elementAt(i)+"'," +
				"'','0','"+customer_Invoice_Exchg_Rate_Name.elementAt(i)+"')";
				////System.out.println(""+queryString2);
		//SB		stmt2.executeUpdate(queryString2);
			}
			
			
			for(int i=0;i<vSTAT_CD.size();i++)
			{
				String queryString2="INSERT INTO LOG_FMS7_INV_ADD_DTL (MAPPING_ID,INV_SEQ_NO,TYPE_NO,SEQ_NO,INV_DT,INV_NO,INV_AMT," +
				"INV_CURR,INV_AMT_BAL,EXC_RATE_NM) VALUES ('"+mapp_id+"','"+Mapping_seq_no+"','3','"+i+"'," +
				"to_date('"+vSTAT_EFF_DT.elementAt(i)+"','dd/mm/yy'),'"+vSTAT_CD.elementAt(i)+"'," +
				"'"+vSTAT_NO.elementAt(i)+"'," +
				"'','0','"+vSTAT_NM.elementAt(i)+"')";
			//	//System.out.println("---"+queryString2);
			//SB	stmt2.executeUpdate(queryString2);
			}
			
			String customer_cd=CustomerCd;
			String fgsa_no=FgsaNo;
			String sn_no=SnNo;
			contract_type=invContractType;
			String sn_rev_no=SnRevNo;
			String fgsa_rev_no=FgsaRevNo;
			String hlplInvoiceNo=invHlplinvseqno;
			
			////System.out.println("invoice_Period_Dates.......... "+invoice_Period_Dates);
			
			for(int i=0;i<invoice_Period_Dates.size();i++){
				
				if(invoice_Period_DCQ.elementAt(i).equals("")){
					invoice_Period_DCQ.add(i,"0");
				}
				if(invoice_Period_Buyer_Nom_Qty.elementAt(i).equals("")){
					invoice_Period_Buyer_Nom_Qty.add(i,"0");
				}
				if(invoice_Period_Seller_Nom_PNQ.elementAt(i).equals("")){
					invoice_Period_Seller_Nom_PNQ.add(i,"0");
				}
				if(invoice_Period_Seller_Nom_RE_Qty.elementAt(i).equals("")){
					invoice_Period_Seller_Nom_RE_Qty.add(i,"0");
				}
				if(invoice_Period_Gas_Delivered_PNQ.elementAt(i).equals("")){
					invoice_Period_Gas_Delivered_PNQ.add(i,"0");
				}
				if(invoice_Period_Gas_Delivered_Re_Qty.elementAt(i).equals("")){
					invoice_Period_Gas_Delivered_Re_Qty.add(i,"0");
				}
				if(invoice_Period_Gas_Delivered_Total_Qty.elementAt(i).equals("")){
					invoice_Period_Gas_Delivered_Total_Qty.add(i,"0");
				}
				if(invoice_Period_Cumulative_Qty.elementAt(i).equals("")){
					invoice_Period_Cumulative_Qty.add(i,"0");
				}
				if(invoice_Period_Cumulative_SN_Qty.elementAt(i).equals("")){
					invoice_Period_Cumulative_SN_Qty.add(i,"0");
				}
				if(invoice_Period_Buyer_Shortfall_Qty.elementAt(i).equals("")){
					invoice_Period_Buyer_Shortfall_Qty.add(i,"0");
				}
				if(invoice_Period_Buyer_Off_Spec_Qty.elementAt(i).equals("")){
					invoice_Period_Buyer_Off_Spec_Qty.add(i,"0");
				}
				if(invoice_Period_Buyer_Suspension_Qty.elementAt(i).equals("")){
					invoice_Period_Buyer_Suspension_Qty.add(i,"0");
				}
				if(invoice_Period_Delv_Failure_Qty.elementAt(i).equals("")){
					invoice_Period_Delv_Failure_Qty.add(i,"0");
				}
				if(invoice_Period_Total_Shortfall_Qty.elementAt(i).equals("")){
					invoice_Period_Total_Shortfall_Qty.add(i,"0");
				}
				if(invoice_Period_LD_Credit_Payable.elementAt(i).equals("")){
					invoice_Period_LD_Credit_Payable.add(i,"0");
				}
				if(invoice_Period_FM_Qty.elementAt(i).equals("")){
					invoice_Period_FM_Qty.add(i,"0");
				}
				if(Buyer_Shortfall_Qty_Total.equals("")){
					Buyer_Shortfall_Qty_Total="0";
				}
				if(Buyer_Off_Spec_Qty_Total.equals("")){
					Buyer_Off_Spec_Qty_Total="0";
				}
				if(Buyer_Suspension_Qty_Total.equals("")){
					Buyer_Suspension_Qty_Total="0";
				}
				if(Delv_Failure_Qty_Total.equals("")){
					Delv_Failure_Qty_Total="0";
				}
				if(Total_Shortfall_Qty_Total.equals("")){
					Total_Shortfall_Qty_Total="0";
				}
				if(LD_Credit_Payable_Total.equals("")){
					LD_Credit_Payable_Total="0";
				}
				if(FM_Qty_Total.equals("")){
					FM_Qty_Total="0";
				}
				if(DCQ_Total.equals("")){
					DCQ_Total="0";
				}
				if(Buyer_Nom_Qty_Total.equals("")){
					Buyer_Nom_Qty_Total="0";
				}
				if(Seller_Nom_PNQ_Total.equals("")){
					Seller_Nom_PNQ_Total="0";
				}
				if(Seller_Nom_RE_Qty_Total.equals("")){
					Seller_Nom_RE_Qty_Total="0";
				}
				if(Gas_Delivered_PNQ_Total.equals("")){
					Gas_Delivered_PNQ_Total="0";
				}
				if(Gas_Delivered_Re_Qty_Total.equals("")){
					Gas_Delivered_Re_Qty_Total="0";
				}
				if(Delivered_Total_Qty_Total.equals("")){
					Delivered_Total_Qty_Total="0";
				}
				
			}
			
			
			for(int i=0;i<invoice_Period_Dates.size();i++){
			
			queryString="SELECT to_char(ALLOCATION_DT,'dd/mm/yyyy'),HLPL_INV_SEQ_NO,FINANCIAL_YEAR," +
			"DAILY_QTY,AMT_INR,AMT_USD,EXCHG_RATE_CD,EXCHG_RATE_VALUE,EMP_CD,to_char(ENT_DT,'dd/mm/yyyy'),FLAG,CONTRACT_TYPE" +
			" FROM DLNG_INVOICE_DTL WHERE hlpl_inv_seq_no='"+invHlplinvseqno+"' " +
			"AND financial_year='"+invFinancialYear+"' " +
			"and allocation_dt=TO_DATE('"+invoice_Period_Dates.elementAt(i)+"','DD/MM/YYYY')" +
			" and contract_type='"+contract_type+"'";
			////System.out.println("queryString-----------------"+queryString);
			rset2=stmt2.executeQuery(queryString);
			if(rset2.next())
			{
				
				String q1="INSERT INTO LOG_FMS7_INVOICE_DTL VALUES (to_date('"+rset2.getString(1)+"','dd/mm/yyyy'),'"+rset2.getString(2)+"'," +
						" '"+rset2.getString(3)+"','"+rset2.getString(4)+"','"+rset2.getString(5)+"','"+rset2.getString(6)+"'," +
						" '"+rset2.getString(7)+"','"+rset2.getString(8)+"'," +
						" '"+rset2.getString(9)+"', to_date('"+rset2.getString(10)+"','dd/mm/yyyy'),'"+rset2.getString(11)+"', '"+rset2.getString(12)+"'," +
						" '"+(""+invoice_Period_DCQ.elementAt(i)).trim()+"', " +
						"'"+(""+invoice_Period_Buyer_Nom_Qty.elementAt(i)).trim()+"'," +
						" '"+(""+invoice_Period_Seller_Nom_PNQ.elementAt(i)).trim()+"', " +
						"'"+(""+invoice_Period_Seller_Nom_RE_Qty.elementAt(i)).trim()+"'," +
						" '"+(""+invoice_Period_Gas_Delivered_PNQ.elementAt(i)).trim()+"'," +
						" '"+(""+invoice_Period_Gas_Delivered_Re_Qty.elementAt(i)).trim()+"', " +
						"'"+(""+invoice_Period_Gas_Delivered_Total_Qty.elementAt(i)).trim()+"'," +
						" '"+(""+invoice_Period_Cumulative_Qty.elementAt(i)).trim()+"'," +
						" '"+(""+invoice_Period_Cumulative_SN_Qty.elementAt(i)).trim()+"'," +
						" '"+DCQ_Total.trim()+"', '"+Buyer_Nom_Qty_Total.trim()+"', '"+Seller_Nom_PNQ_Total.trim()+"'," +
						" '"+Seller_Nom_RE_Qty_Total.trim()+"', '"+Gas_Delivered_PNQ_Total.trim()+"', '"+Gas_Delivered_Re_Qty_Total.trim()+"'," +
						" '"+Delivered_Total_Qty_Total.trim()+"'," +
						"'"+(""+invoice_Period_Buyer_Shortfall_Qty.elementAt(i)).trim()+"'," +
						" '"+(""+invoice_Period_Buyer_Off_Spec_Qty.elementAt(i)).trim()+"'," +
						" '"+(""+invoice_Period_Buyer_Suspension_Qty.elementAt(i)).trim()+"', " +
						"'"+(""+invoice_Period_Delv_Failure_Qty.elementAt(i)).trim()+"'," +
						" '"+(""+invoice_Period_Total_Shortfall_Qty.elementAt(i)).trim()+"'," +
						"  '"+(""+invoice_Period_LD_Credit_Payable.elementAt(i)).trim()+"'," +
						" '"+(""+invoice_Period_FM_Qty.elementAt(i)).trim()+"'," +
						" '"+Buyer_Shortfall_Qty_Total.trim()+"'," +
						" '"+Buyer_Off_Spec_Qty_Total.trim()+"', '"+Buyer_Suspension_Qty_Total.trim()+"', '"+Delv_Failure_Qty_Total.trim()+"'," +
						" '"+Total_Shortfall_Qty_Total.trim()+"', '"+LD_Credit_Payable_Total.trim()+"', '"+FM_Qty_Total.trim()+"')";
				
				////System.out.println("q1-----------------"+q1);
		//SB		stmt.executeUpdate(q1);
			}
			
			}
			
			conn.commit();
		}
		
		}
		catch(Exception e)
		{
			conn.rollback();
			e.printStackTrace();
			
		}
	
	}
	
	String TAX_ADV_ADJ_FLAG_LOG="";
	String TOTAL_COLLECTION_IGST = "0", TOTAL_COLLECTION_SGST = "0", TOTAL_COLLECTION_CGST = "0", TOTAL_COLLECTION_GST0 = "0";
	String TOTAL_CURRENCY_IGST = "", TOTAL_CURRENCY_SGST = "", TOTAL_CURRENCY_CGST = "", TOTAL_CURRENCY_GST0 = "";
	String BALANCEASON_IGST = "0", BALANCEASON_SGST = "0", BALANCEASON_CGST = "0", BALANCEASON_GST0 = "0";
	String PAYABLE_IGST = "0", PAYABLE_SGST = "0", PAYABLE_CGST = "0", PAYABLE_GST0 = "0";
	
	public void fetchPdfFileForViewInvoice()		//BK20160216
	{
		try
		{
			System.out.println("Fetching from LOG");
			NumberFormat nf5=new DecimalFormat("##,###,###,###,##0.00##");
			String period_end_dt="";
			String period_start_dt="";
			String customer_inv_seq_no="";
			String fin_year="";
			String contact_person_cd="";
			String tax_struct_cd="";
			String customer_Invoice_Tax_Amt_INR="";
			String customer_Invoice_Exchg_Rate_Cd="";
			String exchg_rate_dt="";
			String exchg_rate_type="";
			String emp_cd="";
			String authorized_flag="";
			String approved_by="";
			String approved_dt="";
			String approved_flag="";
			String exchng_rate_index="";
			String ent_dt="";
			String mst_flg="";
			String checked_by="";
			String checked_dt="";
			String checked_flag="";
			String authorized_by="";
			String authorized_dt="";
			String sun_apprv="";
			String sun_apprv_dt="";
			String sun_apprv_by="";
			String flag_acc="";
			String inv_amt_usd="";
			String inv_amt_inr="";
			String inv_cur_flag="";
			String map_id="";
			String pdf_inv_dtl="";
			String userdefineddt="";
			String tax_title="";
			
			String customer_Invoice_End_DT1="";
			String customer_Invoice_Start_DT1="";
			
			double total_offspec_qty=0;
			double total_inv_qty = 0;
			double gross_amt = 0;
			
			contract_type=invContractType;
			hlpl_inv_seq_no=invHlplinvseqno;
			
			
			int invcount=0;
						
			//BK20160216
			String query="SELECT SN_NO,SN_REV_NO,FGSA_NO,FGSA_REV_NO,CUSTOMER_CD,PLANT_SEQ_NO,CONTRACT_TYPE," +
					"to_char(PERIOD_END_DT,'dd/mm/yyyy'),to_char(PERIOD_START_DT,'dd/mm/yyyy'),HLPL_INV_SEQ_NO,CUST_INV_SEQ_NO,FINANCIAL_YEAR,CONTACT_PERSON_CD," +
					"to_char(INVOICE_DT,'DD-Mon-YY'),to_char(DUE_DT,'DD-Mon-YY'),TOTAL_QTY,SALE_PRICE,GROSS_AMT_INR,GROSS_AMT_USD,NET_AMT_INR,TAX_AMT_INR," +
					"TAX_STRUCT_CD,TAX_FLAG,EXCHG_RATE_CD,EXCHG_RATE_DT,EXCHG_RATE_VALUE,EXCHG_RATE_TYPE,EMP_CD," +
					"ENT_DT,FLAG,REMARK_1,REMARK_2,CHECKED_BY,CHECKED_DT,CHECKED_FLAG,AUTHORIZED_BY,AUTHORIZED_DT," +
					"AUTHORIZED_FLAG,APPROVED_BY,APPROVED_DT,APPROVED_FLAG,EXCHG_RATE_INDEX,OFFSPEC_QTY,OFFSPEC_FLAG," +
					"OFFSPEC_RATE,SUN_APPROVAL,SUN_APPROVAL_DT,SUN_APPROVAL_BY,REMARK_3,REMARK_3,INV_AMT_USD,INV_AMT_INR," +
					"INV_CUR_FLAG,MAPPING_ID,ADV_INV_NO,to_char(ADV_INV_DT,'DD-Mon-YY'),PDF_INV_DTL,to_char(USER_DEFINED_DAY,'dd/mm/yyyy'),SN_REF_NO,to_char(CUSTOMER_INVOICE_SN_DT,'dd/mm/yyyy')," +
					"to_char(CUSTOMER_INVOICE_FGSA_DT,'dd/mm/yyyy'),CONTACT_CUSTOMER_NAME,CONTACT_SUPPL_NAME,CONTACT_SUPPL_PERSON_ADDRESS," +
					"CONTACT_SUPPL_PERSON_PIN,CONTACT_NAME_AND_DESIGNATION,CONTACT_CUST_PERSON_ADDRESS,CONTACT_CUST_PERSON_CITY," +
					"CONTACT_CUST_PERSON_PIN,CONTACT_SUPPL_PERSON_CITY,LIABILITY_EXIST_FLAG,SUPPL_GST_NO,to_char(SUPPL_GST_DT,'dd-mm-yyyy'),SUPPL_CST_NO," +
					"to_char(SUPPL_CST_DT,'dd-mm-yyyy'),SUPPL_SERVICE_TAX_NO,to_char(SUPPL_SERVICE_TAX_DT,'dd-mm-yyyy') " +
					",TOTAL_COLLECTION,BALANCEASON,TOTAL_CURRENCY,HLPL_INV_NO " +
					",to_char(PERIOD_END_DT,'DD-Mon-YY'),to_char(PERIOD_START_DT,'DD-Mon-YY'),to_char(INVOICE_DT,'dd/mm/yyyy') " +
					",CUSTOMER_ABBR,CUSTOMER_PLANT_NM "+
					",TOTAL_PAYABLE_USD,TOTAL_PAYABLE_INR,TOTAL_PAYABLE_TAX,TOTAL_COLLECTION_TAX,TOTAL_CURRENCY_TAX,ADJ_AMT_INR_TAX, TAX_ADV_ADJ_FLAG,balanceason_tax,SUPPL_PAN_NO,to_char(SUPPL_PAN_DT,'dd/mm/yyyy'),"+
					 "TOTAL_COLLECTION_SBC,TOTAL_CURRENCY_SBC,balanceason_SBC,payable_tax,payable_sbc, " +
					 "TOTAL_COLLECTION_KKC,TOTAL_CURRENCY_KKC,balanceason_KKC,payable_kkc,PAY_TYPE,ADV_ADJ_FLG,"
					 + "NEW_INV_SEQ_NO,SUPPLIER_CD,SUPPL_GSTIN_NO,TO_CHAR(SUPPL_GSTIN_DT,'DD/MM/YYYY'), "
					 + "SAC_CODE,STATE_CODE,PLACE_OF_SUPPLY,CUST_STATE_CODE,"
					 + "TOTAL_COLLECTION_IGST,TOTAL_CURRENCY_IGST,BALANCEASON_IGST,PAYABAL_IGST, " 
					 + "TOTAL_COLLECTION_CGST,TOTAL_CURRENCY_CGST,BALANCEASON_CGST,PAYABAL_CGST, " 
					 + "TOTAL_COLLECTION_SGST,TOTAL_CURRENCY_SGST,BALANCEASON_SGST,PAYABAL_SGST, " 
					 + "TOTAL_COLLECTION_GST0,TOTAL_CURRENCY_GST0,BALANCEASON_GST0,PAYABAL_GST0 " +
					" FROM LOG_DLNG_INVOICE_MST " +
					" where " +
					"financial_year='"+invFinancialYear+"' AND " +
					"hlpl_inv_seq_no="+invHlplinvseqno+" AND " +
					"contract_type='"+invContractType+"' AND FLAG='Y' ";
			//System.out.println("query....HS..20160809.. "+query);
			rset=stmt.executeQuery(query);
			if(rset.next())
			{
				invcount++;
				//SnNo=rset.getString(1)==null?"0":rset.getString(1);
				//SnRevNo=rset.getString(2)==?"0":rset.getString(2);
				//FgsaNo=rset.getString(3)==null?"0":rset.getStringnull(3);
				//FgsaRevNo=rset.getString(4)==null?"0":rset.getString(4);
				//CustomerCd=rset.getString(5)==null?"":rset.getString(5);
				//CustomerPlantSeqNo=rset.getString(6)==null?"":rset.getString(6);
				//ContractType=rset.getString(7)==null?"":rset.getString(7);
				customer_Invoice_End_DT1 =rset.getString(8)==null?"":rset.getString(8);
				customer_Invoice_Start_DT1 =rset.getString(9)==null?"":rset.getString(9);
				//invHlplinvseqno=rset.getString(10)==null?"":rset.getString(10);
				customer_inv_seq_no=rset.getString(11)==null?"":rset.getString(11);
				fin_year=rset.getString(12)==null?"":rset.getString(12);
				contact_person_cd=rset.getString(13)==null?"":rset.getString(13);
				customer_Invoice_DT=rset.getString(14)==null?"":rset.getString(14);
				customer_Invoice_Due_DT=rset.getString(15)==null?"":rset.getString(15);
				total_Invoice_Qty=rset.getString(16)==null?"0.00":nf3.format(Double.parseDouble(rset.getString(16)));
				invoice_Sales_Rate=rset.getString(17)==null?"0.0000":nf2.format(Double.parseDouble(rset.getString(17)));
				customer_Invoice_Gross_Amt_INR=rset.getString(18)==null?"0.00":nf.format(Double.parseDouble(rset.getString(18)));
				customer_Invoice_Gross_Amt_USD=rset.getString(19)==null?"0.00":nf3.format(Double.parseDouble(rset.getString(19)));
				customer_Invoice_Net_Amt_INR=rset.getString(20)==null?"0.00":nf3.format(Double.parseDouble(rset.getString(20)));
				customer_Invoice_Tax_Amt_INR=rset.getString(21)==null?"0.00":nf3.format(Double.parseDouble(rset.getString(21)));
				tax_struct_cd=rset.getString(22)==null?"0":rset.getString(22);
				customer_Invoice_Tax_Flag=rset.getString(23)==null?"V":rset.getString(23);
				customer_Invoice_Exchg_Rate_Cd=rset.getString(24)==null?"0":rset.getString(24);
				exchg_rate_dt=rset.getString(25)==null?"":rset.getString(25);
				customer_Invoice_Exchg_Rate=rset.getString(26)==null?"0.00":nf2.format(Double.parseDouble(rset.getString(26)));
				exchg_rate_type=rset.getString(27)==null?"":rset.getString(27);
				emp_cd=rset.getString(28)==null?"":rset.getString(28);
				
				ent_dt=rset.getString(29)==null?"":rset.getString(29);
				mst_flg=rset.getString(30)==null?"":rset.getString(30);
				remark_1=rset.getString(31)==null?"":rset.getString(31);
				remark_2=rset.getString(32)==null?"":rset.getString(32);
				checked_by=rset.getString(33)==null?"":rset.getString(33);
				checked_dt=rset.getString(34)==null?"":rset.getString(34);
				checked_flag=rset.getString(35)==null?"":rset.getString(35);
				authorized_by=rset.getString(36)==null?"":rset.getString(36);
				authorized_dt=rset.getString(37)==null?"":rset.getString(37);
				authorized_flag=rset.getString(38)==null?"":rset.getString(28);
				approved_by=rset.getString(39)==null?"":rset.getString(39);
				approved_dt=rset.getString(40)==null?"":rset.getString(40);
				approved_flag=rset.getString(41)==null?"":rset.getString(41);
				exchng_rate_index=rset.getString(42)==null?"":rset.getString(42);
				total_Offspec_Qty=rset.getString(43)==null?"":nf3.format(Double.parseDouble(rset.getString(43)));
				offspec_Flag=rset.getString(44)==null?"N":rset.getString(44);
				offspec_Sales_Rate=rset.getString(45)==null?"":rset.getString(45);
				sun_apprv=rset.getString(46)==null?"":rset.getString(46);
				sun_apprv_dt=rset.getString(47)==null?"":rset.getString(47);
				sun_apprv_by=rset.getString(48)==null?"":rset.getString(48);
				remark_3=rset.getString(49)==null?"":rset.getString(49);
				flag_acc=rset.getString(50)==null?"":rset.getString(50);
				inv_amt_usd=rset.getString(51)==null?"":rset.getString(51);
				inv_amt_inr=rset.getString(52)==null?"":rset.getString(52);
				inv_cur_flag=rset.getString(53)==null?"":rset.getString(53);
				map_id=rset.getString(54)==null?"":rset.getString(54);
				invoice_advance_inv_no=rset.getString(55)==null?"":rset.getString(55);
				Invoice_advance_inv_dt=rset.getString(56)==null?"":rset.getString(56);
				pdf_inv_dtl=rset.getString(57)==null?"":rset.getString(57);
				userdefineddt=rset.getString(58)==null?"":rset.getString(58);
				sn_ref_no=rset.getString(59)==null?"":rset.getString(59);
				customer_Invoice_SN_Dt=rset.getString(60)==null?"":rset.getString(60);
				customer_Invoice_FGSA_Dt=rset.getString(61)==null?"":rset.getString(61);
				contact_Customer_Name=rset.getString(62)==null?"":rset.getString(62);
				contact_Suppl_Name=rset.getString(63)==null?"":rset.getString(63);
				contact_Suppl_Person_Address=rset.getString(64)==null?"":rset.getString(64);
				contact_Suppl_Person_Pin=rset.getString(65)==null?"":rset.getString(65);
				contact_Person_Name_And_Designation=rset.getString(66)==null?"":rset.getString(66);
				contact_Customer_Person_Address=rset.getString(67)==null?"":rset.getString(67);
				contact_Customer_Person_City=rset.getString(68)==null?"":rset.getString(68);
				contact_Customer_Person_Pin=rset.getString(69)==null?"":rset.getString(69);
				contact_Suppl_Person_City=rset.getString(70)==null?"":rset.getString(70);
				liability_exist_flag=rset.getString(71)==null?"":rset.getString(71);
				contact_Suppl_GST_NO=rset.getString(72)==null?"":rset.getString(72);
				contact_Suppl_GST_DT=rset.getString(73)==null?"":rset.getString(73);
				contact_Suppl_CST_NO=rset.getString(74)==null?"":rset.getString(74);
				contact_Suppl_CST_DT=rset.getString(75)==null?"":rset.getString(75);
				contact_Suppl_Service_Tax_NO=rset.getString(76)==null?"":rset.getString(76);
				contact_Suppl_Service_Tax_DT=rset.getString(77)==null?"":rset.getString(77);
				pdfFinal_Total_Collection=rset.getString(78)==null?"0.00":nf5.format(Double.parseDouble(rset.getString(78)));
				balanceason=rset.getString(79)==null?"0.00":nf5.format(Double.parseDouble(rset.getString(79)));
				pdfFinal_Total_Currency=rset.getString(80)==null?"":rset.getString(80);
				hlpl_inv_no=rset.getString(81)==null?"":rset.getString(81);
				customer_Invoice_End_DT=rset.getString(82)==null?"":rset.getString(82);
				customer_Invoice_Start_DT=rset.getString(83)==null?"":rset.getString(83);
				invoice_date=rset.getString(84)==null?"":rset.getString(84);
				customer_abbr=rset.getString(85)==null?"":rset.getString(85);
				customer_plant_nm=rset.getString(86)==null?"":rset.getString(86);
				//customer_plant_nm+="_V";
				
				total_offspec_qty=Double.parseDouble(rset.getString(43)==null?"0.00":rset.getString(43));
				total_inv_qty=Double.parseDouble(rset.getString(16)==null?"0.00":rset.getString(16));
				gross_amt=Double.parseDouble(rset.getString(19)==null?"0.00":rset.getString(19));
				//System.out.println("customer_Invoice_DT...... "+customer_Invoice_End_DT1);
				invoice_date=customer_Invoice_End_DT1;
				total_tax_amt=customer_Invoice_Tax_Amt_INR;
				sn_no=SnNo;
				//hlpl_inv_no=invHlplinvseqno;
				
				Pdftotal_invoice_payable_usd=rset.getString(87)==null?"0.00":nf3.format(Double.parseDouble(rset.getString(87)));
				Pdftotal_invoice_payable_inr=rset.getString(88)==null?"0.00":nf3.format(Double.parseDouble(rset.getString(88)));
				Pdftotal_tax_payable=rset.getString(89)==null?"0.00":nf3.format(Double.parseDouble(rset.getString(89)));
				PdfFinal_Total_Collection_tax=rset.getString(90)==null?"0.00":nf5.format(Double.parseDouble(rset.getString(90)));
				PdfFinal_Total_Currency_tax=rset.getString(91)==null?"":rset.getString(91);
				Pdfinvadjustmentamt_inr=rset.getString(92)==null?"0.00":nf3.format(Double.parseDouble(rset.getString(92)));
				TAX_ADV_ADJ_FLAG_LOG=rset.getString(93)==null?"N":rset.getString(93);
				balanceason_tax=rset.getString(94)==null?"0.00":nf5.format(Double.parseDouble(rset.getString(94)));
				contact_Suppl_PAN_NO=rset.getString(95)==null?"":rset.getString(95);	//BK20160216
				contact_Suppl_PAN_DT=rset.getString(96)==null?"":rset.getString(96);	//BK20160216
				PdfFinal_Total_Collection_SBC=rset.getString(97)==null?"0.00":nf5.format(Double.parseDouble(rset.getString(97)));
				PdfFinal_Total_Currency_SBC=rset.getString(98)==null?"":rset.getString(98);
				balanceason_SBC=rset.getString(99)==null?"0.00":nf5.format(Double.parseDouble(rset.getString(99)));
				pdftotal_adv_tax_payable=rset.getString(100)==null?"0.00":nf3.format(Double.parseDouble(rset.getString(100)));
				pdftotal_adv_sbc_payable=rset.getString(101)==null?"0.00":nf3.format(Double.parseDouble(rset.getString(101)));
				PdfFinal_Total_Collection_KKC=rset.getString(102)==null?"0.00":nf5.format(Double.parseDouble(rset.getString(102)));
				PdfFinal_Total_Currency_KKC=rset.getString(103)==null?"":rset.getString(103);
				balanceason_KKC=rset.getString(104)==null?"0.00":nf5.format(Double.parseDouble(rset.getString(104)));
				pdftotal_adv_kkc_payable=rset.getString(105)==null?"0.00":nf3.format(Double.parseDouble(rset.getString(105)));
				payment_type=rset.getString(106)==null?"AP":rset.getString(106);
				ADV_ADJ_FLG=rset.getString(107)==null?"BA":rset.getString(107);
				
				new_inv_seq_no = rset.getString(108)==null?"":rset.getString(108);
				contact_Suppl_GSTIN_NO = rset.getString(110)==null?"":rset.getString(110);
				contact_Suppl_GSTIN_DT = rset.getString(111)==null?"":rset.getString(111);
				sac_code = rset.getString(112)==null?"":rset.getString(112);
				contact_Suppl_State_Code = rset.getString(113)==null?"":rset.getString(113);
				contact_customer_State = rset.getString(114)==null?"":rset.getString(114);
				contact_customer_State_Code = rset.getString(115)==null?"":rset.getString(115);
				
				TOTAL_COLLECTION_IGST = rset.getString(116)==null?"0":rset.getString(116);
				TOTAL_CURRENCY_IGST = rset.getString(117)==null?"0":rset.getString(117);
				BALANCEASON_IGST = rset.getString(118)==null?"0":rset.getString(118);
				PAYABLE_IGST = rset.getString(119)==null?"0":rset.getString(119);
				
				TOTAL_COLLECTION_SGST = rset.getString(120)==null?"0":rset.getString(120);
				TOTAL_CURRENCY_SGST = rset.getString(121)==null?"0":rset.getString(121);
				BALANCEASON_SGST = rset.getString(122)==null?"0":rset.getString(122);
				PAYABLE_SGST = rset.getString(123)==null?"0":rset.getString(123);
				
				TOTAL_COLLECTION_CGST = rset.getString(124)==null?"0":rset.getString(124);
				TOTAL_CURRENCY_CGST = rset.getString(125)==null?"0":rset.getString(125);
				BALANCEASON_CGST = rset.getString(126)==null?"0":rset.getString(126);
				PAYABLE_CGST = rset.getString(127)==null?"0":rset.getString(127);
				
				TOTAL_COLLECTION_GST0 = rset.getString(128)==null?"0":rset.getString(128);
				TOTAL_CURRENCY_GST0 = rset.getString(129)==null?"0":rset.getString(129);
				BALANCEASON_GST0 = rset.getString(130)==null?"0":rset.getString(130);
				PAYABLE_GST0 = rset.getString(131)==null?"0":rset.getString(131);
				
			}
			
			queryString = "SELECT STATE_NM FROM STATE_MST WHERE STATE_CODE = '"+contact_Suppl_State_Code+"' ";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				contact_Suppl_State = rset.getString(1);
			}
			
			queryString = "SELECT SERVICE_NM,RULE_REMARK,SERVICE_DESC FROM FMS7_LNG_SALES_MAPPING WHERE "
					+ "SAC_CODE='"+sac_code+"' AND CONTRACT_TYPE='"+invContractType+"' ";
			rset = stmt.executeQuery(queryString);
			if(rset.next()) {
				sac_name = rset.getString(1);
				Rule_remark = rset.getString(2);
				service_desc = rset.getString(3);
			}
			
			queryString = "SELECT TO_CHAR(TO_DATE('"+customer_Invoice_SN_Dt+"','DD/MM/YYYY'),'fmddth') " +
			  "|| ' ' || TO_CHAR(TO_DATE('"+customer_Invoice_SN_Dt+"','DD/MM/YYYY'),'fmMonth') " +
			  "|| ' ' || TO_CHAR(TO_DATE('"+customer_Invoice_SN_Dt+"','DD/MM/YYYY'),'yyyy') " +
			  "FROM DUAL";
			////System.out.println("Formatted Exchange Rate Date Fetch Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				customer_Invoice_SN_Dt = rset.getString(1)==null?"":rset.getString(1);
			}
			
			queryString = "SELECT TO_CHAR(TO_DATE('"+customer_Invoice_FGSA_Dt+"','DD/MM/YYYY'),'fmddth') " +
			  "|| ' ' || TO_CHAR(TO_DATE('"+customer_Invoice_FGSA_Dt+"','DD/MM/YYYY'),'fmMonth') " +
			  "|| ' ' || TO_CHAR(TO_DATE('"+customer_Invoice_FGSA_Dt+"','DD/MM/YYYY'),'yyyy') " +
			  "FROM DUAL";
			////System.out.println("Formatted Exchange Rate Date Fetch Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				customer_Invoice_FGSA_Dt = rset.getString(1)==null?"":rset.getString(1);
			}
			
			if(offspec_Flag.trim().equalsIgnoreCase("Y") && !total_Offspec_Qty.trim().equals("") && !offspec_Sales_Rate.trim().equals(""))
			{
				offspec_Amt_USD = nf3.format(total_offspec_qty*Double.parseDouble(offspec_Sales_Rate));
				total_Gas_Delivered = total_Invoice_Qty;
				total_Invoice_Qty = nf3.format(total_inv_qty+total_offspec_qty);
				gas_Delivered_Amt_USD = nf3.format(gross_amt-(total_offspec_qty*Double.parseDouble(offspec_Sales_Rate)));
				//gas_Delivered_Amt_USD = customer_Invoice_Gross_Amt_USD;
				//customer_Invoice_Gross_Amt_USD = nf3.format(gross_amt+(Double.parseDouble(total_Offspec_Qty)*Double.parseDouble(offspec_Sales_Rate)));
			}
			else
			{
				total_Gas_Delivered = total_Invoice_Qty;
				gas_Delivered_Amt_USD = customer_Invoice_Gross_Amt_USD;
			}
			////System.out.println("gas_Delivered_Amt_USD  Funt end"+gas_Delivered_Amt_USD);
			
			if(invcount>0)
			{
				FetchAdjustmentofInvoiceDetailsforviewinvoice_FROM_LOG();
			}
			String invadjustmentamt=getInvadjustmentamt();
			String invgrossamt=getInvgrossamt();
			String invadjremark=getInvadjremark();
			String invadjustcur=getInvadjustcur();
			String invadjflag=getInvadjflag();
			String invexchngrt=getInvexchngrt();
			String invtariffflag=getInvtariff_flag();
			String invdiscountflag=getInvdiscount_flag();
			
			String inv_discount_price=getInvdiscount_price();
			String inv_display_rate=getDisplay_rate();
			String invadjust_gross_usd=getAdjust_gross_amt_usd();
			String invadjust_gross_inr=getAdjust_gross_amt_inr();
			String invtariff_gross_usd=getTariff_gross_amt_usd();
			String invtariff_gross_inr=getTariff_gross_amt_inr();
			String invdiscount_gross_usd=getDiscount_gross_amt_usd();
			String invdiscount_gross_inr=getDiscount_gross_amt_inr();
			String Final_first_gross_amt=getFinal_first_gross_amt();
			String Final_adjust_gross_amt=getFinal_adjust_gross_amt();
			
		//	//System.out.println(Final_first_gross_amt);
			pdfinvadjustcur=invadjustcur;
			
			if(invadjremark!=null)
			{
				if(!invadjremark.trim().equals(""))
				{
					while((invadjremark.indexOf("\n"))!=-1)
					{
						invadjremark=(invadjremark.substring(0,invadjremark.indexOf("\n")-1))+"<br>"+(invadjremark.substring(invadjremark.indexOf("\n")+1));
					}
				}
			}
			
			//if(invcount>0){
			 advance_payment_flag=false;
			 Tariff_flag=false;
			 Discount_flag=false;
			String Currency="USD";
			//java.text.NumberFormat nf=new java.text.DecimalFormat("##0.00");
			java.text.NumberFormat nfa=new java.text.DecimalFormat("##0.0000");
			String total_tariff_discount="";
		//	//System.out.println("Final_first_gross_amt........ "+Final_first_gross_amt);
			if(invadjflag.equalsIgnoreCase("Y"))
			{
				advance_payment_flag=true;
				gas_Delivered_Amt_USD=Final_first_gross_amt;
			}
			if(invtariffflag.equalsIgnoreCase("Y"))
			{
				Tariff_flag=true;
				Currency="Rupees";
				
			//	//System.out.println("SIZE---EROFEB---------"+invexchngrt+"<--->"+gas_Delivered_Amt_USD);
				gas_Delivered_Amt_USD=Final_first_gross_amt;
				////System.out.println("SIZE---EROFEB---------"+inv_discount_price+"<--->"+inv_display_rate);
			
				if(offspec_Flag.trim().equalsIgnoreCase("Y"))
				{
					offspec_Sales_Rate=""+(Double.parseDouble(offspec_Sales_Rate)*Double.parseDouble(invexchngrt));
					offspec_Amt_USD=""+(Double.parseDouble(offspec_Amt_USD)*Double.parseDouble(invexchngrt));
					offspec_Amt_USD=nf.format(Double.parseDouble(offspec_Amt_USD));
					offspec_Sales_Rate=nfa.format(Double.parseDouble(offspec_Sales_Rate));
				}
				if(invdiscountflag.equalsIgnoreCase("Y"))
				{
					 total_tariff_discount=""+(Double.parseDouble(inv_discount_price)+Double.parseDouble(inv_display_rate));
				}
			}
			if(invdiscountflag.equalsIgnoreCase("Y"))
			{
				Discount_flag=true;
				gas_Delivered_Amt_USD=Final_first_gross_amt;
				total_tariff_discount=""+Double.parseDouble(inv_display_rate);
			}
			String Final_first_gross_amt_inr="0";
			if(!Tariff_flag && invadjustcur.equalsIgnoreCase("1"))
			{
				Final_first_gross_amt_inr=""+(Double.parseDouble(""+java.text.NumberFormat.getInstance().parse(Final_first_gross_amt))*Double.parseDouble(invexchngrt));
				Final_first_gross_amt_inr=	nf3.format(Double.parseDouble(Final_first_gross_amt_inr));
			}
			
			String invadjustmentamt_inr="";
			if(TAX_ADV_ADJ_FLAG_LOG.equalsIgnoreCase("Y"))
			{
				
				Final_first_gross_amt_inr=""+(Double.parseDouble(""+java.text.NumberFormat.getInstance().parse(Final_first_gross_amt))*Double.parseDouble(invexchngrt));
				Final_first_gross_amt_inr=	nf3.format(Double.parseDouble(Final_first_gross_amt_inr));
				
				
				invadjustmentamt_inr=""+(Double.parseDouble(""+java.text.NumberFormat.getInstance().parse(invadjustmentamt))*Double.parseDouble(invexchngrt));
				invadjustmentamt_inr=	nf3.format(Double.parseDouble(invadjustmentamt_inr));
				setPdfinvadjustmentamt_inr(invadjustmentamt_inr);
				
				setPdfTAX_ADV_ADJ_FLAG(TAX_ADV_ADJ_FLAG);
				setPdfTAX_ADV_ADJ_AMT(TAX_ADV_ADJ_AMT);
				setPdfTAX_ADV_ADJ_CUR(TAX_ADV_ADJ_CUR);
				setPdfTAX_ADV_ADJ_SIGN(TAX_ADV_ADJ_SIGN);
				setPdfTAX_ADV_ADJ_GROSS_INR(TAX_ADV_ADJ_GROSS_INR);
				setPdfTAX_ADV_ADJ_GROSS_USD(TAX_ADV_ADJ_GROSS_USD);
				setPdfTAX_ADV_ADJ_remark(TAX_ADV_ADJ_remark);
				
				setPdfSBC_ADV_ADJ_FLAG(SBC_ADV_ADJ_FLAG);
				setPdfSBC_ADV_ADJ_AMT(SBC_ADV_ADJ_AMT);
				setPdfSBC_ADV_ADJ_CUR(SBC_ADV_ADJ_CUR);
				setPdfSBC_ADV_ADJ_SIGN(SBC_ADV_ADJ_SIGN);
				setPdfSBC_ADV_ADJ_GROSS_INR(SBC_ADV_ADJ_GROSS_INR);
				setPdfSBC_ADV_ADJ_GROSS_USD(SBC_ADV_ADJ_GROSS_USD);
				setPdfSBC_ADV_ADJ_remark(SBC_ADV_ADJ_remark);
				
				setPdfKKC_ADV_ADJ_FLAG(KKC_ADV_ADJ_FLAG);
				setPdfKKC_ADV_ADJ_AMT(KKC_ADV_ADJ_AMT);
				setPdfKKC_ADV_ADJ_CUR(KKC_ADV_ADJ_CUR);
				setPdfKKC_ADV_ADJ_SIGN(KKC_ADV_ADJ_SIGN);
				setPdfKKC_ADV_ADJ_GROSS_INR(KKC_ADV_ADJ_GROSS_INR);
				setPdfKKC_ADV_ADJ_GROSS_USD(KKC_ADV_ADJ_GROSS_USD);
				setPdfKKC_ADV_ADJ_remark(KKC_ADV_ADJ_remark);
				
				setTAX_ADV_ADJ_FLAG_GST(TAX_ADV_ADJ_FLAG_GST);
				setTAX_ADV_ADJ_AMT_GST(TAX_ADV_ADJ_AMT_GST);
				setTAX_ADV_ADJ_CUR_GST(TAX_ADV_ADJ_CUR_GST);
				setTAX_ADV_ADJ_SIGN_GST(TAX_ADV_ADJ_SIGN_GST);
				setTAX_ADV_ADJ_ABBR_GST(TAX_ADV_ADJ_ABBR_GST);
				setTAX_ADV_ADJ_CODE_GST(TAX_ADV_ADJ_CODE_GST);
				setTAX_ADV_ADJ_GROSS_INR_GST(TAX_ADV_ADJ_GROSS_INR_GST);
				setTAX_ADV_ADJ_GROSS_USD_GST(TAX_ADV_ADJ_GROSS_USD_GST);
				setTAX_ADV_ADJ_REMARK_GST(TAX_ADV_ADJ_REMARK_GST);
				setTotal_compo_tax_payable(total_compo_tax_payable);
				
				setTAX_FLAG(TAX_FLAG);
				setTAX_TOTAL_COLLECTION(TAX_TOTAL_COLLECTION);
				setTAX_TOTAL_CURRENCY(TAX_TOTAL_CURRENCY);
				setTAX_ADJ_AMT(TAX_ADJ_AMT);
				setTAX_ADJ_BAL(TAX_ADJ_BAL);
				setTAX_ADJ_CUR(TAX_ADJ_CUR);
				setTAX_INVOICE_DT(TAX_INVOICE_DT);
				setTAX_INVOICE_NO(TAX_INVOICE_NO);
				setTAX_BALANCE_ASON(TAX_BALANCE_ASON);
				setCompo_abbr(compo_abbr);
				setCompo_cd(compo_cd);
				
				setPdfTAX_ADV_ADJ_FLAG(TAX_ADV_ADJ_FLAG);
				setPdfTAX_ADV_ADJ_AMT(TAX_ADV_ADJ_AMT);
				setPdfTAX_ADV_ADJ_CUR(TAX_ADV_ADJ_CUR);
				setPdfTAX_ADV_ADJ_SIGN(TAX_ADV_ADJ_SIGN);
				setPdfTAX_ADV_ADJ_GROSS_INR(TAX_ADV_ADJ_GROSS_INR);
				setPdfTAX_ADV_ADJ_GROSS_USD(TAX_ADV_ADJ_GROSS_USD);
				setPdfTAX_ADV_ADJ_remark(TAX_ADV_ADJ_remark);
				
				//setPdftotal_invoice_payable_usd(total_invoice_payable_usd);
				//setPdftotal_invoice_payable_inr(total_invoice_payable_inr);
				//setPdftotal_tax_payable(total_tax_payable);
			}
				
			 setContact_Suppl_GSTIN_DT(contact_Suppl_GSTIN_DT);
			 setContact_Suppl_GSTIN_NO(contact_Suppl_GSTIN_NO);
			 setRule_remark(Rule_remark);
			 setSac_code(sac_code);
			 setSac_name(sac_name);
			 setContact_customer_State_Code(contact_customer_State_Code);
			 setContact_customer_State(contact_customer_State);
			 setContact_Suppl_State(contact_Suppl_State);
			 setContact_Suppl_State_Code(contact_Suppl_State_Code);
			 setDate_flag(date_flag);
			 setNew_inv_seq_no(new_inv_seq_no);
			 setTax_gst(tax_gst);
			 setService_desc(service_desc);
			
			
			setPdfCurrency(Currency);
			
		//	//System.out.println("Final_first_gross_amt...2..... "+Final_first_gross_amt);
			setPdfinvadjustmentamt(invadjustmentamt);
			setPdfinvgrossamt(invgrossamt);
			setPdfinvadjremark(invadjremark);
			setPdfinvadjustcur(invadjustcur);
			setPdfinvadjflag(invadjflag);
			setPdfinvexchngrt(invexchngrt);
			setPdfinvtariffflag(invtariffflag);
			setPdfinvdiscountflag(invdiscountflag);
			setPdfinv_discount_price(inv_discount_price);
			setPdfinv_display_rate(inv_display_rate);
			
			setPdfinvadjust_gross_usd(invadjust_gross_usd);
			setPdfinvadjust_gross_inr(invadjust_gross_inr);
			setPdfinvtariff_gross_usd(invtariff_gross_usd);
			setPdfinvtariff_gross_inr(invtariff_gross_inr);
			setPdfinvdiscount_gross_usd(invdiscount_gross_usd);
			setPdfinvdiscount_gross_inr(invdiscount_gross_inr);
			setPdfFinal_first_gross_amt(Final_first_gross_amt);
			setPdfFinal_adjust_gross_amt(Final_adjust_gross_amt);
			setPdftotal_tariff_discount(total_tariff_discount);
			setPdfFinal_first_gross_amt_inr(Final_first_gross_amt_inr);
			
			String bill_period_start_dt=customer_Invoice_Start_DT1;
			String bill_period_end_dt=customer_Invoice_End_DT1;
		//	//System.out.println("....3...");
			
			if(bill_period_start_dt!=null && !bill_period_start_dt.equals("") && !bill_period_start_dt.equals(" ") && bill_period_end_dt!=null && !bill_period_end_dt.equals("") && !bill_period_end_dt.equals(" "))
			{
				int date_part = 0;
				String date_portion = "";
				
				queryString3 = "SELECT TO_DATE('"+bill_period_end_dt+"','DD/MM/YYYY') - TO_DATE('"+bill_period_start_dt+"','DD/MM/YYYY') + 1 FROM DUAL";
				////System.out.println("Query To FindOut Dates For Billing Duration = "+queryString3);
				rset3 = stmt3.executeQuery(queryString3);
				if(rset3.next())
				{
					if(Integer.parseInt(rset3.getString(1))>0)
					{
						for(int i=0; i<Integer.parseInt(rset3.getString(1)); i++)
						{
							date_part = Integer.parseInt(bill_period_start_dt.substring(0,2));
							date_part += i;  
							if(date_part>9)
							{
								date_portion = date_part+bill_period_start_dt.substring(2);
							}
							else if(date_part<=9 && date_part>0)
							{
								date_portion = "0"+date_part+bill_period_start_dt.substring(2);
							}
							else
							{
								date_portion = bill_period_end_dt;
							}
							
							invoice_Period_Dates.add(date_portion);
						}
					}					
				}
				
			}
			Vector daily_qty=new Vector();
			Vector daily_amt_inr=new Vector();
			Vector daily_amt_usd=new Vector();
			Vector daily_exch_rate_cd=new Vector();
			Vector daily_exch_value=new Vector();
			
			
			for(int i=0;i<invoice_Period_Dates.size();i++){
				
				queryString="SELECT ALLOCATION_DT,HLPL_INV_SEQ_NO,FINANCIAL_YEAR,DAILY_QTY,AMT_INR,AMT_USD," +
						"EXCHG_RATE_CD,EXCHG_RATE_VALUE,EMP_CD,ENT_DT,FLAG,CONTRACT_TYPE,PERIOD_DCQ," +
						"PERIOD_BUYER_NOM_QTY,PERIOD_SELLER_NOM_PNQ,PERIOD_SELLER_NOM_RE_QTY," +
						"PERIOD_GAS_DELIVERED_PNQ,PERIOD_GAS_DELIVERED_RE_QTY,PERIOD_GAS_DELIVERED_TOTAL_QTY," +
						"PERIOD_CUMULATIVE_QTY,PERIOD_CUMULATIVE_SN_QTY,DCQ_TOTAL,BUYER_NOM_QTY_TOTAL," +
						"SELLER_NOM_PNQ_TOTAL,SELLER_NOM_RE_QTY_TOTAL,GAS_DELIVERED_PNQ_TOTAL, GAS_DELIVERED_RE_QTY_TOTAL," +
						" DELIVERED_TOTAL_QTY_TOTAL,PERIOD_BUYER_SHORTFALL_QTY,PERIOD_BUYER_OFF_SPEC_QTY," +
						"PERIOD_BUYER_SUSPENSION_QTY,PERIOD_DELV_FAILURE_QTY,PERIOD_TOTAL_SHORTFALL_QTY," +
						"PERIOD_LD_CREDIT_PAYABLE,PERIOD_FM_QTY,BUYER_SHORTFALL_QTY_TOTAL,BUYER_OFF_SPEC_QTY_TOTAL," +
						"BUYER_SUSPENSION_QTY_TOTAL,DELV_FAILURE_QTY_TOTAL,TOTAL_SHORTFALL_QTY_TOTAL," +
						"LD_CREDIT_PAYABLE_TOTAL,FM_QTY_TOTAL " +
						"FROM LOG_FMS7_INVOICE_DTL WHERE hlpl_inv_seq_no='"+invHlplinvseqno+"' " +
						"AND financial_year='"+invFinancialYear+"' " +
						"and allocation_dt=TO_DATE('"+invoice_Period_Dates.elementAt(i)+"','DD/MM/YYYY') " +
						" and contract_type='"+contract_type+"'";
				rset=stmt2.executeQuery(queryString);
				if(rset.next())
				{
					//alloc_dt=rset.getString(1)==null?"0":rset.getString(1);
					//inv_no=rset.getString(2)==null?"0":rset.getString(2);
					//fin_year=rset.getString(3)==null?"0":rset.getString(3);
					daily_qty.add(rset.getString(4)==null?"0":rset.getString(4));
					daily_amt_inr.add(rset.getString(5)==null?"":rset.getString(5));
					daily_amt_usd.add(rset.getString(6)==null?"":rset.getString(6));
					daily_exch_rate_cd.add(rset.getString(7)==null?"":rset.getString(7));
					daily_exch_value.add(rset.getString(8)==null?"":rset.getString(8));
					//emp_cd =rset.getString(9)==null?"":rset.getString(9);
					//ent_dt=rset.getString(10)==null?"":rset.getString(10);
					//flag=rset.getString(11)==null?"":rset.getString(11);
					//contract_type=rset.getString(12)==null?"":rset.getString(12);
					invoice_Period_DCQ.add(rset.getString(13)==null?"0.00":nf.format(Double.parseDouble(rset.getString(13))));
					invoice_Period_Buyer_Nom_Qty.add(rset.getString(14)==null?"0.00":nf.format(Double.parseDouble(rset.getString(14))));
					invoice_Period_Seller_Nom_PNQ.add(rset.getString(15)==null?"0.00":nf.format(Double.parseDouble(rset.getString(15))));
					invoice_Period_Seller_Nom_RE_Qty.add(rset.getString(16)==null?"0.00":nf.format(Double.parseDouble(rset.getString(16))));
					invoice_Period_Gas_Delivered_PNQ.add(rset.getString(17)==null?"0.00":nf.format(Double.parseDouble(rset.getString(17))));
					invoice_Period_Gas_Delivered_Re_Qty.add(rset.getString(18)==null?"0.00":nf.format(Double.parseDouble(rset.getString(18))));
					invoice_Period_Gas_Delivered_Total_Qty.add(rset.getString(19)==null?"0.00":nf.format(Double.parseDouble(rset.getString(19))));
					invoice_Period_Cumulative_Qty.add(rset.getString(20)==null?"0.00":nf.format(Double.parseDouble(rset.getString(20))));
					invoice_Period_Cumulative_SN_Qty.add(rset.getString(21)==null?"0.00":nf.format(Double.parseDouble(rset.getString(21))));
					DCQ_Total=rset.getString(22)==null?"0.00":nf.format(Double.parseDouble(rset.getString(22)));
					Buyer_Nom_Qty_Total=rset.getString(23)==null?"":nf.format(Double.parseDouble(rset.getString(23)));
					Seller_Nom_PNQ_Total=rset.getString(24)==null?"":nf.format(Double.parseDouble(rset.getString(24)));
					Seller_Nom_RE_Qty_Total=rset.getString(25)==null?"":nf.format(Double.parseDouble(rset.getString(25)));
					Gas_Delivered_PNQ_Total=rset.getString(26)==null?"":nf.format(Double.parseDouble(rset.getString(26)));
					Gas_Delivered_Re_Qty_Total=rset.getString(27)==null?"":nf.format(Double.parseDouble(rset.getString(27)));
					Delivered_Total_Qty_Total=rset.getString(28)==null?"":nf.format(Double.parseDouble(rset.getString(28)));
					
					invoice_Period_Buyer_Shortfall_Qty.add(rset.getString(29)==null?"0.00":nf.format(Double.parseDouble(rset.getString(29))));
					invoice_Period_Buyer_Off_Spec_Qty.add(rset.getString(30)==null?"0.00":nf.format(Double.parseDouble(rset.getString(30))));
					invoice_Period_Buyer_Suspension_Qty.add(rset.getString(31)==null?"0.00":nf.format(Double.parseDouble(rset.getString(31))));
					invoice_Period_Delv_Failure_Qty.add(rset.getString(32)==null?"0.00":nf.format(Double.parseDouble(rset.getString(32))));
					invoice_Period_Total_Shortfall_Qty.add(rset.getString(33)==null?"0.00":nf.format(Double.parseDouble(rset.getString(33))));
					invoice_Period_LD_Credit_Payable.add(rset.getString(34)==null?"0.00":nf.format(Double.parseDouble(rset.getString(34))));
					invoice_Period_FM_Qty.add(rset.getString(35)==null?"0.00":nf.format(Double.parseDouble(rset.getString(35))));
					Buyer_Shortfall_Qty_Total=rset.getString(36)==null?"0.00":nf.format(Double.parseDouble(rset.getString(36)));
					Buyer_Off_Spec_Qty_Total=rset.getString(37)==null?"0.00":nf.format(Double.parseDouble(rset.getString(37)));
					Buyer_Suspension_Qty_Total=rset.getString(38)==null?"0.00":nf.format(Double.parseDouble(rset.getString(28)));
					Delv_Failure_Qty_Total=rset.getString(39)==null?"0.00":nf.format(Double.parseDouble(rset.getString(39)));
					Total_Shortfall_Qty_Total=rset.getString(40)==null?"0.00":nf.format(Double.parseDouble(rset.getString(40)));
					LD_Credit_Payable_Total=rset.getString(41)==null?"0.00":nf.format(Double.parseDouble(rset.getString(41)));
					FM_Qty_Total=rset.getString(42)==null?"0.00":nf.format(Double.parseDouble(rset.getString(42)));
				}
				
			}
			
			
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public void FetchAdjustmentofInvoiceDetailsforviewinvoice_FROM_LOG()
	{	
		try
		{ 
			NumberFormat nf5=new DecimalFormat("##,###,###,###,##0.00##");
			
			String invadjrecv="";
			String invgrossamt_inr="";
			String invgrossamt_usd="";
			String invnetamtinr="";
			String invgrossadjustedinr="";
			String invgrossadjustedusd="";
			String invadjustmentamtinr="";
			String invtaxstructcd="";
			String tempinvadjustamt="";
			
			
			String invadjustsign="";
			
			String invtariff_inr="";
			
			String invtariff_inv_amt_inr="";
			
			String invinv_amt_inr="";
			String invinv_amt_usd="";
			String invtotal_qty="";
			String Invoice_Sequence_Flag="";
			
			
			String First_gross_amt_usd="";
			String First_gross_amt_inr="";
			//String Final_first_gross_amt="0";
			
			
			String invdiscount_price_usd="";
			String invdiscount_price_inr="";
			String rate_usd="";
			String rate_inr="";
			String adjust_amt_usd="";
			String adjust_amt_inr="";
			
			String basic_amt_usd="0";
			String basic_amt_inr="0";
			

			String raw_amt_usd="0";
			String raw_amt_inr="0";
			
			String invsaleprice="";
			String invinvoicedt="";
			String invadvinvno="";
			String invadvinvdt="";
			String invexchratedt="";
			
			queryString = "select gross_amt_usd,gross_amt_inr," +
			" net_amt_inr,exchg_rate_value, tax_struct_cd, " +
			" total_qty, sale_price,to_char(invoice_dt,'dd/mm/yyyy')" +
			" ,ADV_INV_NO,TO_CHAR(ADV_INV_DT,'DD/MM/YYYY') "+//ADDED FOR ADVANCE INV NO
			" ,TO_CHAR(EXCHG_RATE_DT,'DD/MM/YYYY')" +
			" ,INV_AMT_INR,INV_AMT_USD  " +
			" FROM LOG_DLNG_INVOICE_MST WHERE " +
			" financial_year='"+invFinancialYear+"' AND " +
			" hlpl_inv_seq_no='"+invHlplinvseqno+"' AND " +
			" contract_type='"+invContractType+"' AND FLAG='Y'";
			
			////System.out.println("Invoice Details Fetch Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				invgrossamt_usd=rset.getString(1)==null?"0":rset.getString(1);
				invgrossamt_inr=rset.getString(2)==null?"0":rset.getString(2);
				invnetamtinr=rset.getString(3)==null?"0":rset.getString(3);
				invexchngrt=rset.getString(4)==null?"0":rset.getString(4);
				invtaxstructcd=rset.getString(5)==null?"0":rset.getString(5);
				invtotal_qty=rset.getString(6)==null?"0":rset.getString(6);
				invsaleprice=rset.getString(7)==null?"0":rset.getString(7);
				invinvoicedt=rset.getString(8)==null?"":rset.getString(8);
				invadvinvno=rset.getString(9)==null?"":rset.getString(9);
				invadvinvdt=rset.getString(10)==null?"":rset.getString(10);
				invexchratedt=rset.getString(11)==null?"":rset.getString(11);
				raw_amt_inr=rset.getString(12)==null?"0":rset.getString(12);
				raw_amt_usd=rset.getString(13)==null?"0":rset.getString(13);
				
			}
			String same_no = invadvinvno, diff_no = "";
			String invoice_dtl = invadvinvno+ " dated "+invadvinvdt; 
			String invoice_dates = invadvinvdt;
			String query = "SELECT ADV_INV_NO, NVL(TO_CHAR(ADV_INV_DT,'DD/MM/YYYY'),'') "
					+ "FROM FMS8_ADV_INV_DTL "
					+ "WHERE FINANCIAL_YEAR = '"+invFinancialYear+"' AND CONTRACT_TYPE = '"+invContractType+"' "
					+ "AND HLPL_INV_SEQ_NO = '"+invHlplinvseqno+"' AND ADV_INV_NO != '"+invadvinvno+"' ";
			rset = stmt.executeQuery(query);
			while(rset.next())
			{
//					invoice_dtl += ", "+rset.getString(1)+" dated "+rset.getString(2);
					String dt = rset.getString(2);
					if(!invadvinvdt.trim().equals(dt.trim()) && !invoice_dates.contains(dt)) {
						if(diff_no.length()==0) {
							diff_no = rset.getString(1)+" dated "+rset.getString(2);
						} else {
							diff_no += " , "+ rset.getString(1)+" dated "+rset.getString(2);
						}
					} else {
						same_no += ", "+rset.getString(1);
					}
			}
			same_no += " dated "+invadvinvdt;
			if(diff_no.length()!=0) {
				same_no += " , "+diff_no;
			}
			invoice_dtl = same_no;
			
			int cnt=0;
			String Mapping_seq_no=invContractType+":"+invFinancialYear+":"+invHlplinvseqno+":"+invinvoicedt;
			String mapid[]=customer_inv_mapping_id.split("-");
			String queryString1="select price_cd, AMOUNT, CURRENCY, TOTAL_TARIFF, INV_AMT_INR, " +
					" INV_AMT_USD, REC_FLAG, REMARK, FLAG, OPERATION, BASIC_INV_AMT_INR, BASIC_INV_AMT_USD from LOG_FMS7_INV_COMPO_DTL" +
					" where INV_SEQ_NO='"+Mapping_seq_no+"'  and (flag_temp not like 'T' or flag_temp is null)";
			if(modifycontract_type.equalsIgnoreCase("T") || modifycontract_type.equalsIgnoreCase("C"))
			{
				queryString1+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
			}
			////System.out.println("Componenet details Fetch Query = "+queryString1);
			rset1=stmt1.executeQuery(queryString1);
			while(rset1.next())
			{
				cnt++;
				String price_cd=rset1.getString(1)==null?"0":rset1.getString(1);
				basic_amt_usd=rset1.getString(12)==null?"0":rset1.getString(12);
				basic_amt_inr=rset1.getString(11)==null?"0":rset1.getString(11);
				
		//		//System.out.println("price_cd--"+price_cd+""+""+"");
				if(price_cd.equalsIgnoreCase("1"))
				{
					invadjflag=rset1.getString(9)==null?"N":rset1.getString(9);
				//	//System.out.println("price_cd--"+price_cd+"invadjflag--->"+invadjflag+""+"");
					if(invadjflag.equalsIgnoreCase("Y"))
					{
						invadjustmentamt=rset1.getString(2)==null?"0":rset1.getString(2);
						invadjustcur=rset1.getString(3)==null?"0":rset1.getString(3);
						adjust_gross_amt_inr=rset1.getString(5)==null?"0":rset1.getString(5);
						adjust_gross_amt_usd=rset1.getString(6)==null?"0":rset1.getString(6);
						invadjrecv=rset1.getString(7)==null?"0":rset1.getString(7);
						invadjremark=rset1.getString(8)==null?"":rset1.getString(8);
						invadjustsign=rset1.getString(10)==null?"1":rset1.getString(10);
						
						
						if(invadjremark.trim().equalsIgnoreCase(""))
						{
							//invadjremark="Adjustment against advance amount received vide Invoice No. "+invadvinvno+" dated "+invadvinvdt;
							invadjremark="Adjustment for advance amount paid against Receipt Voucher No. "+invoice_dtl;
						}
						
					}
				//	//System.out.println("price_cd--"+price_cd+"invadjflag--->"+invadjflag+"invadjustmentamt--->"+invadjustmentamt+"");
				}
				if(price_cd.equalsIgnoreCase("3"))
				{
					invtariff_flag=rset1.getString(9)==null?"N":rset1.getString(9);
					if(invtariff_flag.equalsIgnoreCase("Y"))
					{
						invtariff_inr=rset1.getString(2)==null?"0":rset1.getString(2);
						invtariff_total_inr=rset1.getString(4)==null?"0":rset1.getString(4);
						tariff_gross_amt_inr=rset1.getString(5)==null?"0":rset1.getString(5);
						tariff_gross_amt_usd=rset1.getString(6)==null?"0":rset1.getString(6);
						
					}
				}
				if(price_cd.equalsIgnoreCase("2"))
				{
					invdiscount_flag=rset1.getString(9)==null?"N":rset1.getString(9);
					if(invdiscount_flag.equalsIgnoreCase("Y"))
					{
						invdiscount_price=rset1.getString(2)==null?"0":rset1.getString(2);
						
						discount_gross_amt_inr=rset1.getString(5)==null?"0":rset1.getString(5);
						discount_gross_amt_usd=rset1.getString(6)==null?"0":rset1.getString(6);
						
					}
				}
				if(TAX_ADV_ADJ_FLAG_LOG.equalsIgnoreCase("Y"))
				{
					if(price_cd.equalsIgnoreCase("6"))
					{
						TAX_ADV_ADJ_FLAG=rset1.getString(9)==null?"N":rset1.getString(9);
					//	//System.out.println("price_cd--"+price_cd+"invadjflag--->"+invadjflag+""+"");
						if(TAX_ADV_ADJ_FLAG.equalsIgnoreCase("Y"))
						{
							TAX_ADV_ADJ_AMT=rset1.getString(2)==null?"0":rset1.getString(2);
							TAX_ADV_ADJ_CUR=rset1.getString(3)==null?"0":rset1.getString(3);
							TAX_ADV_ADJ_GROSS_INR=rset1.getString(5)==null?"0":rset1.getString(5);
							TAX_ADV_ADJ_GROSS_USD=rset1.getString(6)==null?"0":rset1.getString(6);
							//invadjrecv=rset1.getString(7)==null?"0":rset1.getString(7);
							//invadjremark=rset1.getString(8)==null?"":rset1.getString(8);
							TAX_ADV_ADJ_SIGN=rset1.getString(10)==null?"1":rset1.getString(10);
							
							TAX_ADV_ADJ_remark="Adjustment for Service Tax paid on advance amount paid against Receipt Voucher No. "+invoice_dtl;
							//if(invadjremark.trim().equalsIgnoreCase(""))
							//{
							//	invadjremark="Adjustment against advance amount received vide Invoice No. "+invadvinvno+" dated "+invadvinvdt;
							//}
							
						}
					//	//System.out.println("price_cd--"+price_cd+"invadjflag--->"+invadjflag+"invadjustmentamt--->"+invadjustmentamt+"");
					}
				}
				if(TAX_ADV_ADJ_FLAG_LOG.equalsIgnoreCase("Y")) 
				{
					if(price_cd.equalsIgnoreCase("7"))
					{
						SBC_ADV_ADJ_FLAG=rset1.getString(9)==null?"N":rset1.getString(9);
					//	//System.out.println("price_cd--"+price_cd+"invadjflag--->"+invadjflag+""+"");
						if(SBC_ADV_ADJ_FLAG.equalsIgnoreCase("Y"))
						{
							SBC_ADV_ADJ_AMT=rset1.getString(2)==null?"0":rset1.getString(2);
							SBC_ADV_ADJ_CUR=rset1.getString(3)==null?"0":rset1.getString(3);
							SBC_ADV_ADJ_GROSS_INR=rset1.getString(5)==null?"0":rset1.getString(5);
							SBC_ADV_ADJ_GROSS_USD=rset1.getString(6)==null?"0":rset1.getString(6);
							//invadjrecv=rset1.getString(7)==null?"0":rset1.getString(7);
							//invadjremark=rset1.getString(8)==null?"":rset1.getString(8);
							SBC_ADV_ADJ_SIGN=rset1.getString(10)==null?"1":rset1.getString(10);
							
							SBC_ADV_ADJ_remark="Adjustment for Swachh Bharat Cess Tax paid on advance amount paid against Receipt Voucher No. "+invoice_dtl;
							//if(invadjremark.trim().equalsIgnoreCase(""))
							//{
							//	invadjremark="Adjustment against advance amount received vide Invoice No. "+invadvinvno+" dated "+invadvinvdt;
							//}
							
						}
					//	//System.out.println("price_cd--"+price_cd+"invadjflag--->"+invadjflag+"invadjustmentamt--->"+invadjustmentamt+"");
					}
				
					if(price_cd.equalsIgnoreCase("8"))
					{
						KKC_ADV_ADJ_FLAG=rset1.getString(9)==null?"N":rset1.getString(9);
					//	//System.out.println("price_cd--"+price_cd+"invadjflag--->"+invadjflag+""+"");
						if(KKC_ADV_ADJ_FLAG.equalsIgnoreCase("Y"))
						{
							KKC_ADV_ADJ_AMT=rset1.getString(2)==null?"0":rset1.getString(2);
							KKC_ADV_ADJ_CUR=rset1.getString(3)==null?"0":rset1.getString(3);
							KKC_ADV_ADJ_GROSS_INR=rset1.getString(5)==null?"0":rset1.getString(5);
							KKC_ADV_ADJ_GROSS_USD=rset1.getString(6)==null?"0":rset1.getString(6);
							//invadjrecv=rset1.getString(7)==null?"0":rset1.getString(7);
							//invadjremark=rset1.getString(8)==null?"":rset1.getString(8);
							KKC_ADV_ADJ_SIGN=rset1.getString(10)==null?"1":rset1.getString(10);
							
							KKC_ADV_ADJ_remark="Adjustment for Krishi Kalyan Cess Tax paid on advance amount paid against Receipt Voucher No. "+invoice_dtl;
							//if(invadjremark.trim().equalsIgnoreCase(""))
							//{
							//	invadjremark="Adjustment against advance amount received vide Invoice No. "+invadvinvno+" dated "+invadvinvdt;
							//}
							
						}
					//	//System.out.println("price_cd--"+price_cd+"invadjflag--->"+invadjflag+"invadjustmentamt--->"+invadjustmentamt+"");
					}
					
					if(price_cd.equalsIgnoreCase("10") || price_cd.equalsIgnoreCase("11") || price_cd.equalsIgnoreCase("12") || price_cd.equalsIgnoreCase("13"))
					{
						String abbr = price_cd;
						String q = "SELECT COMPO_NM FROM FMS7_COMPO_MST WHERE COMPO_CD='"+price_cd+"' ";
						rset = stmt.executeQuery(q);
						if(rset.next()) {
							abbr = rset.getString(1);
						}
						TAX_ADV_ADJ_FLAG_GST.put(price_cd,rset1.getString(9)==null?"N":rset1.getString(9));
						TAX_ADV_ADJ_AMT_GST.put(price_cd,rset1.getString(2)==null?"0":nf3.format(Double.parseDouble(rset1.getString(2))));
						TAX_ADV_ADJ_CUR_GST.put(price_cd,rset1.getString(3)==null?"0":rset1.getString(3));
						TAX_ADV_ADJ_GROSS_INR_GST.put(price_cd,rset1.getString(5)==null?"0":rset1.getString(5));
						TAX_ADV_ADJ_GROSS_USD_GST.put(price_cd,rset1.getString(6)==null?"0":rset1.getString(6));
						TAX_ADV_ADJ_SIGN_GST.put(price_cd,rset1.getString(10)==null?"1":rset1.getString(10));
						TAX_ADV_ADJ_CODE_GST.add(price_cd);
						
						TAX_ADV_ADJ_ABBR_GST.put(abbr,price_cd);
						
						String remark = "Adjustment for "+abbr+" paid on";
							if(inv_pay_type.equalsIgnoreCase("AP")) {  
								remark+=" advance amount"; 
							}else{
								remark+=" special payment";
							}
							remark+=" paid against Receipt Voucher No. "+invoice_dtl;
						TAX_ADV_ADJ_REMARK_GST.put(price_cd,remark);
					}
				}
			}
			
		//	//System.out.println("TAX_ADV_ADJ_remark--"+TAX_ADV_ADJ_remark+"");
			if(cnt==0)
			{
				basic_amt_usd=invgrossamt_usd;
				basic_amt_inr=invgrossamt_inr;
			}
			////System.out.println("basic_amt_usd ..... "+basic_amt_usd);
			First_gross_amt_usd=basic_amt_usd;
			First_gross_amt_inr=basic_amt_inr;
			
			if(invtariff_flag.equalsIgnoreCase("Y"))
			{
				
				display_rate=invtariff_total_inr;
				if(invdiscount_flag.equalsIgnoreCase("Y"))
				{
					invdiscount_price=""+nf3a.format((Double.parseDouble(invdiscount_price)*Double.parseDouble(invexchngrt)));
					First_gross_amt_inr=nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(discount_gross_amt_inr)));
					
				}
				if(invadjflag.equalsIgnoreCase("Y"))
				{
					if(invadjustcur.equalsIgnoreCase("2"))			//2 is for usd
					{
						invadjustmentamt=""+(Double.parseDouble(invadjustmentamt)*Double.parseDouble(invexchngrt));
						invadjustmentamt=nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(invadjustmentamt)));
						Final_adjust_gross_amt=adjust_gross_amt_inr;
					}
					else
					{
						Final_adjust_gross_amt=adjust_gross_amt_inr;
						/*added on 13-052-2015 RG*/
						invadjustmentamt=nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(invadjustmentamt)));
					}
				}
				Final_first_gross_amt=tariff_gross_amt_inr;
				
			}
			else
			{
				display_rate=invsaleprice;
				String temp_amt=First_gross_amt_usd;
				
				if(invdiscount_flag.equalsIgnoreCase("Y"))
				{
					temp_amt=discount_gross_amt_usd;
					First_gross_amt_usd=nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(discount_gross_amt_usd)));	
				}
				
				
				////System.out.println("HERE----------->>>>>"+display_rate);
				
				if(invadjflag.equalsIgnoreCase("Y"))
				{
					invadjustmentamt=nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(invadjustmentamt)));
					
					if(invadjustcur.equalsIgnoreCase("2"))			//2 is for usd
					{
						Final_adjust_gross_amt=adjust_gross_amt_usd;
					}
					else if(invadjustcur.equalsIgnoreCase("1"))
					{
						Final_adjust_gross_amt=adjust_gross_amt_inr;
					}
					
					
				}
				Final_first_gross_amt=temp_amt;
			}
			
			////System.out.println("Final_first_gross_amt 000..... "+Final_first_gross_amt);
			Final_first_gross_amt=Final_first_gross_amt;
		//	Final_first_gross_amt=nf3.format(Double.parseDouble(""+java.text.NumberFormat.getInstance().parse(Final_first_gross_amt)));
			Final_adjust_gross_amt=nf3.format(Double.parseDouble(Final_adjust_gross_amt));
			invdiscount_price=""+Double.parseDouble(nf3a.format((Double.parseDouble(invdiscount_price))));
			display_rate=nf3a.format(Double.parseDouble(display_rate));
						
					customer_Invoice_Gross_Amt_INR=invgrossamt_inr;
					if(TAX_ADV_ADJ_FLAG_LOG.equalsIgnoreCase("Y"))
					{
					if(TAX_ADV_ADJ_FLAG.equalsIgnoreCase("Y")){
						customer_Invoice_Gross_Amt_INR=raw_amt_inr;
					}
					}
		//			//System.out.println("invgrossamt_inr-------->"+invgrossamt_inr+"customer_Invoice_Gross_Amt_INR---->"+customer_Invoice_Gross_Amt_INR);
					// calculate tax details for adjusted gross
					double tax_amt = 0;
					String tax_cd = "0";
					String tax_factor = "0.00";
					
					double total_tax=0;
					
					queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
								  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+invtaxstructcd+" AND " +
								  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+invtaxstructcd+" AND " +
								  "B.app_date<=TO_DATE('"+invbill_period_end_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code";
			//		//System.out.println("Query For Finding Out Correct Tax Structure Details = "+queryString);
					rset=stmt.executeQuery(queryString);
					while(rset.next())
					{
						tax_cd = rset.getString(1);
						tax_factor = rset.getString(2);
						
						if(rset.getString(3).equals("1"))
						{
							tax_amt = (Double.parseDouble(customer_Invoice_Gross_Amt_INR)*Double.parseDouble(rset.getString(2)))/100;
						}
						else if(rset.getString(3).equals("2"))
						{
							queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
										  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+invtaxstructcd+" AND " +
										  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+invtaxstructcd+" AND " +
										  "B.app_date<=TO_DATE('"+invbill_period_end_dt+"','DD/MM/YYYY')) AND A.tax_code="+rset.getString(4)+"";
				//			//System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
					 		rset1=stmt1.executeQuery(queryString1);
					 		if(rset1.next())
					 		{
						 			if(rset1.getString(3).equals("1"))
									{
										tax_amt = (Double.parseDouble(customer_Invoice_Gross_Amt_INR)*Double.parseDouble(rset1.getString(2)))/100;
									}
									
						 			tax_amt = (tax_amt*Double.parseDouble(rset.getString(2)))/100;
					 		}
					 		else
					 		{
					 			tax_amt = 0;
					 		}
						}
						else
						{
							tax_amt = 0;
						}
						total_tax+=tax_amt;
						customer_Invoice_Tax_Code.add(tax_cd);
						customer_Invoice_Tax_Rate.add(nf.format(Double.parseDouble(tax_factor)));
						customer_Invoice_Tax_Amt.add((nf3.format(Double.parseDouble(""+tax_amt))));
					}
							

					for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
					{
						queryString = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " +
									  "tax_code="+customer_Invoice_Tax_Code.elementAt(i)+"";
						//////System.out.println("Query For Fetching Tax Name = "+queryString);
						rset = stmt.executeQuery(queryString);
						if(rset.next())
						{
							String tax_abbr = rset.getString(1).trim()==null?"":rset.getString(1).trim();
							String tax_nm = rset.getString(2).trim()==null?"":rset.getString(2).trim();
							customer_Invoice_Tax_Abbr.add(tax_abbr);
							customer_Invoice_Tax_Name.add(tax_nm);
						}
						else
						{
							customer_Invoice_Tax_Abbr.add("");
							customer_Invoice_Tax_Name.add("");
						}
					}
					
					customer_Invoice_Gross_Amt_INR = nf3.format(Double.parseDouble(customer_Invoice_Gross_Amt_INR));
					
					if(TAX_ADV_ADJ_FLAG_LOG.equalsIgnoreCase("Y"))
					{
						if(TAX_ADV_ADJ_FLAG.equalsIgnoreCase("Y")){
							
							if(TAX_ADV_ADJ_CUR.equalsIgnoreCase("1"))
							{
								TAX_ADV_ADJ_CUR_ABR="INR";
								total_tax_payable=nf3.format(Double.parseDouble(""+(total_tax-Double.parseDouble(TAX_ADV_ADJ_AMT))));
							}
							else if(TAX_ADV_ADJ_CUR.equalsIgnoreCase("2"))
							{
								TAX_ADV_ADJ_CUR_ABR="USD";
								total_tax_payable=nf3.format(Double.parseDouble(""+(total_tax+Double.parseDouble(TAX_ADV_ADJ_AMT))));
							}
						}
						TAX_ADV_ADJ_AMT=nf3.format(Double.parseDouble(TAX_ADV_ADJ_AMT));
					}
					
					
					queryString2=" SELECT to_char(INV_DT,'dd/mm/yy'),INV_NO,INV_AMT," +
								"INV_CURR,INV_AMT_BAL FROM LOG_FMS7_INV_ADD_DTL   " +
								" where INV_SEQ_NO='"+Mapping_seq_no+"' " +
								" and type_no='1' order by seq_no";
					//////System.out.println(""+queryString2);
					rset=stmt.executeQuery(queryString2);
					while(rset.next())
					{
						Invoice_dt.add(rset.getString(1)==null?"":rset.getString(1));
						Invoice_no.add(rset.getString(2)==null?"0":rset.getString(2));
						Invoice_adj_amt.add(rset.getString(3)==null?"0.00":nf5.format(Double.parseDouble(rset.getString(3))));
						Invoice_adj_cur.add(rset.getString(4)==null?"":rset.getString(4));
						Invoice_Adj_bal.add(rset.getString(5)==null?"0.00":nf5.format(Double.parseDouble(rset.getString(5))));
					}
					
					
					queryString2=" SELECT to_char(INV_DT,'dd/mm/yy'),INV_NO,INV_AMT," +
							"INV_CURR,INV_AMT_BAL FROM LOG_FMS7_INV_ADD_DTL   " +
							" where INV_SEQ_NO='"+Mapping_seq_no+"' " +
							" and type_no='4' order by seq_no";
					////System.out.println(""+queryString2);
					rset=stmt.executeQuery(queryString2);
					while(rset.next())
					{
						//Invoice_dt.add(rset.getString(1)==null?"":rset.getString(1));
						//Invoice_no.add(rset.getString(2)==null?"0":rset.getString(2));
						Invoice_adj_amt_tax.add(rset.getString(3)==null?"0.00":nf5.format(Double.parseDouble(rset.getString(3))));
						Invoice_adj_cur_tax.add(rset.getString(4)==null?"":rset.getString(4));
						Invoice_Adj_bal_tax.add(rset.getString(5)==null?"0.00":nf5.format(Double.parseDouble(rset.getString(5))));
					}
					
					//--SBC-20160510---//
					queryString2=" SELECT to_char(INV_DT,'dd/mm/yy'),INV_NO,INV_AMT," +
					"INV_CURR,INV_AMT_BAL FROM LOG_FMS7_INV_ADD_DTL   " +
					" where INV_SEQ_NO='"+Mapping_seq_no+"' " +
					" and type_no='5' order by seq_no";
					////System.out.println(""+queryString2);
					rset=stmt.executeQuery(queryString2);
					while(rset.next())
					{
						//Invoice_dt.add(rset.getString(1)==null?"":rset.getString(1));
						//Invoice_no.add(rset.getString(2)==null?"0":rset.getString(2));
						Invoice_adj_amt_SBC.add(rset.getString(3)==null?"0.00":nf5.format(Double.parseDouble(rset.getString(3))));
						Invoice_adj_cur_SBC.add(rset.getString(4)==null?"":rset.getString(4));
						Invoice_Adj_bal_SBC.add(rset.getString(5)==null?"0.00":nf5.format(Double.parseDouble(rset.getString(5))));
					}
//					--SBC-20160510---//
					
					//--KKC-20160610---//
					queryString2=" SELECT to_char(INV_DT,'dd/mm/yy'),INV_NO,INV_AMT," +
					"INV_CURR,INV_AMT_BAL FROM LOG_FMS7_INV_ADD_DTL   " +
					" where INV_SEQ_NO='"+Mapping_seq_no+"' " +
					" and type_no='6' order by seq_no";
					////System.out.println(""+queryString2);
					rset=stmt.executeQuery(queryString2);
					while(rset.next())
					{
						//Invoice_dt.add(rset.getString(1)==null?"":rset.getString(1));
						//Invoice_no.add(rset.getString(2)==null?"0":rset.getString(2));
						Invoice_adj_amt_KKC.add(rset.getString(3)==null?"0.00":nf5.format(Double.parseDouble(rset.getString(3))));
						Invoice_adj_cur_KKC.add(rset.getString(4)==null?"":rset.getString(4));
						Invoice_Adj_bal_KKC.add(rset.getString(5)==null?"0.00":nf5.format(Double.parseDouble(rset.getString(5))));
					}
//					--KKC-20160610---//
					for(int k=0;k<TAX_ADV_ADJ_CODE_GST.size();k++) {
					queryString2=" SELECT to_char(INV_DT,'dd/mm/yy'),INV_NO,INV_AMT," +
							"INV_CURR,INV_AMT_BAL FROM LOG_FMS7_INV_ADD_DTL   " +
							" where INV_SEQ_NO='"+Mapping_seq_no+"' " +
							" and type_no='7' AND seq_no='"+TAX_ADV_ADJ_CODE_GST.elementAt(k)+"' order by seq_no";
							////System.out.println(""+queryString2);
							rset=stmt.executeQuery(queryString2);
							while(rset.next())
							{
								TAX_INVOICE_DT.put(TAX_ADV_ADJ_CODE_GST.elementAt(k),rset.getString(1)==null?"":rset.getString(1));
								TAX_INVOICE_NO.put(TAX_ADV_ADJ_CODE_GST.elementAt(k),rset.getString(2)==null?"0":rset.getString(2));
								TAX_ADJ_AMT.put(TAX_ADV_ADJ_CODE_GST.elementAt(k)+":"+rset.getString(2),rset.getString(3)==null?"0.00":nf5.format(Double.parseDouble(rset.getString(3))));
								TAX_ADJ_CUR.put(TAX_ADV_ADJ_CODE_GST.elementAt(k)+":"+rset.getString(2),rset.getString(4)==null?"":rset.getString(4));
								TAX_ADJ_BAL.put(TAX_ADV_ADJ_CODE_GST.elementAt(k)+":"+rset.getString(2),rset.getString(5)==null?"0.00":nf5.format(Double.parseDouble(rset.getString(5))));
							}
					}
					
					for(int k=0;k<TAX_ADV_ADJ_CODE_GST.size();k++) {
						String sign = ""+TAX_ADV_ADJ_SIGN_GST.get(TAX_ADV_ADJ_CODE_GST.elementAt(k));
						TAX_ADV_ADJ_SIGN_GST.put(TAX_ADV_ADJ_CODE_GST.elementAt(k),"INR");
						String amt = ""+TAX_ADV_ADJ_AMT_GST.get(TAX_ADV_ADJ_CODE_GST.elementAt(k));
						if(sign.equalsIgnoreCase("1"))	
						{
							total_tax_payable=(Double.parseDouble(total_tax_payable.replace(",",""))-Double.parseDouble(amt.replace(",","")))+"";
						}
						else if(sign.equalsIgnoreCase("2"))
						{
							total_tax_payable=(Double.parseDouble(total_tax_payable.replace(",",""))+Double.parseDouble(amt.replace(",","")))+"";
						}
					}
					
					for(int i=0; i<TAX_ADV_ADJ_AMT_GST.size(); i++) {
						String tax_amt_ = ""+TAX_ADV_ADJ_AMT_GST.get(TAX_ADV_ADJ_CODE_GST.elementAt(i)+"");
						double amt = Math.round(Double.parseDouble(customer_Invoice_Tax_Amt.elementAt(i).toString().replace(",",""))-Double.parseDouble(tax_amt_.replace(",","")));
						total_compo_tax_payable.add(nf3.format(amt));
					}
					if(modifycontract_type.equals("C")) {
						total_tax_payable=nf3.format(Math.round(Double.parseDouble(total_tax_payable)));
					} else {
						total_tax_payable=nf3.format((Double.parseDouble(total_tax_payable)));
					}
					
					String formatted_exchg_rate_dt="";
					if(!invexchratedt.equals(""))
					{
						queryString = "SELECT TO_CHAR(TO_DATE('"+invexchratedt+"','DD/MM/YYYY'),'fmddth') " +
									  "|| ' ' || TO_CHAR(TO_DATE('"+invexchratedt+"','DD/MM/YYYY'),'fmMonth') " +
									  "|| ' ' || TO_CHAR(TO_DATE('"+invexchratedt+"','DD/MM/YYYY'),'yyyy') " +
									  "FROM DUAL";
						////System.out.println("Formatted Exchange Rate Date Fetch Query = "+queryString);
						rset = stmt.executeQuery(queryString);
						if(rset.next())
						{
							formatted_exchg_rate_dt = rset.getString(1)==null?"":rset.getString(1);
						}
					}
					
					queryString2=" SELECT to_char(INV_DT,'dd/mm/yyyy'),INV_NO,INV_AMT," +
					"EXC_RATE_NM FROM LOG_FMS7_INV_ADD_DTL   " +
					" where INV_SEQ_NO='"+Mapping_seq_no+"' " +
					" and type_no='2' order by seq_no";
					////System.out.println(""+queryString2);
					rset=stmt.executeQuery(queryString2);
					while(rset.next())
					{
						customer_Invoice_Exchg_Rate_Date.add(formatted_exchg_rate_dt);
						customer_Invoice_Exchg_Rate_Code.add(rset.getString(2)==null?"0":rset.getString(2));
						customer_Invoice_Exchg_Rate_Value.add(rset.getString(3)==null?"0":nf2.format(Double.parseDouble(rset.getString(3))));
						customer_Invoice_Exchg_Rate_Name.add(rset.getString(4)==null?"":rset.getString(4));
					}
					
					
					queryString2=" SELECT to_char(INV_DT,'DD-MM-YYYY'),INV_NO,INV_AMT," +
					"EXC_RATE_NM FROM LOG_FMS7_INV_ADD_DTL   " +
					" where INV_SEQ_NO='"+Mapping_seq_no+"' " +
					" and type_no='3' order by seq_no";
					////System.out.println(""+queryString2);
					rset=stmt.executeQuery(queryString2);
					while(rset.next())
					{
						vSTAT_EFF_DT.add(rset.getString(1)==null?"":rset.getString(1));
						vSTAT_CD.add(rset.getString(2)==null?"0":rset.getString(2));
						
						vSTAT_NO.add(rset.getString(3)==null?"":rset.getString(3));
						vSTAT_NM.add(rset.getString(4)==null?"":rset.getString(4));
					}
					
		}
		catch(Exception e)
		{
			//System.out.println("In databean advance pament");
			e.printStackTrace();
		}
	}
	
	public void printAllPdfFileForInvoice_View() throws Exception		//BK20160211
	{
		System.out.println("VIEW------");
		Rectangle pageSize = new Rectangle(595, 842);
		Rectangle pageSize1 = new Rectangle(842,595);
		if(flag_DCB==true)
		{
			pageSize.setBackgroundColor(new java.awt.Color(0xe3f8c0));
			pageSize1.setBackgroundColor(new java.awt.Color(0xe3f8c0));
		}
		else
		{
			pageSize.setBackgroundColor(new java.awt.Color(0xffffff));
			pageSize1.setBackgroundColor(new java.awt.Color(0xffffff));
		}
		 Document document = new Document(pageSize);
        
		try
		{
			////System.out.println("-----INSIDE PRINTALL 1---");
			// Step 2:s
			// We create a writer that listens to the document, and directs a PDF-stream to a file ...
			PdfWriter writer = PdfWriter.getInstance(document,new FileOutputStream(createPdfFileForInvoice()));
			
			
		//	writer.setEncryption(PdfWriter.STRENGTH128BITS, "", "Invoice Details", PdfWriter.AllowCopy | PdfWriter.AllowPrinting);

			document.addTitle("Invoice Details");

			document.addSubject("Invoice Details For Customer");

            document.addKeywords("iText, Invoice Details, Step 2, metadata");

            document.addCreator("Invoice Details Generation using iText");

            document.addAuthor("Samik Shah");

            ////System.out.println("-----INSIDE PRINTALL 2---");
          //Step 3: We open the document for PDF writing ...
			
            document.open();
			
			//Step 4: We create Page Size, Font Size , and Font Type ... Then add some paragraphs to the document ...
			document.setPageSize(pageSize);
            document.newPage();
            
                      
            //iText-5.0.4 ...
            /*Font very_small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 6.00f, Font.NORMAL, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 7.00f, Font.NORMAL, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font small_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 7.00f, Font.BOLD, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font black_bold = FontFactory.getFont(FontFactory.HELVETICA, 8.00f, Font.BOLD, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font big_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 12.00f, Font.BOLD, new BaseColor(new Color(0x00, 0x00, 0x00)));*/
            //itext-1.4 ...
            Font very_small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 7, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            Font small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 8, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            Font small_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD, new Color(0x00, 0x00, 0x00));
            Font black_bold = FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, new Color(0x00, 0x00, 0x00));
            Font big_black_bold_2 = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, new Color(0x00, 0x00, 0x00));
            Font big_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 14, Font.BOLD, new Color(0x00, 0x00, 0x00));
            
            String context_nm = request.getContextPath();
			String server_nm = request.getServerName();
			String server_port = ""+request.getServerPort();
			  
			url_start = "http://"+server_nm+":"+server_port+context_nm;
			
            Image hlpl_logo = Image.getInstance(url_start+"//images//LOGO//company_Logo.png");
			  
            
            sr_no=0;//ADDED NEW
            
			String inv_nm = "";
			if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
			{	
				if(customer_Invoice_Tax_Flag.equalsIgnoreCase("V"))
				{	
					inv_nm = "TAX INVOICE";
				}
				else
				{
					inv_nm = "RETAIL INVOICE";
				}
			}	
			else if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
			{
				if(date_flag) {
					inv_nm = "TAX INVOICE";
				} else {
					inv_nm = "INVOICE";
				}
			}
			
			String inv_desc = "";
			
			if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
			{	
				inv_desc = "Hazira LNG Private Limited";
			}	
			else if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN)
			{
				inv_desc = "Hazira LNG Private Limited";
				if(date_flag) {
					if(invoice_title.equals("CREDIT")) { 
						inv_nm += "\nCredit Note issued under Rule 53 of the Central Goods and Services Tax Rules, 2017";
					 } else if(invoice_title.equals("SUPPLEMENTARY INVOICE") || invoice_title.equals("DEBIT")) { 
						inv_nm += "\nDebit Note issued under Rule 53 of the Central Goods and Services Tax Rules, 2017";
					 } else { 
						 inv_nm += "\n"+Rule_remark;
					 } 
				} else {
					inv_nm += "\nInvoice issued under Rule-4A of the Service tax Rules, 1994";
				}		
			}
			
			String sn = "";
			
			if(sn_ref_no.trim().equals(""))
			{
				sn = sn_no;
			}
			else
			{
				sn = sn_ref_no;
			}
			
			String inv_note = "";
			
			if(contract_type.equalsIgnoreCase("S"))
			{	
				inv_note = "In respect of Supply Notice (SN-"+sn+") executed on "+customer_Invoice_SN_Dt+" pursuant to Framework Gas Sales Agreement executed on "+customer_Invoice_FGSA_Dt+"\nbetween "+contact_Suppl_Name+" and "+contact_Customer_Name;
			}
			else if(contract_type.equalsIgnoreCase("L"))
			{
				inv_note = "In respect of Letter of Agreement (LOA-"+sn+") executed on "+customer_Invoice_SN_Dt+" pursuant to Tender executed on "+customer_Invoice_FGSA_Dt+"\nbetween "+contact_Suppl_Name+" and "+contact_Customer_Name;
			}
			else if(contract_type.equalsIgnoreCase("R"))
			{
				inv_note = "In respect of Regassification Agreement executed on "+customer_Invoice_FGSA_Dt+" and subsequent side letters\nbetween "+contact_Customer_Name+" and "+contact_Suppl_Name;
			} 
			else if(contract_type.equalsIgnoreCase("T"))//ADDED FOR LTCORA AND CN
			{
				inv_note = "In respect of LTCORA executed on "+customer_Invoice_FGSA_Dt+" \nbetween "+contact_Customer_Name+" and "+contact_Suppl_Name;
			}  
			else if(contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
			{
				inv_note = "In respect of LTCORA  executed on "+customer_Invoice_FGSA_Dt+" ";
				
				if(Double.parseDouble(FgsaNo)<9999) 
				{
					inv_note = inv_note+"& CN-"+FgsaNo+" executed on "+customer_Invoice_SN_Dt+"";
				}
						
				inv_note = inv_note + "\nbetween "+contact_Customer_Name+" and "+contact_Suppl_Name;
			}  
			
            
			String addr_supl = "Registered Office:";
            
            if(!contact_Suppl_Name.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Name;     	
            }
            if(!contact_Suppl_Person_Address.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Person_Address;     	
            }
            if(!contact_Suppl_Person_City.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Person_City;     	
            }
            if(!contact_Suppl_Person_Pin.trim().equals(""))
            {
            	addr_supl += " "+"-"+" "+contact_Suppl_Person_Pin;     	
            }
			
			String addr_customer = "";
            
			if(contact_Person_Name_And_Designation.trim().equalsIgnoreCase(contact_Customer_Name.trim()))
			{
				if(!contact_Customer_Name.trim().equals(""))
	            {
	            	addr_customer += contact_Customer_Name;    	
	            }
			}
			else
			{
	            if(!contact_Person_Name_And_Designation.trim().equals(""))
	            {
	            	addr_customer += contact_Person_Name_And_Designation;     	
	            }
	            if(!contact_Customer_Name.trim().equals(""))
	            {
	            	addr_customer += "\n"+contact_Customer_Name;     	
	            }
			}
            if(!contact_Customer_Person_Address.trim().equals(""))
            {
            	addr_customer += "\n"+contact_Customer_Person_Address;     	
            }
            if(!contact_Customer_Person_City.trim().equals(""))
            {
            	addr_customer += "\n"+contact_Customer_Person_City;     	
            }
            if(!contact_Customer_Person_Pin.trim().equals(""))
            {
            	addr_customer += " "+"-"+" "+contact_Customer_Person_Pin;     	
            }
                        
            ////System.out.println("invoice_title--------------1111--------->"+invoice_title);
            String inv_tit=invoice_title;
            if(contract_type.equals("C")) {
            	if(tax_gst) {
            		if(invoice_title.equalsIgnoreCase("ORIGINAL")) {
    	            	inv_tit += " FOR RECIPIENT"; 
    	            } else if(invoice_title.equalsIgnoreCase("DUPLICATE")) {
    	            	inv_tit += " FOR SUPPLIER";
    	            }
            	}
            }
            ////System.out.println("invoice_title--------------1111-2222-------->"+inv_tit);
            PdfPTable InvoiceTitleTable = new PdfPTable(1);
            InvoiceTitleTable.setWidthPercentage(100);
            InvoiceTitleTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceTitleTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            InvoiceTitleTable.addCell(new Phrase(new Chunk(inv_tit,black_bold)));
            
            
            PdfPTable InvoiceDescTable = new PdfPTable(1);
            InvoiceDescTable.setWidthPercentage(100);
            InvoiceDescTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDescTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            InvoiceDescTable.addCell(new Phrase(new Chunk(inv_desc,big_black_bold)));
            
            PdfPTable InvoiceDescTable2 = new PdfPTable(1);
            InvoiceDescTable2.setWidthPercentage(100);
            InvoiceDescTable2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDescTable2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            InvoiceDescTable2.addCell(new Phrase(new Chunk(inv_nm,big_black_bold_2)));
            
            
            PdfPTable InvoiceNoteTable = new PdfPTable(1);
            InvoiceNoteTable.setWidthPercentage(100);
            InvoiceNoteTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNoteTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            InvoiceNoteTable.addCell(new Phrase(new Chunk(inv_note,small_black_normal)));
            
            
            float[] ContactAddrWidths = {0.50f, 0.10f, 0.40f};
            PdfPTable contact_addr_table = new PdfPTable(ContactAddrWidths);
            contact_addr_table.setWidthPercentage(100);
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(addr_supl,small_black_normal)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk("To:",small_black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(addr_customer,small_black_normal)));
			
            String supl_gst_cst_info = "";
            String customer_gst_cst_info = "";
            
            ////System.out.println("-----INSIDE PRINTALL 2---"+vSTAT_CD.size());
            ////System.out.println("-----INSIDE PRINTALL vSTAT_NM.elementAt(0)---"+vSTAT_NM.elementAt(0));
            ////System.out.println("-----INSIDE PRINTALL contact_Suppl_PAN_NO---"+contact_Suppl_PAN_NO);
            
            
            if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
    		{
            	if(!contact_Suppl_GST_NO.trim().equals(""))
            	{
            		supl_gst_cst_info = " GST TIN No. : "+contact_Suppl_GST_NO+" DT. "+contact_Suppl_GST_DT;
            	}
            	else
            	{
            		supl_gst_cst_info = "";
            	}
            	
            	if(!contact_Suppl_CST_NO.trim().equals(""))
            	{
            		supl_gst_cst_info += " \nCST TIN No. : "+contact_Suppl_CST_NO+" DT. "+contact_Suppl_CST_DT;
            	}
            	else
            	{
            		supl_gst_cst_info += "\n";
            	}
            	
            	//BK20160211
            	if(!contact_Suppl_PAN_NO.trim().equals(""))
            	{
            		supl_gst_cst_info += " \nPAN : "+contact_Suppl_PAN_NO+" ";
            	}
            	else
            	{
            		supl_gst_cst_info += "\n";
            	}
            	//supl_gst_cst_info = "GST TIN No. : "+contact_Suppl_GST_NO+" DT. "+contact_Suppl_GST_DT+"\nCST TIN No. : "+contact_Suppl_CST_NO+" DT. "+contact_Suppl_CST_DT;
            	//customer_gst_cst_info = "GST TIN No. : "+contact_Customer_GST_NO+" DT. "+contact_Customer_GST_DT+"\nCST TIN No. : "+contact_Customer_CST_NO+" DT. "+contact_Customer_CST_DT;
    		}
            else if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
            {
            	if(date_flag) {
	            	supl_gst_cst_info = "State : "+contact_Suppl_State+"\n";
	            	supl_gst_cst_info += "State Code : "+contact_Suppl_State_Code+"\n";
	            	
	            	
	            	 if(!contact_Suppl_GSTIN_NO.trim().equals("")) { 
	            		 supl_gst_cst_info += "GSTIN : "+contact_Suppl_GSTIN_NO+"\n";
	            	  } 
	            	 if(!contact_Suppl_PAN_NO.trim().equals("")) { 
	            		 supl_gst_cst_info += "PAN : "+contact_Suppl_PAN_NO+"\n";
	            	 } 
	            	 supl_gst_cst_info += ""+sac_name +" : "+sac_code+"\n";
	            	 supl_gst_cst_info += "Description of Service : "+service_desc+"\n";
	            	 supl_gst_cst_info += "Place Of Supply : "+contact_customer_State+"\n";
	            	 
	            	
            	} else {
            		supl_gst_cst_info = "Service Tax Registration No. : "+contact_Suppl_Service_Tax_NO+"\n(Business Auxiliary Service)";
                	//customer_gst_cst_info = " "+"\n"+" ";
                	
                	//BK20160211
                	if(!contact_Suppl_PAN_NO.trim().equals(""))
                	{
                		supl_gst_cst_info += "\nPAN : "+contact_Suppl_PAN_NO+" ";
                	}
                	else
                	{
                		supl_gst_cst_info += "\n";
                	}
            	}
            }
            
            
            if(vSTAT_CD.size()>0)
    		{	
    			if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
    			{
    				for(int i=0; i<vSTAT_CD.size(); i++)
					{
    					if(i==0)
    					{
    						if(vSTAT_NM.elementAt(i).toString().equalsIgnoreCase("PAN No.")) 
    						{
    							customer_gst_cst_info = "PAN : "+vSTAT_NO.elementAt(i)+" ";
    						}
    						else
    						{
    							customer_gst_cst_info = ""+vSTAT_NM.elementAt(i)+" : "+vSTAT_NO.elementAt(i)+" DT. "+vSTAT_EFF_DT.elementAt(i);
    						}
    					}
    					else if(i>0)
    					{
    						if(vSTAT_NM.elementAt(i).toString().equalsIgnoreCase("PAN No.")) 
    						{
    							customer_gst_cst_info += "\nPAN : "+vSTAT_NO.elementAt(i)+" ";
    						}
    						else
    						{
    							customer_gst_cst_info += "\n"+vSTAT_NM.elementAt(i)+" : "+vSTAT_NO.elementAt(i)+" DT. "+vSTAT_EFF_DT.elementAt(i);
    						}
    					}
					}
    			}
    			else
    			{
    				if(date_flag) {
	    				customer_gst_cst_info = "State : "+contact_customer_State+"\n";
	    				customer_gst_cst_info += "State Code : "+contact_customer_State_Code+"\n";
						//BK20160211
	    				for(int i=0; i<vSTAT_CD.size(); i++)
						{
	    					if(vSTAT_NM.elementAt(i).toString().contains("GSTIN")) { 
	    						customer_gst_cst_info += vSTAT_NM.elementAt(i).toString()+" : "+vSTAT_NO.elementAt(i)+"\n";
	    					} else if(vSTAT_NM.elementAt(i).toString().equalsIgnoreCase("PAN No.")) 
	    						{
	    							customer_gst_cst_info += "PAN : "+vSTAT_NO.elementAt(i)+"\n";	
	    						}
						}
    				} else {
    					for(int i=0; i<vSTAT_CD.size(); i++)
    					{
        					if(i==0)
        					{
        						if(vSTAT_NM.elementAt(i).toString().equalsIgnoreCase("PAN No.")) 
        						{
        							customer_gst_cst_info = "PAN : "+vSTAT_NO.elementAt(i)+" ";
        						}
        						else
        						{
        							customer_gst_cst_info = ""+vSTAT_NM.elementAt(i)+" : "+vSTAT_NO.elementAt(i)+" DT. "+vSTAT_EFF_DT.elementAt(i);
        						}
        					}
        					else if(i>0)
        					{
        						if(vSTAT_NM.elementAt(i).toString().equalsIgnoreCase("PAN No.")) 
        						{
        							customer_gst_cst_info += "\nPAN : "+vSTAT_NO.elementAt(i)+" ";	
        						}
        						else
        						{
        							customer_gst_cst_info += "\n"+vSTAT_NM.elementAt(i)+" : "+vSTAT_NO.elementAt(i)+" DT. "+vSTAT_EFF_DT.elementAt(i);
        						}
        					}
    					}
    				}
    			}
    		}
            else
            {
            	if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
        		{
            		if(!contact_Customer_GST_NO.trim().equals(""))
                	{
                		customer_gst_cst_info = "GST TIN No. : "+contact_Customer_GST_NO+" DT. "+contact_Customer_GST_DT;
                	}
                	else
                	{
                		customer_gst_cst_info = "";
                	}
                	
                	if(!contact_Customer_CST_NO.trim().equals(""))
                	{
                		customer_gst_cst_info += "\nCST TIN No. : "+contact_Customer_CST_NO+" DT. "+contact_Customer_CST_DT;
                	}
                	else
                	{
                		customer_gst_cst_info += "\n";
                	}
                	
                	if(!contact_Customer_GVAT_NO.trim().equals(""))
                	{
                		customer_gst_cst_info += "\nGVAT TIN No. : "+contact_Customer_GVAT_NO+" DT. "+contact_Customer_GVAT_DT;
                	}
                	else
                	{
                		customer_gst_cst_info += "\n";
                	}
        		}
            }
            
            ////System.out.println("---view pdf supl_gst_cst_info: "+supl_gst_cst_info);
            ////System.out.println("---view pdf customer_gst_cst_info: "+customer_gst_cst_info);
            
            float[] GstCstInfoWidths = {0.50f, 0.10f, 0.40f};
            PdfPTable GstCstInfoTable = new PdfPTable(GstCstInfoWidths);
            GstCstInfoTable.setWidthPercentage(100);
            GstCstInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            GstCstInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            GstCstInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            GstCstInfoTable.addCell(new Phrase(new Chunk("\n"+supl_gst_cst_info,small_black_normal)));
            GstCstInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            GstCstInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            GstCstInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            GstCstInfoTable.addCell(new Phrase(new Chunk("\n ",small_black_normal)));
            GstCstInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            GstCstInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            GstCstInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            GstCstInfoTable.addCell(new Phrase(new Chunk("\n"+customer_gst_cst_info,small_black_normal)));
			
			String inv_no_info = "";
			
			if(contract_type.equalsIgnoreCase("R"))
			{
				inv_no_info = "HLPL R-gas Invoice Seq No:";
			}
			else if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
			{
				if(date_flag) {
					inv_no_info = "HLPL Tax Invoice Seq No:";
				} else {
					inv_no_info = "HLPL LTCORA Invoice Seq No:";
				}
			}
			else
			{
				inv_no_info = "HLPL Invoice Seq No:";
			}
            
			float[] InvoiceDateInfoWidths = {0.60f, 0.25f, 0.15f};
            PdfPTable InvoiceDateInfoTable = new PdfPTable(InvoiceDateInfoWidths);
            InvoiceDateInfoTable.setWidthPercentage(100);
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk("Invoice Date:",small_black_bold)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_DT,small_black_bold)));
            
            float[] InvoiceDueDateInfoWidths = {0.60f, 0.25f, 0.15f};
            PdfPTable InvoiceDueDateInfoTable = new PdfPTable(InvoiceDueDateInfoWidths);
            InvoiceDueDateInfoTable.setWidthPercentage(100);
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk("Payment Due Date:",small_black_bold)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Due_DT,small_black_bold)));
            
            String invno = "";
            if(!new_inv_seq_no.equals("")) {
            	invno = new_inv_seq_no;
            } else {
            if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
        	{
        		if(hlpl_inv_no.length()>13)
        		{
        			invno = hlpl_inv_no.substring(0,10)+""+hlpl_inv_no.substring(12);
        		}
        		
        	}
        	else
        	{
        		if(hlpl_inv_no.length()>13)
        		{
        			invno = hlpl_inv_no.substring(0,5)+""+hlpl_inv_no.substring(7,10)+""+hlpl_inv_no.substring(12);
        		}
        		
        	}}
            
//            if(hlpl_inv_no.trim().length()>13)
//            {
//            	invno = hlpl_inv_no.substring(0,5)+""+hlpl_inv_no.substring(7,10)+""+hlpl_inv_no.substring(12);
//            }
            
            float[] InvoiceNOInfoWidths = {0.60f, 0.25f, 0.15f};
            PdfPTable InvoiceNOInfoTable = new PdfPTable(InvoiceNOInfoWidths);
            InvoiceNOInfoTable.setWidthPercentage(100);
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(inv_no_info,small_black_bold)));
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(invno,small_black_bold)));
                        
            
            float[] BillingPeriodInfoWidths = {0.55f, 0.05f, 0.15f, 0.10f, 0.15f};
            PdfPTable BillingPeriodInfoTable = new PdfPTable(BillingPeriodInfoWidths);
            BillingPeriodInfoTable.setWidthPercentage(100);
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk("For the Billing Period",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Start_DT,small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk("to",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_End_DT,small_black_bold)));
            
            
            float[] BillingFieldsInfoWidths = {0.06f, 0.34f, 0.10f, 0.10f, 0.15f, 0.10f, 0.15f};
            PdfPTable BillingFieldsInfoTable = new PdfPTable(BillingFieldsInfoWidths);
            BillingFieldsInfoTable.setWidthPercentage(100);
            BillingFieldsInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsInfoTable.addCell(new Phrase(new Chunk("Sr. No.",small_black_bold)));
            BillingFieldsInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsInfoTable.addCell(new Phrase(new Chunk("Item",small_black_bold)));
            BillingFieldsInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsInfoTable.addCell(new Phrase(new Chunk("Attachment\nRef.",small_black_bold)));
            BillingFieldsInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsInfoTable.addCell(new Phrase(new Chunk("Currency",small_black_bold)));
            BillingFieldsInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsInfoTable.addCell(new Phrase(new Chunk("Quantity\n(MMBTUS)",small_black_bold)));
            BillingFieldsInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsInfoTable.addCell(new Phrase(new Chunk("Rate",small_black_bold)));
            BillingFieldsInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsInfoTable.addCell(new Phrase(new Chunk("Amount",small_black_bold)));
            
            
            String field_1 = "";
            String field_2 = "";
            String field_3 = "";
            String field_4 = "";
            String field_5 = "";
            String field_6 = "";
            String field_7 = "";
            
            if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_1 = ++sr_no+" \n\n"+(++sr_no)+" \n\n"+(++sr_no)+" \n\n"+(++sr_no)+" ";
            	}
            	else
            	{
            		field_1 = (++sr_no)+" \n\n"+(++sr_no)+" \n\n"+(++sr_no)+" ";
            	}
            	if(Discount_flag)
            	{
            		field_1 = field_1+" \n\n"+(++sr_no)+" ";
            	}
            	
            }
            else
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_1 = (++sr_no)+" \n\n"+(++sr_no)+" \n\n"+(++sr_no)+" ";
            	}
            	else
            	{
            		field_1 = (++sr_no)+" \n\n"+(++sr_no)+" ";
            	}
            	if(Discount_flag)
            	{
            		field_1 = field_1+" \n\n"+(++sr_no)+" ";
            	}
            }
            
            ////System.out.println("gas_Delivered_Amt_USD........  "+gas_Delivered_Amt_USD);
            String discount_field_2="";
            String discount_filed_3="";
            String discount_filed_4="";
            String discount_filed_5="";
            String discount_filed_6="";
            String discount_filed_6_2="";
            String discount_filed_7="";
            String discount_filed_7_2="";
            if(Discount_flag)
        	{
            	if(contract_type.equalsIgnoreCase("R"))
                {
            		discount_field_2 = "Volume Discount on Reasification Tariff ("+pdfCurrency+"/mmbtu)\n";
            		discount_filed_3="\n\n";
            		discount_filed_4="\n\n"+pdfCurrency+"";
            		discount_filed_5="\n\n";
            		discount_filed_6=pdftotal_tariff_discount;
            		discount_filed_6_2=""+pdfinv_discount_price+"\n\n\n";
            		if(offspec_Flag.trim().equalsIgnoreCase("Y"))
                	{
            			//discount_filed_7_2="\n\n "+pdfFinal_first_gross_amt;
            			discount_filed_7_2="\n\n ";
                	}
            		else
            		{
            			discount_filed_7_2="\n\n ";
            		}
            		
            		
            		
                }
            	else if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
            	{
            		discount_field_2 = "Volume Discount on LTCORA Tariff ("+pdfCurrency+"/mmbtu)\n";
            		discount_filed_3="\n\n";
            		discount_filed_4="\n\n"+pdfCurrency+"";
            		discount_filed_5="\n\n";
            		discount_filed_6=pdftotal_tariff_discount;
            		discount_filed_6_2=""+pdfinv_discount_price+"\n\n\n";
            		if(offspec_Flag.trim().equalsIgnoreCase("Y"))
                	{
            			//discount_filed_7_2="\n\n "+pdfFinal_first_gross_amt;
            			discount_filed_7_2="\n\n ";
                	}
            		else
            		{
            			discount_filed_7_2="\n\n ";
            		}
            	}
            	else
            	{
            		discount_field_2 = "Discount on Rate ("+pdfCurrency+"/mmbtu)\n\n";
            		discount_filed_3="\n\n ";
            		discount_filed_4="\n\n"+pdfCurrency+"";
            		discount_filed_5="\n\n";
            		discount_filed_6=pdftotal_tariff_discount;
            		discount_filed_6_2=""+pdfinv_discount_price+"\n\n\n";
            		if(offspec_Flag.trim().equalsIgnoreCase("Y"))
                	{
            			//discount_filed_7_2="\n\n "+pdfFinal_first_gross_amt;
            			discount_filed_7_2="\n\n ";
                	}
            		else
            		{
            			discount_filed_7_2="\n\n ";
            		}
            	}
            	
        	}
            else
            {
            	if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C")){
            	if(!Tariff_flag && !advance_payment_flag){
            	discount_filed_5=""+total_Invoice_Qty+"";
            		}
            	}
            	discount_filed_6=pdfinv_display_rate;
            	try
            	{
            	discount_filed_7=nf.format(Double.parseDouble(""+java.text.NumberFormat.getInstance().parse(gas_Delivered_Amt_USD)));
            	}
            	catch(Exception e)
            	{
            		e.printStackTrace();
            	}
            }
            
            
            if(contract_type.equalsIgnoreCase("R"))
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		
            		field_2 = " Natural Gas (Regasified)\n\n Regasification Tariff ("+pdfCurrency+"/mmbtu)\n\n Offspec QTY\n\n "+discount_field_2+"Gross Amount ("+pdfCurrency+")";
            	}
            	else
            	{
            		field_2 = " Natural Gas (Regasified)\n\n Regasification Tariff ("+pdfCurrency+"/mmbtu)\n\n "+discount_field_2+"Gross Amount ("+pdfCurrency+")";
            	}
            }
            else if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_2 = " Natural Gas (Regasified)\n\n LTCORA Tariff ("+pdfCurrency+"/mmbtu)\n\n Offspec QTY\n\n "+discount_field_2+"Gross Amount ("+pdfCurrency+")";
            	}
            	else
            	{
            		field_2 = " Natural Gas (Regasified)\n\n LTCORA Tariff ("+pdfCurrency+"/mmbtu)\n\n "+discount_field_2+"Gross Amount ("+pdfCurrency+")";
            	}
            }
            else
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_2 = " Natural Gas (Delivered) ("+pdfCurrency+")\n\n Offspec QTY\n\n "+discount_field_2+"Gross Amount ("+pdfCurrency+")";
            	}
            	else
            	{
            		field_2 = " Natural Gas (Delivered) ("+pdfCurrency+")\n\n "+discount_field_2+"Gross Amount ("+pdfCurrency+")";
            	}
            }
            if(!invoice_title.equalsIgnoreCase("CREDIT") ) //HS20160613
			{
	            if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDDED FOR LTCORA AND CN
	            {
	            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
	            	{
	            		field_3 = "Att 1\n\n \n\n \n\n \n"+discount_filed_3;
	            	}
	            	else
	            	{
	            		field_3 = "Att 1\n\n \n\n \n"+discount_filed_3;
	            	}
	            }
	            else
	            {
	            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
	            	{
	            		field_3 = "Att 1\n\n \n\n \n"+discount_filed_3;
	            	}
	            	else
	            	{
	            		field_3 = "Att1\n\n \n"+discount_filed_3;
	            	}
	            }
			}
            if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDDED FOR LTCORA AND CN
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_4 = " \n\n"+pdfCurrency+"\n\n"+pdfCurrency+"\n\n"+pdfCurrency+""+discount_filed_4;
            	}
            	else
            	{
            		field_4 = " \n\n"+pdfCurrency+"\n\n"+pdfCurrency+""+discount_filed_4;
            	}
            }
            else
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_4 = ""+pdfCurrency+"\n\n"+pdfCurrency+"\n\n"+pdfCurrency+""+discount_filed_4;
            	}
            	else
            	{
            		field_4 = ""+pdfCurrency+"\n\n"+pdfCurrency+""+discount_filed_4;
            	}
            }
            
            if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDDED FOR LTCORA AND CN)
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		//field_5 = total_Gas_Delivered+" \n\n"+total_Gas_Delivered+" \n\n"+total_Offspec_Qty+" \n\n"+discount_filed_5+""+total_Invoice_Qty+" ";
            		field_5 = total_Gas_Delivered+" \n\n \n\n"+total_Offspec_Qty+" "+discount_filed_5+"\n\n"+total_Invoice_Qty+" ";
            	}
            	else
            	{
            		//field_5 = total_Gas_Delivered+" \n\n"+total_Gas_Delivered+" \n\n"+discount_filed_5+""+total_Invoice_Qty+" ";
            		field_5 = total_Gas_Delivered+" \n\n "+discount_filed_5+"\n\n"+total_Invoice_Qty+" ";
            	}
            }
            else
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_5 = total_Gas_Delivered+" \n\n"+total_Offspec_Qty+" "+discount_filed_5+"\n\n"+total_Invoice_Qty+" ";
            	}
            	else
            	{
            		field_5 = total_Gas_Delivered+" "+discount_filed_5+"\n\n"+total_Invoice_Qty+" ";
            	}
            }
            
            if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDDED FOR LTCORA AND CN)
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_6 = " \n\n"+discount_filed_6+" \n\n"+offspec_Sales_Rate+" \n\n  "+discount_filed_6_2;
            	}
            	else
            	{
            		field_6 = " \n\n"+discount_filed_6+" \n\n "+discount_filed_6_2;
            	}
            }
            else
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_6 = discount_filed_6+" \n\n"+offspec_Sales_Rate+" \n\n "+discount_filed_6_2;
            	}
            	else
            	{
            		field_6 = discount_filed_6+" \n\n "+discount_filed_6_2;
            	}
            }
            try{
            if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDDED FOR LTCORA AND CN)
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_7 = " \n\n"+discount_filed_7+" \n\n"+offspec_Amt_USD+" "+discount_filed_7_2+" \n\n"+nf.format(Double.parseDouble(""+NumberFormat.getInstance().parse(pdfFinal_first_gross_amt)))+" ";
            	}
            	else
            	{
            		field_7 = " \n\n"+discount_filed_7+" "+discount_filed_7_2+" \n\n"+nf.format(Double.parseDouble(""+NumberFormat.getInstance().parse(pdfFinal_first_gross_amt)))+" ";
            	}
            }
            else
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_7 = discount_filed_7+" \n\n"+offspec_Amt_USD+" "+discount_filed_7_2+" \n\n"+nf.format(Double.parseDouble(""+NumberFormat.getInstance().parse(pdfFinal_first_gross_amt)))+" ";
            	}
            	else
            	{
            		field_7 = discount_filed_7+" "+discount_filed_7_2+" \n\n"+nf.format(Double.parseDouble(""+NumberFormat.getInstance().parse(pdfFinal_first_gross_amt)))+" ";
            	}
            }}catch(Exception e){e.printStackTrace();}
            
            ////System.out.println("field_2 "+field_2);
            ////System.out.println("field_7 "+field_7);
            
            float[] BillingFieldsDetailsWidths = {0.06f, 0.34f, 0.10f, 0.10f, 0.15f, 0.10f, 0.15f};
            PdfPTable BillingFieldsDetailsTable = new PdfPTable(BillingFieldsDetailsWidths);
            BillingFieldsDetailsTable.setWidthPercentage(100);
            BillingFieldsDetailsTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
            BillingFieldsDetailsTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            BillingFieldsDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
            BillingFieldsDetailsTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            if(!invoice_title.equalsIgnoreCase("CREDIT") ){//HS20160614
            	BillingFieldsDetailsTable.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
            }else{
            	BillingFieldsDetailsTable.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
            }
            
            BillingFieldsDetailsTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
            BillingFieldsDetailsTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
            BillingFieldsDetailsTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
            BillingFieldsDetailsTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
     //       //System.out.println("-----INSIDE PRINTALL 3---");
            
            /////////////////////////////////////////start//////////////////////////////////////////////
            float[] BillingFieldsDetailsWidths_a = {0.06f, 0.34f, 0.10f, 0.10f, 0.15f, 0.10f, 0.15f};
            PdfPTable BillingFieldsDetailsTable_a=new PdfPTable(BillingFieldsDetailsWidths_a);
            
            float[] BillingFieldsDetailsWidths_2 = {0.06f, 0.34f, 0.10f, 0.10f, 0.15f, 0.10f, 0.15f};
            PdfPTable BillingFieldsDetailsTable_2 = new PdfPTable(BillingFieldsDetailsWidths_2);
            
            float[] BillingFieldsDetailsWidths_exch = {0.06f, 0.34f, 0.10f, 0.10f, 0.15f, 0.10f, 0.15f};
            PdfPTable BillingFieldsDetailsTable_exch = new PdfPTable(BillingFieldsDetailsWidths_exch);
            
            float[] BillingFieldsDetailsWidths_woexch = {0.06f, 0.34f, 0.10f, 0.10f, 0.15f, 0.10f, 0.15f};
            PdfPTable BillingFieldsDetailsTable_woexch = new PdfPTable(BillingFieldsDetailsWidths_woexch);
            
          ////System.out.println("advance_payment_flag.. "+advance_payment_flag);
            
            if(!Tariff_flag && advance_payment_flag){
        	   if(pdfinvadjustcur.startsWith("2")){
        		   if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
                   {
                   	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
                   	{
                   		field_1 = (++sr_no)+" \n\n\n"+(++sr_no)+" ";
                   	}
                   	else
                   	{
                   		field_1 = (++sr_no)+" \n\n\n"+(++sr_no)+" ";
                   	}
                   }
                   else
                   {
                   	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
                   	{
                   		field_1 = (++sr_no)+"\n\n\n"+(++sr_no)+" ";
                   	}
                   	else
                   	{
                   		field_1 = (++sr_no)+"\n\n\n"+(++sr_no)+" ";
                   	}
                   }
                   field_2 = " "+pdfinvadjremark+"\n\n Gross Amount ("+pdfCurrency+")\n\n";
                   if(invoice_title.equalsIgnoreCase("CREDIT") ) //HS20160614
            			field_3 = " \nAtt 2\n\n ";
            		else			
            		  field_3 = "Att 3\n\n \n\n ";
                   if(pdfinvadjustcur.equalsIgnoreCase("U") || pdfinvadjustcur.equalsIgnoreCase("2"))
                   {
                   		field_4 = "USD\n\n\nUSD";
                   }
                   else
                   {
                   	field_4 = "Rupees \n\n\nRupees";
                   	
                   }
                   field_5 = " \n\n ";
             		field_6 = " \n\n ";
              		field_7 = pdfinvadjustmentamt+" \n\n\n"+nf3.format(Double.parseDouble(""+java.text.NumberFormat.getInstance().parse(pdfFinal_adjust_gross_amt)))+" ";
                   	
                   
                   BillingFieldsDetailsTable_a = new PdfPTable(BillingFieldsDetailsWidths_a);
                   BillingFieldsDetailsTable_a.setWidthPercentage(100);
                   BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
                   BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                   BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                   BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
                   BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
                   BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
                   BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                   BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
                   BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
                   BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                   BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                   if(!invoice_title.equalsIgnoreCase("CREDIT") ){//HS20160614
                	   BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
                  }else{
                	  BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
                  }
                   
                   BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
                   BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                   BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                   BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
                   BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
                   BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                   BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                   BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
                   BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
                   BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                   BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                   BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
                   BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
                   BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                   BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                   BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
        	   }
           }
            
            
           if(Tariff_flag && advance_payment_flag) {
        	   
        	   
               
               //////BillingFieldsDetailsTable_a
               if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
               {
               	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
               	{
               		field_1 = (++sr_no)+" \n\n\n\n"+(++sr_no)+" ";
               	}
               	else
               	{
               		field_1 = (++sr_no)+" \n\n\n\n"+(++sr_no)+" ";
               	}
               }
               else
               {
               	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
               	{
               		field_1 = (++sr_no)+"\n\n\n\n"+(++sr_no)+" ";
               	}
               	else
               	{
               		field_1 = (++sr_no)+"\n\n\n\n"+(++sr_no)+" ";
               	}
               }
               field_2 = " "+pdfinvadjremark+"\n\n Gross Amount ("+pdfCurrency+")\n\n";
               field_3 = "Att 2\n\n \n\n ";
               if(pdfinvadjustcur.equalsIgnoreCase("U") || pdfinvadjustcur.equalsIgnoreCase("2"))
               {
               		field_4 = ""+pdfCurrency+"\n\n\n\n"+pdfCurrency+"";
               }
               else
               {
               	field_4 = ""+pdfCurrency+" \n\n\n\n"+pdfCurrency+"";
               	
               }
               field_5 = " \n\n ";
         		field_6 = " \n\n ";
          		field_7 = pdfinvadjustmentamt+" \n\n\n\n"+pdfFinal_adjust_gross_amt+" ";
               	
               
               BillingFieldsDetailsTable_a = new PdfPTable(BillingFieldsDetailsWidths_a);
               BillingFieldsDetailsTable_a.setWidthPercentage(100);
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
               
              /* if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
               {
               	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
               	{
               		field_1 = "7 \n\n8 ";
               	}
               	else
               	{
               		field_1 = "6 \n\n7 ";
               	}
               }
               else
               {
               	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
               	{
               		field_1 = "6 \n\n7 ";
               	}
               	else
               	{
               		field_1 = "5 \n\n6 ";
               	}
               }*/
               field_1 = ""+(++sr_no)+" ";
   			
               int cnt = 0;
               	for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{	
	               	if(i==0)
	               	{
	               		field_1 += "\n\n"+(++sr_no)+" ";
	               	}
	               	else
	               	{
	               		field_1 += "\n"+" ";
	               	}
	               	++cnt;
	   			}
	               if(cnt<1)
	               {
	               		field_1 += "\n\n"+(++sr_no)+" \n ";
	               }
	               else
	               {
	               		field_1 += "\n\n\n"+(++sr_no)+" \n ";
	               }
	               
	               field_2 = " Gross Amount (Rupees)";
	   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{	
	   				if(i==0)
	               	{
	   					field_2 += "\n\n "+customer_Invoice_Tax_Name.elementAt(i);
	               	}
	   				else
	   				{
	   					field_2 += "\n "+customer_Invoice_Tax_Name.elementAt(i);
	   				}
	   			}
	   			if(cnt<1)
	            {
	   				field_2 += "\n\n Invoice Amount\n ";
	            }
	   			else
	   			{
	   				if(tax_gst) {
	   					field_2 += "\n Total GST\n\n Invoice Amount\n";
	   				} else {
	   					field_2 += "\n Total Tax\n\n Invoice Amount\n ";
	   				}
	   			}
	   			
	   			field_3 = "";
	   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{	
	   				if(i==0)
	               	{
	   					field_3 += "\n\n ";
	               	}
	   				else
	   				{
	   					field_3 += "\n ";
	   				}
	   			}
	   			if(cnt<1)
	               {
	   				field_3 += "\n\n \n ";
	               }
	   			else
	   			{
	   				field_3 += "\n\n\n \n ";
	   			}
	   			
	   			field_4 = " Rupees";
	   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{	
	   				if(i==0)
	               	{
	   					field_4 += "\n\nRupees";
	               	}
	   				else
	   				{
	   					field_4 += "\nRupees";
	   				}
	   			}
	   			if(cnt<1)
	               {
	   				field_4 += "\n\nRupees\n ";
	               }
	   			else
	   			{
	   				field_4 += "\nRupees\n\nRupees\n ";
	   			}
	               
	               field_5 = " "+total_Invoice_Qty+" ";
	            for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{
	               	if(i==0)
	               	{
	               		field_5 += " \n\n ";
	               	}
	               	else
	               	{
	               		field_5 += " \n ";
	               	}
	   			}
	               if(cnt<1)
	               {
	               	field_5 += "\n\n \n ";
	               }
	               else
	               {
	               	field_5 += "\n\n\n \n ";
	               }
	               
	            field_6 = "";
	            for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{
	               	if(i==0)
	               	{
	               		field_6 += "\n\n"+customer_Invoice_Tax_Rate.elementAt(i)+" % ";
	               	}
	               	else
	               	{
	               		field_6 += "\n"+customer_Invoice_Tax_Rate.elementAt(i)+" % ";
	               	}
	   			}
	               if(cnt<1)
	               {
	               	field_6 += "\n\n \n ";
	               }
	               else
	               {
	               	field_6 += "\n\n\n \n ";
	               }
	               
	            field_7 = " "+customer_Invoice_Gross_Amt_INR+" ";
	   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{
	   				if(i==0)
	               	{
	   					field_7 += "\n\n"+customer_Invoice_Tax_Amt.elementAt(i)+" ";
	               	}
	   				else
	   				{
	   					field_7 += "\n"+customer_Invoice_Tax_Amt.elementAt(i)+" ";
	   				}
	   			}
	   			if(cnt<1)
	               {
	   				field_7 += "\n\n"+customer_Invoice_Net_Amt_INR+" \n ";
	               }
	   			else
	   			{
	   				field_7 += "\n"+total_tax_amt+" \n\n"+customer_Invoice_Net_Amt_INR+" \n ";
	   			}
	               
	   			
	               BillingFieldsDetailsTable_woexch.setWidthPercentage(100);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               //BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_normal)));
	               //BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_normal).setAction(new PdfAction(new URL(invoice_att3_file_name)))));
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
	               
               
               
           }
           else if(!Tariff_flag && advance_payment_flag && pdfinvadjustcur.startsWith("1") ) {
        	   //
        	   
        	   ////System.out.println("HERE---------------------------------------------------------------");
        	   
               field_1 = "\n"+(++sr_no)+"\n\n"+(++sr_no)+"";
             	
               field_2 = " Exchange Rate \n\n Gross Amount (Rupees)";
               field_3 = " Att 2 \n\n\n";
               field_4 = "\n\n\nRupees";
               field_5 = "\n\n\n"+total_Invoice_Qty+"";
               field_6 = " "+ customer_Invoice_Exchg_Rate+" \n\n\n";
               field_7 = "\n\n\n"+pdfFinal_first_gross_amt_inr+"";
               	
              // float[] BillingFieldsDetailsWidths_exch = {0.06f, 0.34f, 0.10f, 0.10f, 0.15f, 0.10f, 0.15f};
               //PdfPTable BillingFieldsDetailsTable_exch = new PdfPTable(BillingFieldsDetailsWidths_exch);
               BillingFieldsDetailsTable_exch.setWidthPercentage(100);
               BillingFieldsDetailsTable_exch.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_exch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_exch.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
               BillingFieldsDetailsTable_exch.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
               BillingFieldsDetailsTable_exch.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_exch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
               BillingFieldsDetailsTable_exch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_exch.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
               BillingFieldsDetailsTable_exch.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_exch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_exch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_exch.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
               BillingFieldsDetailsTable_exch.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_exch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_exch.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
               BillingFieldsDetailsTable_exch.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
               BillingFieldsDetailsTable_exch.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_exch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_exch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_exch.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
               BillingFieldsDetailsTable_exch.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_exch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_exch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_exch.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
               BillingFieldsDetailsTable_exch.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_exch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_exch.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
               BillingFieldsDetailsTable_exch.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
        	   
        	   
        	   //BillingFieldsDetailsTable_a
          		 if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
                 {
                 	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
                 	{
                 		field_1 = (++sr_no)+" \n\n\n\n"+(++sr_no)+" ";
                 	}
                 	else
                 	{
                 		field_1 = (++sr_no)+" \n\n\n\n"+(++sr_no)+" ";
                 	}
                 }
                 else
                 {
                 	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
                 	{
                 		field_1 = (++sr_no)+"\n\n\n\n"+(++sr_no)+" ";
                 	}
                 	else
                 	{
                 		field_1 = (++sr_no)+"\n\n\n\n"+(++sr_no)+" ";
                 	}
                 }
                 field_2 =" "+pdfinvadjremark+"\n\n Gross Amount (Rupees)\n\n";
                 field_3 = "Att 3\n\n \n\n ";
                 if(pdfinvadjustcur.equalsIgnoreCase("U") || pdfinvadjustcur.equalsIgnoreCase("2"))
                 {
                 		field_4 = "USD\n\n\n\nUSD";
                 }
                 else
                 {
                 	field_4 = "Rupees \n\n\n\nRupees";
                 	
                 }
                 field_5 = " \n\n ";
           		field_6 = " \n\n ";
            		field_7 = pdfinvadjustmentamt+" \n\n\n\n"+pdfFinal_adjust_gross_amt+" ";
                 	
               
               BillingFieldsDetailsTable_a = new PdfPTable(BillingFieldsDetailsWidths_a);
               BillingFieldsDetailsTable_a.setWidthPercentage(100);
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
               
               
        	   //BillingFieldsDetailsTable_woexch
               field_1 = ""+(++sr_no)+" ";
      			
               int cnt = 0;
               	for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{	
	               	if(i==0)
	               	{
	               		field_1 += "\n\n"+(++sr_no)+" ";
	               	}
	               	else
	               	{
	               		field_1 += "\n"+" ";
	               	}
	               	++cnt;
	   			}
	               if(cnt<1)
	               {
	               		field_1 += "\n\n"+(++sr_no)+" \n ";
	               }
	               else
	               {
	               		field_1 += "\n\n\n"+(++sr_no)+" \n ";
	               }
	               
	               field_2 = "  Gross Amount (Rupees)";
	   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{	
	   				if(i==0)
	               	{
	   					field_2 += "\n\n "+customer_Invoice_Tax_Name.elementAt(i);
	               	}
	   				else
	   				{
	   					field_2 += "\n "+customer_Invoice_Tax_Name.elementAt(i);
	   				}
	   			}
	   			if(cnt<1)
	            {
	   				field_2 += "\n\n Invoice Amount\n ";
	            }
	   			else
	   			{
	   				if(tax_gst) {
	   					field_2 += "\n Total GST\n\n Invoice Amount\n";
	   				} else {
	   					field_2 += "\n Total Tax\n\n Invoice Amount\n ";
	   				}
	   			}
	   			
	   			field_3 = "  ";
	   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{	
	   				if(i==0)
	               	{
	   					field_3 += "\n\n ";
	               	}
	   				else
	   				{
	   					field_3 += "\n ";
	   				}
	   			}
	   			if(cnt<1)
	               {
	   				field_3 += "\n\n \n ";
	               }
	   			else
	   			{
	   				field_3 += "\n\n\n \n ";
	   			}
	   			
	   			field_4 = " Rupees";
	   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{	
	   				if(i==0)
	               	{
	   					field_4 += "\n\nRupees";
	               	}
	   				else
	   				{
	   					field_4 += "\nRupees";
	   				}
	   			}
	   			if(cnt<1)
	               {
	   				field_4 += "\n\nRupees\n ";
	               }
	   			else
	   			{
	   				field_4 += "\nRupees\n\nRupees\n ";
	   			}
	               
	               field_5 = "  "+total_Invoice_Qty+" ";
	            for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{
	               	if(i==0)
	               	{
	               		field_5 += " \n\n ";
	               	}
	               	else
	               	{
	               		field_5 += " \n ";
	               	}
	   			}
	               if(cnt<1)
	               {
	               	field_5 += "\n\n \n ";
	               }
	               else
	               {
	               	field_5 += "\n\n\n \n ";
	               }
	               
	            field_6 = " ";
	            for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{
	               	if(i==0)
	               	{
	               		field_6 += "\n\n"+customer_Invoice_Tax_Rate.elementAt(i)+" % ";
	               	}
	               	else
	               	{
	               		field_6 += "\n"+customer_Invoice_Tax_Rate.elementAt(i)+" % ";
	               	}
	   			}
	               if(cnt<1)
	               {
	               	field_6 += "\n\n \n ";
	               }
	               else
	               {
	               	field_6 += "\n\n\n \n ";
	               }
	               
	            field_7 = " "+customer_Invoice_Gross_Amt_INR+" ";
	   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{
	   				if(i==0)
	               	{
	   					field_7 += "\n\n"+customer_Invoice_Tax_Amt.elementAt(i)+" ";
	               	}
	   				else
	   				{
	   					field_7 += "\n"+customer_Invoice_Tax_Amt.elementAt(i)+" ";
	   				}
	   			}
	   			if(cnt<1)
	               {
	   				field_7 += "\n\n"+customer_Invoice_Net_Amt_INR+" \n ";
	               }
	   			else
	   			{
	   				field_7 += "\n"+total_tax_amt+" \n\n"+customer_Invoice_Net_Amt_INR+" \n ";
	   			}
	               
	   			
	               BillingFieldsDetailsTable_woexch.setWidthPercentage(100);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               //BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_normal)));
	               //BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_normal).setAction(new PdfAction(new URL(invoice_att3_file_name)))));
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
        	   
           }
           else if(Tariff_flag && !advance_payment_flag)
           {
        	   if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
               {
	               	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
	               	{
	               		field_1 = (++sr_no)+" ";
	               	}
	               	else
	               	{
	               		field_1 = (++sr_no)+" ";
	               	}
               }
               else
               {
               	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
               	{
               		field_1 = (++sr_no)+" ";
               	}
               	else
               	{
               		field_1 = (++sr_no)+" ";
               	}
               }
   			
               int cnt = 0;
               for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   				{	
               	if(i==0)
               	{
               		field_1 += "\n\n"+(++sr_no)+" ";
               	}
               	else
               	{
               		field_1 += "\n"+" ";
               	}
               	++cnt;
   				}
               if(cnt<1)
               {
               	field_1 += "\n\n"+(++sr_no)+" \n ";
               }
               else
               {
               	field_1 += "\n\n\n"+(++sr_no)+" \n ";
               }
               
               field_2 = "\n Gross Amount (Rupees)";
   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{	
   				if(i==0)
               	{
   					field_2 += "\n\n "+customer_Invoice_Tax_Name.elementAt(i);
               	}
   				else
   				{
   					field_2 += "\n "+customer_Invoice_Tax_Name.elementAt(i);
   				}
   			}
   			if(cnt<1)
               {
   				field_2 += "\n\n Invoice Amount\n ";
               }
   			else
   			{
   				if(tax_gst) {
   					field_2 += "\n Total GST\n\n Invoice Amount\n";
   				} else {
   					field_2 += "\n Total Tax\n\n Invoice Amount\n ";
   				}
   			}
   			
   			field_3 = "";
   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{	
   				if(i==0)
               	{
   					field_3 += "\n\n ";
               	}
   				else
   				{
   					field_3 += "\n ";
   				}
   			}
   			if(cnt<1)
               {
   				field_3 += "\n\n \n ";
               }
   			else
   			{
   				field_3 += "\n\n\n \n ";
   			}
   			
   			field_4 = "Rupees";
   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{	
   				if(i==0)
               	{
   					field_4 += "\n\nRupees";
               	}
   				else
   				{
   					field_4 += "\nRupees";
   				}
   			}
   			if(cnt<1)
               {
   				field_4 += "\n\nRupees\n ";
               }
   			else
   			{
   				field_4 += "\nRupees\n\nRupees\n ";
   			}
               
               field_5 = " "+total_Invoice_Qty+" ";
               for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{
               	if(i==0)
               	{
               		field_5 += " \n\n ";
               	}
               	else
               	{
               		field_5 += " \n ";
               	}
   			}
               if(cnt<1)
               {
               	field_5 += "\n\n \n ";
               }
               else
               {
               	field_5 += "\n\n\n \n ";
               }
               
               field_6 = " ";
               for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{
               	if(i==0)
               	{
               		field_6 += "\n\n"+customer_Invoice_Tax_Rate.elementAt(i)+" % ";
               	}
               	else
               	{
               		field_6 += "\n"+customer_Invoice_Tax_Rate.elementAt(i)+" % ";
               	}
   			}
               if(cnt<1)
               {
               	field_6 += "\n\n \n ";
               }
               else
               {
               	field_6 += "\n\n\n \n ";
               }
               
               field_7 = ""+customer_Invoice_Gross_Amt_INR+" ";
   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{
   				if(i==0)
               	{
   					field_7 += "\n\n"+customer_Invoice_Tax_Amt.elementAt(i)+" ";
               	}
   				else
   				{
   					field_7 += "\n"+customer_Invoice_Tax_Amt.elementAt(i)+" ";
   				}
   			}
   			if(cnt<1)
               {
   				field_7 += "\n\n"+customer_Invoice_Net_Amt_INR+" \n ";
               }
   			else
   			{
   				field_7 += "\n"+total_tax_amt+" \n\n"+customer_Invoice_Net_Amt_INR+" \n ";
   			}
               
   			
               BillingFieldsDetailsTable_2.setWidthPercentage(100);
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               //BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_normal)));
               //BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_normal).setAction(new PdfAction(new URL(invoice_att3_file_name)))));
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
           }
           else
           {
        	   if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
               {
	               	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
	               	{
	               		field_1 = (++sr_no)+" \n\n"+(++sr_no)+" ";
	               	}
	               	else
	               	{
	               		field_1 = (++sr_no)+" \n\n"+(++sr_no)+" ";
	               	}
               }
               else
               {
               	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
               	{
               		field_1 = (++sr_no)+" \n\n"+(++sr_no)+" ";
               	}
               	else
               	{
               		field_1 = (++sr_no)+" \n\n"+(++sr_no)+" ";
               	}
               }
   			
               int cnt = 0;
               for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{	
               	if(i==0)
               	{
               		field_1 += "\n\n"+(++sr_no)+" ";
               	}
               	else
               	{
               		field_1 += "\n"+" ";
               	}
               	++cnt;
   			}
               if(cnt<1)
               {
               	field_1 += "\n\n"+(++sr_no)+" \n ";
               }
               else
               {
               	field_1 += "\n\n\n"+(++sr_no)+" \n ";
               }
               
               field_2 = " \n Exchange Rate\n\n Gross Amount (Rupees)";
   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{	
   				if(i==0)
               	{
   					field_2 += "\n\n "+customer_Invoice_Tax_Name.elementAt(i);
               	}
   				else
   				{
   					field_2 += "\n "+customer_Invoice_Tax_Name.elementAt(i);
   				}
   			}
   			if(cnt<1)
               {
   				field_2 += "\n\n Invoice Amount\n ";
               }
   			else
   			{
   				if(tax_gst) {
   					field_2 += "\n Total GST\n\n Invoice Amount\n";
   				} else {
   					field_2 += "\n Total Tax\n\n Invoice Amount\n ";
   				}
   			}
   			
   			field_3 = " \nAtt 2\n\n ";
   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{	
   				if(i==0)
               	{
   					field_3 += "\n\n ";
               	}
   				else
   				{
   					field_3 += "\n ";
   				}
   			}
   			if(cnt<1)
               {
   				field_3 += "\n\n \n ";
               }
   			else
   			{
   				field_3 += "\n\n\n \n ";
   			}
   			
   			field_4 = " \n \n\nRupees";
   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{	
   				if(i==0)
               	{
   					field_4 += "\n\nRupees";
               	}
   				else
   				{
   					field_4 += "\nRupees";
   				}
   			}
   			if(cnt<1)
               {
   				field_4 += "\n\nRupees\n ";
               }
   			else
   			{
   				field_4 += "\nRupees\n\nRupees\n ";
   			}
               
               field_5 = " \n \n\n"+total_Invoice_Qty+" ";
               for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{
               	if(i==0)
               	{
               		field_5 += " \n\n ";
               	}
               	else
               	{
               		field_5 += " \n ";
               	}
   			}
               if(cnt<1)
               {
               	field_5 += "\n\n \n ";
               }
               else
               {
               	field_5 += "\n\n\n \n ";
               }
               
               field_6 = " \n"+customer_Invoice_Exchg_Rate+" \n\n ";
               for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{
               	if(i==0)
               	{
               		field_6 += "\n\n"+customer_Invoice_Tax_Rate.elementAt(i)+" % ";
               	}
               	else
               	{
               		field_6 += "\n"+customer_Invoice_Tax_Rate.elementAt(i)+" % ";
               	}
   			}
               if(cnt<1)
               {
               	field_6 += "\n\n \n ";
               }
               else
               {
               	field_6 += "\n\n\n \n ";
               }
               
               field_7 = " \n \n\n"+customer_Invoice_Gross_Amt_INR+" ";
   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{
   				if(i==0)
               	{
   					field_7 += "\n\n"+customer_Invoice_Tax_Amt.elementAt(i)+" ";
               	}
   				else
   				{
   					field_7 += "\n"+customer_Invoice_Tax_Amt.elementAt(i)+" ";
   				}
   			}
   			if(cnt<1)
               {
   				field_7 += "\n\n"+customer_Invoice_Net_Amt_INR+" \n ";
               }
   			else
   			{
   				field_7 += "\n"+total_tax_amt+" \n\n"+customer_Invoice_Net_Amt_INR+" \n ";
   			}
               
   			
               BillingFieldsDetailsTable_2.setWidthPercentage(100);
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               //BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_normal)));
               //BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_normal).setAction(new PdfAction(new URL(invoice_att3_file_name)))));
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
           }
            
            
            ///////////////////////////////////////////////////////////////////
           /* 
            if(contract_type.equalsIgnoreCase("R"))
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_1 = "5 \n\n\n6 ";
            	}
            	else
            	{
            		field_1 = "4 \n\n\n5 ";
            	}
            }
            else
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_1 = "4\n\n\n5 ";
            	}
            	else
            	{
            		field_1 = "3\n\n\n4 ";
            	}
            }
            field_2 = "Adjustment for Advance Amount Paid against Inv. No. "+invno+"\n\n Gross Amount (USD)\n\n";
            field_3 = "Att 2\n\n \n\n ";
            if(invadjustcur11.equalsIgnoreCase("U"))
            {
            		field_4 = "USD\n\n\nUSD";
            }
            else
            {
            	field_4 = "USD @ Exchange Rate \n\nUSD";
            	
            }
            field_5 = " \n\n ";
      		field_6 = " \n\n ";
       		field_7 = invadjustmentamt1+" \n\n\n"+invgrossamt1+" ";
            	
            float[] BillingFieldsDetailsWidths_a = {0.06f, 0.34f, 0.10f, 0.10f, 0.15f, 0.10f, 0.15f};
            PdfPTable BillingFieldsDetailsTable_a = new PdfPTable(BillingFieldsDetailsWidths_a);
            BillingFieldsDetailsTable_a.setWidthPercentage(100);
            BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
            BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
            BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_3,small_black_bold).setAction(PdfAction.gotoRemotePage(invoice_att2_file_name,"Att2",false,true))));
            BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
            BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
            BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
            BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
               
            
            if(contract_type.equalsIgnoreCase("R"))
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_1 = "7 \n\n8 ";
            	}
            	else
            	{
            		field_1 = "6 \n\n7 ";
            	}
            }
            else
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_1 = "6 \n\n7 ";
            	}
            	else
            	{
            		field_1 = "5 \n\n6 ";
            	}
            }
			
            int cnt = 0;
            for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
			{	
            	if(i==0)
            	{
            		field_1 += "\n\n"+(++sr_no)+" ";
            	}
            	else
            	{
            		field_1 += "\n"+" ";
            	}
            	++cnt;
			}
            if(cnt==1)
            {
            	field_1 += "\n\n"+(++sr_no)+" \n ";
            }
            else
            {
            	field_1 += "\n\n\n"+(++sr_no)+" \n ";
            }
            
            field_2 = " \n Exchange Rate\n\n Gross Amount (Rupees)";
			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
			{	
				if(i==0)
            	{
					field_2 += "\n\n "+customer_Invoice_Tax_Name.elementAt(i);
            	}
				else
				{
					field_2 += "\n "+customer_Invoice_Tax_Name.elementAt(i);
				}
			}
			if(cnt==1)
            {
				field_2 += "\n\n Invoice Amount (Rupees)\n ";
            }
			else
			{
				field_2 += "\n Total Tax\n\n Invoice Amount (Rupees)\n ";
			}
			
			field_3 = " \nAtt 2\n\n ";
			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
			{	
				if(i==0)
            	{
					field_3 += "\n\n ";
            	}
				else
				{
					field_3 += "\n ";
				}
			}
			if(cnt==1)
            {
				field_3 += "\n\n \n ";
            }
			else
			{
				field_3 += "\n\n\n \n ";
			}
			
			field_4 = " \n \n\nRupees";
			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
			{	
				if(i==0)
            	{
					field_4 += "\n\nRupees";
            	}
				else
				{
					field_4 += "\nRupees";
				}
			}
			if(cnt==1)
            {
				field_4 += "\n\nRupees\n ";
            }
			else
			{
				field_4 += "\nRupees\n\nRupees\n ";
			}
            
            field_5 = " \n \n\n"+total_Invoice_Qty+" ";
            for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
			{
            	if(i==0)
            	{
            		field_5 += " \n\n ";
            	}
            	else
            	{
            		field_5 += " \n ";
            	}
			}
            if(cnt==1)
            {
            	field_5 += "\n\n \n ";
            }
            else
            {
            	field_5 += "\n\n\n \n ";
            }
            
            field_6 = " \n"+customer_Invoice_Exchg_Rate+" \n\n ";
            for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
			{
            	if(i==0)
            	{
            		field_6 += "\n\n"+customer_Invoice_Tax_Rate.elementAt(i)+" % ";
            	}
            	else
            	{
            		field_6 += "\n"+customer_Invoice_Tax_Rate.elementAt(i)+" % ";
            	}
			}
            if(cnt==1)
            {
            	field_6 += "\n\n \n ";
            }
            else
            {
            	field_6 += "\n\n\n \n ";
            }
            
            field_7 = " \n \n\n"+customer_Invoice_Gross_Amt_INR+" ";
			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
			{
				if(i==0)
            	{
					field_7 += "\n\n"+customer_Invoice_Tax_Amt.elementAt(i)+" ";
            	}
				else
				{
					field_7 += "\n"+customer_Invoice_Tax_Amt.elementAt(i)+" ";
				}
			}
			if(cnt==1)
            {
				field_7 += "\n\n"+customer_Invoice_Net_Amt_INR+" \n ";
            }
			else
			{
				field_7 += "\n"+total_tax_amt+" \n\n"+customer_Invoice_Net_Amt_INR+" \n ";
			}
            
			float[] BillingFieldsDetailsWidths_2 = {0.06f, 0.34f, 0.10f, 0.10f, 0.15f, 0.10f, 0.15f};
            PdfPTable BillingFieldsDetailsTable_2 = new PdfPTable(BillingFieldsDetailsWidths_2);
            BillingFieldsDetailsTable_2.setWidthPercentage(100);
            BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
            BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
            BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            //BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_normal)));
            //BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_normal).setAction(new PdfAction(new URL(invoice_att3_file_name)))));
            BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_bold).setAction(PdfAction.gotoRemotePage(invoice_att3_file_name,"Att3",false,true))));
            BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
            BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
            BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
            BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
            */
                        
            float[] BillingFieldsDetailsWidths_3 = {0.06f, 0.34f, 0.10f, 0.10f, 0.15f, 0.10f, 0.15f};
            PdfPTable BillingFieldsDetailsTable_3 = new PdfPTable(BillingFieldsDetailsWidths_3);
            BillingFieldsDetailsTable_3.setWidthPercentage(100);
            BillingFieldsDetailsTable_3.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable_3.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_3.addCell(new Phrase(new Chunk(""+(++sr_no)+" ",small_black_bold)));
            BillingFieldsDetailsTable_3.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            BillingFieldsDetailsTable_3.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_3.addCell(new Phrase(new Chunk(" Net Amount Payable",small_black_bold)));
            BillingFieldsDetailsTable_3.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsDetailsTable_3.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_3.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            BillingFieldsDetailsTable_3.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsDetailsTable_3.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_3.addCell(new Phrase(new Chunk("Rupees",small_black_bold)));
            BillingFieldsDetailsTable_3.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable_3.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_3.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            BillingFieldsDetailsTable_3.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable_3.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_3.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            BillingFieldsDetailsTable_3.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable_3.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_3.addCell(new Phrase(new Chunk(customer_Invoice_Net_Amt_INR+" ",small_black_bold)));
            
            /*float[] table4Widths = {0.20f, 0.15f, 0.15f, 0.15f, 0.35f};
			PdfPTable table4 = new PdfPTable(table4Widths);
			table4.setWidthPercentage(100);
			table4.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			table4.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			table4.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
			table4.addCell(new Phrase(new Chunk("Container #",black_bold).setUnderline(1f, -4f)));
			table4.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			table4.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			table4.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
			table4.addCell(new Phrase(new Chunk("Size",black_bold).setUnderline(1f, -4f)));
			table4.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			table4.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			table4.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
			table4.addCell(new Phrase(new Chunk("Weight",black_bold).setUnderline(1f, -4f)));
			table4.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			table4.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			table4.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
			table4.addCell(new Phrase(new Chunk("Packages",black_bold).setUnderline(1f, -4f)));
			table4.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			table4.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			table4.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
			table4.addCell(new Phrase(new Chunk("Product",black_bold).setUnderline(1f, -4f)));*/
            ////System.out.println("--in ADV PAy -contract_type-> "+contract_type);
            if(contract_type.trim().equalsIgnoreCase("R") || contract_type.trim().equalsIgnoreCase("T") || contract_type.trim().equalsIgnoreCase("C"))
            {
            	if(!remark_3.trim().equals(""))
            	{
            		if(!invoice_title.equalsIgnoreCase("CREDIT") )
            			remark_1 += "\n"+remark_3; //HS20160615  
            		else
            			remark_1 = remark_3;  //HS20160615 --please st.--
            	}
            }
      //      //System.out.println("-----INSIDE PRINTALL 4---");
            
			PdfPTable RemarkTable = new PdfPTable(1);
            RemarkTable.setWidthPercentage(100);
            RemarkTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            RemarkTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            RemarkTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            RemarkTable.addCell(new Phrase(new Chunk(remark_1,small_black_normal)));
			
            
            PdfPTable SNRemarkTable = new PdfPTable(1);
            SNRemarkTable.setWidthPercentage(100);
            SNRemarkTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            SNRemarkTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            SNRemarkTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            SNRemarkTable.addCell(new Phrase(new Chunk("\n"+remark_2,very_small_black_normal)));
            
            //NB20140909 
            ////System.out.println("REMARK----------------"+Invoice_adj_remark);
            PdfPTable ADJRemarkTable = new PdfPTable(1);
            ADJRemarkTable.setWidthPercentage(100);
            ADJRemarkTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            ADJRemarkTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            ADJRemarkTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            ADJRemarkTable.addCell(new Phrase(new Chunk("\n"+pdfinvadjremark,very_small_black_normal)));
            //
            
			
			PdfPTable SignatureInfoTable = new PdfPTable(1);
			SignatureInfoTable.setWidthPercentage(100);
			SignatureInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			SignatureInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
			SignatureInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
			SignatureInfoTable.addCell(new Phrase(new Chunk("\nFor Hazira LNG Private Limited\n\n\n\n\nAuthorised Signatory",black_bold)));
			                       
            
			PdfPTable GenerationInfoTable = new PdfPTable(1);
            GenerationInfoTable.setWidthPercentage(100);
            GenerationInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            GenerationInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            GenerationInfoTable.addCell(new Phrase(new Chunk("FMS7",small_black_normal)));
            
            
            PdfPTable GenerationInfoTable2 = new PdfPTable(1);
            GenerationInfoTable2.setWidthPercentage(100);
            GenerationInfoTable2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            GenerationInfoTable2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            GenerationInfoTable2.addCell(new Phrase(new Chunk("This is computer generated INVOICE and hence does not require Authorised Signatory.",small_black_normal)));
            
            
			//Adding All Cells To PDF Document - One By One ...
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
			document.add(InvoiceTitleTable);
			document.add(InvoiceDescTable);
			document.add(InvoiceDescTable2);
			document.add(new Paragraph("              "));
			if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
			{
				document.add(InvoiceNoteTable);
			}
			else if(contract_type.trim().equalsIgnoreCase("R") || contract_type.trim().equalsIgnoreCase("T") || contract_type.trim().equalsIgnoreCase("C"))
			{
				document.add(InvoiceNoteTable);
			}
			document.add(new Paragraph("              "));
			document.add(contact_addr_table);                        
            document.add(GstCstInfoTable);            
            document.add(new Paragraph("              "));
            document.add(InvoiceDateInfoTable);
            document.add(InvoiceDueDateInfoTable);
            document.add(InvoiceNOInfoTable);
            document.add(BillingPeriodInfoTable);
            document.add(new Paragraph("              "));
            document.add(BillingFieldsInfoTable);
            document.add(BillingFieldsDetailsTable);
            
            ////System.out.println("Tariff_flag-->  "+Tariff_flag+"advance_payment_flag-->"+advance_payment_flag+"cur"+pdfinvadjustcur);
            
            if(!Tariff_flag && advance_payment_flag)
            {
            	if(pdfinvadjustcur.startsWith("2")){
            		document.add(BillingFieldsDetailsTable_a);
            		document.add(BillingFieldsDetailsTable_2);
            	}
            	else
            	{
            		////System.out.println("Tariff_flag-->  "+Tariff_flag+"advance_payment_flag-->"+advance_payment_flag);
            		document.add(BillingFieldsDetailsTable_exch);
            		document.add(BillingFieldsDetailsTable_a);
            		document.add(BillingFieldsDetailsTable_woexch);
            	}
            }
            if(Tariff_flag && advance_payment_flag) {
            	//document.add(BillingFieldsDetailsTable_exch);
            	document.add(BillingFieldsDetailsTable_a);
            	document.add(BillingFieldsDetailsTable_woexch);
            }
            else if(Tariff_flag && !advance_payment_flag)
            {
            	document.add(BillingFieldsDetailsTable_2);
            }
            
            if(!Tariff_flag && !advance_payment_flag)
            {
            	document.add(BillingFieldsDetailsTable_2);
            }
            
            
            
            //document.add(BillingFieldsDetailsTable_a);
            
            document.add(BillingFieldsDetailsTable_3);
            document.add(new Paragraph("              "));
            document.add(RemarkTable);
            //if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
			{
	            document.add(SNRemarkTable);
			}            
            if(advance_payment_flag){
           // document.add(ADJRemarkTable);
            }
            //document.add(new Paragraph("  "));
            document.add(SignatureInfoTable);            
            /*document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            document.add(GenerationInfoTable2);*/
            
            
            // ********* Following Coding is for Showing Attachment-1 Sheet on the Next (2nd Page) of the Same PDF Document *********** //
            document.setPageSize(pageSize1);
            document.newPage();
      //      document.open();
            
			//iText-5.0.4 ...
            /*Font very_small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 5.00f, Font.NORMAL, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 6.00f, Font.NORMAL, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font small_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 6.00f, Font.BOLD, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font black_bold = FontFactory.getFont(FontFactory.HELVETICA, 8.00f, Font.BOLD, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font big_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 12.00f, Font.BOLD, new BaseColor(new Color(0x00, 0x00, 0x00)));*/
            //itext-1.4 ...
            very_small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 5, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 8, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            Font small_black_normal_new = FontFactory.getFont(FontFactory.HELVETICA, 7, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            small_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 6, Font.BOLD, new Color(0x00, 0x00, 0x00));
            Font small_black_bold2 = FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD, new Color(0x00, 0x00, 0x00));
            Font small_black_bold2_new = FontFactory.getFont(FontFactory.HELVETICA, 7, Font.BOLD, new Color(0x00, 0x00, 0x00));
            big_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, new Color(0x00, 0x00, 0x00));
            black_bold = FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD, new Color(0x00, 0x00, 0x00));
            
            			  
			url_start = "http://"+server_nm+":"+server_port+context_nm;
		//	//System.out.println("this is the pic path  "+url_start+"\\images\\LOGO\\company_Logo.png");
						  
            hlpl_logo.setBorder(Rectangle.NO_BORDER);
            hlpl_logo.scaleAbsolute(75,75);
            PdfPCell hlpl_logo_cell = new PdfPCell(hlpl_logo,false);
            hlpl_logo_cell.setBorder(Rectangle.NO_BORDER);
			
            
            float[] hlpl_logo_Widths = {0.45f, 0.51f, 0.08f};
            PdfPTable hlpl_logo_table = new PdfPTable(hlpl_logo_Widths);
            hlpl_logo_table.setWidthPercentage(100);
            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            hlpl_logo_table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            hlpl_logo_table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            hlpl_logo_table.addCell(hlpl_logo_cell);
            
            
			addr_supl = "Registered Office:";
            
            if(!contact_Suppl_Name.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Name;     	
            }
            if(!contact_Suppl_Person_Address.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Person_Address;     	
            }
            if(!contact_Suppl_Person_City.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Person_City;     	
            }
            if(!contact_Suppl_Person_Pin.trim().equals(""))
            {
            	addr_supl += " "+"-"+" "+contact_Suppl_Person_Pin;     	
            }
			
			addr_customer = "";
            
			if(contact_Person_Name_And_Designation.trim().equalsIgnoreCase(contact_Customer_Name.trim()))
			{
				if(!contact_Customer_Name.trim().equals(""))
	            {
	            	addr_customer += contact_Customer_Name;    	
	            }
			}
			else
			{
	            if(!contact_Person_Name_And_Designation.trim().equals(""))
	            {
	            	addr_customer += contact_Person_Name_And_Designation;     	
	            }
	            if(!contact_Customer_Name.trim().equals(""))
	            {
	            	addr_customer += "\n"+contact_Customer_Name;     	
	            }
			}
            if(!contact_Customer_Person_Address.trim().equals(""))
            {
            	addr_customer += "\n"+contact_Customer_Person_Address;     	
            }
            if(!contact_Customer_Person_City.trim().equals(""))
            {
            	addr_customer += "\n"+contact_Customer_Person_City;     	
            }
            if(!contact_Customer_Person_Pin.trim().equals(""))
            {
            	addr_customer += " "+"-"+" "+contact_Customer_Person_Pin;     	
            }
                        
                      
            float[] ContactAddrWidths2 = {0.25f, 0.55f, 0.20f};
            contact_addr_table = new PdfPTable(ContactAddrWidths2);
            contact_addr_table.setWidthPercentage(100);
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(contact_Suppl_Name,black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(" ",black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk("To:",black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(addr_supl,small_black_normal)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(addr_customer,small_black_normal)));
			            
            String title_note = "ATTACHMENT 1 - "; 
            if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
            {
            	title_note += "Properly ";
            }
            title_note += "Nominated Quantities";
            
            PdfPTable title_note_table = new PdfPTable(1);
            title_note_table.setWidthPercentage(100);
            title_note_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            title_note_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            title_note_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
            title_note_table.addCell(new Phrase(new Chunk(title_note,big_black_bold)));
            
            
			inv_no_info = "";
			
			if(contract_type.trim().equalsIgnoreCase("R"))
			{
				inv_no_info = "HLPL R-gas Invoice Seq No:";
			}
			else if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
			{
				if(date_flag) {
					inv_no_info = "HLPL Tax Invoice Seq No:";
				} else {
					inv_no_info = "HLPL LTCORA Invoice Seq No:";
				}
			}
			else
			{
				inv_no_info = "HLPL Invoice Seq No:";
			}
            
			float[] InvoiceDateInfoWidths2 = {0.70f, 0.20f, 0.10f};
            InvoiceDateInfoTable = new PdfPTable(InvoiceDateInfoWidths2);
            InvoiceDateInfoTable.setWidthPercentage(100);
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",black_bold)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk("Invoice Date:",black_bold)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_DT,small_black_normal)));
            
            float[] InvoiceDueDateInfoWidths2 = {0.70f, 0.20f, 0.10f};
            InvoiceDueDateInfoTable = new PdfPTable(InvoiceDueDateInfoWidths2);
            InvoiceDueDateInfoTable.setWidthPercentage(100);
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",black_bold)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk("Payment Due Date:",black_bold)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Due_DT,small_black_normal)));
            
            invno = "";
            if(!new_inv_seq_no.equals("")) {
            	invno = new_inv_seq_no;
            } else {
            if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
        	{
        		if(hlpl_inv_no.length()>13)
        		{
        			invno = hlpl_inv_no.substring(0,10)+""+hlpl_inv_no.substring(12);
        		}
        		
        	}
        	else
        	{
        		if(hlpl_inv_no.length()>13)
        		{
        			invno = hlpl_inv_no.substring(0,5)+""+hlpl_inv_no.substring(7,10)+""+hlpl_inv_no.substring(12);
        		}
        	}
        	}
            float[] InvoiceNOInfoWidths2 = {0.70f, 0.20f, 0.10f};
            InvoiceNOInfoTable = new PdfPTable(InvoiceNOInfoWidths2);
            InvoiceNOInfoTable.setWidthPercentage(100);
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",black_bold)));
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(inv_no_info,black_bold)));
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(invno,small_black_normal)));
            
            
            if(liability_exist_flag.trim().equals("N"))
            {
	            float[] BillingPeriodFieldsRE1Widths = {0.31f, 0.18f, 0.28f, 0.23f};
	            PdfPTable BillingPeriodFieldsRE1Table = new PdfPTable(BillingPeriodFieldsRE1Widths);
	            BillingPeriodFieldsRE1Table.setWidthPercentage(100);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Terminal Co. Nomination",small_black_bold)));
	            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            	BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Natural Gas (Regasified)",small_black_bold)));
	            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            	BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Cumulative Natural Gas (Regasified) Quantities",small_black_bold)));
	            	            
	            
	            float[] BillingPeriodFieldsRE2Widths = {0.04f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
	            PdfPTable BillingPeriodFieldsRE2Table = new PdfPTable(BillingPeriodFieldsRE2Widths);
	            BillingPeriodFieldsRE2Table.setWidthPercentage(100);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Billing\nPeriod\nDay No.",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Date",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Contract\nSend Out\nCapacity",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Shipper\nNomination",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("NDQ",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("RE Gas",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("NDQ",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Re Gas",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Total Natural\nGas (Regasified)",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Billing\nPeriod",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Storage\nDuration",small_black_bold)));
	                        
	            
	            float[] BillingPeriodFieldsREWidths = {0.04f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
	            PdfPTable BillingPeriodFieldsRETable = new PdfPTable(BillingPeriodFieldsREWidths);
	            BillingPeriodFieldsRETable.setWidthPercentage(100);
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.LEFT);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.RIGHT);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            	            
	            
	            float[] BillingPeriodInfoREWidths = {0.04f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
	            PdfPTable BillingPeriodInfoRETable = new PdfPTable(BillingPeriodInfoREWidths);
	            BillingPeriodInfoRETable.setWidthPercentage(100);
	            
	            for(int i=0; i<invoice_Period_DCQ.size(); i++)
	        	{
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+(i+1)+" ",small_black_normal)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Dates.elementAt(i),small_black_normal)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_DCQ.elementAt(i),small_black_normal)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Nom_Qty.elementAt(i),small_black_normal)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_PNQ.elementAt(i),small_black_normal)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_RE_Qty.elementAt(i),small_black_normal)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_PNQ.elementAt(i),small_black_normal)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Re_Qty.elementAt(i),small_black_normal)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Total_Qty.elementAt(i),small_black_normal)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_Qty.elementAt(i),small_black_normal)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_SN_Qty.elementAt(i),small_black_normal)));
		        }
	            
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.LEFT);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
//	            
	            
	            float[] BillingPeriodInfoRE2Widths = {0.13f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
	            PdfPTable BillingPeriodInfoRE2Table = new PdfPTable(BillingPeriodInfoRE2Widths);
	            BillingPeriodInfoRE2Table.setWidthPercentage(100);
	            
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk("TOTAL: ",small_black_bold2)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+DCQ_Total,small_black_bold2)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Buyer_Nom_Qty_Total,small_black_bold2)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_PNQ_Total,small_black_bold2)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_RE_Qty_Total,small_black_bold2)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_PNQ_Total,small_black_bold2)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_Re_Qty_Total,small_black_bold2)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Delivered_Total_Qty_Total,small_black_bold2)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2)));
	                                  
            
	            float[] BillingPeriodFieldsSN1Widths = {0.31f, 0.18f, 0.28f, 0.23f};
	            PdfPTable BillingPeriodFieldsSN1Table = new PdfPTable(BillingPeriodFieldsSN1Widths);
	            BillingPeriodFieldsSN1Table.setWidthPercentage(100);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk("Seller Nomination",small_black_bold)));
	            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk("Natural Gas (Delivered)",small_black_bold)));
	            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk("Cumulative Quantities",small_black_bold)));
	            
	            
	            float[] BillingPeriodFieldsSN2Widths = {0.04f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
	            PdfPTable BillingPeriodFieldsSN2Table = new PdfPTable(BillingPeriodFieldsSN2Widths);
	            BillingPeriodFieldsSN2Table.setWidthPercentage(100);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Billing\nPeriod\nDay No.",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Date",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("DCQ",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Buyer\nNomination",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("PNQ",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("RE Gas",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("PNQ",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Re Gas",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Total\nDelivered\nGas",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Billing\nPeriod",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Transaction\nSupply\nPeriod",small_black_bold)));
	            	            
	            
	            float[] BillingPeriodFieldsSNWidths = {0.04f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
	            PdfPTable BillingPeriodFieldsSNTable = new PdfPTable(BillingPeriodFieldsSNWidths);
	            BillingPeriodFieldsSNTable.setWidthPercentage(100);
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.LEFT);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.RIGHT);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            	            
	            
	            float[] BillingPeriodInfoSNWidths = {0.04f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
	            PdfPTable BillingPeriodInfoSNTable = new PdfPTable(BillingPeriodInfoSNWidths);
	            BillingPeriodInfoSNTable.setWidthPercentage(100);
	            
	            for(int i=0; i<invoice_Period_DCQ.size(); i++)
	        	{
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+(i+1)+" ",small_black_normal)));
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Dates.elementAt(i),small_black_normal)));
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_DCQ.elementAt(i),small_black_normal)));
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            /*if(i==(invoice_Period_DCQ.size()-1))
		            {
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal)));
		            }
		            else
		            {*/
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Nom_Qty.elementAt(i),small_black_normal)));
		            //}
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            /*if(i==(invoice_Period_DCQ.size()-1))
		            {
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal)));
		            }
		            else
		            {*/
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_PNQ.elementAt(i),small_black_normal)));
		            //}
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            /*if(i==(invoice_Period_DCQ.size()-1))
		            {
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal)));
		            }
		            else
		            {*/
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_RE_Qty.elementAt(i),small_black_normal)));
		            //}
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            /*if(i==(invoice_Period_DCQ.size()-1))
		            {
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal)));
		            }
		            else
		            {*/
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_PNQ.elementAt(i),small_black_normal)));
		            //}
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            /*if(i==(invoice_Period_DCQ.size()-1))
		            {
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal)));
		            }
		            else
		            {*/
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Re_Qty.elementAt(i),small_black_normal)));
		            //}
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            /*if(i==(invoice_Period_DCQ.size()-1))
		            {
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal)));
		            }
		            else
		            {*/
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Total_Qty.elementAt(i),small_black_normal)));
		            //}
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            /*if(i==(invoice_Period_DCQ.size()-1))
		            {
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("999555000.99",small_black_normal)));
		            }
		            else
		            {*/
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_Qty.elementAt(i),small_black_normal)));
		            //}
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            /*if(i==(invoice_Period_DCQ.size()-1))
		            {
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("999555000.99",small_black_normal)));
		            }
		            else
		            {*/
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_SN_Qty.elementAt(i),small_black_normal)));
		            //}
	        	}
	            
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.LEFT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
	                        
	            
	            float[] BillingPeriodInfoSN2Widths = {0.13f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
	            PdfPTable BillingPeriodInfoSN2Table = new PdfPTable(BillingPeriodInfoSN2Widths);
	            BillingPeriodInfoSN2Table.setWidthPercentage(100);
	            
	            
	                       
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk("TOTAL: ",small_black_bold2)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+nf5.format(Double.parseDouble(DCQ_Total)),small_black_bold2)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Buyer_Nom_Qty_Total,small_black_bold2)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_PNQ_Total,small_black_bold2)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_RE_Qty_Total,small_black_bold2)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_PNQ_Total,small_black_bold2)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_Re_Qty_Total,small_black_bold2)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Delivered_Total_Qty_Total,small_black_bold2)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2)));
	                       
	                       
				//Adding All Cells To PDF Document - One By One ...
				//document.add(new Paragraph("              "));
				document.add(hlpl_logo_table);
				document.add(contact_addr_table);                        
	            document.add(new Paragraph("              "));
	            document.add(title_note_table);
	            document.add(new Paragraph("              "));
	            document.add(InvoiceDateInfoTable);
	            document.add(InvoiceDueDateInfoTable);
	            document.add(InvoiceNOInfoTable);
	            document.add(new Paragraph("              "));
	            
	            if(contract_type.trim().equalsIgnoreCase("R") || contract_type.trim().equalsIgnoreCase("T") ||contract_type.trim().equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
				{
	            	document.add(BillingPeriodFieldsRE1Table);
	            	document.add(BillingPeriodFieldsRE2Table);
	            	document.add(BillingPeriodFieldsRETable);
	            	document.add(BillingPeriodInfoRETable);
	                document.add(BillingPeriodInfoRE2Table);
	            }
	            else
	            {
	            	document.add(BillingPeriodFieldsSN1Table);
	            	document.add(BillingPeriodFieldsSN2Table);
	            	document.add(BillingPeriodFieldsSNTable);
	            	document.add(BillingPeriodInfoSNTable);
	                document.add(BillingPeriodInfoSN2Table);
	            }
            }
            else
            {
	            float[] BillingPeriodFieldsRE1Widths = {0.22f, 0.12f, 0.18f, 0.16f, 0.06f, 0.21f, 0.09f};
	            PdfPTable BillingPeriodFieldsRE1Table = new PdfPTable(BillingPeriodFieldsRE1Widths);
	            BillingPeriodFieldsRE1Table.setWidthPercentage(100);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Terminal Co. Nomination",small_black_bold)));
	            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            	BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Natural Gas (Regasified)",small_black_bold)));
	            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            	BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Cumulative Natural Gas (Regasified) Quantities",small_black_bold)));
	            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Shortfall Quantities",small_black_bold)));
	            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            
	            float[] BillingPeriodFieldsRE2Widths = {0.04f, 0.06f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
	            PdfPTable BillingPeriodFieldsRE2Table = new PdfPTable(BillingPeriodFieldsRE2Widths);
	            BillingPeriodFieldsRE2Table.setWidthPercentage(100);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Billing\nPeriod\nDay No.",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Date",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Contract\nSend Out\nCapacity",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Shipper\nNomination",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("NDQ",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("RE Gas",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("NDQ",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Re Gas",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Total Natural\nGas (Regasified)",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Billing\nPeriod",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Storage\nDuration",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Gas tendered\nfor Delivery,\nnot delivered\ndue to\nReasons\nAttributable\nto Shipper",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Off-Spec\nGas\nrejected\nby\nShipper",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Gas\nnot\ndelivered\ndue to\nShipper's\nSuspension",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Failure\nto\nDeliver",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Total\nShortfall\nQuantities",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("LD\nCredit\nPayable",small_black_bold)));
	            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Gas\nnot\ndelivered\ndue to\nFM",small_black_bold)));
	            
	            
	            float[] BillingPeriodFieldsREWidths = {0.04f, 0.06f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
	            PdfPTable BillingPeriodFieldsRETable = new PdfPTable(BillingPeriodFieldsREWidths);
	            BillingPeriodFieldsRETable.setWidthPercentage(100);
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.LEFT);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.RIGHT);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("Rupees",small_black_bold)));
	            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            
	            float[] BillingPeriodInfoREWidths = {0.04f, 0.06f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
	            PdfPTable BillingPeriodInfoRETable = new PdfPTable(BillingPeriodInfoREWidths);
	            BillingPeriodInfoRETable.setWidthPercentage(100);
	            
	            for(int i=0; i<invoice_Period_DCQ.size(); i++)
	        	{
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+(i+1)+" ",small_black_normal_new)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Dates.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_DCQ.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Nom_Qty.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_PNQ.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_RE_Qty.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_PNQ.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Re_Qty.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Total_Qty.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_Qty.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_SN_Qty.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Shortfall_Qty.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Off_Spec_Qty.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Suspension_Qty.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Delv_Failure_Qty.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Total_Shortfall_Qty.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_LD_Credit_Payable.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_FM_Qty.elementAt(i),small_black_normal_new)));
	        	}
	            
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.LEFT);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            
	            
	            float[] BillingPeriodInfoRE2Widths = {0.10f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
	            PdfPTable BillingPeriodInfoRE2Table = new PdfPTable(BillingPeriodInfoRE2Widths);
	            BillingPeriodInfoRE2Table.setWidthPercentage(100);
	            
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk("TOTAL: ",small_black_bold2_new)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+DCQ_Total,small_black_bold2_new)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Buyer_Nom_Qty_Total,small_black_bold2_new)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_PNQ_Total,small_black_bold2_new)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_RE_Qty_Total,small_black_bold2_new)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_PNQ_Total,small_black_bold2_new)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_Re_Qty_Total,small_black_bold2_new)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Delivered_Total_Qty_Total,small_black_bold2_new)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2_new)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2_new)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Buyer_Shortfall_Qty_Total,small_black_bold2_new)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Buyer_Off_Spec_Qty_Total,small_black_bold2_new)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Buyer_Suspension_Qty_Total,small_black_bold2_new)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Delv_Failure_Qty_Total,small_black_bold2_new)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Total_Shortfall_Qty_Total,small_black_bold2_new)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+LD_Credit_Payable_Total,small_black_bold2_new)));
	            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+FM_Qty_Total,small_black_bold2_new)));
                      
            
	            float[] BillingPeriodFieldsSN1Widths = {0.22f, 0.12f, 0.18f, 0.16f, 0.06f, 0.21f, 0.09f};
	            PdfPTable BillingPeriodFieldsSN1Table = new PdfPTable(BillingPeriodFieldsSN1Widths);
	            BillingPeriodFieldsSN1Table.setWidthPercentage(100);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk("Seller Nomination",small_black_bold)));
	            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk("Natural Gas (Delivered)",small_black_bold)));
	            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk("Cumulative Quantities",small_black_bold)));
	            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk("Shortfall Quantities",small_black_bold)));
	            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            
	            float[] BillingPeriodFieldsSN2Widths = {0.04f, 0.06f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
	            PdfPTable BillingPeriodFieldsSN2Table = new PdfPTable(BillingPeriodFieldsSN2Widths);
	            BillingPeriodFieldsSN2Table.setWidthPercentage(100);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Billing\nPeriod\nDay No.",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Date",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("DCQ",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Buyer\nNomination",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("PNQ",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("RE Gas",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("PNQ",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Re Gas",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Total\nDelivered\nGas",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Billing\nPeriod",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Transaction\nSupply\nPeriod",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Gas tendered\nfor Delivery,\nnot delivered\ndue to\nReasons\nAttributable\nto Buyer",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Off-Spec\nGas\nrejected\nby\nBuyer",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Gas\nnot\ndelivered\ndue to\nBuyer's\nSuspension",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Failure\nto\nDeliver",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Total\nShortfall\nQuantities",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("LD\nCredit\nPayable",small_black_bold)));
	            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Gas\nnot\ndelivered\ndue to\nFM",small_black_bold)));
	            
	            
	            float[] BillingPeriodFieldsSNWidths = {0.04f, 0.06f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
	            PdfPTable BillingPeriodFieldsSNTable = new PdfPTable(BillingPeriodFieldsSNWidths);
	            BillingPeriodFieldsSNTable.setWidthPercentage(100);
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.LEFT);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.RIGHT);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("Rupees",small_black_bold)));
	            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
	            
	            
	            float[] BillingPeriodInfoSNWidths = {0.04f, 0.06f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
	            PdfPTable BillingPeriodInfoSNTable = new PdfPTable(BillingPeriodInfoSNWidths);
	            BillingPeriodInfoSNTable.setWidthPercentage(100);
	            
	            for(int i=0; i<invoice_Period_DCQ.size(); i++)
	        	{
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+(i+1)+" ",small_black_normal_new)));
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Dates.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_DCQ.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            /*if(i==(invoice_Period_DCQ.size()-1))
		            {
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal_new)));
		            }
		            else
		            {*/
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Nom_Qty.elementAt(i),small_black_normal_new)));
		            //}
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            /*if(i==(invoice_Period_DCQ.size()-1))
		            {
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal_new)));
		            }
		            else
		            {*/
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_PNQ.elementAt(i),small_black_normal_new)));
		            //}
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            /*if(i==(invoice_Period_DCQ.size()-1))
		            {
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal_new)));
		            }
		            else
		            {*/
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_RE_Qty.elementAt(i),small_black_normal_new)));
		            //}
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            /*if(i==(invoice_Period_DCQ.size()-1))
		            {
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal_new)));
		            }
		            else
		            {*/
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_PNQ.elementAt(i),small_black_normal_new)));
		            //}
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            /*if(i==(invoice_Period_DCQ.size()-1))
		            {
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal_new)));
		            }
		            else
		            {*/
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Re_Qty.elementAt(i),small_black_normal_new)));
		            //}
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            /*if(i==(invoice_Period_DCQ.size()-1))
		            {
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal_new)));
		            }
		            else
		            {*/
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Total_Qty.elementAt(i),small_black_normal_new)));
		            //}
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            /*if(i==(invoice_Period_DCQ.size()-1))
		            {
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("999555000.99",small_black_normal_new)));
		            }
		            else
		            {*/
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_Qty.elementAt(i),small_black_normal_new)));
		            //}
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            /*if(i==(invoice_Period_DCQ.size()-1))
		            {
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("999555000.99",small_black_normal_new)));
		            }
		            else
		            {*/
		            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_SN_Qty.elementAt(i),small_black_normal_new)));
		            //}
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Shortfall_Qty.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Off_Spec_Qty.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Suspension_Qty.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Delv_Failure_Qty.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Total_Shortfall_Qty.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_LD_Credit_Payable.elementAt(i),small_black_normal_new)));
		            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_FM_Qty.elementAt(i),small_black_normal_new)));
	        	}
	            
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.LEFT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
//	            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//	            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
//	            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(" ",small_black_normal_new)));
//	            
	            
	            float[] BillingPeriodInfoSN2Widths = {0.10f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
	            PdfPTable BillingPeriodInfoSN2Table = new PdfPTable(BillingPeriodInfoSN2Widths);
	            BillingPeriodInfoSN2Table.setWidthPercentage(100);
	            
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk("TOTAL: ",small_black_bold2_new)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+nf5.format(Double.parseDouble(DCQ_Total)),small_black_bold2_new)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Buyer_Nom_Qty_Total,small_black_bold2_new)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_PNQ_Total,small_black_bold2_new)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_RE_Qty_Total,small_black_bold2_new)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_PNQ_Total,small_black_bold2_new)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_Re_Qty_Total,small_black_bold2_new)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Delivered_Total_Qty_Total,small_black_bold2_new)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2_new)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2_new)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Buyer_Shortfall_Qty_Total,small_black_bold2_new)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Buyer_Off_Spec_Qty_Total,small_black_bold2_new)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Buyer_Suspension_Qty_Total,small_black_bold2_new)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Delv_Failure_Qty_Total,small_black_bold2_new)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Total_Shortfall_Qty_Total,small_black_bold2_new)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+LD_Credit_Payable_Total,small_black_bold2_new)));
	            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+FM_Qty_Total,small_black_bold2_new)));
	            
	                       
				//Adding All Cells To PDF Document - One By One ...
				//document.add(new Paragraph("              "));
				document.add(hlpl_logo_table);
				document.add(contact_addr_table);                        
	            //document.add(new Paragraph("              "));
	            document.add(title_note_table);
	            //document.add(new Paragraph("              "));
	            document.add(InvoiceDateInfoTable);
	            document.add(InvoiceDueDateInfoTable);
	            document.add(InvoiceNOInfoTable);
	            document.add(new Paragraph("              "));
	            
	            if(contract_type.trim().equalsIgnoreCase("R") || contract_type.trim().equalsIgnoreCase("T") ||contract_type.trim().equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
				{
	            	document.add(BillingPeriodFieldsRE1Table);
	            	document.add(BillingPeriodFieldsRE2Table);
	            	document.add(BillingPeriodFieldsRETable);
	            	document.add(BillingPeriodInfoRETable);
	                document.add(BillingPeriodInfoRE2Table);
	            }
	            else
	            {
	            	document.add(BillingPeriodFieldsSN1Table);
	            	document.add(BillingPeriodFieldsSN2Table);
	            	document.add(BillingPeriodFieldsSNTable);
	            	document.add(BillingPeriodInfoSNTable);
	                document.add(BillingPeriodInfoSN2Table);
	            }
            }
            //document.add(new Paragraph("              "));
            //document.add(new Paragraph("              "));
            //document.add(new Paragraph("              "));
            
            
           
            
            
            
            // ******* Following Coding is for Showing Attachment-2 Sheet on the 3rd Page of the Same PDF Document ******* //
            document.setPageSize(pageSize1);
            document.newPage();
            
            
            //iText-5.0.4 ...
            /*Font very_small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 6.00f, Font.NORMAL, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 7.00f, Font.NORMAL, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font small_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 7.00f, Font.BOLD, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font black_bold = FontFactory.getFont(FontFactory.HELVETICA, 8.00f, Font.BOLD, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font big_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 12.00f, Font.BOLD, new BaseColor(new Color(0x00, 0x00, 0x00)));*/
            //itext-1.4 ...
            very_small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            small_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, new Color(0x00, 0x00, 0x00));
            black_bold = FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD, new Color(0x00, 0x00, 0x00));
            big_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 15, Font.BOLD, new Color(0x00, 0x00, 0x00));
            
            		  
			url_start = "http://"+server_nm+":"+server_port+context_nm;
		//	//System.out.println("this is the pic path  "+url_start+"\\images\\LOGO\\company_Logo.png");
			
			 
            hlpl_logo.setBorder(Rectangle.NO_BORDER);
            hlpl_logo.scaleAbsolute(75,75);
            hlpl_logo_cell = new PdfPCell(hlpl_logo,false);
            hlpl_logo_cell.setBorder(Rectangle.NO_BORDER);
            
			
            float[] hlpl_logo_Widths2 = {0.45f, 0.41f, 0.14f};
            hlpl_logo_table = new PdfPTable(hlpl_logo_Widths2);
            hlpl_logo_table.setWidthPercentage(100);
            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            hlpl_logo_table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            hlpl_logo_table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            hlpl_logo_table.addCell(hlpl_logo_cell);
            
            
			addr_supl = "Registered Office:";
            
            if(!contact_Suppl_Name.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Name;     	
            }
            if(!contact_Suppl_Person_Address.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Person_Address;     	
            }
            if(!contact_Suppl_Person_City.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Person_City;     	
            }
            if(!contact_Suppl_Person_Pin.trim().equals(""))
            {
            	addr_supl += " "+"-"+" "+contact_Suppl_Person_Pin;     	
            }
			
			addr_customer = "";
            
			if(contact_Person_Name_And_Designation.trim().equalsIgnoreCase(contact_Customer_Name.trim()))
			{
				if(!contact_Customer_Name.trim().equals(""))
	            {
	            	addr_customer += contact_Customer_Name;    	
	            }
			}
			else
			{
	            if(!contact_Person_Name_And_Designation.trim().equals(""))
	            {
	            	addr_customer += contact_Person_Name_And_Designation;     	
	            }
	            if(!contact_Customer_Name.trim().equals(""))
	            {
	            	addr_customer += "\n"+contact_Customer_Name;     	
	            }
			}
            if(!contact_Customer_Person_Address.trim().equals(""))
            {
            	addr_customer += "\n"+contact_Customer_Person_Address;     	
            }
            if(!contact_Customer_Person_City.trim().equals(""))
            {
            	addr_customer += "\n"+contact_Customer_Person_City;     	
            }
            if(!contact_Customer_Person_Pin.trim().equals(""))
            {
            	addr_customer += " "+"-"+" "+contact_Customer_Person_Pin;     	
            }
                        
                      
            float[] ContactAddrWidths3 = {0.45f, 0.21f, 0.34f};
            contact_addr_table = new PdfPTable(ContactAddrWidths3);
            contact_addr_table.setWidthPercentage(100);
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(contact_Suppl_Name,small_black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk("To:",small_black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(addr_supl,small_black_normal)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(addr_customer,small_black_normal)));
			
            
            title_note = "ATTACHMENT 2 - Exchange Rate Applicable";
            
            title_note_table = new PdfPTable(1);
            title_note_table.setWidthPercentage(100);
            title_note_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            title_note_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            title_note_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
            title_note_table.addCell(new Phrase(new Chunk(title_note,black_bold)));
                       
			
			inv_no_info = "";
			
			if(contract_type.equalsIgnoreCase("R"))
			{
				inv_no_info = "HLPL R-gas Invoice Seq No:";
			}
			else if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
			{
				if(date_flag) {
					inv_no_info = "HLPL Tax Invoice Seq No:";
				} else {
					inv_no_info = "HLPL LTCORA Invoice Seq No:";
				}
			}
			else
			{
				inv_no_info = "HLPL Invoice Seq No:";
			}
            
			float[] InvoiceDateInfoWidths3 = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            InvoiceDateInfoTable = new PdfPTable(InvoiceDateInfoWidths3);
            InvoiceDateInfoTable.setWidthPercentage(100);
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk("Invoice Date:",small_black_bold)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_DT,small_black_normal)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            
            float[] InvoiceDueDateInfoWidths3 = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            InvoiceDueDateInfoTable = new PdfPTable(InvoiceDueDateInfoWidths3);
            InvoiceDueDateInfoTable.setWidthPercentage(100);
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk("Payment Due Date:",small_black_bold)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Due_DT,small_black_normal)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            
            invno = "";
            if(!new_inv_seq_no.equals("")) {
            	invno = new_inv_seq_no;
            } else {
            if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
        	{
        		if(hlpl_inv_no.length()>13)
        		{
        			invno = hlpl_inv_no.substring(0,10)+""+hlpl_inv_no.substring(12);
        		}
        		
        	}
        	else
        	{
        		if(hlpl_inv_no.length()>13)
        		{
        			invno = hlpl_inv_no.substring(0,5)+""+hlpl_inv_no.substring(7,10)+""+hlpl_inv_no.substring(12);
        		}
        		
        	}}
            
            float[] InvoiceNOInfoWidths3 = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            InvoiceNOInfoTable = new PdfPTable(InvoiceNOInfoWidths3);
            InvoiceNOInfoTable.setWidthPercentage(100);
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(inv_no_info,small_black_bold)));
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(invno,small_black_normal)));
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
                        
            
            float[] BillingPeriodInfoWidths3 = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            BillingPeriodInfoTable = new PdfPTable(BillingPeriodInfoWidths3);
            BillingPeriodInfoTable.setWidthPercentage(100);
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk("For the Billing Period",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Start_DT,small_black_normal)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk("to",small_black_normal)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_End_DT,small_black_normal)));
                        
            
            float[] ExchgRateDetailsWidths = {0.45f, 0.21f, 0.34f};
            PdfPTable ExchgRateDetailsTable = new PdfPTable(ExchgRateDetailsWidths);
            ExchgRateDetailsTable.setWidthPercentage(100);
            for(int i=0; i<customer_Invoice_Exchg_Rate_Code.size(); i++)
        	{
	            ExchgRateDetailsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            ExchgRateDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	            ExchgRateDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            ExchgRateDetailsTable.addCell(new Phrase(new Chunk(""+customer_Invoice_Exchg_Rate_Name.elementAt(i)+"... On "+customer_Invoice_Exchg_Rate_Date.elementAt(i)+" (INR/USD)",small_black_normal)));
	            ExchgRateDetailsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            ExchgRateDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            ExchgRateDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            ExchgRateDetailsTable.addCell(new Phrase(new Chunk(""+customer_Invoice_Exchg_Rate_Value.elementAt(i),small_black_normal)));
	            ExchgRateDetailsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            ExchgRateDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	            ExchgRateDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            ExchgRateDetailsTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
        	}
            
            
            float[] ExchgRateApplicableWidths = {0.45f, 0.21f, 0.34f};
            PdfPTable ExchgRateApplicableTable = new PdfPTable(ExchgRateApplicableWidths);
            ExchgRateApplicableTable.setWidthPercentage(100);
            ExchgRateApplicableTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            ExchgRateApplicableTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            ExchgRateApplicableTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            ExchgRateApplicableTable.addCell(new Phrase(new Chunk("Exchange Rate Applicable (INR/USD)",small_black_bold)));
            ExchgRateApplicableTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            ExchgRateApplicableTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            ExchgRateApplicableTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            ExchgRateApplicableTable.addCell(new Phrase(new Chunk(customer_Invoice_Exchg_Rate,small_black_bold)));
            ExchgRateApplicableTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            ExchgRateApplicableTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            ExchgRateApplicableTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            ExchgRateApplicableTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            
            
            PdfPTable BankSourceTable = new PdfPTable(1);
            BankSourceTable.setWidthPercentage(100);
            BankSourceTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BankSourceTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            BankSourceTable.addCell(new Phrase(new Chunk("Source:\n"+customer_Invoice_Bank_Name.elementAt(0),small_black_normal)));
            
            if(Tariff_flag)
            {
            	
            }
            else
            {
            //Adding All Cells To PDF Document - One By One ...
			document.add(new Paragraph("              "));
			document.add(hlpl_logo_table);
			document.add(contact_addr_table);                        
            document.add(new Paragraph("              "));
            document.add(title_note_table);
            document.add(new Paragraph("              "));
            document.add(InvoiceDateInfoTable);
            document.add(InvoiceDueDateInfoTable);
            document.add(InvoiceNOInfoTable);
            document.add(BillingPeriodInfoTable);
            document.add(new Paragraph("              "));
            document.add(ExchgRateDetailsTable);
            document.add(new Paragraph("              "));
            document.add(ExchgRateApplicableTable);
            document.add(new Paragraph("              "));
            document.add(BankSourceTable);
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            }
            
            
//          ******* Following Coding is for Showing Attachment-3 Sheet on the 3rd Page of the Same PDF Document ******* //
            document.setPageSize(pageSize1);
            document.newPage();
            
            very_small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            small_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, new Color(0x00, 0x00, 0x00));
            black_bold = FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD, new Color(0x00, 0x00, 0x00));
            big_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 15, Font.BOLD, new Color(0x00, 0x00, 0x00));
            
            url_start = "http://"+server_nm+":"+server_port+context_nm;
            hlpl_logo.setBorder(Rectangle.NO_BORDER);
            hlpl_logo.scaleAbsolute(75,75);
            hlpl_logo_cell = new PdfPCell(hlpl_logo,false);
            hlpl_logo_cell.setBorder(Rectangle.NO_BORDER);
            
			
            float[] hlpl_logo_Widths21 = {0.45f, 0.41f, 0.14f};
            hlpl_logo_table = new PdfPTable(hlpl_logo_Widths21);
            hlpl_logo_table.setWidthPercentage(100);
            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            hlpl_logo_table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            hlpl_logo_table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            hlpl_logo_table.addCell(hlpl_logo_cell);
            
            
            
            addr_supl = "Registered Office:";
            
            if(!contact_Suppl_Name.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Name;     	
            }
            if(!contact_Suppl_Person_Address.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Person_Address;     	
            }
            if(!contact_Suppl_Person_City.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Person_City;     	
            }
            if(!contact_Suppl_Person_Pin.trim().equals(""))
            {
            	addr_supl += " "+"-"+" "+contact_Suppl_Person_Pin;     	
            }
			
			addr_customer = "";
            
			if(contact_Person_Name_And_Designation.trim().equalsIgnoreCase(contact_Customer_Name.trim()))
			{
				if(!contact_Customer_Name.trim().equals(""))
	            {
	            	addr_customer += contact_Customer_Name;    	
	            }
			}
			else
			{
	            if(!contact_Person_Name_And_Designation.trim().equals(""))
	            {
	            	addr_customer += contact_Person_Name_And_Designation;     	
	            }
	            if(!contact_Customer_Name.trim().equals(""))
	            {
	            	addr_customer += "\n"+contact_Customer_Name;     	
	            }
			}
            if(!contact_Customer_Person_Address.trim().equals(""))
            {
            	addr_customer += "\n"+contact_Customer_Person_Address;     	
            }
            if(!contact_Customer_Person_City.trim().equals(""))
            {
            	addr_customer += "\n"+contact_Customer_Person_City;     	
            }
            if(!contact_Customer_Person_Pin.trim().equals(""))
            {
            	addr_customer += " "+"-"+" "+contact_Customer_Person_Pin;     	
            }
                        
                      
            float[] ContactAddrWidthsa = {0.45f, 0.21f, 0.34f};
            contact_addr_table = new PdfPTable(ContactAddrWidthsa);
            contact_addr_table.setWidthPercentage(100);
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(contact_Suppl_Name,small_black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk("To:",small_black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(addr_supl,small_black_normal)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(addr_customer,small_black_normal)));
			
            invno = "";
            if(!new_inv_seq_no.equals("")) {
            	invno = new_inv_seq_no;
            } else {
            if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
        	{
        		if(hlpl_inv_no.length()>13)
        		{
        			invno = hlpl_inv_no.substring(0,10)+""+hlpl_inv_no.substring(12);
        		}
        		
        	}
        	else
        	{
        		if(hlpl_inv_no.length()>13)
        		{
        			invno = hlpl_inv_no.substring(0,5)+""+hlpl_inv_no.substring(7,10)+""+hlpl_inv_no.substring(12);
        		}
        	}
        	}
            
            
            if(invoice_advance_inv_no.trim().equalsIgnoreCase(""))
    		{
            	invoice_advance_inv_no=invno;
    		}
    		else
    		{
    			//invno=invoice_advance_inv_no;
    		}
            
            if(Tariff_flag)
            {
            	title_note = "ATTACHMENT 2 - Reconciliation of Advance Amount Paid under Receipt Voucher No. "+invoice_advance_inv_no+" dated "+Invoice_advance_inv_dt;
            }
            else
            {
            	title_note = "ATTACHMENT 3 - Reconciliation of Advance Amount Paid under Receipt Voucher No. "+invoice_advance_inv_no+" dated "+Invoice_advance_inv_dt;
            }
            
            
            title_note_table = new PdfPTable(1);
            title_note_table.setWidthPercentage(100);
            title_note_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            title_note_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            title_note_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
            title_note_table.addCell(new Phrase(new Chunk(title_note,black_bold)));
            
            inv_no_info = "";
			
			if(contract_type.equalsIgnoreCase("R"))
			{
				inv_no_info = "HLPL R-gas Invoice Seq No:";
			}
			else if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
			{
				if(date_flag) {
					inv_no_info = "HLPL Tax Invoice Seq No:";
				} else {
					inv_no_info = "HLPL LTCORA Invoice Seq No:";
				}
			}
			else
			{
				inv_no_info = "HLPL Invoice Seq No:";
			}
            
			 invno = "";
			 if(!new_inv_seq_no.equals("")) {
	            	invno = new_inv_seq_no;
	            } else {
			  if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
	        	{
	        		if(hlpl_inv_no.length()>13)
	        		{
	        			invno = hlpl_inv_no.substring(0,10)+""+hlpl_inv_no.substring(12);
	        		}
	        		
	        	}
	        	else
	        	{
	        		if(hlpl_inv_no.length()>13)
	        		{
	        			invno = hlpl_inv_no.substring(0,5)+""+hlpl_inv_no.substring(7,10)+""+hlpl_inv_no.substring(12);
	        		}
	        		
	        	}}
	            
	        float[] InvoiceNOInfoWidthsa = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
	        InvoiceNOInfoTable = new PdfPTable(InvoiceNOInfoWidthsa);
	        InvoiceNOInfoTable.setWidthPercentage(100);
	        InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	        InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	        InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	        InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	        InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	        InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	        InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	        InvoiceNOInfoTable.addCell(new Phrase(new Chunk(inv_no_info,small_black_bold)));
	        InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
	        InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	        InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	        InvoiceNOInfoTable.addCell(new Phrase(new Chunk(invno,small_black_normal)));
	        InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	        InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	        InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	        InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
	        InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	        InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	        InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	        InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            
	        float[] InvoiceDateInfoWidthsa = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            InvoiceDateInfoTable = new PdfPTable(InvoiceDateInfoWidthsa);
            InvoiceDateInfoTable.setWidthPercentage(100);
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk("Invoice Date:",small_black_bold)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_DT,small_black_normal)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
           
	        
            float[] InvoiceDueDateInfoWidthsa = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            InvoiceDueDateInfoTable = new PdfPTable(InvoiceDueDateInfoWidthsa);
            InvoiceDueDateInfoTable.setWidthPercentage(100);
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk("Payment Due Date:",small_black_bold)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Due_DT,small_black_normal)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            
           
                      
            
            float[] BillingPeriodInfoWidthsa = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            BillingPeriodInfoTable = new PdfPTable(BillingPeriodInfoWidthsa);
            BillingPeriodInfoTable.setWidthPercentage(100);
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk("For the Billing Period",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Start_DT,small_black_normal)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk("to",small_black_normal)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_End_DT,small_black_normal)));
                        
            
            
            
            
            float[] AdvanceAmountPaid = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            PdfPTable AdvanceAmountPaidTable = new PdfPTable(4);
            AdvanceAmountPaidTable.setWidthPercentage(100);
            
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(4);
            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Reconciliation of Advance Amount",small_black_bold)));
            
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Total Advance Received",small_black_normal)));
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Balance Amount after adjustment till last billing period",small_black_normal)));
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Outstanding balance available for adjustment in next billing period",small_black_normal)));
           
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Currency",small_black_normal)));
            
            
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(pdfFinal_Total_Collection,small_black_normal)));
            
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(balanceason,small_black_normal)));
           
            
            if(advance_payment_flag){            
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            if(Invoice_Adj_bal.size()>=1)
            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+Invoice_Adj_bal.elementAt(Invoice_Adj_bal.size()-1),small_black_normal)));
            }else{
            	 AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+balanceason,small_black_normal)));
            }
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(pdfFinal_Total_Currency,small_black_normal)));
            
            /*if(flagINR)
            {
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(Total_Collection_INR,small_black_bold)));
            
            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("INR",small_black_bold)));
            }*/
            
            String item1="";
            String item2="";
            if(contract_type.equalsIgnoreCase("R"))
			{
            	item1="Cumulative Adjustments against Regas Invoices";
            	item2="Advance Adjusted against Regas Charges";
			}
            else if(contract_type.equalsIgnoreCase("T"))
			{
            	item1="Cumulative Adjustments against LTCORA Invoices";
            	item2="Advance Adjusted against LTCORA Charges";
			}
            else if(contract_type.equalsIgnoreCase("C"))
			{
            	item1="Cumulative Adjustments against LTCORA Invoices";
            	item2="Advance Adjusted against LTCORA Charges";
			}
			else
			{
				item1="Cumulative Adjustments against Invoices";
				item2="Advance Adjusted against Charges";
			}
            
            float[] CumulativeAdjustments = { 0.08f, 0.45f, 0.35f, 0.20f};
            PdfPTable CumulativeAdjustmentsTable = new PdfPTable(CumulativeAdjustments);
            CumulativeAdjustmentsTable.setWidthPercentage(100);
            CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
            CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            CumulativeAdjustmentsTable.getDefaultCell().setColspan(5);
            CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(item1,small_black_bold)));
            CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
            CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
            CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("Sr No.",small_black_normal)));
            CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
            CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
            CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("Invoice Details",small_black_normal)));
            CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
            CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
            CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(item2,small_black_normal)));
            CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
            CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
            CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("Currency",small_black_normal)));
//            CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
//            CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
//            CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
//            CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
//            CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("Balance",small_black_bold)));
            double total=0;
            
            if(Invoice_no.size()>0) {
        		for(int i=0;i<Invoice_no.size();i++) { 
        			
        			try
        			{
        				total+=NumberFormat.getInstance().parse(""+Invoice_adj_amt.elementAt(i)).doubleValue();
        			}
        			catch(Exception e)
        			{
        				e.printStackTrace();
        			}
        			String cur="USD";
        			if(Invoice_adj_cur.elementAt(i).toString().equalsIgnoreCase("INR")) 
        				cur="INR";
        			else if(Invoice_adj_cur.elementAt(i).toString().equalsIgnoreCase("USD"))
        				cur="USD";
        			else
        				cur="-";
        			
        			int item=i+1;
        			
        			CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                    CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                    CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                    CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                    CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(item+"",small_black_normal)));
        			
                    CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                    CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                    CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                    CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                    CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(Invoice_no.elementAt(i)+" dated "+Invoice_dt.elementAt(i),small_black_normal)));
        			
                    CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                    CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                    CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                    CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                    CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(Invoice_adj_amt.elementAt(i).toString(),small_black_normal)));
        			
                    CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                    CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                    CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                    CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                    CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(cur,small_black_normal)));
                    
//                    CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
//                    CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//                    CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
//                    CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
//                    CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(Invoice_Adj_bal.elementAt(i).toString(),small_black_bold)));
        			
        	}
        		
        		CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
                CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                CumulativeAdjustmentsTable.getDefaultCell().setColspan(4);
                CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("",small_black_normal)));
                
                CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
                CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                CumulativeAdjustmentsTable.getDefaultCell().setColspan(4);
                CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("",small_black_normal)));
                
                CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
                CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                CumulativeAdjustmentsTable.getDefaultCell().setColspan(4);
                CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("",small_black_normal)));
                
                CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
                CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                CumulativeAdjustmentsTable.getDefaultCell().setColspan(4);
                CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("",small_black_normal)));
                
                
                CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                CumulativeAdjustmentsTable.getDefaultCell().setColspan(2);
                CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("Total Adjustment in This Billing Period",small_black_normal)));
                
                CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(nf3.format(total)+"",small_black_normal)));
                
                CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(pdfFinal_Total_Currency,small_black_normal)));
            }
            
            
//          Adding All Cells To PDF Document - One By One ...
            if(advance_payment_flag){
			//document.add(new Paragraph("              "));
			document.add(hlpl_logo_table);
			document.add(contact_addr_table);                        
          //  document.add(new Paragraph("              "));
            document.add(title_note_table);
            document.add(new Paragraph("              "));
            document.add(InvoiceDateInfoTable);
            document.add(InvoiceDueDateInfoTable);
            document.add(InvoiceNOInfoTable);
            //document.add(InvoiceDateInfoTable);
            document.add(BillingPeriodInfoTable);
            document.add(new Paragraph("              "));
            document.add(AdvanceAmountPaidTable);
            document.add(new Paragraph("              "));
        //    document.add(new Paragraph("              "));
            document.add(CumulativeAdjustmentsTable);
            }
            
            
        }
		catch(DocumentException de)
		{
			System.err.println("DocumentException in printAllPdfFileForInvoice() Method :\n"+de.getMessage());
			de.printStackTrace();
		}
		catch(IOException ioe)
		{
			System.err.println("IOException in printAllPdfFileForInvoice() Method :\n"+ioe.getMessage());
			ioe.printStackTrace();
		}
		finally
		{
			document.close();
		}
		
	}
	
	public void fetch_advance_rpt_view_list()
	{
		try
		{
			
			
			
			if(contract_type.equalsIgnoreCase("fgsa"))
			{
				queryString = "SELECT A.FGSA_NO, A.FGSA_REV_NO, A.SN_NO, A.SN_REV_NO, " +
				"TO_CHAR(START_DT,'DD/MM/YYYY'), TO_CHAR(END_DT,'DD/MM/YYYY'), "+
				"A.VERIFY_FLAG, A.FCC_FLAG, A.SN_REF_NO " +
				"FROM FMS7_SN_MST A " +
				"WHERE A.FLAG='T' AND A.CUSTOMER_CD='"+report_customer_cd+"' AND A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM " +
				"FMS7_SN_MST B WHERE A.SN_NO=B.SN_NO AND A.FGSA_NO=B.FGSA_NO AND A.FGSA_REV_NO=B.FGSA_REV_NO " +
				"AND B.FLAG='T' AND A.CUSTOMER_CD=B.CUSTOMER_CD)  " +
				"AND A.STATUS='Y'  " +
				"ORDER BY A.customer_cd,A.fgsa_no,A.fgsa_rev_no,A.sn_no";
				////System.out.println("SN .......... "+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					cargowise_rpt_fgsa_no.add(rset.getString(1)==null?"":rset.getString(1));
					cargowise_rpt_fgsa_rev_no.add(rset.getString(2)==null?"":rset.getString(2));
					cargowise_rpt_sn_no.add(rset.getString(3)==null?"":rset.getString(3));
					cargowise_rpt_sn_rev_no.add(rset.getString(4)==null?"":rset.getString(4));
					cargowise_rpt_start_dt.add(rset.getString(5)==null?"":rset.getString(5));
					cargowise_rpt_end_dt.add(rset.getString(6)==null?"":rset.getString(6));
				}
			}
			else if(contract_type.equalsIgnoreCase("tender"))
			{
				queryString = "SELECT A.TENDER_NO,A.LOA_NO,A.LOA_REV_NO " +
				" ,TO_CHAR(START_DT,'DD/MM/YYYY'), TO_CHAR(END_DT,'DD/MM/YYYY') "+
				",A.VERIFY_FLAG,A.FCC_FLAG,A.LOA_REF_NO " +
				"from FMS7_LOA_MST A,FMS7_CUSTOMER_MST C WHERE A.FLAG='T' AND " +
				"A.LOA_REV_NO=(SELECT MAX(B.LOA_REV_NO) FROM FMS7_LOA_MST B WHERE A.LOA_NO=B.LOA_NO AND "+
	            "A.TENDER_NO=B.TENDER_NO AND B.FLAG='T' AND A.CUSTOMER_CD=B.CUSTOMER_CD) AND A.CUSTOMER_CD=C.CUSTOMER_CD AND " +
	            "A.CUSTOMER_CD='"+report_customer_cd+"' " +
	            "AND A.STATUS='Y' " +
				" order by C.customer_NAME,A.tender_no,A.loa_no";
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					cargowise_rpt_fgsa_no.add(rset.getString(1)==null?"":rset.getString(1));
					cargowise_rpt_fgsa_rev_no.add("");
					cargowise_rpt_sn_no.add(rset.getString(2)==null?"":rset.getString(2));
					cargowise_rpt_sn_rev_no.add(rset.getString(3)==null?"":rset.getString(3));
					cargowise_rpt_start_dt.add(rset.getString(4)==null?"":rset.getString(4));
					cargowise_rpt_end_dt.add(rset.getString(5)==null?"":rset.getString(5));
				}
			}
			else if(contract_type.equalsIgnoreCase("regas"))
			{
				queryString="SELECT DISTINCT RE_GAS_NO,rev_no " +
				" ,TO_CHAR(START_DT,'DD/MM/YYYY'), TO_CHAR(END_DT,'DD/MM/YYYY') "+
				"FROM FMS7_RE_GAS_MST A " +
				" Where customer_cd='"+report_customer_cd+"' and A.status='Y' " +
				" and rev_no = (select max(rev_no) from FMS7_RE_GAS_MST B where a.RE_GAS_NO=b.RE_GAS_NO " +
				" and b.customer_cd='"+report_customer_cd+"' and b.status='Y') " +
				" ORDER BY CUSTOMER_CD,RE_GAS_NO";
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					cargowise_rpt_fgsa_no.add(rset.getString(1)==null?"":rset.getString(1));
					cargowise_rpt_fgsa_rev_no.add(rset.getString(2)==null?"":rset.getString(2));
					cargowise_rpt_sn_no.add("");
					cargowise_rpt_sn_rev_no.add("");
					cargowise_rpt_start_dt.add(rset.getString(3)==null?"":rset.getString(3));
					cargowise_rpt_end_dt.add(rset.getString(4)==null?"":rset.getString(4));
				}
			}
			else if(contract_type.equalsIgnoreCase("cn"))
			{
				queryString="SELECT DISTINCT CUSTOMER_CD,AGREEMENT_NO,REV_NO,CN_NO " +
					" ,TO_CHAR(START_DT,'DD/MM/YYYY'), TO_CHAR(END_DT,'DD/MM/YYYY') "+
					"FROM FMS8_LNG_REGAS_MST  "
					+ "Where customer_cd='"+report_customer_cd+"' AND CN_NO!='0' AND CN_CD='1'  " +
					"and cn_no<=9999 and status='Y' "
					+ "ORDER BY CUSTOMER_CD,AGREEMENT_NO ";
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					cargowise_rpt_fgsa_no.add(rset.getString(2)==null?"":rset.getString(2));
					cargowise_rpt_fgsa_rev_no.add(rset.getString(3)==null?"":rset.getString(3));
					cargowise_rpt_sn_no.add(rset.getString(4)==null?"":rset.getString(4));
					cargowise_rpt_start_dt.add(rset.getString(5)==null?"":rset.getString(5));
					cargowise_rpt_end_dt.add(rset.getString(6)==null?"":rset.getString(6));
					
					queryString1 ="select max(cn_rev_no) from FMS8_LNG_REGAS_MST  where " +
					" Customer_cd='"+rset.getString(1)+"' and AGREEMENT_NO='"+rset.getString(2)+"' " +
					" and rev_no='"+rset.getString(3)+"' and cn_no='"+rset.getString(4)+"' and cn_cd='1'" +
					" and cn_no<=9999 and status='Y' " ;
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						cargowise_rpt_sn_rev_no.add(rset1.getString(1)==null?"":rset1.getString(1));
					}
						
				}
					
			}
			else if(contract_type.equalsIgnoreCase("period"))
			{
				queryString="SELECT DISTINCT CUSTOMER_CD,AGREEMENT_NO,REV_NO,CN_NO " +
					" ,TO_CHAR(START_DT,'DD/MM/YYYY'), TO_CHAR(END_DT,'DD/MM/YYYY') "+
					"FROM FMS8_LNG_REGAS_MST  "
					+ "Where customer_cd='"+report_customer_cd+"' AND CN_NO!='0' AND CN_CD='1' " +
					" and cn_no>9999 and status='Y' "
					+ "ORDER BY CUSTOMER_CD,AGREEMENT_NO";
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					cargowise_rpt_fgsa_no.add(rset.getString(2)==null?"":rset.getString(2));
					cargowise_rpt_fgsa_rev_no.add(rset.getString(3)==null?"":rset.getString(3));
					cargowise_rpt_sn_no.add(rset.getString(4)==null?"":rset.getString(4));
					cargowise_rpt_start_dt.add(rset.getString(5)==null?"":rset.getString(5));
					cargowise_rpt_end_dt.add(rset.getString(6)==null?"":rset.getString(6));
					
					queryString1 ="select max(cn_rev_no) from FMS8_LNG_REGAS_MST  where " +
					" Customer_cd='"+rset.getString(1)+"' and AGREEMENT_NO='"+rset.getString(2)+"' " +
					" and rev_no='"+rset.getString(3)+"' and cn_no='"+rset.getString(4)+"' and cn_cd='1' and status='Y' " +
					" and cn_no>9999" ;
					rset1 = stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
						cargowise_rpt_sn_rev_no.add(rset1.getString(1)==null?"":rset1.getString(1));
					}
						
				}
			}
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	
	Vector cargowise_advance_tax_amt=new Vector();
	
	public void fetch_report_advance_cargo()
	{
		try
		{
			
			if(contract_type.equalsIgnoreCase("fgsa"))
			{
				String mapping_id=report_customer_cd+"-"+cargo_rpt_fgsa_no+"-"+cargo_rpt_fgsa_rev_no+"-"+cargo_rpt_sn_no+"-"+cargo_rpt_sn_rev_no+"-"+"S";
				queryString = "select price_rate,currency_cd,flag " +
				"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
				"price_cd='1' AND FLAG='Y' ";
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					String adv_flag=rset.getString(3)==null?"N":rset.getString(3);
					if(adv_flag.equalsIgnoreCase("Y")){
						String amt=rset.getString(1)==null?"0":rset.getString(1);
						cargowise_advance_amt.add(nf.format(Double.parseDouble(amt)));
						String cur=rset.getString(2)==null?"0":rset.getString(2);
						if(cur.equalsIgnoreCase("1"))
						{
							cargowise_advance_cur.add("INR");
						}
						else
						{
							cargowise_advance_cur.add("USD");
						}
						//cargowise_advance_flag.add(rset.getString(3)==null?"":rset.getString(3));
						cargowise_advance_cargo.add("");
					}
					
				}
			}
			else if(contract_type.equalsIgnoreCase("tender"))
			{
				String mapping_id=report_customer_cd+"-"+cargo_rpt_fgsa_no+"-"+0+"-"+cargo_rpt_sn_no+"-"+cargo_rpt_sn_rev_no+"-"+"L";
				queryString = "select price_rate,currency_cd,flag " +
				"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
				"price_cd='1' AND FLAG='Y' ";
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					String adv_flag=rset.getString(3)==null?"N":rset.getString(3);
					if(adv_flag.equalsIgnoreCase("Y")){
						String amt=rset.getString(1)==null?"0":rset.getString(1);
						cargowise_advance_amt.add(nf.format(Double.parseDouble(amt)));
						String cur=rset.getString(2)==null?"0":rset.getString(2);
						if(cur.equalsIgnoreCase("1"))
						{
							cargowise_advance_cur.add("INR");
						}
						else
						{
							cargowise_advance_cur.add("USD");
						}
						//cargowise_advance_flag.add(rset.getString(3)==null?"":rset.getString(3));
						cargowise_advance_cargo.add("");
					}
					
				}
			}
			else if(contract_type.equalsIgnoreCase("regas"))
			{
				String mapping_id=report_customer_cd+"-"+cargo_rpt_fgsa_no+"-"+cargo_rpt_fgsa_rev_no+"-"+"%"+"-"+0+"-"+"R";
				queryString = "select price_rate,currency_cd,flag " +
				"FROM fms7_cont_price_dtl WHERE mapping_id like '"+mapping_id+"' AND " +
				"price_cd='1' AND FLAG='Y' ";
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					String adv_flag=rset.getString(3)==null?"N":rset.getString(3);
					if(adv_flag.equalsIgnoreCase("Y")){
						String amt=rset.getString(1)==null?"0":rset.getString(1);
						cargowise_advance_amt.add(nf.format(Double.parseDouble(amt)));
						String cur=rset.getString(2)==null?"0":rset.getString(2);
						if(cur.equalsIgnoreCase("1"))
						{
							cargowise_advance_cur.add("INR");
						}
						else
						{
							cargowise_advance_cur.add("USD");
						}
						//cargowise_advance_flag.add(rset.getString(3)==null?"":rset.getString(3));
						cargowise_advance_cargo.add("");
					}
				}
			}
			else if(contract_type.equalsIgnoreCase("cn"))
			{
				String mapping_id=report_customer_cd+"-"+cargo_rpt_sn_no+"-"+cargo_rpt_sn_rev_no+"-"+"%"+"-"+0+"-"+"C";
				queryString = "select price_rate,currency_cd,flag,mapping_id " +
				"FROM fms7_cont_price_dtl WHERE mapping_id like '"+mapping_id+"' AND " +
				" ltcora_no='"+cargo_rpt_fgsa_no+"' and ltcora_rev_no='"+cargo_rpt_fgsa_rev_no+"' " +
				" and price_cd='1' AND FLAG='Y' " +
				"order by mapping_id ";
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					String adv_flag=rset.getString(3)==null?"N":rset.getString(3);
					if(adv_flag.equalsIgnoreCase("Y")){
						String amt=rset.getString(1)==null?"0":rset.getString(1);
						cargowise_advance_amt.add(nf.format(Double.parseDouble(amt)));
						String cur=rset.getString(2)==null?"0":rset.getString(2);
						if(cur.equalsIgnoreCase("1"))
						{
							cargowise_advance_cur.add("INR");
						}
						else
						{
							cargowise_advance_cur.add("USD");
						}
						//cargowise_advance_flag.add(rset.getString(3)==null?"":rset.getString(3));
						String map_id=rset.getString(4)==null?"":rset.getString(4);
						String temp_id[]=map_id.split("-");
						////System.out.println("temp_id[3]----  "+temp_id[3]);
						cargowise_advance_cargo.add(temp_id[3]);
						
						
						
						queryString = "select price_rate " +
						"FROM fms7_cont_price_dtl WHERE mapping_id = '"+map_id+"' AND " +
						" ltcora_no='"+cargo_rpt_fgsa_no+"' and ltcora_rev_no='"+cargo_rpt_fgsa_rev_no+"' " +
						" and price_cd='6' AND FLAG='Y' " +
						"order by mapping_id ";
						rset1= stmt1.executeQuery(queryString);
						if(rset1.next())
						{
							String amt1=rset1.getString(1)==null?"0":rset1.getString(1);
							cargowise_advance_tax_amt.add(nf.format(Double.parseDouble(amt1)));
						}
						else
						{
							cargowise_advance_tax_amt.add("0.00");
						}
					}
				}
					
			}
			else if(contract_type.equalsIgnoreCase("period"))
			{
				String mapping_id=report_customer_cd+"-"+cargo_rpt_sn_no+"-"+cargo_rpt_sn_rev_no+"-"+"%"+"-"+0+"-"+"C";
				queryString = "select price_rate,currency_cd,flag,mapping_id " +
				"FROM fms7_cont_price_dtl WHERE mapping_id like '"+mapping_id+"' AND " +
				" ltcora_no='"+cargo_rpt_fgsa_no+"' and ltcora_rev_no='"+cargo_rpt_fgsa_rev_no+"' " +
				" and price_cd='1' AND FLAG='Y' " +
				"order by mapping_id ";
				////System.out.println("Advance details cargo: "+queryString);
				rset = stmt.executeQuery(queryString);
				while(rset.next())
				{
					String adv_flag=rset.getString(3)==null?"N":rset.getString(3);
					if(adv_flag.equalsIgnoreCase("Y")){
						String amt=rset.getString(1)==null?"0":rset.getString(1);
						cargowise_advance_amt.add(nf.format(Double.parseDouble(amt)));
						String cur=rset.getString(2)==null?"0":rset.getString(2);
						if(cur.equalsIgnoreCase("1"))
						{
							cargowise_advance_cur.add("INR");
						}
						else
						{
							cargowise_advance_cur.add("USD");
						}
						//cargowise_advance_flag.add(rset.getString(3)==null?"":rset.getString(3));
						String map_id=rset.getString(4)==null?"":rset.getString(4);
						String temp_id[]=map_id.split("-");
						
						cargowise_advance_cargo.add(temp_id[3]);
						
						
						queryString = "select price_rate " +
						"FROM fms7_cont_price_dtl WHERE mapping_id = '"+map_id+"' AND " +
						" ltcora_no='"+cargo_rpt_fgsa_no+"' and ltcora_rev_no='"+cargo_rpt_fgsa_rev_no+"' " +
						" and price_cd='6' AND FLAG='Y' " +
						"order by mapping_id ";
						rset1= stmt1.executeQuery(queryString);
						if(rset1.next())
						{
							String amt1=rset1.getString(1)==null?"0":rset1.getString(1);
							cargowise_advance_tax_amt.add(nf.format(Double.parseDouble(amt1)));
						}
						else
						{
							cargowise_advance_tax_amt.add("0.00");
						}
						
					}
					
				}
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public void updatetableForPdfDtlEntry_view() throws SQLException	//HS20160606
	{
		PreparedStatement pstmt=null;
		try
		{
			////System.out.println("--path name----"+f_nm+"---------"+inv_type_pdf);
			if(!f_nm.equalsIgnoreCase("")){
				String quer="select count(*) from dlng_inv_pdf_dtl where"
						+ " PDF_INV_NM='"+f_nm.trim()+"' and INV_TYPE='"+inv_type_pdf.trim()+"'";
				rset=stmt.executeQuery(quer);
				if(rset.next()){
					if(rset.getInt(1)>0){
						 pstmt = conn.prepareStatement("update dlng_inv_pdf_dtl   "
								+ " set  created_dt=sysdate,flag='Y' where PDF_INV_NM='"+f_nm.trim()+"' and  INV_TYPE='"+inv_type_pdf.trim()+"'");
						pstmt.executeUpdate();
						
						
					}else{
						//String f_nm=f_nm;
						 pstmt = conn.prepareStatement("insert into dlng_inv_pdf_dtl  "
								+ "  (PDF_INV_NM,created_dt,INV_TYPE,flag) values ('"+f_nm.trim()+"',sysdate,'"+inv_type_pdf.trim()+"','Y') ");
						pstmt.executeUpdate();
					}
				}
			}
			conn.commit();
		}
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		finally{
			if (pstmt != null) { 
	    	     pstmt.close(); 
	    	    }
		}
	}
	
	public void updatetableForPdfDtlEntry() throws SQLException	//HS20160606
	{
		PreparedStatement pstmt=null;
		try
		{
			String pdf_inv_dtl="";
			String curr_date="";
			String inv_title="";
			
			if(invoice_title.equalsIgnoreCase("ORIGINAL"))
			{
				inv_title="O";
			}
			else if(invoice_title.equalsIgnoreCase("DUPLICATE"))
			{
				inv_title="D";
			}
			else if(invoice_title.equalsIgnoreCase("TRIPLICATE"))
			{
				inv_title="T";
			}
			else if(invoice_title.equalsIgnoreCase("QUADRICATE")) //SB20160402
			{
				inv_title="Q";
			}
			else if(invoice_title.equalsIgnoreCase("CREDIT") || invoice_title.equalsIgnoreCase("CANCEL")) //SB20160402
			{
				inv_title="C";
			}
			System.out.println("PDF:with TAX INV-TITLE: "+inv_title);
			
			String invinvoicedt="";
			String q="select to_char(invoice_dt,'dd/mm/yyyy') from DLNG_INVOICE_MST where contract_type='"+contract_type+"' " +
			"and financial_year='"+invFinancialYear+"' and hlpl_inv_seq_no='"+hlpl_inv_seq_no+"' AND FLAG!='A'";
			rset=stmt.executeQuery(q);
			if(rset.next())
			{
				curr_date=rset.getString(1);
				invinvoicedt=rset.getString(1);
			}
			
			//Date d1=new Date(invoice_bench_date);
			//Date d2=new Date(curr_date);
			String tempD1[]=invoice_bench_date.split("/");
			String d1=tempD1[2]+tempD1[1]+tempD1[0];
			
			String tempD2[]=curr_date.split("/");
			String d2=tempD2[2]+tempD2[1]+tempD2[0];
			
			if(Integer.parseInt(d2)>Integer.parseInt(d1))
			{
				String query="select pdf_inv_dtl from DLNG_INVOICE_MST where contract_type='"+contract_type+"' " +
						"and financial_year='"+invFinancialYear+"' and hlpl_inv_seq_no='"+hlpl_inv_seq_no+"' AND FLAG!='A'";
				
				if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
				{
					query+=" and mapping_id='"+customer_inv_mapping_id+"'";
				}
				rset=stmt.executeQuery(query);
				if(rset.next())
				{
					pdf_inv_dtl=rset.getString(1)==null?"":rset.getString(1);
				}
				
				if(pdf_inv_dtl.equalsIgnoreCase(""))
				{
					String q1="update DLNG_INVOICE_MST set pdf_inv_dtl='"+inv_title+"' where contract_type='"+contract_type+"' " +
						"and financial_year='"+invFinancialYear+"' and hlpl_inv_seq_no='"+hlpl_inv_seq_no+"' AND FLAG!='A'";
					
					if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
					{
						q1+=" and mapping_id='"+customer_inv_mapping_id+"'";
					}
					
					stmt.executeUpdate(q1);
				}
				else
				{
					//check if title availbale
					if(pdf_inv_dtl.contains(inv_title))
					{
						
					}
					else
					{
						pdf_inv_dtl+=inv_title;
						String q1="update DLNG_INVOICE_MST set pdf_inv_dtl='"+pdf_inv_dtl+"' where contract_type='"+contract_type+"' " +
						"and financial_year='"+invFinancialYear+"' and hlpl_inv_seq_no='"+hlpl_inv_seq_no+"' AND FLAG!='A' ";
						if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
						{
							q1+=" and mapping_id='"+customer_inv_mapping_id+"'";
						}
						
						stmt.executeUpdate(q1);
					}
					
				}
			}
			
			int cnt=0;
			String Mapping_seq_no=contract_type+":"+invFinancialYear+":"+hlpl_inv_seq_no+":"+invinvoicedt;
			String query="select inv_name from LOG_FMS7_INV_FILE_DTL where INV_SEQ_NO='"+Mapping_seq_no+"' and inv_title='"+invoice_title+"'";
			rset=stmt.executeQuery(query);
			if(rset.next())
			{
				query="DELETE from LOG_FMS7_INV_FILE_DTL where INV_SEQ_NO='"+Mapping_seq_no+"' and inv_title='"+invoice_title+"'";
				stmt.executeUpdate(query);
			}
			
			
			File f=new File(invoice_pdf_path);
			////System.out.println("Lat modified  "+f.lastModified());
			////System.out.println("Name   "+f.getName());
			
			////System.out.println("Before Format : " + f.lastModified());
			SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
			////System.out.println("After Format : " + sdf.format(f.lastModified()));
			String file_date=sdf.format(f.lastModified());
			SimpleDateFormat sdf1 = new SimpleDateFormat("HH:mm:ss");
			String file_time=sdf1.format(f.lastModified());
			//////System.out.println("After Format : " + sdf1.format(f.lastModified()));
			 
			
			////System.out.println("SIZE.. "+f.length());
			
			query="INSERT INTO LOG_FMS7_INV_FILE_DTL (INV_SEQ_NO,INV_TITLE,INV_DT,INV_NAME,INV_SIZE,INV_TIME)" +
					" VALUES ('"+Mapping_seq_no+"','"+invoice_title+"',to_date('"+file_date+"','dd/mm/yyyy'),'"+invoice_pdf_path+"','"+f.length()+"','"+file_time+"')";
			System.out.println("query.... "+query);
			stmt.executeUpdate(query);
			
			//conn.commit();
			
			////System.out.println("--path name----"+f_nm+"---------"+inv_type_pdf);
			if(!f_nm.equalsIgnoreCase("")){
				String quer="select count(*) from dlng_inv_pdf_dtl where"
						+ " PDF_INV_NM='"+f_nm.trim()+"' and INV_TYPE='"+inv_type_pdf.trim()+"'";
				rset=stmt.executeQuery(quer);
				if(rset.next()){
					if(rset.getInt(1)>0){
						 pstmt = conn.prepareStatement("update dlng_inv_pdf_dtl   "
								+ " set  created_dt=sysdate,flag='Y' where PDF_INV_NM='"+f_nm.trim()+"' and  INV_TYPE='"+inv_type_pdf.trim()+"'");
						File blob = new File(invoice_pdf_path);
						/*FileInputStream in = new FileInputStream(blob);

						pstmt.setBinaryStream(1, in, (int)blob.length());
						//pstmt.setInt(2, 101);  */
						pstmt.executeUpdate();
						
						
					}else{
						//String f_nm=f_nm;
						 pstmt = conn.prepareStatement("insert into dlng_inv_pdf_dtl  "
								+ "  (PDF_INV_NM,created_dt,INV_TYPE,flag) values ('"+f_nm.trim()+"',sysdate,'"+inv_type_pdf.trim()+"','Y') ");
						
						File blob = new File(invoice_pdf_path);
						/*FileInputStream in = new FileInputStream(blob);

						pstmt.setBinaryStream(1, in, (int)blob.length());*/
						//pstmt.setInt(2, 101);  
						pstmt.executeUpdate();
					}
				}
			}
			conn.commit();
		}
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		finally{
			if (pstmt != null) { 
	    	     pstmt.close(); 
	    	    }
		}
	}
	
	public void fetchformatteddates()
	{	
		try
		{
				String query="select to_char(to_date('"+input_date+"','DD/MM/YYYY'),'DD-Mon-YY') from dual";
				rset=stmt.executeQuery(query);
				if(rset.next())
				{
					formatted_Date=rset.getString(1)==null?"":rset.getString(1);
				}
		}
		catch(Exception e)
		{
				e.printStackTrace();
		}
	}
	
	String MODIFY_TAX_ADV_ADJUSTMENT="0";
	String MODIFY_TAX_ADV_CURR="INR";
	String MODIFY_TAX_INV_AMT_INR="0";
	String MODIFY_TAX_ADV_FLAG="N";
	String MODIFY_SBC_ADV_ADJUSTMENT="0";
	String MODIFY_SBC_ADV_CURR="INR";
	String MODIFY_SBC_INV_AMT_INR="0";
	String MODIFY_SBC_ADV_FLAG="N";
	String MODIFY_KKC_ADV_ADJUSTMENT="0";
	String MODIFY_KKC_ADV_CURR="INR";
	String MODIFY_KKC_INV_AMT_INR="0";
	String MODIFY_KKC_ADV_FLAG="N";
	Vector multiple_adv_inv_no = new Vector();
	Vector multiple_adv_inv_dt = new Vector();
	
	public void updategetadvancedetailsfrominvoice_insert()
	{
		try
		{
			////System.out.println("ADV-ADJ: Started  ------>>  "+customer_inv_mapping_id);
	
			modifycustomer_Invoice_Tax_Code.clear();
			 modifycustomer_Invoice_Tax_Rate.clear();
			 modifycustomer_Invoice_Tax_Amt.clear();
			 modifycustomer_Invoice_Tax_Abbr.clear();
			 modifycustomer_Invoice_Tax_Name.clear();
			
			 String mapid[]=customer_inv_mapping_id.split("-");
			 int len=modifyhlplInvoiceNo.length();
			 for(int i=0;i<len;i++)
			 {
				 char char0=modifyhlplInvoiceNo.charAt(0);
				 if(char0=='0')
				 {
					 modifyhlplInvoiceNo=modifyhlplInvoiceNo.substring(1);
				 }
			 }
			 if(modifyhlplInvoiceNo.contains("/"))
			 {
				 modifyhlplInvoiceNo=modifyhlplInvoiceNo.substring(0,modifyhlplInvoiceNo.indexOf("/"));
			 }
			 String Mapping_seq_no=modifycontract_type+":"+modifyFinancialYear+":"+modifyhlplInvoiceNo+":"+"%";
				
				String queryString1="select price_cd, AMOUNT, CURRENCY,   " +
						"  REC_FLAG, REMARK, FLAG, OPERATION  from FMS7_INV_COMPO_DTL" +
						" where INV_SEQ_NO like '"+Mapping_seq_no+"' and price_cd='1' and flag_temp like 'T'";
				
				if(modifycontract_type.equalsIgnoreCase("T") || modifycontract_type.equalsIgnoreCase("C"))
				{
					queryString1+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
				}
				////System.out.println("STEP-1: "+queryString1);
			 rset=stmt.executeQuery(queryString1);
			 if(rset.next())
			 {
				 	modifyadjflag = rset.getString(6)==null?"N":rset.getString(6);
					modifyadjamt = rset.getString(2)==null?"0":rset.getString(2);
					modifyadjcur = rset.getString(3)==null?"":rset.getString(3);
					modifyadjrecv = rset.getString(4)==null?"N":rset.getString(4);
					modifyadjremark = rset.getString(5)==null?"":rset.getString(5);
					modifyadjsign= rset.getString(7)==null?"1":rset.getString(7);
			 }
			 else
			 {
				 	modifyadjrecv = "N";
					modifyadjsign= "1";
			 }
			 
			 if(modifyadjcur.equalsIgnoreCase("1"))
				 modifyadjcur="I";
			 else if(modifyadjcur.equalsIgnoreCase("2"))
				 modifyadjcur="U";
			
				
			Vector cust_cut_bal=new Vector();
			double modifytotalavailbal=0.0;
			double modifyadjustamtmst1=Double.parseDouble(modifyadjustamtmst);
			String map_id=modifycustomercd+":"+modifyfgsano+":"+modifyfgsarevno+":"+modifysnno+":"+"%";
			
			queryString2="select flag, AMOUNT, CURRENCY,   " +
					"  OPERATION,inv_seq_no  from FMS7_INV_COMPO_DTL" +
					" where mapping_id like '"+map_id+"' and price_cd='1' and inv_seq_no like '"+modifycontract_type+"%'  and (flag_temp not like 'T' or flag_temp is null)";
				if(modifycontract_type.equalsIgnoreCase("T"))
				{
					queryString2+=" AND LTCORA_NO='"+mapid[1]+"'";
				}
				else if(modifycontract_type.equalsIgnoreCase("C"))
				{
					queryString2+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
				}
				////System.out.println("STEP-2: "+queryString2);
//				queryString2="select  adv_adj_flag , adv_adj_amt, adv_adj_cur, adv_adj_sign, hlpl_inv_seq_no, financial_year from DLNG_INVOICE_MST where contract_type='"+modifycontract_type+"' "+ 
//							" and sn_no='"+modifysnno+"' and fgsa_no='"+modifyfgsano+"' and customer_cd='"+modifycustomercd+"'";
				////System.out.println("......................................."+queryString2+"&.........."+modifyadjustamtmst);
				rset2=stmt2.executeQuery(queryString2);
				while(rset2.next())
				{
					String temp_inv_no[]=rset2.getString(5).split(":");
					String invno=temp_inv_no[2];
					String yr=temp_inv_no[1];
					String ADJUST_FLAG_MST=rset2.getString(1)==null?"N":rset2.getString(1);
					if(modifyhlplInvoiceNo.equalsIgnoreCase(invno) && modifyFinancialYear.equalsIgnoreCase(yr))
					{
						
					}
					else
					{
						if(ADJUST_FLAG_MST.equalsIgnoreCase("Y"))
						{
							String adjust_sign_mst=rset2.getString(4)==null?"1":rset2.getString(4);
							if(adjust_sign_mst.equalsIgnoreCase("1"))
							{
								String adjust_amt_mst=rset2.getString(2)==null?"0":rset2.getString(2);
								modifyadjustamtmst1=modifyadjustamtmst1-Double.parseDouble(adjust_amt_mst);
							}
							else if(adjust_sign_mst.equalsIgnoreCase("2"))
							{
								String adjust_amt_mst=rset2.getString(2)==null?"0":rset2.getString(2);
								modifyadjustamtmst1=modifyadjustamtmst1+Double.parseDouble(adjust_amt_mst);
							}
						}
					}
					
					
				}
				modifytotalavailbal=Double.parseDouble(nf.format(modifyadjustamtmst1));
				
				
				queryString2="select  AMOUNT, CURRENCY,   " +
				"  INV_AMT_INR  from FMS7_INV_COMPO_DTL" +
				" where mapping_id like '"+map_id+"' and price_cd='6' and INV_SEQ_NO like '"+Mapping_seq_no+"'  and flag_temp like 'T'";
				if(modifycontract_type.equalsIgnoreCase("T"))
				{
					queryString2+=" AND LTCORA_NO='"+mapid[1]+"'";
				}
				else if(modifycontract_type.equalsIgnoreCase("C"))
				{
					queryString2+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
				}
				////System.out.println("STEP-3: "+queryString2);
				rset=stmt.executeQuery(queryString2);
				while(rset.next())
				{
					MODIFY_TAX_ADV_FLAG="Y";
					MODIFY_TAX_ADV_ADJUSTMENT=rset.getString(1)==null?"0":rset.getString(1);
					MODIFY_TAX_ADV_CURR=rset.getString(2)==null?"0":rset.getString(2);
					MODIFY_TAX_INV_AMT_INR=rset.getString(3)==null?"0":rset.getString(3);
					
				}
				
				
				
		//		//System.out.println("ADJUST_AMT--------------------->"+modifyadjustamtmst);
				/*for(int i=0;i<modifycustcd.size();i++)
				{
					double tempbal=0;
					
					queryString1="select adv_adj_amt,adv_adj_sign from fms7_party_adv_adj_dtl where" +
							" customer_cd='"+modifycustcd.elementAt(i)+"' and adv_seq_no='"+modifycustseqno.elementAt(i)+"'";
					rset1=stmt1.executeQuery(queryString1);
					while(rset1.next())
					{
						
						if(rset1.getString(2).equalsIgnoreCase("1"))
						{
							tempbal-=java.lang.Double.parseDouble(rset1.getString(1));
						}
						else if(rset1.getString(2).equalsIgnoreCase("2"))
						{
							tempbal+=java.lang.Double.parseDouble(rset1.getString(1));
						}
						
					}
					cust_cut_bal.add(""+tempbal);
					
					
					
					double temp1 = Double.parseDouble(modifycustamt.elementAt(i).toString())+tempbal;
					String temp2=nf.format(temp1);
		//			//System.out.println("TEMP---------"+tempbal);
					cust_bal.add(temp2);
					
					if(modifyadjcur.equalsIgnoreCase("U"))
					{
						if(modifycustcur.elementAt(i).toString().equalsIgnoreCase("U"))
						{
							modifytotalavailbal+=Double.parseDouble(modifycustamt.elementAt(i).toString())+tempbal;
				//			//System.out.println("USD----111-----"+modifytotalavailbal);
						}
						else
						{
							tempbal=tempbal/Double.parseDouble(modifyexchngratevalue);
							String tempamt=""+(Double.parseDouble(modifycustamt.elementAt(i).toString())/Double.parseDouble(modifyexchngratevalue));
							////System.out.println("INR----111-----"+tempbal);
							modifytotalavailbal+=Double.parseDouble(tempamt)+tempbal;
				//			//System.out.println("INR BAL----111-----"+modifytotalavailbal);
						}
						
					}
					else
					{
						if(modifycustcur.elementAt(i).toString().equalsIgnoreCase("U"))
						{
							tempbal=tempbal*Double.parseDouble(modifyexchngratevalue);
							String tempamt=""+(Double.parseDouble(modifycustamt.elementAt(i).toString())*Double.parseDouble(modifyexchngratevalue));
							modifytotalavailbal+=Double.parseDouble(tempamt)+tempbal;
						}
						else
						{
							modifytotalavailbal+=Double.parseDouble(modifycustamt.elementAt(i).toString())+tempbal;
						}
					}
				}*/
				 ////System.out.println("ADV-ADJ:VALUE: "+modifytotalavailbal);
				 modifytotalavailbal1=nf3.format(Double.parseDouble(""+modifytotalavailbal));
				 ////System.out.println("ADV-ADJ: Closed  ------>>  "+customer_inv_mapping_id);
				 
				 
				 String query = "SELECT ADV_INV_NO, NVL(TO_CHAR(ADV_INV_DT,'DD/MM/YYYY'),'') "
							+ "FROM FMS8_ADV_INV_DTL "
							+ "WHERE FINANCIAL_YEAR = '"+modifyFinancialYear+"' AND CONTRACT_TYPE = '"+modifycontract_type+"' "
							+ "AND HLPL_INV_SEQ_NO = '"+modifyhlplInvoiceNo+"' AND ADV_INV_NO != '"+modifyadvinvno+"'";
					//System.out.println("Fetching Data-2-"+query);
					rset = stmt.executeQuery(query);
					while(rset.next())
					{
						multiple_adv_inv_no.add(rset.getString(1).replaceAll(" ", "@#@#"));
						multiple_adv_inv_dt.add(rset.getString(2)==null?"":rset.getString(2));
					}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in Fetching Data..."+e.getMessage());
			e.printStackTrace();
		}
	}
	
	String save_adv_inv_value = "-", save_chk_mul_adv_inv = "N" , save_adv_inv_date = "-";
	public void save_advance_data() throws SQLException
	{
		try
		{
			String original_inv_dt="";
			//String original_inv_no="";
			/*queryString = "SELECT hlpl_inv_seq_no FROM DLNG_INVOICE_MST WHERE customer_cd="+customer_cd+" AND plant_seq_no="+customer_plant_seq_no+" AND " +
						  "fgsa_no="+fgsa_no+" AND sn_no="+sn_no+" AND " +
						  "contract_type='"+contract_type+"' AND financial_year='"+financial_Year+"' AND " +
						  "period_end_dt=TO_DATE('"+bill_period_end_dt+"','DD/MM/YYYY') AND " +
						  "hlpl_inv_seq_no="+Integer.parseInt(hlpl_Inv_Seq_No)+"";*/
			
			queryString = "SELECT hlpl_inv_seq_no,to_char(invoice_dt,'dd/mm/yyyy') FROM DLNG_INVOICE_MST WHERE " +
						  "contract_type='"+save_contract_type+"' AND " +
						  "financial_year='"+save_financial_Year+"' AND " +
						  "hlpl_inv_seq_no="+Integer.parseInt(save_hlpl_Inv_Seq_No)+" AND FLAG='Y'";
			
			if(contract_type.equalsIgnoreCase("C")) //ADDED FOR LTCORA AND CN
			{
					queryString+=" AND MAPPING_ID='"+save_mapping_id_LTCORA_CN+"'";
			}
	//		//System.out.println("Query For Finding Out Existing Invoice With Same Data "+queryString);
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				original_inv_dt=rset.getString(2);
				
			}
			else
			{
				original_inv_dt=save_invoice_date;
			}
			String mapping_id=save_customer_cd+":"+save_fgsa_no+":"+save_fgsa_rev_no+":"+save_sn_no+":"+save_sn_rev_no+":"+save_customer_plant_seq_no;
 			String inv_seq_no=save_contract_type+":"+save_financial_Year+":"+Integer.parseInt(save_hlpl_Inv_Seq_No)+":"+save_invoice_date;
 			String del_inv_seq_no=save_contract_type+":"+save_financial_Year+":"+Integer.parseInt(save_hlpl_Inv_Seq_No)+":"+original_inv_dt;	
 			////System.out.println(del_inv_seq_no);
 			
 			String query_del="DELETE FROM FMS7_INV_COMPO_DTL WHERE MAPPING_ID='"+mapping_id+"' AND INV_SEQ_NO='"+del_inv_seq_no+"' and price_cd='1'";
 			if(save_contract_type.equalsIgnoreCase("T") || save_contract_type.equalsIgnoreCase("C"))
			{
 				String mapid[]=save_mapping_id_LTCORA_CN.split("-");
 				query_del+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
			}
 			stmt.executeUpdate(query_del);
 			
 			
 			int currency_id=1;
 			String tmpcur="";
 			String tmprecv="";
 			if(save_currency.equalsIgnoreCase("0"))
 			{
 				tmpcur="U";
 				currency_id=2;
 			}
 			else
 			{
 				tmpcur="I";
 				currency_id=1;
 			}
 			if(save_advrecevial.equalsIgnoreCase("0"))
 			{
 				tmprecv="Y";
 			}
 			else
 			{
 				tmprecv="N";
 			}	
 			
 			if(save_activity.equalsIgnoreCase("insert"))
 			{
 				if(save_contract_type.equalsIgnoreCase("T") || save_contract_type.equalsIgnoreCase("C"))
 				{
 	 				String mapid[]=save_mapping_id_LTCORA_CN.split("-");
 	 				
 		 				String advance_price_usd=""+Double.parseDouble(save_priceINR2_advance_adjust)/Double.parseDouble(save_exch_rate_val);
 		 				queryString1="INSERT INTO FMS7_INV_COMPO_DTL(MAPPING_ID,INV_SEQ_NO,PRICE_CD,AMOUNT,CURRENCY,TOTAL_TARIFF,INV_AMT_INR,INV_AMT_USD,REC_FLAG,REMARK,FLAG,OPERATION,BASIC_INV_AMT_USD,BASIC_INV_AMT_INR,LTCORA_NO,LTCORA_REV_NO,FLAG_TEMP)" +
 		 						" VALUES('"+mapping_id+"','"+inv_seq_no+"','1','"+save_adjustamt+"','"+currency_id+"','0','"+save_priceINR2_advance_adjust+"','"+advance_price_usd+"','"+tmprecv+"','','Y','"+save_adjustsign+"','"+save_raw_amt_usd+"','"+save_raw_amt_inr+"','"+mapid[1]+"','"+mapid[2]+"','T') ";
 		 			//	//System.out.println(".............................................."+queryString1);
 		 				stmt.executeUpdate(queryString1);
 				}
 	 			else
 	 			{
 	 				
 		 				String advance_price_usd=""+Double.parseDouble(save_priceINR2_advance_adjust)/Double.parseDouble(save_exch_rate_val);
 		 				queryString1="INSERT INTO FMS7_INV_COMPO_DTL(MAPPING_ID,INV_SEQ_NO,PRICE_CD,AMOUNT,CURRENCY,TOTAL_TARIFF,INV_AMT_INR,INV_AMT_USD,REC_FLAG,REMARK,FLAG,OPERATION,BASIC_INV_AMT_USD,BASIC_INV_AMT_INR,FLAG_TEMP)" +
 		 						" VALUES('"+mapping_id+"','"+inv_seq_no+"','1','"+save_adjustamt+"','"+currency_id+"','0','"+save_priceINR2_advance_adjust+"','"+advance_price_usd+"','"+tmprecv+"','','Y','"+save_adjustsign+"','"+save_raw_amt_usd+"','"+save_raw_amt_inr+"','T') ";
 		 			//	//System.out.println(".............................................."+queryString1);
 		 				stmt.executeUpdate(queryString1);
 	 			}
 			}
 			else
 			{
 				if(save_contract_type.equalsIgnoreCase("T") || save_contract_type.equalsIgnoreCase("C"))
 				{
 	 				String mapid[]=save_mapping_id_LTCORA_CN.split("-");
 	 				
 		 				String advance_price_usd=""+Double.parseDouble(save_priceINR2_advance_adjust)/Double.parseDouble(save_exch_rate_val);
 		 				queryString1="INSERT INTO FMS7_INV_COMPO_DTL(MAPPING_ID,INV_SEQ_NO,PRICE_CD,AMOUNT,CURRENCY,TOTAL_TARIFF,INV_AMT_INR,INV_AMT_USD,REC_FLAG,REMARK,FLAG,OPERATION,BASIC_INV_AMT_USD,BASIC_INV_AMT_INR,LTCORA_NO,LTCORA_REV_NO)" +
 		 						" VALUES('"+mapping_id+"','"+inv_seq_no+"','1','"+save_adjustamt+"','"+currency_id+"','0','"+save_priceINR2_advance_adjust+"','"+advance_price_usd+"','"+tmprecv+"','','Y','"+save_adjustsign+"','"+save_raw_amt_usd+"','"+save_raw_amt_inr+"','"+mapid[1]+"','"+mapid[2]+"') ";
 		 			//	//System.out.println(".............................................."+queryString1);
 		 				stmt.executeUpdate(queryString1);
 				}
 	 			else
 	 			{
 	 				
 		 				String advance_price_usd=""+Double.parseDouble(save_priceINR2_advance_adjust)/Double.parseDouble(save_exch_rate_val);
 		 				queryString1="INSERT INTO FMS7_INV_COMPO_DTL(MAPPING_ID,INV_SEQ_NO,PRICE_CD,AMOUNT,CURRENCY,TOTAL_TARIFF,INV_AMT_INR,INV_AMT_USD,REC_FLAG,REMARK,FLAG,OPERATION,BASIC_INV_AMT_USD,BASIC_INV_AMT_INR)" +
 		 						" VALUES('"+mapping_id+"','"+inv_seq_no+"','1','"+save_adjustamt+"','"+currency_id+"','0','"+save_priceINR2_advance_adjust+"','"+advance_price_usd+"','"+tmprecv+"','','Y','"+save_adjustsign+"','"+save_raw_amt_usd+"','"+save_raw_amt_inr+"') ";
 		 			//	//System.out.println(".............................................."+queryString1);
 		 				stmt.executeUpdate(queryString1);
 	 			}
 			}
 			
 			//ADDED FOR INSERTION OF ADVANCE INVOICE NOS.
 			String query = "DELETE FROM FMS8_ADV_INV_DTL WHERE HLPL_INV_SEQ_NO = '"+save_hlpl_Inv_Seq_No+"' AND "
 					+ "FINANCIAL_YEAR = '"+save_financial_Year+"' AND CONTRACT_TYPE = '"+save_contract_type+"' ";
 			stmt.executeUpdate(query);
 			
 			if(save_chk_mul_adv_inv.equals("Y")) {
	 			query = "INSERT INTO FMS8_ADV_INV_DTL(HLPL_INV_SEQ_NO,FINANCIAL_YEAR,CONTRACT_TYPE,"
							+ "ADV_INV_NO,ADV_INV_DT,MAPPING_ID,ENTER_BY,ENTER_DT,FLAG) "
							+ "VALUES('"+save_hlpl_Inv_Seq_No+"','"+save_financial_Year+"','"+save_contract_type+"',"
							+ "'"+save_adv_inv_no+"',TO_DATE('"+save_adv_inv_dt+"','DD/MM/YYYY'),"
							+ "'"+save_mapping_id_LTCORA_CN+"','',SYSDATE,'Y')";
					stmt.executeUpdate(query);
				
	 			if(save_adv_inv_value != "-") {
	 				String tempValues[] = save_adv_inv_value.split("@@");
	 				String tempDates[] = save_adv_inv_date.split("@@");
	 				for(int i=0;i<tempValues.length;i++) {
	 					query = "INSERT INTO FMS8_ADV_INV_DTL(HLPL_INV_SEQ_NO,FINANCIAL_YEAR,CONTRACT_TYPE,"
	 							+ "ADV_INV_NO,ADV_INV_DT,MAPPING_ID,ENTER_BY,ENTER_DT,FLAG) "
	 							+ "VALUES('"+save_hlpl_Inv_Seq_No+"','"+save_financial_Year+"','"+save_contract_type+"',"
	 							+ "'"+tempValues[i]+"',TO_DATE('"+tempDates[i]+"','DD/MM/YYYY'),'"+save_mapping_id_LTCORA_CN+"','',SYSDATE,'Y')";
	 					stmt.executeUpdate(query);
	 				}
	 			}
 			}
 			/////////////
 			conn.commit();
		}
		catch(Exception e)
		{
			e.printStackTrace();
			conn.rollback();
		}
	}
	
	public void save_advance_data_tax() throws SQLException
	{
		try
		{
			////System.out.println("INV: ADVANCE TAX ADJUSTMENT ----Started---------->>");
			String original_inv_dt="";
			//String original_inv_no="";
			/*queryString = "SELECT hlpl_inv_seq_no FROM DLNG_INVOICE_MST WHERE customer_cd="+customer_cd+" AND plant_seq_no="+customer_plant_seq_no+" AND " +
						  "fgsa_no="+fgsa_no+" AND sn_no="+sn_no+" AND " +
						  "contract_type='"+contract_type+"' AND financial_year='"+financial_Year+"' AND " +
						  "period_end_dt=TO_DATE('"+bill_period_end_dt+"','DD/MM/YYYY') AND " +
						  "hlpl_inv_seq_no="+Integer.parseInt(hlpl_Inv_Seq_No)+"";*/
			
			queryString = "SELECT hlpl_inv_seq_no,to_char(invoice_dt,'dd/mm/yyyy') FROM DLNG_INVOICE_MST WHERE " +
						  "contract_type='"+save_contract_type+"' AND " +
						  "financial_year='"+save_financial_Year+"' AND " +
						  "hlpl_inv_seq_no="+Integer.parseInt(save_hlpl_Inv_Seq_No)+" AND FLAG='Y' ";
			
			if(contract_type.equalsIgnoreCase("C")) //ADDED FOR LTCORA AND CN
			{
					queryString+=" AND MAPPING_ID='"+save_mapping_id_LTCORA_CN+"'";
			}
			
			
			
			////System.out.println("STEP-1:DLNG_INVOICE_MST:SELECT: "+queryString);
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				original_inv_dt=rset.getString(2);
				
			}
			else
			{
				original_inv_dt=save_invoice_date;
			}
			String mapping_id=save_customer_cd+":"+save_fgsa_no+":"+save_fgsa_rev_no+":"+save_sn_no+":"+save_sn_rev_no+":"+save_customer_plant_seq_no;
 			String inv_seq_no=save_contract_type+":"+save_financial_Year+":"+Integer.parseInt(save_hlpl_Inv_Seq_No)+":"+save_invoice_date;
 			String del_inv_seq_no=save_contract_type+":"+save_financial_Year+":"+Integer.parseInt(save_hlpl_Inv_Seq_No)+":"+original_inv_dt;	
 		//	//System.out.println(del_inv_seq_no);
 			String query_del="DELETE FROM FMS7_INV_COMPO_DTL WHERE MAPPING_ID='"+mapping_id+"' AND INV_SEQ_NO='"+del_inv_seq_no+"' and price_cd='6'";
 			if(save_contract_type.equalsIgnoreCase("T") || save_contract_type.equalsIgnoreCase("C"))
			{
 				String mapid[]=save_mapping_id_LTCORA_CN.split("-");
 				query_del+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
			}
 			stmt.executeUpdate(query_del);
 			////System.out.println("STEP-2:FMS7_INV_COMPO_DTL:DELETE: "+query_del);
 		//	//System.out.println("save_currency..."+query_del);
 			
 			int currency_id=1;
 			String tmpcur="";
 			String tmprecv="";
 			if(save_currency.equalsIgnoreCase("USD"))
 			{
 				tmpcur="U";
 				currency_id=2;
 			}
 			else
 			{
 				tmpcur="I";
 				currency_id=1;
 			}
 			//if(save_advrecevial.equalsIgnoreCase("0"))
 			//{
 				tmprecv="Y";
 			//}
 			//else
 			//{
 			//	tmprecv="N";
 			//}	
 			
 			if(save_activity.equalsIgnoreCase("insert"))
 			{
 				if(save_contract_type.equalsIgnoreCase("T") || save_contract_type.equalsIgnoreCase("C"))
 				{
 	 				String mapid[]=save_mapping_id_LTCORA_CN.split("-");
 	 				
 		 				String advance_price_usd=""+Double.parseDouble(save_priceINR2_advance_adjust)/Double.parseDouble(save_exch_rate_val);
 		 				queryString1="INSERT INTO FMS7_INV_COMPO_DTL(MAPPING_ID,INV_SEQ_NO,PRICE_CD,AMOUNT,CURRENCY,TOTAL_TARIFF,INV_AMT_INR,INV_AMT_USD,REC_FLAG,REMARK,FLAG,OPERATION,BASIC_INV_AMT_USD,BASIC_INV_AMT_INR,LTCORA_NO,LTCORA_REV_NO,FLAG_TEMP)" +
 		 						" VALUES('"+mapping_id+"','"+inv_seq_no+"','6','"+save_adjustamt+"','"+currency_id+"','0','"+save_priceINR2_advance_adjust+"','"+advance_price_usd+"','"+tmprecv+"','','Y','"+save_adjustsign+"','"+save_raw_amt_usd+"','"+save_raw_amt_inr+"','"+mapid[1]+"','"+mapid[2]+"','T') ";
 		 				////System.out.println("STEP-3:FMS7_INV_COMPO_DTL:INSERT: "+queryString1);
 		 				stmt.executeUpdate(queryString1);
 		 			
 		 			
 	 				
 				}
 	 			else
 	 			{
 	 				
 		 				String advance_price_usd=""+Double.parseDouble(save_priceINR2_advance_adjust)/Double.parseDouble(save_exch_rate_val);
 		 				queryString1="INSERT INTO FMS7_INV_COMPO_DTL(MAPPING_ID,INV_SEQ_NO,PRICE_CD,AMOUNT,CURRENCY,TOTAL_TARIFF,INV_AMT_INR,INV_AMT_USD,REC_FLAG,REMARK,FLAG,OPERATION,BASIC_INV_AMT_USD,BASIC_INV_AMT_INR,FLAG_TEMP)" +
 		 						" VALUES('"+mapping_id+"','"+inv_seq_no+"','6','"+save_adjustamt+"','"+currency_id+"','0','"+save_priceINR2_advance_adjust+"','"+advance_price_usd+"','"+tmprecv+"','','Y','"+save_adjustsign+"','"+save_raw_amt_usd+"','"+save_raw_amt_inr+"','T') ";
 		 				////System.out.println("STEP-3A:FMS7_INV_COMPO_DTL:INSERT: "+queryString1);
 		 				stmt.executeUpdate(queryString1);
 		 			
 		 			
 		 			
 	 			}
 			}
 			else
 			{
 				if(save_contract_type.equalsIgnoreCase("T") || save_contract_type.equalsIgnoreCase("C"))
 				{
 	 				String mapid[]=save_mapping_id_LTCORA_CN.split("-");
 	 				
 		 				String advance_price_usd=""+Double.parseDouble(save_priceINR2_advance_adjust)/Double.parseDouble(save_exch_rate_val);
 		 				queryString1="INSERT INTO FMS7_INV_COMPO_DTL(MAPPING_ID,INV_SEQ_NO,PRICE_CD,AMOUNT,CURRENCY,TOTAL_TARIFF,INV_AMT_INR,INV_AMT_USD,REC_FLAG,REMARK,FLAG,OPERATION,BASIC_INV_AMT_USD,BASIC_INV_AMT_INR,LTCORA_NO,LTCORA_REV_NO)" +
 		 						" VALUES('"+mapping_id+"','"+inv_seq_no+"','6','"+save_adjustamt+"','"+currency_id+"','0','"+save_priceINR2_advance_adjust+"','"+advance_price_usd+"','"+tmprecv+"','','Y','"+save_adjustsign+"','"+save_raw_amt_usd+"','"+save_raw_amt_inr+"','"+mapid[1]+"','"+mapid[2]+"') ";
 		 				////System.out.println("STEP-3B:FMS7_INV_COMPO_DTL:INSERT: "+queryString1);
 		 				stmt.executeUpdate(queryString1);
 		 			
 		 			
 	 				
 				}
 	 			else
 	 			{ 	 				
 		 				String advance_price_usd=""+Double.parseDouble(save_priceINR2_advance_adjust)/Double.parseDouble(save_exch_rate_val);
 		 				queryString1="INSERT INTO FMS7_INV_COMPO_DTL(MAPPING_ID,INV_SEQ_NO,PRICE_CD,AMOUNT,CURRENCY,TOTAL_TARIFF,INV_AMT_INR,INV_AMT_USD,REC_FLAG,REMARK,FLAG,OPERATION,BASIC_INV_AMT_USD,BASIC_INV_AMT_INR)" +
 		 						" VALUES('"+mapping_id+"','"+inv_seq_no+"','6','"+save_adjustamt+"','"+currency_id+"','0','"+save_priceINR2_advance_adjust+"','"+advance_price_usd+"','"+tmprecv+"','','Y','"+save_adjustsign+"','"+save_raw_amt_usd+"','"+save_raw_amt_inr+"') ";
 		 				////System.out.println("STEP-3C:FMS7_INV_COMPO_DTL:INSERT: "+queryString1);
 		 				stmt.executeUpdate(queryString1);		 			
 	 			}
 			}
 			////System.out.println("TAx ADVANCE.....");
 			conn.commit();
 			//System.out.println("INV: ADVANCE TAX ADJUSTMENT ----Closed---------->>");
		}
		catch(Exception e)
		{
			e.printStackTrace();
			conn.rollback();
		}
	}
	
	//RS09062017
	String save_tax_code = "";
	public void SAVE_TAX_DATA() throws SQLException {
		try {
			String original_inv_dt="";
//			System.out.println("in databean advance payment");
			queryString = "SELECT hlpl_inv_seq_no,to_char(invoice_dt,'dd/mm/yyyy') "
						+ "FROM DLNG_INVOICE_MST WHERE " +
						  "contract_type='"+save_contract_type+"' AND " +
						  "financial_year='"+save_financial_Year+"' AND " +
						  "hlpl_inv_seq_no="+Integer.parseInt(save_hlpl_Inv_Seq_No)+" "
						  + "AND MAPPING_ID='"+save_mapping_id_LTCORA_CN+"' AND FLAG='Y'";
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				original_inv_dt=rset.getString(2);				
			}
			else
			{
				original_inv_dt=save_invoice_date;
			}
			
			String mapping_id=save_customer_cd+":"+save_fgsa_no+":"+save_fgsa_rev_no+":"+save_sn_no+":"+save_sn_rev_no+":"+save_customer_plant_seq_no;
 			String inv_seq_no=save_contract_type+":"+save_financial_Year+":"+Integer.parseInt(save_hlpl_Inv_Seq_No)+":"+save_invoice_date;
 			String del_inv_seq_no=save_contract_type+":"+save_financial_Year+":"+Integer.parseInt(save_hlpl_Inv_Seq_No)+":"+original_inv_dt;	
 			String mapid[]=save_mapping_id_LTCORA_CN.split("-");
 			
 			String query_del="DELETE FROM FMS7_INV_COMPO_DTL WHERE MAPPING_ID='"+mapping_id+"' "
 					+ "AND INV_SEQ_NO='"+del_inv_seq_no+"' and price_cd IN ('10','11','12','13') "
 					+ "AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"' ";
 			stmt.executeUpdate(query_del);
 			
 			int currency_id=1;
 			String tmpcur="I";
 			String tmprecv="";
 			tmprecv="Y";
 			
 			String adjust_amt[] = save_adjustamt.split("@");
 			String adjust_sign[] = save_adjustsign.split("@");
 			String tax_code[] = save_tax_code.split("@");
 			String priceINR2[] =  save_priceINR2_advance_adjust.split("@");
 			
 			for(int i=0;i<adjust_amt.length;i++) {
 				String advance_price_usd=nf2.format(Double.parseDouble(priceINR2[i])/Double.parseDouble(save_exch_rate_val));
 				if(save_activity.equalsIgnoreCase("insert"))
 	 			{
 	 		 				queryString1="INSERT INTO FMS7_INV_COMPO_DTL(MAPPING_ID,INV_SEQ_NO,PRICE_CD,AMOUNT,CURRENCY,TOTAL_TARIFF,INV_AMT_INR,INV_AMT_USD,REC_FLAG,REMARK,FLAG,OPERATION,BASIC_INV_AMT_USD,BASIC_INV_AMT_INR,LTCORA_NO,LTCORA_REV_NO,FLAG_TEMP)" +
 	 		 						" VALUES('"+mapping_id+"','"+inv_seq_no+"','"+tax_code[i]+"','"+adjust_amt[i]+"','"+currency_id+"','0','"+priceINR2[i]+"','"+advance_price_usd+"','"+tmprecv+"','','Y','"+adjust_sign[i]+"','"+save_raw_amt_usd+"','"+save_raw_amt_inr+"','"+mapid[1]+"','"+mapid[2]+"','T') ";
 	 			}
 	 			else
 	 			{
 	 		 				queryString1="INSERT INTO FMS7_INV_COMPO_DTL(MAPPING_ID,INV_SEQ_NO,PRICE_CD,AMOUNT,CURRENCY,TOTAL_TARIFF,INV_AMT_INR,INV_AMT_USD,REC_FLAG,REMARK,FLAG,OPERATION,BASIC_INV_AMT_USD,BASIC_INV_AMT_INR,LTCORA_NO,LTCORA_REV_NO)" +
 	 		 						" VALUES('"+mapping_id+"','"+inv_seq_no+"','"+tax_code[i]+"','"+adjust_amt[i]+"','"+currency_id+"','0','"+priceINR2[i]+"','"+advance_price_usd+"','"+tmprecv+"','','Y','"+adjust_sign[i]+"','"+save_raw_amt_usd+"','"+save_raw_amt_inr+"','"+mapid[1]+"','"+mapid[2]+"') ";
 	 			}
 				System.out.println(queryString1);
 				stmt.executeUpdate(queryString1);		
 			}
			conn.commit();
		} catch(Exception e) {
			conn.rollback();
			e.printStackTrace();
		}
	}
	
//////////////SB20160506: For SBC///////////////
	public void save_advance_data_sbc() throws SQLException
	{
		try
		{
			//System.out.println("INV: ADVANCE SBC ADJUSTMENT ----Started---------->>");
			String original_inv_dt="";
			
			queryString = "SELECT hlpl_inv_seq_no,to_char(invoice_dt,'dd/mm/yyyy') FROM DLNG_INVOICE_MST WHERE " +
						  "contract_type='"+save_contract_type+"' AND " +
						  "financial_year='"+save_financial_Year+"' AND " +
						  "hlpl_inv_seq_no="+Integer.parseInt(save_hlpl_Inv_Seq_No)+" AND FLAG='Y'";
			
			if(contract_type.equalsIgnoreCase("C")) //ADDED FOR LTCORA AND CN
			{
					queryString+=" AND MAPPING_ID='"+save_mapping_id_LTCORA_CN+"'";
			}
			////System.out.println("STEP-1:DLNG_INVOICE_MST:SELECT: "+queryString);
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				original_inv_dt=rset.getString(2);				
			}
			else
			{
				original_inv_dt=save_invoice_date;
			}
			String mapping_id=save_customer_cd+":"+save_fgsa_no+":"+save_fgsa_rev_no+":"+save_sn_no+":"+save_sn_rev_no+":"+save_customer_plant_seq_no;
 			String inv_seq_no=save_contract_type+":"+save_financial_Year+":"+Integer.parseInt(save_hlpl_Inv_Seq_No)+":"+save_invoice_date;
 			String del_inv_seq_no=save_contract_type+":"+save_financial_Year+":"+Integer.parseInt(save_hlpl_Inv_Seq_No)+":"+original_inv_dt;	
 		//	//System.out.println(del_inv_seq_no);
 			String query_del="DELETE FROM FMS7_INV_COMPO_DTL WHERE MAPPING_ID='"+mapping_id+"' AND INV_SEQ_NO='"+del_inv_seq_no+"' and price_cd='7'";
 			if(save_contract_type.equalsIgnoreCase("T") || save_contract_type.equalsIgnoreCase("C"))
			{
 				String mapid[]=save_mapping_id_LTCORA_CN.split("-");
 				query_del+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
			}
 			////System.out.println("STEP-2:FMS7_INV_COMPO_DTL:DELETE: "+query_del);
 			stmt.executeUpdate(query_del);
 			////System.out.println("SBC ADVANCE DELETED:------------->>");
 			conn.commit();
 		//	//System.out.println("save_currency..."+query_del);
 			
 			int currency_id=1;
 			String tmpcur="";
 			String tmprecv="";
 			if(save_currency.equalsIgnoreCase("USD"))
 			{
 				tmpcur="U";
 				currency_id=2;
 			}
 			else
 			{
 				tmpcur="I";
 				currency_id=1;
 			}
 			//if(save_advrecevial.equalsIgnoreCase("0"))
 			//{
 				tmprecv="Y";
 			//}
 			//else
 			//{
 			//	tmprecv="N";
 			//}	
 			
 			if(save_activity.equalsIgnoreCase("insert"))
 			{
 				if(save_contract_type.equalsIgnoreCase("T") || save_contract_type.equalsIgnoreCase("C"))
 				{
 	 				String mapid[]=save_mapping_id_LTCORA_CN.split("-");
 	 				
 		 				String advance_price_usd=""+Double.parseDouble(save_priceINR2_advance_adjust)/Double.parseDouble(save_exch_rate_val);
 		 				queryString1="INSERT INTO FMS7_INV_COMPO_DTL(MAPPING_ID,INV_SEQ_NO,PRICE_CD,AMOUNT,CURRENCY,TOTAL_TARIFF,INV_AMT_INR,INV_AMT_USD,REC_FLAG,REMARK,FLAG,OPERATION,BASIC_INV_AMT_USD,BASIC_INV_AMT_INR,LTCORA_NO,LTCORA_REV_NO,FLAG_TEMP)" +
 		 						" VALUES('"+mapping_id+"','"+inv_seq_no+"','7','"+save_adjustamt+"','"+currency_id+"','0','"+save_priceINR2_advance_adjust+"','"+advance_price_usd+"','"+tmprecv+"','','Y','"+save_adjustsign+"','"+save_raw_amt_usd+"','"+save_raw_amt_inr+"','"+mapid[1]+"','"+mapid[2]+"','T') ";
 		 				////System.out.println("STEP-3:FMS7_INV_COMPO_DTL:INSERT: "+queryString1);
 		 				stmt.executeUpdate(queryString1);			
 				}
 	 			else
 	 			{	 				
 		 				String advance_price_usd=""+Double.parseDouble(save_priceINR2_advance_adjust)/Double.parseDouble(save_exch_rate_val);
 		 				queryString1="INSERT INTO FMS7_INV_COMPO_DTL(MAPPING_ID,INV_SEQ_NO,PRICE_CD,AMOUNT,CURRENCY,TOTAL_TARIFF,INV_AMT_INR,INV_AMT_USD,REC_FLAG,REMARK,FLAG,OPERATION,BASIC_INV_AMT_USD,BASIC_INV_AMT_INR,FLAG_TEMP)" +
 		 						" VALUES('"+mapping_id+"','"+inv_seq_no+"','7','"+save_adjustamt+"','"+currency_id+"','0','"+save_priceINR2_advance_adjust+"','"+advance_price_usd+"','"+tmprecv+"','','Y','"+save_adjustsign+"','"+save_raw_amt_usd+"','"+save_raw_amt_inr+"','T') ";
 		 				////System.out.println("STEP-3A:FMS7_INV_COMPO_DTL:INSERT: "+queryString1);
 		 				stmt.executeUpdate(queryString1);	
 	 			}
 			}
 			else
 			{
 				if(save_contract_type.equalsIgnoreCase("T") || save_contract_type.equalsIgnoreCase("C"))
 				{
 	 				String mapid[]=save_mapping_id_LTCORA_CN.split("-");
 	 				
 		 				String advance_price_usd=""+Double.parseDouble(save_priceINR2_advance_adjust)/Double.parseDouble(save_exch_rate_val);
 		 				queryString1="INSERT INTO FMS7_INV_COMPO_DTL(MAPPING_ID,INV_SEQ_NO,PRICE_CD,AMOUNT,CURRENCY,TOTAL_TARIFF,INV_AMT_INR,INV_AMT_USD,REC_FLAG,REMARK,FLAG,OPERATION,BASIC_INV_AMT_USD,BASIC_INV_AMT_INR,LTCORA_NO,LTCORA_REV_NO)" +
 		 						" VALUES('"+mapping_id+"','"+inv_seq_no+"','7','"+save_adjustamt+"','"+currency_id+"','0','"+save_priceINR2_advance_adjust+"','"+advance_price_usd+"','"+tmprecv+"','','Y','"+save_adjustsign+"','"+save_raw_amt_usd+"','"+save_raw_amt_inr+"','"+mapid[1]+"','"+mapid[2]+"') ";
 		 				////System.out.println("STEP-3B:FMS7_INV_COMPO_DTL:INSERT: "+queryString1);
 		 				stmt.executeUpdate(queryString1);
 		 			
 		 			
 	 				
 				}
 	 			else
 	 			{ 	 				
 		 				String advance_price_usd=""+Double.parseDouble(save_priceINR2_advance_adjust)/Double.parseDouble(save_exch_rate_val);
 		 				queryString1="INSERT INTO FMS7_INV_COMPO_DTL(MAPPING_ID,INV_SEQ_NO,PRICE_CD,AMOUNT,CURRENCY,TOTAL_TARIFF,INV_AMT_INR,INV_AMT_USD,REC_FLAG,REMARK,FLAG,OPERATION,BASIC_INV_AMT_USD,BASIC_INV_AMT_INR)" +
 		 						" VALUES('"+mapping_id+"','"+inv_seq_no+"','7','"+save_adjustamt+"','"+currency_id+"','0','"+save_priceINR2_advance_adjust+"','"+advance_price_usd+"','"+tmprecv+"','','Y','"+save_adjustsign+"','"+save_raw_amt_usd+"','"+save_raw_amt_inr+"') ";
 		 				////System.out.println("STEP-3C:FMS7_INV_COMPO_DTL:INSERT: "+queryString1);
 		 				stmt.executeUpdate(queryString1);		 			
 	 			}
 			}
 			////System.out.println("SBC ADVANCE..INSERTED...");
 			conn.commit();
 			//System.out.println("INV: ADVANCE SBC ADJUSTMENT ----Closed---------->>");
		}
		catch(Exception e)
		{
			e.printStackTrace();
			conn.rollback();
		}
	}
///////////////////////////////////////////////
	
//////////KKC/////////////////////////////////
	public void save_advance_data_kkc() throws SQLException
	{
		try
		{
			//System.out.println("INV: ADVANCE KKC ADJUSTMENT ----Started---------->>");
			String original_inv_dt="";
			//String original_inv_no="";
			/*queryString = "SELECT hlpl_inv_seq_no FROM DLNG_INVOICE_MST WHERE customer_cd="+customer_cd+" AND plant_seq_no="+customer_plant_seq_no+" AND " +
						  "fgsa_no="+fgsa_no+" AND sn_no="+sn_no+" AND " +
						  "contract_type='"+contract_type+"' AND financial_year='"+financial_Year+"' AND " +
						  "period_end_dt=TO_DATE('"+bill_period_end_dt+"','DD/MM/YYYY') AND " +
						  "hlpl_inv_seq_no="+Integer.parseInt(hlpl_Inv_Seq_No)+"";*/
			
			queryString = "SELECT hlpl_inv_seq_no,to_char(invoice_dt,'dd/mm/yyyy') FROM DLNG_INVOICE_MST WHERE " +
						  "contract_type='"+save_contract_type+"' AND " +
						  "financial_year='"+save_financial_Year+"' AND " +
						  "hlpl_inv_seq_no="+Integer.parseInt(save_hlpl_Inv_Seq_No)+" AND FLAG='Y'";
			
			if(contract_type.equalsIgnoreCase("C")) //ADDED FOR LTCORA AND CN
			{
					queryString+=" AND MAPPING_ID='"+save_mapping_id_LTCORA_CN+"'";
			}
			////System.out.println("STEP-1:DLNG_INVOICE_MST:SELECT: "+queryString);
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				original_inv_dt=rset.getString(2);				
			}
			else
			{
				original_inv_dt=save_invoice_date;
			}
			String mapping_id=save_customer_cd+":"+save_fgsa_no+":"+save_fgsa_rev_no+":"+save_sn_no+":"+save_sn_rev_no+":"+save_customer_plant_seq_no;
 			String inv_seq_no=save_contract_type+":"+save_financial_Year+":"+Integer.parseInt(save_hlpl_Inv_Seq_No)+":"+save_invoice_date;
 			String del_inv_seq_no=save_contract_type+":"+save_financial_Year+":"+Integer.parseInt(save_hlpl_Inv_Seq_No)+":"+original_inv_dt;	
 		//	//System.out.println(del_inv_seq_no);
 			String query_del="DELETE FROM FMS7_INV_COMPO_DTL WHERE MAPPING_ID='"+mapping_id+"' AND INV_SEQ_NO='"+del_inv_seq_no+"' and price_cd='8'";
 			if(save_contract_type.equalsIgnoreCase("T") || save_contract_type.equalsIgnoreCase("C"))
			{
 				String mapid[]=save_mapping_id_LTCORA_CN.split("-");
 				query_del+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
			}
 			////System.out.println("STEP-2:FMS7_INV_COMPO_DTL:DELETE: "+query_del);
 			stmt.executeUpdate(query_del);
 			////System.out.println("KKC ADVANCE DELETED:------------->>");
 			conn.commit();
 		//	//System.out.println("save_currency..."+query_del);
 			
 			int currency_id=1;
 			String tmpcur="";
 			String tmprecv="";
 			if(save_currency.equalsIgnoreCase("USD"))
 			{
 				tmpcur="U";
 				currency_id=2;
 			}
 			else
 			{
 				tmpcur="I";
 				currency_id=1;
 			}
 			//if(save_advrecevial.equalsIgnoreCase("0"))
 			//{
 				tmprecv="Y";
 			//}
 			//else
 			//{
 			//	tmprecv="N";
 			//}	
 			
 			if(save_activity.equalsIgnoreCase("insert"))
 			{
 				if(save_contract_type.equalsIgnoreCase("T") || save_contract_type.equalsIgnoreCase("C"))
 				{
 	 				String mapid[]=save_mapping_id_LTCORA_CN.split("-");
 	 				
 		 				String advance_price_usd=""+Double.parseDouble(save_priceINR2_advance_adjust)/Double.parseDouble(save_exch_rate_val);
 		 				queryString1="INSERT INTO FMS7_INV_COMPO_DTL(MAPPING_ID,INV_SEQ_NO,PRICE_CD,AMOUNT,CURRENCY,TOTAL_TARIFF,INV_AMT_INR,INV_AMT_USD,REC_FLAG,REMARK,FLAG,OPERATION,BASIC_INV_AMT_USD,BASIC_INV_AMT_INR,LTCORA_NO,LTCORA_REV_NO,FLAG_TEMP)" +
 		 						" VALUES('"+mapping_id+"','"+inv_seq_no+"','8','"+save_adjustamt+"','"+currency_id+"','0','"+save_priceINR2_advance_adjust+"','"+advance_price_usd+"','"+tmprecv+"','','Y','"+save_adjustsign+"','"+save_raw_amt_usd+"','"+save_raw_amt_inr+"','"+mapid[1]+"','"+mapid[2]+"','T') ";
 		 				////System.out.println("STEP-3:FMS7_INV_COMPO_DTL:INSERT: "+queryString1);
 		 				stmt.executeUpdate(queryString1);			
 				}
 	 			else
 	 			{	 				
 		 				String advance_price_usd=""+Double.parseDouble(save_priceINR2_advance_adjust)/Double.parseDouble(save_exch_rate_val);
 		 				queryString1="INSERT INTO FMS7_INV_COMPO_DTL(MAPPING_ID,INV_SEQ_NO,PRICE_CD,AMOUNT,CURRENCY,TOTAL_TARIFF,INV_AMT_INR,INV_AMT_USD,REC_FLAG,REMARK,FLAG,OPERATION,BASIC_INV_AMT_USD,BASIC_INV_AMT_INR,FLAG_TEMP)" +
 		 						" VALUES('"+mapping_id+"','"+inv_seq_no+"','8','"+save_adjustamt+"','"+currency_id+"','0','"+save_priceINR2_advance_adjust+"','"+advance_price_usd+"','"+tmprecv+"','','Y','"+save_adjustsign+"','"+save_raw_amt_usd+"','"+save_raw_amt_inr+"','T') ";
 		 				////System.out.println("STEP-3A:FMS7_INV_COMPO_DTL:INSERT: "+queryString1);
 		 				stmt.executeUpdate(queryString1);	
 	 			}
 			}
 			else
 			{
 				if(save_contract_type.equalsIgnoreCase("T") || save_contract_type.equalsIgnoreCase("C"))
 				{
 	 				String mapid[]=save_mapping_id_LTCORA_CN.split("-");
 	 				
 		 				String advance_price_usd=""+Double.parseDouble(save_priceINR2_advance_adjust)/Double.parseDouble(save_exch_rate_val);
 		 				queryString1="INSERT INTO FMS7_INV_COMPO_DTL(MAPPING_ID,INV_SEQ_NO,PRICE_CD,AMOUNT,CURRENCY,TOTAL_TARIFF,INV_AMT_INR,INV_AMT_USD,REC_FLAG,REMARK,FLAG,OPERATION,BASIC_INV_AMT_USD,BASIC_INV_AMT_INR,LTCORA_NO,LTCORA_REV_NO)" +
 		 						" VALUES('"+mapping_id+"','"+inv_seq_no+"','8','"+save_adjustamt+"','"+currency_id+"','0','"+save_priceINR2_advance_adjust+"','"+advance_price_usd+"','"+tmprecv+"','','Y','"+save_adjustsign+"','"+save_raw_amt_usd+"','"+save_raw_amt_inr+"','"+mapid[1]+"','"+mapid[2]+"') ";
 		 				////System.out.println("STEP-3B:FMS7_INV_COMPO_DTL:INSERT: "+queryString1);
 		 				stmt.executeUpdate(queryString1);
 		 			
 		 			
 	 				
 				}
 	 			else
 	 			{ 	 				
 		 				String advance_price_usd=""+Double.parseDouble(save_priceINR2_advance_adjust)/Double.parseDouble(save_exch_rate_val);
 		 				queryString1="INSERT INTO FMS7_INV_COMPO_DTL(MAPPING_ID,INV_SEQ_NO,PRICE_CD,AMOUNT,CURRENCY,TOTAL_TARIFF,INV_AMT_INR,INV_AMT_USD,REC_FLAG,REMARK,FLAG,OPERATION,BASIC_INV_AMT_USD,BASIC_INV_AMT_INR)" +
 		 						" VALUES('"+mapping_id+"','"+inv_seq_no+"','8','"+save_adjustamt+"','"+currency_id+"','0','"+save_priceINR2_advance_adjust+"','"+advance_price_usd+"','"+tmprecv+"','','Y','"+save_adjustsign+"','"+save_raw_amt_usd+"','"+save_raw_amt_inr+"') ";
 		 				////System.out.println("STEP-3C:FMS7_INV_COMPO_DTL:INSERT: "+queryString1);
 		 				stmt.executeUpdate(queryString1);		 			
 	 			}
 			}
 			////System.out.println("KKC ADVANCE..INSERTED...");
 			conn.commit();
 			////System.out.println("INV: ADVANCE KKC ADJUSTMENT ----Closed---------->>");
		}
		catch(Exception e)
		{
			e.printStackTrace();
			conn.rollback();
		}
	}
	
//////////////////////////////////////////////
	
	
	public void report_advance_adjustment_collection_dtls2()
	{
		try
		{
		
			Vector mst_sn_no=new Vector();
			Vector mst_sn_rev_no=new Vector();
			Vector mst_fgsa_no=new Vector();
			Vector mst_fgsa_rev_no=new Vector();
			Vector fgsano=new Vector();
			
			//SN//fgsa
			if(contract_type.equalsIgnoreCase("fgsa"))
			{
			String query1="select distinct(FGSA_NO) from FMS7_SN_MST where FLAG='T'";
			rset1=stmt1.executeQuery(query1);
			while(rset1.next())
			{
				fgsano.add(rset1.getString(1));
			}
			
			queryString="SELECT A.SN_NO, A.SN_REV_NO, A.FGSA_NO, A.FGSA_REV_NO , A.CUSTOMER_CD " +
						" FROM FMS7_SN_MST A WHERE A.FLAG='T' AND A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM "+ 
						" FMS7_SN_MST B WHERE A.SN_NO=B.SN_NO AND A.FGSA_NO=B.FGSA_NO "+ 
						" AND A.FGSA_REV_NO=B.FGSA_REV_NO AND B.FLAG='T' " +
						" AND A.CUSTOMER_CD=B.CUSTOMER_CD) AND A.CUSTOMER_CD='"+report_customer_cd+"'  "  +
						"ORDER BY A.customer_cd,A.fgsa_no,A.fgsa_rev_no,A.sn_no";
			rset=stmt.executeQuery(queryString);
			while(rset.next())
			{
				mst_sn_no.add(rset.getString(1)==null?"0":rset.getString(1));
				mst_sn_rev_no.add(rset.getString(2)==null?"0":rset.getString(2));
				mst_fgsa_no.add(rset.getString(3)==null?"0":rset.getString(3));
				mst_fgsa_rev_no.add(rset.getString(4)==null?"0":rset.getString(4));
				
			}
			
			String mapping_id="";
			
			for(int i=0;i<mst_sn_no.size();i++)
			{
				mapping_id=report_customer_cd+"-"+mst_fgsa_no.elementAt(i)+"-"+mst_fgsa_rev_no.elementAt(i)+"-"+mst_sn_no.elementAt(i)+"-"+mst_sn_rev_no.elementAt(i)+"-"+"S";
			
			String query= "select price_rate,currency_cd,flag " +
				"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
				"price_cd='1'  AND FLAG='Y' ";			
				rset1=stmt1.executeQuery(query);
				if(rset1.next())
				{
					String tempcur=rset1.getString(2)==null?"0":rset1.getString(2);
					if(tempcur.equalsIgnoreCase("1"))
						rpt_sn_adv_cur.add("INR");
					else if(tempcur.equalsIgnoreCase("2"))
						rpt_sn_adv_cur.add("USD");
					rpt_sn_adv_amt.add(rset1.getString(1)==null?"0":rset1.getString(1));
					
					rpt_sn_no.add(mst_sn_no.elementAt(i));
					rpt_sn_rev_no.add(mst_sn_rev_no.elementAt(i));
					rpt_fgsa_no.add(mst_fgsa_no.elementAt(i));
					rpt_fgsa_rev_no.add(mst_fgsa_rev_no.elementAt(i));
				}
			}
			
			fgsano1.add(rpt_fgsa_no.elementAt(0));
			/*for(int kk=0;kk<rpt_fgsa_no.size();kk++)
			{
				if(fgsano1.contains(rpt_fgsa_no.elementAt(kk)))
				{
				
				}
				else
				{
					fgsano1.add(rpt_fgsa_no.elementAt(kk));
					
				}
				
			}*/
			for(int i=0;i<rpt_sn_no.size();i++)
			{
				
				String rpt_adj_amt="";
				//String rpt_adj_cur="";
				String rpt_adj_bal="";
				//String rpt_fy_yr="";
				String rpt_inv_seq_no="";
				String rpt_inv_dt="";
				String rpt_plant_nm="";
				double tempadjamt=0;
				
				String rpt_Final_Total_Collection=rpt_sn_adv_amt.elementAt(i).toString();
				String rpt_Final_Total_Currency=rpt_sn_adv_cur.elementAt(i).toString();
				if(rpt_Final_Total_Currency.equalsIgnoreCase("1"))
					rpt_Final_Total_Currency="INR";
				else if(rpt_Final_Total_Currency.equalsIgnoreCase("2"))
					rpt_Final_Total_Currency="USD";

				String map_id=report_customer_cd+":"+rpt_fgsa_no.elementAt(i)+":"+rpt_fgsa_rev_no.elementAt(i)+":"+rpt_sn_no.elementAt(i)+":"+rpt_sn_rev_no.elementAt(i)+":%";
				String temp_Final_Total_Collection=rpt_Final_Total_Collection;
				
				String query="select flag, amount, operation, inv_seq_no, currency , mapping_id from fms7_inv_compo_dtl where mapping_id LIKE '"+map_id+"' "+ 
				" and inv_seq_no LIKE 'S%"+report_year+"' and price_cd='1'  and (flag_temp not like 'T' or flag_temp is null)";
				////System.out.println("QUERY for compo details--"+query);
				rset2=stmt2.executeQuery(query);
				
				while(rset2.next())
				{
					String amt="0",tempamt="0";
					if(rset2.getString(1).equalsIgnoreCase("Y"))
					{
						fgsano1.add(rpt_fgsa_no.elementAt(i));
						if(rset2.getString(3).equalsIgnoreCase("1"))
						{
							amt=rset2.getString(2)==null?"0":rset2.getString(2);
							//Invoice_adj_amt.add(amt);
							//rpt_adj_amt+=amt+":";
							rpt_adj_amt=amt+"";
							
							tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)-Double.parseDouble(amt));
							//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
							//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
							rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
							
						}
						else if(rset2.getString(3).equalsIgnoreCase("2"))
						{
							amt=rset2.getString(2)==null?"0":rset2.getString(2);
							//Invoice_adj_amt.add(amt);
							//rpt_adj_amt+=amt+":";
							rpt_adj_amt=amt+"";
							
							tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)+Double.parseDouble(amt));
							//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
							//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
							rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
							
						}
						temp_Final_Total_Collection=tempamt;
						//Invoice_adj_cur.add(Final_Total_Currency);
						String seq_no=rset2.getString(4);
						String tempseq_no[]=seq_no.split(":");
						String no=tempseq_no[2];
						if(no.length()==1)
							no="000"+no;
						else if(no.length()==2)
							no="00"+no;
						else if(no.length()==3)
							no="0"+no;
						else
							no=no;
						String yr=tempseq_no[1];
						//Invoice_no.add(no+"/"+yr.substring(2,4)+"-"+yr.substring(7));
						//Invoice_dt.add(tempseq_no[3]);
						//rpt_inv_seq_no+=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+":";
						//rpt_inv_dt+=tempseq_no[3]+":";
						rpt_inv_seq_no=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+"";
						rpt_inv_dt=tempseq_no[3]+"";
						
						
						String temp_plnt_seq_no[]=rset2.getString(6).split(":");
						String plnt_seq_no=temp_plnt_seq_no[temp_plnt_seq_no.length-1];
						String query2="select plant_name from fms7_customer_plant_dtl where seq_no='"+plnt_seq_no+"'";
						rset3=stmt3.executeQuery(query2);
						if(rset3.next())
						{
							//rpt_plant_nm+=(rset3.getString(1)==null?"":rset3.getString(1))+":";
							rpt_plant_nm=(rset3.getString(1)==null?"":rset3.getString(1))+"";
						}
						
						tempadjamt+=Double.parseDouble(amt);
						
						
					}
					rpt_sn_total_adj_amt.add(tempadjamt+"");
					
					report_sn_inv_seq_no.add(rpt_inv_seq_no);
					report_sn_adjusted_amt.add(rpt_adj_amt);
					report_sn_balance.add(rpt_adj_bal);
					report_sn_inv_date.add(rpt_inv_dt);
					report_sn_plant_nm.add(rpt_plant_nm);
					report_sn_no.add(rpt_sn_no.elementAt(i).toString());
					report_sn_rev_no.add(rpt_sn_rev_no.elementAt(i).toString());
					report_fgsa_no.add(rpt_fgsa_no.elementAt(i).toString());
					report_fgsa_rev_no.add(rpt_fgsa_rev_no.elementAt(i).toString());
				}
				
				
			}		
				 
			
			
			mst_sn_no.clear();
			mst_sn_rev_no.clear();
			mst_fgsa_no.clear();
			mst_fgsa_rev_no.clear();			
			}
			
//			LOA
			else if(contract_type.equalsIgnoreCase("tender"))
			{
			queryString="SELECT A.LOA_NO,A.LOA_REV_NO,A.TENDER_NO,A.CUSTOMER_CD " +
						" from FMS7_LOA_MST A WHERE A.FLAG='T' AND  " +
						" A.LOA_REV_NO=(SELECT MAX(B.LOA_REV_NO) FROM FMS7_LOA_MST B" +
						" WHERE A.LOA_NO=B.LOA_NO AND A.TENDER_NO=B.TENDER_NO AND" +
						" B.FLAG='T' AND A.CUSTOMER_CD=B.CUSTOMER_CD) AND A.CUSTOMER_CD='"+report_customer_cd+"' " +
						" order by A.customer_cd,A.tender_no,A.loa_no";
			rset=stmt.executeQuery(queryString);
			while(rset.next())
			{
				mst_sn_no.add(rset.getString(1)==null?"0":rset.getString(1));
				mst_sn_rev_no.add(rset.getString(2)==null?"0":rset.getString(2));
				mst_fgsa_no.add(rset.getString(3)==null?"0":rset.getString(3));
				mst_fgsa_rev_no.add("0");
				
			}
			
			////System.out.println("--->>>"+mst_sn_no.size());
			
			String mapping_id="";
			
			for(int i=0;i<mst_sn_no.size();i++)
			{
				mapping_id=report_customer_cd+"-"+mst_fgsa_no.elementAt(i)+"-"+mst_fgsa_rev_no.elementAt(i)+"-"+mst_sn_no.elementAt(i)+"-"+mst_sn_rev_no.elementAt(i)+"-"+"L";
			
				String query= "select price_rate,currency_cd,flag " +
				"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
				"price_cd='1'  AND FLAG='Y' ";	
				////System.out.println("FETCHING LOA ADJUSTMENT DETAILS-->"+query);
				rset1=stmt1.executeQuery(query);
				if(rset1.next())
				{
					String tempcur=rset1.getString(2)==null?"0":rset1.getString(2);
					if(tempcur.equalsIgnoreCase("1"))
						rpt_loa_adv_cur.add("INR");
					else if(tempcur.equalsIgnoreCase("2"))
						rpt_loa_adv_cur.add("USD");
					rpt_loa_adv_amt.add(rset1.getString(1)==null?"0":rset1.getString(1));
					
					rpt_loa_no.add(mst_sn_no.elementAt(i));
					rpt_loa_rev_no.add(mst_sn_rev_no.elementAt(i));
					rpt_tender_no.add(mst_fgsa_no.elementAt(i));
					rpt_tender_rev_no.add(mst_fgsa_rev_no.elementAt(i));
						
				}
				
				
			}
			
			tenderno1.add(rpt_tender_no.elementAt(0));
			for(int kk=0;kk<rpt_tender_no.size();kk++)
			{
				if(tenderno1.contains(rpt_tender_no.elementAt(kk)))
				{
				
				}
				else
				{
					tenderno1.add(rpt_tender_no.elementAt(kk));
					
				}
				
			}
			
			for(int i=0;i<rpt_loa_no.size();i++)
			{
				
				String rpt_adj_amt="";
				//String rpt_adj_cur="";
				String rpt_adj_bal="";
				//String rpt_fy_yr="";
				String rpt_inv_seq_no="";
				String rpt_inv_dt="";
				String rpt_plant_nm="";
				double tempadjamt=0;
				
				String rpt_Final_Total_Collection=rpt_loa_adv_amt.elementAt(i).toString();
				String rpt_Final_Total_Currency=rpt_loa_adv_cur.elementAt(i).toString();
				if(rpt_Final_Total_Currency.equalsIgnoreCase("1"))
					rpt_Final_Total_Currency="INR";
				else if(rpt_Final_Total_Currency.equalsIgnoreCase("2"))
					rpt_Final_Total_Currency="USD";
				
				

				String map_id=report_customer_cd+":"+rpt_tender_no.elementAt(i)+":"+rpt_tender_rev_no.elementAt(i)+":"+rpt_loa_no.elementAt(i)+":"+rpt_loa_rev_no.elementAt(i)+":%";
				String temp_Final_Total_Collection=rpt_Final_Total_Collection;
				
				String query="select flag, amount, operation, inv_seq_no, currency , mapping_id from fms7_inv_compo_dtl where mapping_id LIKE '"+map_id+"' "+ 
				" and inv_seq_no LIKE 'L%"+report_year+"' and price_cd='1'";
				////System.out.println("QUERY for compo details--"+query);
				rset2=stmt2.executeQuery(query);
				
				while(rset2.next())
				{
					String amt="0",tempamt="0";
					if(rset2.getString(1).equalsIgnoreCase("Y"))
					{
						
						if(rset2.getString(3).equalsIgnoreCase("1"))
						{
							amt=rset2.getString(2)==null?"0":rset2.getString(2);
							//Invoice_adj_amt.add(amt);
							rpt_adj_amt+=amt+":";
							
							tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)-Double.parseDouble(amt));
							//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
							rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
							
						}
						else if(rset2.getString(3).equalsIgnoreCase("2"))
						{
							amt=rset2.getString(2)==null?"0":rset2.getString(2);
							//Invoice_adj_amt.add(amt);
							rpt_adj_amt+=amt+":";
							
							tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)+Double.parseDouble(amt));
							//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
							rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
							
						}
						temp_Final_Total_Collection=tempamt;
						//Invoice_adj_cur.add(Final_Total_Currency);
						String seq_no=rset2.getString(4);
						String tempseq_no[]=seq_no.split(":");
						String no=tempseq_no[2];
						if(no.length()==1)
							no="000"+no;
						else if(no.length()==2)
							no="00"+no;
						else if(no.length()==3)
							no="0"+no;
						else
							no=no;
						String yr=tempseq_no[1];
						//Invoice_no.add(no+"/"+yr.substring(2,4)+"-"+yr.substring(7));
						//Invoice_dt.add(tempseq_no[3]);
						rpt_inv_seq_no+=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+":";
						rpt_inv_dt+=tempseq_no[3]+":";
						
						String temp_plnt_seq_no[]=rset2.getString(6).split(":");
						String plnt_seq_no=temp_plnt_seq_no[temp_plnt_seq_no.length-1];
						String query2="select plant_name from fms7_customer_plant_dtl where seq_no='"+plnt_seq_no+"'";
						rset3=stmt3.executeQuery(query2);
						if(rset3.next())
						{
							rpt_plant_nm+=(rset3.getString(1)==null?"":rset3.getString(1))+":";
						}
						
						tempadjamt+=Double.parseDouble(amt);
					}
				}
				rpt_loa_total_adj_amt.add(tempadjamt+"");
				report_loa_inv_seq_no.add(rpt_inv_seq_no);
				report_loa_adjusted_amt.add(rpt_adj_amt);
				report_loa_balance.add(rpt_adj_bal);
				report_loa_inv_date.add(rpt_inv_dt);
				report_loa_plant_nm.add(rpt_plant_nm);
//				report_sn_no.add(rpt_sn_no.elementAt(i).toString());
//				report_sn_rev_no.add(rpt_sn_rev_no.elementAt(i).toString());
//				report_fgsa_no.add(rpt_fgsa_no.elementAt(i).toString());
//				report_fgsa_rev_no.add(rpt_fgsa_rev_no.elementAt(i).toString());
			}
			
			mst_sn_no.clear();
			mst_sn_rev_no.clear();
			mst_fgsa_no.clear();
			mst_fgsa_rev_no.clear();	
			}
			else if(contract_type.equalsIgnoreCase("regas"))
			{
			//Re gas
			queryString="SELECT A.cargo_seq_no, A.re_gas_no,A.re_gas_rev_no,A.CUSTOMER_CD " +
					" from fms7_re_gas_cargo_dtl A WHERE A.FLAG='Y' AND " +
					" A.re_gas_rev_no=(SELECT MAX(B.re_gas_rev_no) FROM fms7_re_gas_cargo_dtl B" +
					" WHERE A.re_gas_no=B.re_gas_no AND A.cargo_seq_no=B.cargo_seq_no " +
					" AND B.FLAG='Y' AND A.CUSTOMER_CD=B.CUSTOMER_CD) AND A.CUSTOMER_CD='"+report_customer_cd+"' " +
					" order by A.customer_cd,A.re_gas_no,A.cargo_seq_no";
			rset=stmt.executeQuery(queryString);
			while(rset.next())
			{
				mst_sn_no.add(rset.getString(1)==null?"0":rset.getString(1));
				mst_sn_rev_no.add("0");
				mst_fgsa_no.add(rset.getString(2)==null?"0":rset.getString(2));
				mst_fgsa_rev_no.add(rset.getString(3)==null?"0":rset.getString(3));
				
			}
			String mapping_id="";
			
			for(int i=0;i<mst_sn_no.size();i++)
			{
				mapping_id=report_customer_cd+"-"+mst_fgsa_no.elementAt(i)+"-"+mst_fgsa_rev_no.elementAt(i)+"-"+mst_sn_no.elementAt(i)+"-"+mst_sn_rev_no.elementAt(i)+"-"+"R";
			
				String query= "select price_rate,currency_cd,flag " +
				"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
				"price_cd='1'  AND FLAG='Y' ";	
				////System.out.println("FETCHING LOA ADJUSTMENT DETAILS-->"+query);
				rset1=stmt1.executeQuery(query);
				if(rset1.next())
				{
					String tempcur=rset1.getString(2)==null?"0":rset1.getString(2);
					if(tempcur.equalsIgnoreCase("1"))
						rpt_regas_adv_cur.add("INR");
					else if(tempcur.equalsIgnoreCase("2"))
						rpt_regas_adv_cur.add("USD");
					rpt_regas_adv_amt.add(rset1.getString(1)==null?"0":rset1.getString(1));
					
					rpt_regas_cargo_no.add(mst_sn_no.elementAt(i));
					rpt_regas_cargo_rev_no.add(mst_sn_rev_no.elementAt(i));
					rpt_regas_no.add(mst_fgsa_no.elementAt(i));
					rpt_regas_rev_no.add(mst_fgsa_rev_no.elementAt(i));
						
				}
			}
			regasno1.add(rpt_regas_no.elementAt(0));
			for(int kk=0;kk<rpt_regas_no.size();kk++)
			{
				if(regasno1.contains(rpt_regas_no.elementAt(kk)))
				{
				
				}
				else
				{
					regasno1.add(rpt_regas_no.elementAt(kk));
					
				}
				
			}
		

		for(int i=0;i<rpt_regas_no.size();i++)
		{
			
			String rpt_adj_amt="";
			//String rpt_adj_cur="";
			String rpt_adj_bal="";
			//String rpt_fy_yr="";
			String rpt_inv_seq_no="";
			String rpt_inv_dt="";
			String rpt_plant_nm="";
			double tempadjamt=0;
			
			String rpt_Final_Total_Collection=rpt_regas_adv_amt.elementAt(i).toString();
			String rpt_Final_Total_Currency=rpt_regas_adv_cur.elementAt(i).toString();
			if(rpt_Final_Total_Currency.equalsIgnoreCase("1"))
				rpt_Final_Total_Currency="INR";
			else if(rpt_Final_Total_Currency.equalsIgnoreCase("2"))
				rpt_Final_Total_Currency="USD";
			
			
		
			String map_id=report_customer_cd+":"+rpt_regas_no.elementAt(i)+":"+rpt_regas_rev_no.elementAt(i)+":"+rpt_regas_cargo_no.elementAt(i)+":"+rpt_regas_cargo_rev_no.elementAt(i)+":%";
			String temp_Final_Total_Collection=rpt_Final_Total_Collection;
			
			String query="select flag, amount, operation, inv_seq_no, currency , mapping_id from fms7_inv_compo_dtl where mapping_id LIKE '"+map_id+"' "+ 
			" and inv_seq_no LIKE 'R%"+report_year+"' and price_cd='1'";
			////System.out.println("QUERY for compo details RE GAS--"+query);
			rset2=stmt2.executeQuery(query);
			
			while(rset2.next())
			{
				String amt="0",tempamt="0";
				if(rset2.getString(1).equalsIgnoreCase("Y"))
				{
					
					if(rset2.getString(3).equalsIgnoreCase("1"))
					{
						amt=rset2.getString(2)==null?"0":rset2.getString(2);
						//Invoice_adj_amt.add(amt);
						rpt_adj_amt+=amt+":";
						
						tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)-Double.parseDouble(amt));
						//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
						rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
					}
					else if(rset2.getString(3).equalsIgnoreCase("2"))
					{
						amt=rset2.getString(2)==null?"0":rset2.getString(2);
						//Invoice_adj_amt.add(amt);
						rpt_adj_amt+=amt+":";
						
						tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)+Double.parseDouble(amt));
						//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
						rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
						
					}
					temp_Final_Total_Collection=tempamt;
					//Invoice_adj_cur.add(Final_Total_Currency);
					String seq_no=rset2.getString(4);
					String tempseq_no[]=seq_no.split(":");
					String no=tempseq_no[2];
					if(no.length()==1)
						no="000"+no;
					else if(no.length()==2)
						no="00"+no;
					else if(no.length()==3)
						no="0"+no;
					else
						no=no;
					String yr=tempseq_no[1];
					//Invoice_no.add(no+"/"+yr.substring(2,4)+"-"+yr.substring(7));
					//Invoice_dt.add(tempseq_no[3]);
					rpt_inv_seq_no+=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+":";
					rpt_inv_dt+=tempseq_no[3]+":";
					
					String temp_plnt_seq_no[]=rset2.getString(6).split(":");
					String plnt_seq_no=temp_plnt_seq_no[temp_plnt_seq_no.length-1];
					String query2="select plant_name from fms7_customer_plant_dtl where seq_no='"+plnt_seq_no+"'";
					rset3=stmt3.executeQuery(query2);
					if(rset3.next())
					{
						rpt_plant_nm+=(rset3.getString(1)==null?"":rset3.getString(1))+":";
					}
					tempadjamt+=Double.parseDouble(amt);
					
					
					
				}
			}
			rpt_regas_total_adj_amt.add(tempadjamt+"");
			report_regas_inv_seq_no.add(rpt_inv_seq_no);
			report_regas_adjusted_amt.add(rpt_adj_amt);
			report_regas_balance.add(rpt_adj_bal);
			report_regas_inv_date.add(rpt_inv_dt);
			report_regas_plant_nm.add(rpt_plant_nm);
			
		}
				
			}
			else if(contract_type.equalsIgnoreCase("LTCORA"))
			{
			//LTCORA
				/*Vector mst_temp_mapping_id=new Vector();
			queryString="SELECT A.cargo_seq_no, A.re_gas_no,A.re_gas_rev_no,A.CUSTOMER_CD " +
					" from fms7_re_gas_cargo_dtl A WHERE A.FLAG='Y' AND " +
					" A.re_gas_rev_no=(SELECT MAX(B.re_gas_rev_no) FROM fms7_re_gas_cargo_dtl B" +
					" WHERE A.re_gas_no=B.re_gas_no AND A.cargo_seq_no=B.cargo_seq_no " +
					" AND B.FLAG='Y' AND A.CUSTOMER_CD=B.CUSTOMER_CD) AND A.CUSTOMER_CD='"+report_customer_cd+"' " +
					" order by A.customer_cd,A.re_gas_no,A.cargo_seq_no";
			
			queryString ="select A.cargo_seq_no,C.AGREEMENT_NO," +
					" C.REV_NO,C.CUSTOMER_CD,A.MAPPING_ID " +
					" from FMS8_LNG_REGAS_CARGO_DTL A, FMS8_LNG_REGAS_MST C " +
					" where " +
					" A.MAPPING_ID=C.MAPPING_ID " +
					" AND C.CN_NO='0' AND C.CN_REV_NO='0'" +
					" AND C.REV_NO=(SELECT MAX(B.REV_NO) FROM FMS8_LNG_REGAS_MST B where " +
					" C.agreement_no=B.agreement_no AND C.customer_cd=B.customer_cd AND B.CN_NO='0' AND B.CN_REV_NO='0') AND a.mapping_id=C.mapping_id" +
					" order by by c.customer_cd,C.re_gas_no,C.cargo_seq_no";
			rset=stmt.executeQuery(queryString);
			while(rset.next())
			{
				mst_sn_no.add(rset.getString(1)==null?"0":rset.getString(1));
				mst_sn_rev_no.add("0");
				mst_fgsa_no.add(rset.getString(2)==null?"0":rset.getString(2));
				mst_fgsa_rev_no.add(rset.getString(3)==null?"0":rset.getString(3));
				mst_temp_mapping_id.add(rset.getString(4)==null?"0":rset.getString(4));
				
			}
			String mapping_id="";
			
			for(int i=0;i<mst_sn_no.size();i++)
			{
				mapping_id=report_customer_cd+"-"+mst_fgsa_no.elementAt(i)+"-"+mst_fgsa_rev_no.elementAt(i)+"-"+mst_sn_no.elementAt(i)+"-"+mst_sn_rev_no.elementAt(i)+"-"+"T";
				String temp_ltcora_no[]=mst_temp_mapping_id.elementAt(i).toString().split("-");
				
				String query= "select price_rate,currency_cd,flag " +
				"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
				"price_cd='1' and ltcora_no='"+temp_ltcora_no[1]+"' and ltcora_rev_no='"+temp_ltcora_no[2]+"'";	
				////System.out.println("FETCHING LOA ADJUSTMENT DETAILS-->"+query);
				rset1=stmt1.executeQuery(query);
				if(rset1.next())
				{
					String tempcur=rset1.getString(2)==null?"0":rset1.getString(2);
					if(tempcur.equalsIgnoreCase("1"))
						rpt_ltcora_adv_cur.add("INR");
					else if(tempcur.equalsIgnoreCase("2"))
						rpt_ltcora_adv_cur.add("USD");
					rpt_ltcora_adv_amt.add(rset1.getString(1)==null?"0":rset1.getString(1));
					
					rpt_ltcora_cargo_no.add(mst_sn_no.elementAt(i));
					rpt_ltcora_cargo_rev_no.add(mst_sn_rev_no.elementAt(i));
					rpt_ltcora_no.add(mst_fgsa_no.elementAt(i));
					rpt_ltcora_rev_no.add(mst_fgsa_rev_no.elementAt(i));
						
				}
			}
			ltcorano1.add(rpt_ltcora_no.elementAt(0));
			for(int kk=0;kk<rpt_ltcora_no.size();kk++)
			{
				if(ltcorano1.contains(rpt_ltcora_no.elementAt(kk)))
				{
				
				}
				else
				{
					ltcorano1.add(rpt_ltcora_no.elementAt(kk));
					
				}
				
			}
		

		for(int i=0;i<rpt_ltcora_no.size();i++)
		{
			
			String rpt_adj_amt="";
			//String rpt_adj_cur="";
			String rpt_adj_bal="";
			//String rpt_fy_yr="";
			String rpt_inv_seq_no="";
			String rpt_inv_dt="";
			String rpt_plant_nm="";
			double tempadjamt=0;
			
			String rpt_Final_Total_Collection=rpt_ltcora_adv_amt.elementAt(i).toString();
			String rpt_Final_Total_Currency=rpt_ltcora_adv_cur.elementAt(i).toString();
			if(rpt_Final_Total_Currency.equalsIgnoreCase("1"))
				rpt_Final_Total_Currency="INR";
			else if(rpt_Final_Total_Currency.equalsIgnoreCase("2"))
				rpt_Final_Total_Currency="USD";
			
			
		
			String map_id=report_customer_cd+":"+rpt_ltcora_no.elementAt(i)+":"+rpt_ltcora_rev_no.elementAt(i)+":"+rpt_ltcora_cargo_no.elementAt(i)+":"+rpt_ltcora_cargo_rev_no.elementAt(i)+":%";
			String temp_Final_Total_Collection=rpt_Final_Total_Collection;
			
			String query="select flag, amount, operation, inv_seq_no, currency , mapping_id from fms7_inv_compo_dtl where mapping_id LIKE '"+map_id+"' "+ 
			" and inv_seq_no LIKE 'T%"+report_year+"' and price_cd='1'";
			////System.out.println("QUERY for compo details RE GAS--"+query);
			rset2=stmt2.executeQuery(query);
			
			while(rset2.next())
			{
				String amt="0",tempamt="0";
				if(rset2.getString(1).equalsIgnoreCase("Y"))
				{
					
					if(rset2.getString(3).equalsIgnoreCase("1"))
					{
						amt=rset2.getString(2)==null?"0":rset2.getString(2);
						//Invoice_adj_amt.add(amt);
						rpt_adj_amt+=amt+":";
						
						tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)-Double.parseDouble(amt));
						//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
						rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
					}
					else if(rset2.getString(3).equalsIgnoreCase("2"))
					{
						amt=rset2.getString(2)==null?"0":rset2.getString(2);
						//Invoice_adj_amt.add(amt);
						rpt_adj_amt+=amt+":";
						
						tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)+Double.parseDouble(amt));
						//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
						rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
						
					}
					temp_Final_Total_Collection=tempamt;
					//Invoice_adj_cur.add(Final_Total_Currency);
					String seq_no=rset2.getString(4);
					String tempseq_no[]=seq_no.split(":");
					String no=tempseq_no[2];
					if(no.length()==1)
						no="000"+no;
					else if(no.length()==2)
						no="00"+no;
					else if(no.length()==3)
						no="0"+no;
					else
						no=no;
					String yr=tempseq_no[1];
					//Invoice_no.add(no+"/"+yr.substring(2,4)+"-"+yr.substring(7));
					//Invoice_dt.add(tempseq_no[3]);
					rpt_inv_seq_no+=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+":";
					rpt_inv_dt+=tempseq_no[3]+":";
					
					String temp_plnt_seq_no[]=rset2.getString(6).split(":");
					String plnt_seq_no=temp_plnt_seq_no[temp_plnt_seq_no.length-1];
					String query2="select plant_name from fms7_customer_plant_dtl where seq_no='"+plnt_seq_no+"'";
					rset3=stmt3.executeQuery(query2);
					if(rset3.next())
					{
						rpt_plant_nm+=(rset3.getString(1)==null?"":rset3.getString(1))+":";
					}
					tempadjamt+=Double.parseDouble(amt);
					
					
					
				}
			}
			rpt_ltcora_total_adj_amt.add(tempadjamt+"");
			report_ltcora_inv_seq_no.add(rpt_inv_seq_no);
			report_ltcora_adjusted_amt.add(rpt_adj_amt);
			report_ltcora_balance.add(rpt_adj_bal);
			report_ltcora_inv_date.add(rpt_inv_dt);
			report_ltcora_plant_nm.add(rpt_plant_nm);
			
			
			Query for CN:::
			select TO_CHAR(A.CONTRACT_START_DT,'DD/MM/YYYY'),TO_CHAR(A.CONTRACT_END_DT,'DD/MM/YYYY'), " +
					" A.mapping_id,A.mapping_id,C.mapping_id,A.CARGO_SEQ_NO,A.QTY_TO_BE_SUPPLY, A.REGAS_TARIF ," +
					" A.cargo_ref_no ,C.CN_NO, C.cn_rev_no from FMS8_LNG_REGAS_CARGO_DTL A, FMS8_LNG_REGAS_MST C where" +
					" (A.CONTRACT_START_DT <= to_date('"+to_date+"','dd/mm/yyyy') AND " +
					" A.CONTRACT_END_DT >= to_date('"+from_date+"','dd/mm/yyyy'))  AND A.MAPPING_ID=C.MAPPING_ID" +
					" AND C.CN_NO!=0 AND C.cn_rev_no=(SELECT MAX(B.CN_REV_NO) FROM FMS8_LNG_REGAS_MST B " +
					" where C.agreement_no=B.agreement_no AND C.customer_cd=B.customer_cd AND B.CN_NO!=0 " +
					" AND B.CN_NO=C.CN_NO AND c.rev_no=B.rev_no AND B.REV_NO=(SELECT MAX(D.REV_NO) " +
					" FROM FMS8_LNG_REGAS_MST D WHERE  D.agreement_no=B.agreement_no AND " +
					" B.customer_cd=D.customer_cd AND D.CN_NO=0 AND D.agreement_no=C.agreement_no " +
					" AND D.customer_cd=C.customer_cd )) AND a.mapping_id=C.mapping_id" +
					" order by A.CONTRACT_START_DT 
			
		}*/
				
			}
			
			////System.out.println("rpt_regas_total_adj_amt-->"+rpt_regas_total_adj_amt+"<--rpt_sn_total_adj_amt-->"+rpt_sn_total_adj_amt);
		}
		catch(Exception e)
		{
			//System.out.println("Exception in report_advance_adjustment_collection_dtls Data..."+e.getMessage());
			e.printStackTrace();
		}
	}
	
	public void Generate_delete_code()
	{
		try
		{
		//	//System.out.println("metho...."+delete_code);
			
			String[] variabledate={"A","C","E","G","I","K","M","O","Q","S","U","W","Y","Z","B","D","F","H","J","L","N","P","R","T","V","X","Z","AA","BB","CC","DD"};
			String[] variablemonth={"B","D","F","H","J","L","N","P","R","T","V","X"};

			String dd="";
			String mm="";
			String yyyy="";
			String query="select to_char(sysdate,'dd/mm/yyyy') from dual";
			rset=stmt.executeQuery(query);
			if(rset.next())
			{
				String temp_date=rset.getString(1);
				String temp_date1[]=temp_date.split("/");
				dd=temp_date1[0];
				mm=temp_date1[1];
				yyyy=temp_date1[2];
			}
			
			delete_code="F"+dd+"M"+mm+"S"+variabledate[Integer.parseInt(dd)-1]+"7"+variablemonth[Integer.parseInt(mm)-1]+"2"+yyyy;
		//	//System.out.println("delete_code...."+delete_code);
			
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	
	Vector report_cn_adv_amt_tax=new Vector();
	Vector report_cn_adjusted_amt_tax=new Vector();
	Vector report_cn_balance_tax=new Vector();
	Vector rpt_cn_adv_amt_tax=new Vector();
	Vector rpt_cn_total_adj_amt_tax=new Vector();
	
	public void report_advance_adjustment_collection_dtls()
	{
		try
		{
		//	//System.out.println("Signing Date Fetch Query For TYPE--- = "+DRCRcustomer_Attach_Exchng_Rate_Dts1);
	
			
			
			Vector mst_sn_no=new Vector();
			Vector mst_sn_rev_no=new Vector();
			Vector mst_fgsa_no=new Vector();
			Vector mst_fgsa_rev_no=new Vector();
			//Vector report_sn_fy_yr=new Vector();
			
			//SN
			queryString="SELECT A.SN_NO, A.SN_REV_NO, A.FGSA_NO, A.FGSA_REV_NO , A.CUSTOMER_CD " +
						" FROM FMS7_SN_MST A WHERE A.FLAG='T' AND A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM "+ 
						" FMS7_SN_MST B WHERE A.SN_NO=B.SN_NO AND A.FGSA_NO=B.FGSA_NO "+ 
						" AND A.FGSA_REV_NO=B.FGSA_REV_NO AND B.FLAG='T' " +
						" AND A.CUSTOMER_CD=B.CUSTOMER_CD) AND A.CUSTOMER_CD='"+report_customer_cd+"'  "  +
						"ORDER BY A.customer_cd,A.fgsa_no,A.fgsa_rev_no,A.sn_no";
			rset=stmt.executeQuery(queryString);
			while(rset.next())
			{
				mst_sn_no.add(rset.getString(1)==null?"0":rset.getString(1));
				mst_sn_rev_no.add(rset.getString(2)==null?"0":rset.getString(2));
				mst_fgsa_no.add(rset.getString(3)==null?"0":rset.getString(3));
				mst_fgsa_rev_no.add(rset.getString(4)==null?"0":rset.getString(4));
				
			}
			////System.out.println();
			
			String mapping_id="";
			
			for(int i=0;i<mst_sn_no.size();i++)
			{
				mapping_id=report_customer_cd+"-"+mst_fgsa_no.elementAt(i)+"-"+mst_fgsa_rev_no.elementAt(i)+"-"+mst_sn_no.elementAt(i)+"-"+mst_sn_rev_no.elementAt(i)+"-"+"S";
			
				String query= "select price_rate,currency_cd,flag " +
				"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
				"price_cd='1'  AND FLAG='Y' ";			
				rset1=stmt1.executeQuery(query);
				if(rset1.next())
				{
					String tempcur=rset1.getString(2)==null?"0":rset1.getString(2);
					if(tempcur.equalsIgnoreCase("1"))
						rpt_sn_adv_cur.add("INR");
					else if(tempcur.equalsIgnoreCase("2"))
						rpt_sn_adv_cur.add("USD");
					rpt_sn_adv_amt.add(rset1.getString(1)==null?"0":rset1.getString(1));
					
					rpt_sn_no.add(mst_sn_no.elementAt(i));
					rpt_sn_rev_no.add(mst_sn_rev_no.elementAt(i));
					rpt_fgsa_no.add(mst_fgsa_no.elementAt(i));
					rpt_fgsa_rev_no.add(mst_fgsa_rev_no.elementAt(i));
				}
			}
			int c1=0;
			for(int i=0;i<rpt_sn_no.size();i++)
			{
				
				String rpt_adj_amt="";
				//String rpt_adj_cur="";
				String rpt_adj_bal="";
				//String rpt_fy_yr="";
				String rpt_inv_seq_no="";
				String rpt_inv_dt="";
				String rpt_plant_nm="";
				double tempadjamt=0;
				
				String rpt_Final_Total_Collection=rpt_sn_adv_amt.elementAt(i).toString();
				String rpt_Final_Total_Currency=rpt_sn_adv_cur.elementAt(i).toString();
				if(rpt_Final_Total_Currency.equalsIgnoreCase("1"))
					rpt_Final_Total_Currency="INR";
				else if(rpt_Final_Total_Currency.equalsIgnoreCase("2"))
					rpt_Final_Total_Currency="USD";

				String map_id=report_customer_cd+":"+rpt_fgsa_no.elementAt(i)+":"+rpt_fgsa_rev_no.elementAt(i)+":"+rpt_sn_no.elementAt(i)+":"+rpt_sn_rev_no.elementAt(i)+":%";
				String temp_Final_Total_Collection=rpt_Final_Total_Collection;
				
				String query="select flag, amount, operation, inv_seq_no, currency , mapping_id from fms7_inv_compo_dtl where mapping_id LIKE '"+map_id+"' "+ 
				" and inv_seq_no LIKE 'S%"+report_year+"' and price_cd='1'  and (flag_temp not like 'T' or flag_temp is null) " +
				" order by decode(substr(inv_seq_no,14,1),':',CAST(substr(inv_seq_no,13,1) AS INT)), " +
				" decode(substr(inv_seq_no,15,1),':',CAST(substr(inv_seq_no,13,2) AS INT)) ,"
				+ "decode(substr(inv_seq_no,16,1),':',CAST(substr(inv_seq_no,13,3) AS INT)), "
				+ "decode(substr(inv_seq_no,17,1),':',CAST(substr(inv_seq_no,13,4) AS INT))";
				////System.out.println("QUERY for compo detailsSN--"+query);
				rset2=stmt2.executeQuery(query);
				
				while(rset2.next())
				{
					String amt="0",tempamt="0";
					if(rset2.getString(1).equalsIgnoreCase("Y"))
					{
						
						if(rset2.getString(3).equalsIgnoreCase("1"))
						{
							amt=rset2.getString(2)==null?"0":rset2.getString(2);
							//Invoice_adj_amt.add(amt);
							//rpt_adj_amt+=amt+":";
							rpt_adj_amt=amt+"";
							
							tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)-Double.parseDouble(amt));
							//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
							//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
							rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
							
						}
						else if(rset2.getString(3).equalsIgnoreCase("2"))
						{
							amt=rset2.getString(2)==null?"0":rset2.getString(2);
							//Invoice_adj_amt.add(amt);
							//rpt_adj_amt+=amt+":";
							rpt_adj_amt=amt+"";
							
							tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)+Double.parseDouble(amt));
							//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
							//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
							rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
							
						}
						temp_Final_Total_Collection=tempamt;
						//Invoice_adj_cur.add(Final_Total_Currency);
						String seq_no=rset2.getString(4);
						String tempseq_no[]=seq_no.split(":");
						String no=tempseq_no[2];
						if(no.length()==1)
							no="000"+no;
						else if(no.length()==2)
							no="00"+no;
						else if(no.length()==3)
							no="0"+no;
						else
							no=no;
						String yr=tempseq_no[1];
						//Invoice_no.add(no+"/"+yr.substring(2,4)+"-"+yr.substring(7));
						//Invoice_dt.add(tempseq_no[3]);
						//rpt_inv_seq_no+=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+":";
						//rpt_inv_dt+=tempseq_no[3]+":";
						rpt_inv_seq_no=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+"";
						rpt_inv_dt=tempseq_no[3]+"";
						
						
						String temp_map_id=rset2.getString(6)==null?"":rset2.getString(6);
						String temp_map_id1[]=temp_map_id.split(":");
						String q1="select adv_inv_no,TO_CHAR(adv_inv_dt,'DD/MM/YYYY') from DLNG_INVOICE_MST where customer_cd='"+temp_map_id1[0]+"' and " +
								" fgsa_no='"+temp_map_id1[1]+"' and fgsa_rev_no='"+temp_map_id1[2]+"' " +
								" and sn_no='"+temp_map_id1[3]+"' and sn_rev_no='"+temp_map_id1[4]+"' and plant_seq_no='"+temp_map_id1[5]+"' " +
								" and contract_type='S' and hlpl_inv_seq_no='"+tempseq_no[2]+"' " +
								" and financial_year='"+tempseq_no[1]+"'";
						////System.out.println("QUery---->>  "+q1);
						rset4=stmt4.executeQuery(q1);
						if(rset4.next())
						{
							report_sn_adv_inv_no.add(rset4.getString(1)==null?"":rset4.getString(1));
							report_sn_adv_inv_dt.add(rset4.getString(2)==null?"":rset4.getString(2));
						}
						else
						{
							report_sn_adv_inv_no.add("");
							report_sn_adv_inv_dt.add("");
						}
						////System.out.println("report_sn_adv_inv_no...."+report_sn_adv_inv_no+"---"+report_sn_adv_inv_no.elementAt(c1)+".....c1....."+c1);
						if(!mst_report_sn_adv_inv_no.contains(report_sn_adv_inv_no.elementAt(c1)+""))
						{
							mst_report_sn_adv_inv_no.add(report_sn_adv_inv_no.elementAt(c1));
						}
						String temp_plnt_seq_no[]=rset2.getString(6).split(":");
						String plnt_seq_no=temp_plnt_seq_no[temp_plnt_seq_no.length-1];
						String query2="select plant_name from fms7_customer_plant_dtl where seq_no='"+plnt_seq_no+"' and customer_cd='"+report_customer_cd+"'";
						rset3=stmt3.executeQuery(query2);
						if(rset3.next())
						{
							//rpt_plant_nm+=(rset3.getString(1)==null?"":rset3.getString(1))+":";
							rpt_plant_nm=(rset3.getString(1)==null?"":rset3.getString(1))+"";
						}
						
						tempadjamt+=Double.parseDouble(amt);
						rpt_sn_total_adj_amt.add(tempadjamt+"");
						if((""+rpt_sn_adv_cur.elementAt(i)).equalsIgnoreCase("INR"))
							report_sn_adv_cur.add(" Rs");
						else if((""+rpt_sn_adv_cur.elementAt(i)).equalsIgnoreCase("USD"))
							report_sn_adv_cur.add(" $");
						
						//report_sn_adv_cur.add(rpt_sn_adv_cur.elementAt(c).toString());
						report_sn_adv_amt.add(rpt_sn_adv_amt.elementAt(i).toString());
						report_sn_inv_seq_no.add(rpt_inv_seq_no);
						report_sn_adjusted_amt.add(rpt_adj_amt);
						report_sn_balance.add(rpt_adj_bal);
						report_sn_inv_date.add(rpt_inv_dt);
						report_sn_plant_nm.add(rpt_plant_nm);
						report_sn_no.add(rpt_sn_no.elementAt(i).toString());
						report_sn_rev_no.add(rpt_sn_rev_no.elementAt(i).toString());
						report_fgsa_no.add(rpt_fgsa_no.elementAt(i).toString());
						report_fgsa_rev_no.add(rpt_fgsa_rev_no.elementAt(i).toString());
						c1++;	
					}
				}
			}		
			
			mst_sn_no.clear();
			mst_sn_rev_no.clear();
			mst_fgsa_no.clear();
			mst_fgsa_rev_no.clear();			
			
			//LOA
			queryString="SELECT A.LOA_NO,A.LOA_REV_NO,A.TENDER_NO,A.CUSTOMER_CD " +
						" from FMS7_LOA_MST A WHERE A.FLAG='T' AND  " +
						" A.LOA_REV_NO=(SELECT MAX(B.LOA_REV_NO) FROM FMS7_LOA_MST B" +
						" WHERE A.LOA_NO=B.LOA_NO AND A.TENDER_NO=B.TENDER_NO AND" +
						" B.FLAG='T' AND A.CUSTOMER_CD=B.CUSTOMER_CD) AND A.CUSTOMER_CD='"+report_customer_cd+"' " +
						" order by A.customer_cd,A.tender_no,A.loa_no";
			rset=stmt.executeQuery(queryString);
			while(rset.next())
			{
				mst_sn_no.add(rset.getString(1)==null?"0":rset.getString(1));
				mst_sn_rev_no.add(rset.getString(2)==null?"0":rset.getString(2));
				mst_fgsa_no.add(rset.getString(3)==null?"0":rset.getString(3));
				mst_fgsa_rev_no.add("0");
			}
			mapping_id="";
			
			for(int i=0;i<mst_sn_no.size();i++)
			{
				mapping_id=report_customer_cd+"-"+mst_fgsa_no.elementAt(i)+"-"+mst_fgsa_rev_no.elementAt(i)+"-"+mst_sn_no.elementAt(i)+"-"+mst_sn_rev_no.elementAt(i)+"-"+"L";
			
				String query= "select price_rate,currency_cd,flag " +
				"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
				"price_cd='1'  AND FLAG='Y' ";	
				////System.out.println("FETCHING LOA ADJUSTMENT DETAILS-->"+query);
				rset1=stmt1.executeQuery(query);
				if(rset1.next())
				{
					String tempcur=rset1.getString(2)==null?"0":rset1.getString(2);
					if(tempcur.equalsIgnoreCase("1"))
						rpt_loa_adv_cur.add("INR");
					else if(tempcur.equalsIgnoreCase("2"))
						rpt_loa_adv_cur.add("USD");
					rpt_loa_adv_amt.add(rset1.getString(1)==null?"0":rset1.getString(1));
					
					rpt_loa_no.add(mst_sn_no.elementAt(i));
					rpt_loa_rev_no.add(mst_sn_rev_no.elementAt(i));
					rpt_tender_no.add(mst_fgsa_no.elementAt(i));
					rpt_tender_rev_no.add(mst_fgsa_rev_no.elementAt(i));
				}
			}
			
			int c=0;
			for(int i=0;i<rpt_loa_no.size();i++)
			{
				
				String rpt_adj_amt="";
				//String rpt_adj_cur="";
				String rpt_adj_bal="";
				//String rpt_fy_yr="";
				String rpt_inv_seq_no="";
				String rpt_inv_dt="";
				String rpt_plant_nm="";
				double tempadjamt=0;
				
				String rpt_Final_Total_Collection=rpt_loa_adv_amt.elementAt(i).toString();
				String rpt_Final_Total_Currency=rpt_loa_adv_cur.elementAt(i).toString();
				if(rpt_Final_Total_Currency.equalsIgnoreCase("1"))
					rpt_Final_Total_Currency="INR";
				else if(rpt_Final_Total_Currency.equalsIgnoreCase("2"))
					rpt_Final_Total_Currency="USD";

				String map_id=report_customer_cd+":"+rpt_tender_no.elementAt(i)+":"+rpt_tender_rev_no.elementAt(i)+":"+rpt_loa_no.elementAt(i)+":"+rpt_loa_rev_no.elementAt(i)+":%";
				String temp_Final_Total_Collection=rpt_Final_Total_Collection;
				
				String query="select flag, amount, operation, inv_seq_no, currency , mapping_id from fms7_inv_compo_dtl where mapping_id LIKE '"+map_id+"' "+ 
				" and inv_seq_no LIKE 'L%"+report_year+"' and price_cd='1'  and (flag_temp not like 'T' or flag_temp is null) " +
				" order by decode(substr(inv_seq_no,14,1),':',CAST(substr(inv_seq_no,13,1) AS INT)), " +
				" decode(substr(inv_seq_no,15,1),':',CAST(substr(inv_seq_no,13,2) AS INT)),"
				+ " decode(substr(inv_seq_no,16,1),':',CAST(substr(inv_seq_no,13,3) AS INT)), "
				+ " decode(substr(inv_seq_no,17,1),':',CAST(substr(inv_seq_no,13,4) AS INT)) ";
				////System.out.println("QUERY for compo details--"+query);
				rset2=stmt2.executeQuery(query);
				//int c=0;
				while(rset2.next())
				{
					String amt="0",tempamt="0";
					if(rset2.getString(1).equalsIgnoreCase("Y"))
					{
						if(rset2.getString(3).equalsIgnoreCase("1"))
						{
							amt=rset2.getString(2)==null?"0":rset2.getString(2);
							//Invoice_adj_amt.add(amt);
							//rpt_adj_amt+=amt+":";
							rpt_adj_amt=amt+"";
							
							tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)-Double.parseDouble(amt));
							//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
							//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
							rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
							
						}
						else if(rset2.getString(3).equalsIgnoreCase("2"))
						{
							amt=rset2.getString(2)==null?"0":rset2.getString(2);
							//Invoice_adj_amt.add(amt);
							//rpt_adj_amt+=amt+":";
							rpt_adj_amt=amt+"";
							
							tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)+Double.parseDouble(amt));
							//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
							//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
							rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
							
						}
						temp_Final_Total_Collection=tempamt;
						//Invoice_adj_cur.add(Final_Total_Currency);
						String seq_no=rset2.getString(4);
						String tempseq_no[]=seq_no.split(":");
						String no=tempseq_no[2];
						if(no.length()==1)
							no="000"+no;
						else if(no.length()==2)
							no="00"+no;
						else if(no.length()==3)
							no="0"+no;
						else
							no=no;
						String yr=tempseq_no[1];
						//Invoice_no.add(no+"/"+yr.substring(2,4)+"-"+yr.substring(7));
						//Invoice_dt.add(tempseq_no[3]);
						//rpt_inv_seq_no+=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+":";
						//rpt_inv_dt+=tempseq_no[3]+":";
						rpt_inv_seq_no=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+"";
						rpt_inv_dt=tempseq_no[3]+"";
						
						String temp_map_id=rset2.getString(6)==null?"":rset2.getString(6);
						String temp_map_id1[]=temp_map_id.split(":");
						String q1="select adv_inv_no,TO_CHAR(adv_inv_dt,'DD/MM/YYYY') from DLNG_INVOICE_MST where customer_cd='"+temp_map_id1[0]+"' and " +
								" fgsa_no='"+temp_map_id1[1]+"' and fgsa_rev_no='"+temp_map_id1[2]+"' " +
								" and sn_no='"+temp_map_id1[3]+"' and sn_rev_no='"+temp_map_id1[4]+"' and plant_seq_no='"+temp_map_id1[5]+"' " +
								" and contract_type='L' and hlpl_inv_seq_no='"+tempseq_no[2]+"' " +
								" and financial_year='"+tempseq_no[1]+"'";
						
						rset4=stmt4.executeQuery(q1);
						if(rset4.next())
						{
							report_loa_adv_inv_no.add(rset4.getString(1)==null?"":rset4.getString(1));
							report_loa_adv_inv_dt.add(rset4.getString(2)==null?"":rset4.getString(2));
						}
						else
						{
							report_loa_adv_inv_no.add("");
							report_loa_adv_inv_dt.add("");
						}
						if(!mst_report_loa_adv_inv_no.contains(report_loa_adv_inv_no.elementAt(c)+""))
						{
							mst_report_loa_adv_inv_no.add(report_loa_adv_inv_no.elementAt(c));
						}
						
						String temp_plnt_seq_no[]=rset2.getString(6).split(":");
						String plnt_seq_no=temp_plnt_seq_no[temp_plnt_seq_no.length-1];
						String query2="select plant_name from fms7_customer_plant_dtl where seq_no='"+plnt_seq_no+"' and customer_cd='"+report_customer_cd+"'";
						rset3=stmt3.executeQuery(query2);
						if(rset3.next())
						{
							//rpt_plant_nm+=(rset3.getString(1)==null?"":rset3.getString(1))+":";
							rpt_plant_nm=(rset3.getString(1)==null?"":rset3.getString(1))+"";
						}
						
						tempadjamt+=Double.parseDouble(amt);
						
						rpt_loa_total_adj_amt.add(tempadjamt+"");
						if((""+rpt_loa_adv_cur.elementAt(i)).equalsIgnoreCase("INR"))
							report_loa_adv_cur.add(" Rs");
						else if((""+rpt_loa_adv_cur.elementAt(i)).equalsIgnoreCase("USD"))
							report_loa_adv_cur.add(" $");
						
						//report_loa_adv_cur.add(rpt_loa_adv_cur.elementAt(c).toString());
						report_loa_adv_amt.add(rpt_loa_adv_amt.elementAt(i).toString());
						report_loa_inv_seq_no.add(rpt_inv_seq_no);
						report_loa_adjusted_amt.add(rpt_adj_amt);
						report_loa_balance.add(rpt_adj_bal);
						report_loa_inv_date.add(rpt_inv_dt);
						report_loa_plant_nm.add(rpt_plant_nm);
						report_loa_no.add(rpt_loa_no.elementAt(i).toString());
						report_loa_rev_no.add(rpt_loa_rev_no.elementAt(i).toString());
						report_tender_no.add(rpt_tender_no.elementAt(i).toString());
						report_tender_rev_no.add(rpt_tender_rev_no.elementAt(i).toString());
						
						c++;
					}
				}
			}
			
			mst_sn_no.clear();
			mst_sn_rev_no.clear();
			mst_fgsa_no.clear();
			mst_fgsa_rev_no.clear();	
			//Re gas
			queryString="SELECT A.cargo_seq_no, A.re_gas_no,A.re_gas_rev_no,A.CUSTOMER_CD " +
					" from fms7_re_gas_cargo_dtl A WHERE A.FLAG='Y' AND " +
					" A.re_gas_rev_no=(SELECT MAX(B.re_gas_rev_no) FROM fms7_re_gas_cargo_dtl B" +
					" WHERE A.re_gas_no=B.re_gas_no AND A.cargo_seq_no=B.cargo_seq_no " +
					" AND B.FLAG='Y' AND A.CUSTOMER_CD=B.CUSTOMER_CD) AND A.CUSTOMER_CD='"+report_customer_cd+"' " +
					" order by A.customer_cd,A.re_gas_no,A.cargo_seq_no";
			rset=stmt.executeQuery(queryString);
			while(rset.next())
			{
				mst_sn_no.add(rset.getString(1)==null?"0":rset.getString(1));
				mst_sn_rev_no.add("0");
				mst_fgsa_no.add(rset.getString(2)==null?"0":rset.getString(2));
				mst_fgsa_rev_no.add(rset.getString(3)==null?"0":rset.getString(3));
			}
			
	//		//System.out.println("--->>>"+mst_sn_no.size());
			
			mapping_id="";
			
			for(int i=0;i<mst_sn_no.size();i++)
			{
				mapping_id=report_customer_cd+"-"+mst_fgsa_no.elementAt(i)+"-"+mst_fgsa_rev_no.elementAt(i)+"-"+mst_sn_no.elementAt(i)+"-"+mst_sn_rev_no.elementAt(i)+"-"+"R";
			
				String query= "select price_rate,currency_cd,flag " +
				"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
				"price_cd='1'  AND FLAG='Y' ";	
				////System.out.println("FETCHING LOA ADJUSTMENT DETAILS-->"+query);
				rset1=stmt1.executeQuery(query);
				if(rset1.next())
				{
					String tempcur=rset1.getString(2)==null?"0":rset1.getString(2);
					if(tempcur.equalsIgnoreCase("1"))
						rpt_regas_adv_cur.add("INR");
					else if(tempcur.equalsIgnoreCase("2"))
						rpt_regas_adv_cur.add("USD");
					rpt_regas_adv_amt.add(rset1.getString(1)==null?"0":rset1.getString(1));
					
					rpt_regas_cargo_no.add(mst_sn_no.elementAt(i));
					rpt_regas_cargo_rev_no.add(mst_sn_rev_no.elementAt(i));
					rpt_regas_no.add(mst_fgsa_no.elementAt(i));
					rpt_regas_rev_no.add(mst_fgsa_rev_no.elementAt(i));
				}
			}
			 c=0;
		for(int i=0;i<rpt_regas_no.size();i++)
		{
			
			String rpt_adj_amt="";
			//String rpt_adj_cur="";
			String rpt_adj_bal="";
			//String rpt_fy_yr="";
			String rpt_inv_seq_no="";
			String rpt_inv_dt="";
			String rpt_plant_nm="";
			double tempadjamt=0;
			
			String rpt_Final_Total_Collection=rpt_regas_adv_amt.elementAt(i).toString();
			String rpt_Final_Total_Currency=rpt_regas_adv_cur.elementAt(i).toString();
			if(rpt_Final_Total_Currency.equalsIgnoreCase("1"))
				rpt_Final_Total_Currency="INR";
			else if(rpt_Final_Total_Currency.equalsIgnoreCase("2"))
				rpt_Final_Total_Currency="USD";
			
			String map_id=report_customer_cd+":"+rpt_regas_no.elementAt(i)+":"+rpt_regas_rev_no.elementAt(i)+":"+rpt_regas_cargo_no.elementAt(i)+":"+rpt_regas_cargo_rev_no.elementAt(i)+":%";
			String temp_Final_Total_Collection=rpt_Final_Total_Collection;
			
			String query="select flag, amount, operation, inv_seq_no, currency , mapping_id from fms7_inv_compo_dtl where mapping_id LIKE '"+map_id+"' "+ 
			" and inv_seq_no LIKE 'R%"+report_year+"' and price_cd='1'  and (flag_temp not like 'T' or flag_temp is null) " +
			" order by decode(substr(inv_seq_no,14,1),':',CAST(substr(inv_seq_no,13,1) AS INT)), " +
			" decode(substr(inv_seq_no,15,1),':',CAST(substr(inv_seq_no,13,2) AS INT)),"
			+ "decode(substr(inv_seq_no,16,1),':',CAST(substr(inv_seq_no,13,3) AS INT)), "
			+ "decode(substr(inv_seq_no,17,1),':',CAST(substr(inv_seq_no,13,4) AS INT))";
			////System.out.println("QUERY for compo details RE GAS--"+query);
			rset2=stmt2.executeQuery(query);
			//int c=0;
			while(rset2.next())
			{
				String amt="0",tempamt="0";
				if(rset2.getString(1).equalsIgnoreCase("Y"))
				{
					
					if(rset2.getString(3).equalsIgnoreCase("1"))
					{
						amt=rset2.getString(2)==null?"0":rset2.getString(2);
						//Invoice_adj_amt.add(amt);
						//rpt_adj_amt+=amt+":";
						rpt_adj_amt=amt+"";
						
						tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)-Double.parseDouble(amt));
						//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
						//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
						rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
						
					}
					else if(rset2.getString(3).equalsIgnoreCase("2"))
					{
						amt=rset2.getString(2)==null?"0":rset2.getString(2);
						//Invoice_adj_amt.add(amt);
						///rpt_adj_amt+=amt+":";
						rpt_adj_amt=amt+"";
						
						tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)+Double.parseDouble(amt));
						//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
						//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
						rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
						
					}
					temp_Final_Total_Collection=tempamt;
					//Invoice_adj_cur.add(Final_Total_Currency);
					String seq_no=rset2.getString(4);
					String tempseq_no[]=seq_no.split(":");
					String no=tempseq_no[2];
					if(no.length()==1)
						no="000"+no;
					else if(no.length()==2)
						no="00"+no;
					else if(no.length()==3)
						no="0"+no;
					else
						no=no;
					String yr=tempseq_no[1];
					//Invoice_no.add(no+"/"+yr.substring(2,4)+"-"+yr.substring(7));
					//Invoice_dt.add(tempseq_no[3]);
					//rpt_inv_seq_no+=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+":";
					//rpt_inv_dt+=tempseq_no[3]+":";
					rpt_inv_seq_no=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+"";
					rpt_inv_dt=tempseq_no[3]+"";
					
					String temp_map_id=rset2.getString(6)==null?"":rset2.getString(6);
					String temp_map_id1[]=temp_map_id.split(":");
					String q1="select adv_inv_no,TO_CHAR(adv_inv_dt,'DD/MM/YYYY') from DLNG_INVOICE_MST where customer_cd='"+temp_map_id1[0]+"' and " +
							" fgsa_no='"+temp_map_id1[1]+"' and fgsa_rev_no='"+temp_map_id1[2]+"' " +
							" and sn_no='"+temp_map_id1[3]+"' and sn_rev_no='"+temp_map_id1[4]+"' and plant_seq_no='"+temp_map_id1[5]+"' " +
							" and contract_type='R' and hlpl_inv_seq_no='"+tempseq_no[2]+"' " +
							" and financial_year='"+tempseq_no[1]+"'";
					
					rset4=stmt4.executeQuery(q1);
					if(rset4.next())
					{
						report_regas_adv_inv_no.add(rset4.getString(1)==null?"":rset4.getString(1));
						report_regas_adv_inv_dt.add(rset4.getString(2)==null?"":rset4.getString(2));
						
						
					}
					else
					{
						report_regas_adv_inv_no.add("");
						report_regas_adv_inv_dt.add("");
					}
					if(!mst_report_regas_adv_inv_no.contains(report_regas_adv_inv_no.elementAt(c)+""))
					{
						mst_report_regas_adv_inv_no.add(report_regas_adv_inv_no.elementAt(c));
					}
					
					
					String temp_plnt_seq_no[]=rset2.getString(6).split(":");
					String plnt_seq_no=temp_plnt_seq_no[temp_plnt_seq_no.length-1];
					String query2="select plant_name from fms7_customer_plant_dtl where seq_no='"+plnt_seq_no+"' and customer_cd='"+report_customer_cd+"'";
					rset3=stmt3.executeQuery(query2);
					if(rset3.next())
					{
						//rpt_plant_nm+=(rset3.getString(1)==null?"":rset3.getString(1))+":";
						rpt_plant_nm=(rset3.getString(1)==null?"":rset3.getString(1))+"";
					}
					tempadjamt+=Double.parseDouble(amt);
					
					rpt_regas_total_adj_amt.add(tempadjamt+"");
					if((""+rpt_regas_adv_cur.elementAt(i)).equalsIgnoreCase("INR"))
						report_regas_adv_cur.add(" Rs");
					else if((""+rpt_regas_adv_cur.elementAt(i)).equalsIgnoreCase("USD"))
						report_regas_adv_cur.add(" $");
					
					//report_regas_adv_cur.add(rpt_regas_adv_cur.elementAt(c).toString());
					report_regas_adv_amt.add(rpt_regas_adv_amt.elementAt(c).toString());
					report_regas_inv_seq_no.add(rpt_inv_seq_no);
					report_regas_adjusted_amt.add(rpt_adj_amt);
					report_regas_balance.add(rpt_adj_bal);
					report_regas_inv_date.add(rpt_inv_dt);
					report_regas_plant_nm.add(rpt_plant_nm);
					report_regas_cargo_no.add(rpt_regas_cargo_no.elementAt(i).toString());
					report_regas_cargo_rev_no.add(rpt_regas_cargo_rev_no.elementAt(i).toString());
					report_regas_no.add(rpt_regas_no.elementAt(i).toString());
					report_regas_rev_no.add(rpt_regas_rev_no.elementAt(i).toString());
					c++;
				}
			}
		}
		
		////////////addedfor ltcora and cn
		mst_sn_no.clear();
		mst_sn_rev_no.clear();
		mst_fgsa_no.clear();
		mst_fgsa_rev_no.clear();	
		
		mapping_id="";
		String rpt_adj_amt="";
		//String rpt_adj_cur="";
		String rpt_adj_bal="";
		//String rpt_fy_yr="";
		String rpt_inv_seq_no="";
		String rpt_inv_dt="";
		String rpt_plant_nm="";
		double tempadjamt=0;
		
		String rpt_Final_Total_Collection="0";
		String rpt_Final_Total_Currency="";
		
		String rpt_Final_Total_Collection_Tax="0";
		String map_id=report_customer_cd+":%";
		
		Map m1=new HashMap();
		String query="select flag, amount, operation, inv_seq_no, currency , mapping_id,ltcora_no, ltcora_rev_no from fms7_inv_compo_dtl where "+ 
		" mapping_id like '"+map_id+"' and inv_seq_no LIKE 'T%"+report_year+"' and price_cd='1'  and (flag_temp not like 'T' or flag_temp is null)" +
		" order by decode(substr(inv_seq_no,14,1),':',CAST(substr(inv_seq_no,13,1) AS INT)), " +
		" decode(substr(inv_seq_no,15,1),':',CAST(substr(inv_seq_no,13,2) AS INT))," +
		" decode(substr(inv_seq_no,16,1),':',CAST(substr(inv_seq_no,13,3) AS INT)), " +
		 " decode(substr(inv_seq_no,17,1),':',CAST(substr(inv_seq_no,13,4) AS INT)) ";
		////System.out.println("QUERY for compo details LTCORA--"+query);
		rset2=stmt2.executeQuery(query);
		c=0;
		while(rset2.next())
		{
			//mapping_id=report_customer_cd+"-"+mst_fgsa_no.elementAt(i)+"-"+mst_fgsa_rev_no.elementAt(i)+"-"+mst_sn_no.elementAt(i)+"-"+mst_sn_rev_no.elementAt(i)+"-"+"T";
			String mst_temp_mapping_id=rset2.getString(6)==null?"0":rset2.getString(6);
			String temp_map_id[]=mst_temp_mapping_id.toString().split(":");
			mapping_id=temp_map_id[0]+"-"+temp_map_id[1]+"-"+temp_map_id[2]+"-"+temp_map_id[3]+"-"+temp_map_id[4]+"-"+"T";
			
			String query1= "select price_rate,currency_cd,flag " +
			"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
			"price_cd='1' and ltcora_no='"+rset2.getString(7)+"' and ltcora_rev_no='"+rset2.getString(8)+"' AND FLAG='Y' ";	
			////System.out.println("FETCHING LTCORA ADJUSTMENT DETAILS-->"+query);
			rset1=stmt1.executeQuery(query1);
			if(rset1.next())
			{
				String tempcur=rset1.getString(2)==null?"0":rset1.getString(2);
				if(tempcur.equalsIgnoreCase("1"))
					rpt_ltcora_adv_cur.add("INR");
				else if(tempcur.equalsIgnoreCase("2"))
					rpt_ltcora_adv_cur.add("USD");
				rpt_ltcora_adv_amt.add(rset1.getString(1)==null?"0":rset1.getString(1));
				
				rpt_ltcora_cargo_no.add(temp_map_id[3]);
				rpt_ltcora_cargo_rev_no.add(temp_map_id[4]);
				rpt_ltcora_no.add(temp_map_id[1]);
				rpt_ltcora_rev_no.add(temp_map_id[2]);
				
				rpt_Final_Total_Collection=rpt_ltcora_adv_amt.elementAt(c).toString();
				rpt_Final_Total_Currency=rpt_ltcora_adv_cur.elementAt(c).toString();
				if(rpt_Final_Total_Currency.equalsIgnoreCase("1"))
					rpt_Final_Total_Currency="INR";
				else if(rpt_Final_Total_Currency.equalsIgnoreCase("2"))
					rpt_Final_Total_Currency="USD";
					
			}
			String temp_Final_Total_Collection=rpt_Final_Total_Collection;
			
			String amt="0",tempamt="0";
			if(rset2.getString(1).equalsIgnoreCase("Y"))
			{
				String seq_no=rset2.getString(4);
				String tempseq_no[]=seq_no.split(":");
				String no=tempseq_no[2];
				if(no.length()==1)
					no="000"+no;
				else if(no.length()==2)
					no="00"+no;
				else if(no.length()==3)
					no="0"+no;
				else
					no=no;
				String yr=tempseq_no[1];
				//Invoice_no.add(no+"/"+yr.substring(2,4)+"-"+yr.substring(7));
				//Invoice_dt.add(tempseq_no[3]);
				//rpt_inv_seq_no+=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+":";
				//rpt_inv_dt+=tempseq_no[3]+":";
				rpt_inv_seq_no=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+"";
				rpt_inv_dt=tempseq_no[3]+"";
				
				String temp_map_id11=rset2.getString(6)==null?"":rset2.getString(6);
				String temp_map_id1[]=temp_map_id11.split(":");
				String temp_adv_inv_no="";
				String q1="select adv_inv_no,TO_CHAR(adv_inv_dt,'DD/MM/YYYY') from DLNG_INVOICE_MST where customer_cd='"+temp_map_id1[0]+"' and " +
						" fgsa_no='"+temp_map_id1[1]+"' and fgsa_rev_no='"+temp_map_id1[2]+"' " +
						" and sn_no='"+temp_map_id1[3]+"' and sn_rev_no='"+temp_map_id1[4]+"' and plant_seq_no='"+temp_map_id1[5]+"' " +
						" and contract_type='T' and hlpl_inv_seq_no='"+tempseq_no[2]+"' " +
						" and financial_year='"+tempseq_no[1]+"'";
				
				rset4=stmt4.executeQuery(q1);
				if(rset4.next())
				{
					report_ltcora_adv_inv_no.add(rset4.getString(1)==null?"":rset4.getString(1));
					report_ltcora_adv_inv_dt.add(rset4.getString(2)==null?"":rset4.getString(2));
					temp_adv_inv_no=rset4.getString(1)==null?"":rset4.getString(1);
				}
				else
				{
					report_ltcora_adv_inv_no.add("");
					report_ltcora_adv_inv_dt.add("");
					temp_adv_inv_no="";
				}
				
				String temp_Final_Total_Collection1=m1.get(temp_adv_inv_no)==null?"":""+m1.get(temp_adv_inv_no);
				if(temp_Final_Total_Collection1.equalsIgnoreCase(""))
				{
					temp_Final_Total_Collection=rpt_Final_Total_Collection;
					////System.out.println("temp_Final_Total_Collection.. if  "+temp_Final_Total_Collection);
				}
				else
				{
					temp_Final_Total_Collection=temp_Final_Total_Collection1;
					////System.out.println("temp_Final_Total_Collection.. else "+temp_Final_Total_Collection);
				}
				
							
				if(rset2.getString(3).equalsIgnoreCase("1"))
				{
					amt=rset2.getString(2)==null?"0":rset2.getString(2);
					//Invoice_adj_amt.add(amt);
					//rpt_adj_amt+=amt+":";
					rpt_adj_amt=amt+"";
					
					tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)-Double.parseDouble(amt));
					//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
					//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
					rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
					
				}
				else if(rset2.getString(3).equalsIgnoreCase("2"))
				{
					amt=rset2.getString(2)==null?"0":rset2.getString(2);
					//Invoice_adj_amt.add(amt);
					///rpt_adj_amt+=amt+":";
					rpt_adj_amt=amt+"";
					
					tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)+Double.parseDouble(amt));
					//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
					//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
					rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
					
				}
				temp_Final_Total_Collection=tempamt;
				m1.put(temp_adv_inv_no,temp_Final_Total_Collection);
				//Invoice_adj_cur.add(Final_Total_Currency);
				
				if(!mst_ltcora_regas_adv_inv_no.contains(report_ltcora_adv_inv_no.elementAt(c)+""))
				{
					mst_ltcora_regas_adv_inv_no.add(report_ltcora_adv_inv_no.elementAt(c));
				}
				
				
				String temp_plnt_seq_no[]=rset2.getString(6).split(":");
				String plnt_seq_no=temp_plnt_seq_no[temp_plnt_seq_no.length-1];
				String query2="select plant_name from fms7_customer_plant_dtl where seq_no='"+plnt_seq_no+"' and customer_cd='"+report_customer_cd+"'";
				////System.out.println("query2...."+query2);
				rset3=stmt3.executeQuery(query2);
				if(rset3.next())
				{
					//rpt_plant_nm+=(rset3.getString(1)==null?"":rset3.getString(1))+":";
					rpt_plant_nm=(rset3.getString(1)==null?"":rset3.getString(1))+"";
				}
				tempadjamt+=Double.parseDouble(amt);
				
				rpt_ltcora_total_adj_amt.add(tempadjamt+"");
				
				if((""+rpt_ltcora_adv_cur.elementAt(c)).trim().equalsIgnoreCase("INR"))
					report_ltcora_adv_cur.add(" Rs");
				else if((""+rpt_ltcora_adv_cur.elementAt(c)).trim().equalsIgnoreCase("USD"))
					report_ltcora_adv_cur.add(" $");
				
				//report_ltcora_adv_cur.add(rpt_ltcora_adv_cur.elementAt(c).toString());
				report_ltcora_adv_amt.add(rpt_ltcora_adv_amt.elementAt(c).toString());
				report_ltcora_inv_seq_no.add(rpt_inv_seq_no);
				report_ltcora_adjusted_amt.add(rpt_adj_amt);
				report_ltcora_balance.add(rpt_adj_bal);
				report_ltcora_inv_date.add(rpt_inv_dt);
				report_ltcora_plant_nm.add(rpt_plant_nm);
				report_ltcora_cargo_no.add(rpt_ltcora_cargo_no.elementAt(c).toString());
				report_ltcora_cargo_rev_no.add(rpt_ltcora_cargo_rev_no.elementAt(c).toString());
				report_ltcora_no.add(rpt_ltcora_no.elementAt(c).toString());
				report_ltcora_rev_no.add(rpt_ltcora_rev_no.elementAt(c).toString());
				c++;
			}
		}
		
		////System.out.println("report_ltcora_adv_amt.."+report_ltcora_adv_amt);
		////System.out.println("report_ltcora_adjusted_amt.."+report_ltcora_adjusted_amt);

		///////CN////
		mapping_id="";
		 rpt_adj_amt="";
		//String rpt_adj_cur="";
		 rpt_adj_bal="";
		//String rpt_fy_yr="";
		 rpt_inv_seq_no="";
		 rpt_inv_dt="";
		 rpt_plant_nm="";
		tempadjamt=0;
		
			Vector temp_cn_ltcora_no=new Vector();
			Vector temp_cn_ltcora_rev_no=new Vector();
		
		 rpt_Final_Total_Collection="0";
		 rpt_Final_Total_Currency="";
		 
				
		//String map_id=report_customer_cd+":"+rpt_regas_no.elementAt(i)+":"+rpt_regas_rev_no.elementAt(i)+":"+rpt_regas_cargo_no.elementAt(i)+":"+rpt_regas_cargo_rev_no.elementAt(i)+":%";
		 map_id=report_customer_cd+":%";
		 Map m2=new HashMap();
		 query="select flag, amount, operation, inv_seq_no, currency , mapping_id,ltcora_no, ltcora_rev_no from fms7_inv_compo_dtl where "+ 
		" mapping_id like '"+map_id+"' and inv_seq_no LIKE 'C%"+report_year+"' and price_cd='1'  and (flag_temp not like 'T' or flag_temp is null) " +
		" order by decode(substr(inv_seq_no,14,1),':',CAST(substr(inv_seq_no,13,1) AS INT)), " +
		" decode(substr(inv_seq_no,15,1),':',CAST(substr(inv_seq_no,13,2) AS INT))," +
		 " decode(substr(inv_seq_no,16,1),':',CAST(substr(inv_seq_no,13,3) AS INT)), " +
		 " decode(substr(inv_seq_no,17,1),':',CAST(substr(inv_seq_no,13,4) AS INT)) ";
		////System.out.println("QUERY for compo details CN--"+query);
		rset2=stmt2.executeQuery(query);
		 c=0;
		while(rset2.next())
		{
			
			//mapping_id=report_customer_cd+"-"+mst_fgsa_no.elementAt(i)+"-"+mst_fgsa_rev_no.elementAt(i)+"-"+mst_sn_no.elementAt(i)+"-"+mst_sn_rev_no.elementAt(i)+"-"+"T";
			String mst_temp_mapping_id=rset2.getString(6)==null?"0":rset2.getString(6);
			String temp_map_id[]=mst_temp_mapping_id.toString().split(":");
			mapping_id=temp_map_id[0]+"-"+temp_map_id[1]+"-"+temp_map_id[2]+"-"+temp_map_id[3]+"-"+temp_map_id[4]+"-"+"C";
			
			boolean flag1=false;
			////System.out.println("CONTRACT_TYPE_->>>>++0"+contract_type);
			if(contract_type.equalsIgnoreCase("period"))
			{
				////System.out.println("CONTRACT_TYPE_->>>>++0"+temp_map_id[1]);
				if(Double.parseDouble(temp_map_id[1])>9999)
				{
					flag1=true;
				}
			}
			else
			{
				if(Double.parseDouble(temp_map_id[1])<9999)
				{
					flag1=true;
				}
			}
				
			if(flag1)
			{
			String query1= "select price_rate,currency_cd,flag " +
			"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
			"price_cd='1' and ltcora_no='"+rset2.getString(7)+"' and ltcora_rev_no='"+rset2.getString(8)+"' AND FLAG='Y'";	
			////System.out.println("FETCHING CN ADJUSTMENT DETAILS-->"+query1);
			rset1=stmt1.executeQuery(query1);
			if(rset1.next())
			{
				String tempcur=rset1.getString(2)==null?"0":rset1.getString(2);
				if(tempcur.equalsIgnoreCase("1"))
					rpt_cn_adv_cur.add("INR");
				else if(tempcur.equalsIgnoreCase("2"))
					rpt_cn_adv_cur.add("USD");
				rpt_cn_adv_amt.add(rset1.getString(1)==null?"0":rset1.getString(1));
				
				rpt_cn_cargo_no.add(temp_map_id[3]);
				rpt_cn_cargo_rev_no.add(temp_map_id[4]);
				rpt_cn_no.add(temp_map_id[1]);
				rpt_cn_rev_no.add(temp_map_id[2]);
				
				rpt_Final_Total_Collection=rpt_cn_adv_amt.elementAt(c).toString();
				rpt_Final_Total_Currency=rpt_cn_adv_cur.elementAt(c).toString();
				if(rpt_Final_Total_Currency.equalsIgnoreCase("1"))
					rpt_Final_Total_Currency="INR";
				else if(rpt_Final_Total_Currency.equalsIgnoreCase("2"))
					rpt_Final_Total_Currency="USD";
				temp_cn_ltcora_no.add(rset2.getString(7));
				temp_cn_ltcora_rev_no.add(rset2.getString(8));
			}
		
			String temp_Final_Total_Collection=rpt_Final_Total_Collection;
			String amt="0",tempamt="0";
			if(rset2.getString(1).equalsIgnoreCase("Y"))
			{
				
				String seq_no=rset2.getString(4);
				String tempseq_no[]=seq_no.split(":");
				String no=tempseq_no[2];
				if(no.length()==1)
					no="000"+no;
				else if(no.length()==2)
					no="00"+no;
				else if(no.length()==3)
					no="0"+no;
				else
					no=no;
				String yr=tempseq_no[1];
				//Invoice_no.add(no+"/"+yr.substring(2,4)+"-"+yr.substring(7));
				//Invoice_dt.add(tempseq_no[3]);
				//rpt_inv_seq_no+=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+":";
				//rpt_inv_dt+=tempseq_no[3]+":";
				rpt_inv_seq_no=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+"";
				rpt_inv_dt=tempseq_no[3]+"";
				
				String temp_map_id11=rset2.getString(6)==null?"":rset2.getString(6);
				String temp_map_id1[]=temp_map_id11.split(":");
				String temp_adv_inv_no="";
				String q1="select adv_inv_no,TO_CHAR(adv_inv_dt,'DD/MM/YYYY') from DLNG_INVOICE_MST where customer_cd='"+temp_map_id1[0]+"' and " +
						" fgsa_no='"+temp_map_id1[1]+"' and fgsa_rev_no='"+temp_map_id1[2]+"' " +
						" and sn_no='"+temp_map_id1[3]+"' and sn_rev_no='"+temp_map_id1[4]+"' and plant_seq_no='"+temp_map_id1[5]+"' " +
						" and contract_type='C' and hlpl_inv_seq_no='"+tempseq_no[2]+"' " +
						" and financial_year='"+tempseq_no[1]+"' AND FLAG='Y'";
				
				////System.out.println("FETCHING CN ADJUSTMENT DETAILS22222-->"+q1);
				rset4=stmt4.executeQuery(q1);
				if(rset4.next())
				{
					report_cn_adv_inv_no.add(rset4.getString(1)==null?"":rset4.getString(1));
					report_cn_adv_inv_dt.add(rset4.getString(2)==null?"":rset4.getString(2));
					temp_adv_inv_no=rset4.getString(1)==null?"":rset4.getString(1);
				}
				else
				{
					report_cn_adv_inv_no.add("");
					report_cn_adv_inv_dt.add("");
					temp_adv_inv_no="";
				}
				
				String temp_Final_Total_Collection1=m2.get(temp_adv_inv_no)==null?"":""+m2.get(temp_adv_inv_no);
				if(temp_Final_Total_Collection1.equalsIgnoreCase(""))
				{
					temp_Final_Total_Collection=rpt_Final_Total_Collection;
					////System.out.println("temp_Final_Total_Collection.. if  "+temp_Final_Total_Collection);
				}
				else
				{
					temp_Final_Total_Collection=temp_Final_Total_Collection1;
					////System.out.println("temp_Final_Total_Collection.. else "+temp_Final_Total_Collection);
				}
				
				
				if(rset2.getString(3).equalsIgnoreCase("1"))
				{
					amt=rset2.getString(2)==null?"0":rset2.getString(2);
					//Invoice_adj_amt.add(amt);
					//rpt_adj_amt+=amt+":";
					rpt_adj_amt=amt+"";
					
					tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)-Double.parseDouble(amt));
					//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
					//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
					rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
					
				}
				else if(rset2.getString(3).equalsIgnoreCase("2"))
				{
					amt=rset2.getString(2)==null?"0":rset2.getString(2);
					//Invoice_adj_amt.add(amt);
					///rpt_adj_amt+=amt+":";
					rpt_adj_amt=amt+"";
					
					tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)+Double.parseDouble(amt));
					//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
					//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
					rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
					
				}
				temp_Final_Total_Collection=tempamt;
				m2.put(temp_adv_inv_no,temp_Final_Total_Collection);
				//Invoice_adj_cur.add(Final_Total_Currency);
				
				if(!mst_cn_regas_adv_inv_no.contains(report_cn_adv_inv_no.elementAt(c)+""))
				{
					mst_cn_regas_adv_inv_no.add(report_cn_adv_inv_no.elementAt(c));
				}
				
				String temp_plnt_seq_no[]=rset2.getString(6).split(":");
				String plnt_seq_no=temp_plnt_seq_no[temp_plnt_seq_no.length-1];
				String query2="select plant_name from fms7_customer_plant_dtl where seq_no='"+plnt_seq_no+"' and customer_cd='"+report_customer_cd+"'";
				rset3=stmt3.executeQuery(query2);
				if(rset3.next())
				{
					//rpt_plant_nm+=(rset3.getString(1)==null?"":rset3.getString(1))+":";
					rpt_plant_nm=(rset3.getString(1)==null?"":rset3.getString(1))+"";
				}
				tempadjamt+=Double.parseDouble(amt);
				
				rpt_cn_total_adj_amt.add(tempadjamt+"");
				if((""+rpt_cn_adv_cur.elementAt(c)).trim().equalsIgnoreCase("INR"))
					report_cn_adv_cur.add(" Rs");
				else if((""+rpt_cn_adv_cur.elementAt(c)).trim().equalsIgnoreCase("USD"))
					report_cn_adv_cur.add(" $");
				
			//	report_cn_adv_cur.add(rpt_cn_adv_cur.elementAt(c).toString());
				report_cn_adv_amt.add(rpt_cn_adv_amt.elementAt(c).toString());
				report_cn_inv_seq_no.add(rpt_inv_seq_no);
				report_cn_adjusted_amt.add(rpt_adj_amt);
				report_cn_balance.add(rpt_adj_bal);
				report_cn_inv_date.add(rpt_inv_dt);
				report_cn_plant_nm.add(rpt_plant_nm);
				report_cn_cargo_no.add(rpt_cn_cargo_no.elementAt(c).toString());
				report_cn_cargo_rev_no.add(rpt_cn_cargo_rev_no.elementAt(c).toString());
				report_cn_no.add(rpt_cn_no.elementAt(c).toString());
				report_cn_rev_no.add(rpt_cn_rev_no.elementAt(c).toString());
				report_cn_ltcora_no.add(temp_cn_ltcora_no.elementAt(c).toString());
				report_cn_ltcora_rev_no.add(temp_cn_ltcora_rev_no.elementAt(c).toString());
				
				c++;
			}
			}
		}
		mapping_id="";
		 rpt_adj_amt="";
		//String rpt_adj_cur="";
		 rpt_adj_bal="";
		//String rpt_fy_yr="";
		 rpt_inv_seq_no="";
		 rpt_inv_dt="";
		 rpt_plant_nm="";
		tempadjamt=0;
		
		 rpt_Final_Total_Collection="0";
		 rpt_Final_Total_Currency="";
				
				/*cn tax adjustment*/
		
		 map_id=report_customer_cd+":%";
		 Map m2_tax=new HashMap();
		 query="select flag, amount, operation, inv_seq_no, currency , mapping_id,ltcora_no, ltcora_rev_no from fms7_inv_compo_dtl where "+ 
		" mapping_id like '"+map_id+"' and inv_seq_no LIKE 'C%"+report_year+"' and price_cd='1'  and (flag_temp not like 'T' or flag_temp is null) " +
		" order by decode(substr(inv_seq_no,14,1),':',CAST(substr(inv_seq_no,13,1) AS INT)), " +
		" decode(substr(inv_seq_no,15,1),':',CAST(substr(inv_seq_no,13,2) AS INT)),"
		+ "decode(substr(inv_seq_no,16,1),':',CAST(substr(inv_seq_no,13,3) AS INT)), "
		+ "decode(substr(inv_seq_no,17,1),':',CAST(substr(inv_seq_no,13,4) AS INT)) ";
		////System.out.println("QUERY for compo details CN--"+query);
		rset2=stmt2.executeQuery(query);
		 c=0;
		while(rset2.next())
		{
			String mapping_id1=rset2.getString(6);
			String seq_id = rset2.getString(4);
			
			query="select flag, amount, operation, inv_seq_no, currency , mapping_id,ltcora_no, ltcora_rev_no from fms7_inv_compo_dtl where "+ 
		" mapping_id = '"+mapping_id1+"' and inv_seq_no = '"+seq_id+"' and price_cd='6'  and (flag_temp not like 'T' or flag_temp is null) " +
		" order by decode(substr(inv_seq_no,14,1),':',CAST(substr(inv_seq_no,13,1) AS INT)), " +
		" decode(substr(inv_seq_no,15,1),':',CAST(substr(inv_seq_no,13,2) AS INT)),"
		+ "decode(substr(inv_seq_no,16,1),':',CAST(substr(inv_seq_no,13,3) AS INT)), "
		+ "decode(substr(inv_seq_no,17,1),':',CAST(substr(inv_seq_no,13,4) AS INT)) ";
		//	//System.out.println("query.."+query);
			rset3=stmt3.executeQuery(query);
			if(rset3.next())
			{
			//mapping_id=report_customer_cd+"-"+mst_fgsa_no.elementAt(i)+"-"+mst_fgsa_rev_no.elementAt(i)+"-"+mst_sn_no.elementAt(i)+"-"+mst_sn_rev_no.elementAt(i)+"-"+"T";
			String mst_temp_mapping_id=rset2.getString(6)==null?"0":rset2.getString(6);
			String temp_map_id[]=mst_temp_mapping_id.toString().split(":");
			mapping_id=temp_map_id[0]+"-"+temp_map_id[1]+"-"+temp_map_id[2]+"-"+temp_map_id[3]+"-"+temp_map_id[4]+"-"+"C";
			
			boolean flag1=false;
			////System.out.println("CONTRACT_TYPE_->>>>++0"+contract_type);
			if(contract_type.equalsIgnoreCase("period"))
			{
				////System.out.println("CONTRACT_TYPE_->>>>++0"+temp_map_id[1]);
				if(Double.parseDouble(temp_map_id[1])>9999)
				{
					flag1=true;
				}
			}
			else
			{
				if(Double.parseDouble(temp_map_id[1])<9999)
				{
					flag1=true;
				}
			}
				
			if(flag1)
			{
			String query1= "select price_rate,currency_cd,flag " +
			"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
			"price_cd='6' and ltcora_no='"+rset2.getString(7)+"' and ltcora_rev_no='"+rset2.getString(8)+"' AND FLAG='Y'";	
		//	//System.out.println("FETCHING CN ADJUSTMENT DETAILS-->"+query1);
			rset1=stmt1.executeQuery(query1);
			if(rset1.next())
			{
				String tempcur=rset1.getString(2)==null?"0":rset1.getString(2);
				rpt_cn_adv_amt_tax.add(rset1.getString(1)==null?"0":rset1.getString(1));
				rpt_Final_Total_Collection_Tax=rpt_cn_adv_amt_tax.elementAt(c).toString();
			}
			else{
				rpt_cn_adv_amt_tax.add(""+0);
				rpt_Final_Total_Collection_Tax=rpt_cn_adv_amt_tax.elementAt(c).toString();
			}
		
			String temp_Final_Total_Collection=rpt_Final_Total_Collection_Tax;
			
			String amt="0",tempamt="0";
			if(rset2.getString(1).equalsIgnoreCase("Y"))
			{
				
				String seq_no=rset2.getString(4);
				String tempseq_no[]=seq_no.split(":");
				String no=tempseq_no[2];
				if(no.length()==1)
					no="000"+no;
				else if(no.length()==2)
					no="00"+no;
				else if(no.length()==3)
					no="0"+no;
				else
					no=no;
				String yr=tempseq_no[1];
				
				rpt_inv_seq_no=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+"";
				rpt_inv_dt=tempseq_no[3]+"";
				
				String temp_map_id11=rset2.getString(6)==null?"":rset2.getString(6);
				String temp_map_id1[]=temp_map_id11.split(":");
				String temp_adv_inv_no="";
				String q1="select adv_inv_no,TO_CHAR(adv_inv_dt,'DD/MM/YYYY') from DLNG_INVOICE_MST where customer_cd='"+temp_map_id1[0]+"' and " +
						" fgsa_no='"+temp_map_id1[1]+"' and fgsa_rev_no='"+temp_map_id1[2]+"' " +
						" and sn_no='"+temp_map_id1[3]+"' and sn_rev_no='"+temp_map_id1[4]+"' and plant_seq_no='"+temp_map_id1[5]+"' " +
						" and contract_type='C' and hlpl_inv_seq_no='"+tempseq_no[2]+"' " +
						" and financial_year='"+tempseq_no[1]+"' AND FLAG='Y'";
				
				////System.out.println("FETCHING CN ADJUSTMENT DETAILS22222-->"+q1);
				rset4=stmt4.executeQuery(q1);
				if(rset4.next())
				{
					temp_adv_inv_no=rset4.getString(1)==null?"":rset4.getString(1);
				}
				else
				{
					temp_adv_inv_no="";
				}
				
				String temp_Final_Total_Collection1=m2_tax.get(temp_adv_inv_no)==null?"":""+m2_tax.get(temp_adv_inv_no);
				if(temp_Final_Total_Collection1.equalsIgnoreCase(""))
				{
					temp_Final_Total_Collection=rpt_Final_Total_Collection_Tax;
					////System.out.println("temp_Final_Total_Collection.. if  "+temp_Final_Total_Collection);
				}
				else
				{
					temp_Final_Total_Collection=temp_Final_Total_Collection1;
					////System.out.println("temp_Final_Total_Collection.. else "+temp_Final_Total_Collection);
				}
				
				if(rset3.getString(3).equalsIgnoreCase("1"))
				{
					amt=rset3.getString(2)==null?"0":rset3.getString(2);
					//Invoice_adj_amt.add(amt);
					//rpt_adj_amt+=amt+":";
					rpt_adj_amt=amt+"";
					
					tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)-Double.parseDouble(amt));
					//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
					//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
					rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
					
				}
				else if(rset3.getString(3).equalsIgnoreCase("2"))
				{
					amt=rset3.getString(2)==null?"0":rset3.getString(2);
					//Invoice_adj_amt.add(amt);
					///rpt_adj_amt+=amt+":";
					rpt_adj_amt=amt+"";
					
					tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)+Double.parseDouble(amt));
					//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
					//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
					rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
					
				}
				temp_Final_Total_Collection=tempamt;
				m2_tax.put(temp_adv_inv_no,temp_Final_Total_Collection);
				
				tempadjamt+=Double.parseDouble(amt);
				
				rpt_cn_total_adj_amt_tax.add(tempadjamt+"");
				
			//	report_cn_adv_cur.add(rpt_cn_adv_cur.elementAt(c).toString());
				report_cn_adv_amt_tax.add(rpt_cn_adv_amt_tax.elementAt(c).toString());
				report_cn_adjusted_amt_tax.add(rpt_adj_amt);
				report_cn_balance_tax.add(rpt_adj_bal);
			}
			}
		}
			else{
				report_cn_adv_amt_tax.add("0");
				report_cn_adjusted_amt_tax.add("0");
				report_cn_balance_tax.add("0");
				rpt_cn_adv_amt_tax.add("0");
				rpt_cn_total_adj_amt_tax.add("0");
			}
			c++;
		}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in report_advance_adjustment_collection_dtls Data..."+e.getMessage());
			e.printStackTrace();
		}
	}
	
	public void report_advance_adjustment_collection_dtls_old()
	{
		try
		{
		//	//System.out.println("Signing Date Fetch Query For TYPE--- = "+DRCRcustomer_Attach_Exchng_Rate_Dts1);
	
			
			
			Vector mst_sn_no=new Vector();
			Vector mst_sn_rev_no=new Vector();
			Vector mst_fgsa_no=new Vector();
			Vector mst_fgsa_rev_no=new Vector();
			
			
			
			
			//Vector report_sn_fy_yr=new Vector();
			
			
			//SN
			queryString="SELECT A.SN_NO, A.SN_REV_NO, A.FGSA_NO, A.FGSA_REV_NO , A.CUSTOMER_CD " +
						" FROM FMS7_SN_MST A WHERE A.FLAG='T' AND A.SN_REV_NO=(SELECT MAX(B.SN_REV_NO) FROM "+ 
						" FMS7_SN_MST B WHERE A.SN_NO=B.SN_NO AND A.FGSA_NO=B.FGSA_NO "+ 
						" AND A.FGSA_REV_NO=B.FGSA_REV_NO AND B.FLAG='T' " +
						" AND A.CUSTOMER_CD=B.CUSTOMER_CD) AND A.CUSTOMER_CD='"+report_customer_cd+"'  "  +
						"ORDER BY A.customer_cd,A.fgsa_no,A.fgsa_rev_no,A.sn_no";
			rset=stmt.executeQuery(queryString);
			while(rset.next())
			{
				mst_sn_no.add(rset.getString(1)==null?"0":rset.getString(1));
				mst_sn_rev_no.add(rset.getString(2)==null?"0":rset.getString(2));
				mst_fgsa_no.add(rset.getString(3)==null?"0":rset.getString(3));
				mst_fgsa_rev_no.add(rset.getString(4)==null?"0":rset.getString(4));
				
			}
			
			////System.out.println();
			
			String mapping_id="";
			
			for(int i=0;i<mst_sn_no.size();i++)
			{
				mapping_id=report_customer_cd+"-"+mst_fgsa_no.elementAt(i)+"-"+mst_fgsa_rev_no.elementAt(i)+"-"+mst_sn_no.elementAt(i)+"-"+mst_sn_rev_no.elementAt(i)+"-"+"S";
			
				String query= "select price_rate,currency_cd,flag " +
				"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
				"price_cd='1'  AND FLAG='Y' ";			
				rset1=stmt1.executeQuery(query);
				if(rset1.next())
				{
					String tempcur=rset1.getString(2)==null?"0":rset1.getString(2);
					if(tempcur.equalsIgnoreCase("1"))
						rpt_sn_adv_cur.add("INR");
					else if(tempcur.equalsIgnoreCase("2"))
						rpt_sn_adv_cur.add("USD");
					rpt_sn_adv_amt.add(rset1.getString(1)==null?"0":rset1.getString(1));
					
					rpt_sn_no.add(mst_sn_no.elementAt(i));
					rpt_sn_rev_no.add(mst_sn_rev_no.elementAt(i));
					rpt_fgsa_no.add(mst_fgsa_no.elementAt(i));
					rpt_fgsa_rev_no.add(mst_fgsa_rev_no.elementAt(i));
				}
				
				
			}
			int c=0;
			
			for(int i=0;i<rpt_sn_no.size();i++)
			{
				
				String rpt_adj_amt="";
				//String rpt_adj_cur="";
				String rpt_adj_bal="";
				//String rpt_fy_yr="";
				String rpt_inv_seq_no="";
				String rpt_inv_dt="";
				String rpt_plant_nm="";
				double tempadjamt=0;
				
				String rpt_Final_Total_Collection=rpt_sn_adv_amt.elementAt(i).toString();
				String rpt_Final_Total_Currency=rpt_sn_adv_cur.elementAt(i).toString();
				if(rpt_Final_Total_Currency.equalsIgnoreCase("1"))
					rpt_Final_Total_Currency="INR";
				else if(rpt_Final_Total_Currency.equalsIgnoreCase("2"))
					rpt_Final_Total_Currency="USD";
				
				

				String map_id=report_customer_cd+":"+rpt_fgsa_no.elementAt(i)+":"+rpt_fgsa_rev_no.elementAt(i)+":"+rpt_sn_no.elementAt(i)+":"+rpt_sn_rev_no.elementAt(i)+":%";
				String temp_Final_Total_Collection=rpt_Final_Total_Collection;
				
				String query="select flag, amount, operation, inv_seq_no, currency , mapping_id from fms7_inv_compo_dtl where mapping_id LIKE '"+map_id+"' "+ 
				" and inv_seq_no LIKE 'S%"+report_year+"' and price_cd='1'  and (flag_temp not like 'T' or flag_temp is null) "
				+" order by decode(substr(inv_seq_no,14,1),':',CAST(substr(inv_seq_no,13,1) AS INT)), " +
				" decode(substr(inv_seq_no,15,1),':',CAST(substr(inv_seq_no,13,2) AS INT))";
				////System.out.println("QUERY for compo details--"+query);
				rset2=stmt2.executeQuery(query);
				
				while(rset2.next())
				{
					String amt="0",tempamt="0";
					if(rset2.getString(1).equalsIgnoreCase("Y"))
					{
						
						if(rset2.getString(3).equalsIgnoreCase("1"))
						{
							amt=rset2.getString(2)==null?"0":rset2.getString(2);
							//Invoice_adj_amt.add(amt);
							//rpt_adj_amt+=amt+":";
							rpt_adj_amt=amt+"";
							
							tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)-Double.parseDouble(amt));
							//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
							//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
							rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
							
						}
						else if(rset2.getString(3).equalsIgnoreCase("2"))
						{
							amt=rset2.getString(2)==null?"0":rset2.getString(2);
							//Invoice_adj_amt.add(amt);
							//rpt_adj_amt+=amt+":";
							rpt_adj_amt=amt+"";
							
							tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)+Double.parseDouble(amt));
							//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
							//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
							rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
							
						}
						temp_Final_Total_Collection=tempamt;
						//Invoice_adj_cur.add(Final_Total_Currency);
						String seq_no=rset2.getString(4);
						String tempseq_no[]=seq_no.split(":");
						String no=tempseq_no[2];
						if(no.length()==1)
							no="000"+no;
						else if(no.length()==2)
							no="00"+no;
						else if(no.length()==3)
							no="0"+no;
						else
							no=no;
						String yr=tempseq_no[1];
						//Invoice_no.add(no+"/"+yr.substring(2,4)+"-"+yr.substring(7));
						//Invoice_dt.add(tempseq_no[3]);
						//rpt_inv_seq_no+=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+":";
						//rpt_inv_dt+=tempseq_no[3]+":";
						rpt_inv_seq_no=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+"";
						rpt_inv_dt=tempseq_no[3]+"";
						
						
						String temp_map_id=rset2.getString(6)==null?"":rset2.getString(6);
						String temp_map_id1[]=temp_map_id.split(":");
						String q1="select adv_inv_no,TO_CHAR(adv_inv_dt,'DD/MM/YYYY') from DLNG_INVOICE_MST where customer_cd='"+temp_map_id1[0]+"' and " +
								" fgsa_no='"+temp_map_id1[1]+"' and fgsa_rev_no='"+temp_map_id1[2]+"' " +
								" and sn_no='"+temp_map_id1[3]+"' and sn_rev_no='"+temp_map_id1[4]+"' and plant_seq_no='"+temp_map_id1[5]+"' " +
								" and contract_type='S' and hlpl_inv_seq_no='"+tempseq_no[2]+"' " +
								" and financial_year='"+tempseq_no[1]+"' AND FLAG='Y'";
						
						rset4=stmt4.executeQuery(q1);
						if(rset4.next())
						{
							report_sn_adv_inv_no.add(rset4.getString(1)==null?"":rset4.getString(1));
							report_sn_adv_inv_dt.add(rset4.getString(2)==null?"":rset4.getString(2));
							
							
						}
						else
						{
							report_sn_adv_inv_no.add("");
							report_sn_adv_inv_dt.add("");
						}
						if(!mst_report_sn_adv_inv_no.contains(report_sn_adv_inv_no.elementAt(c)+""))
						{
							mst_report_sn_adv_inv_no.add(report_sn_adv_inv_no.elementAt(c));
						}
						String temp_plnt_seq_no[]=rset2.getString(6).split(":");
						String plnt_seq_no=temp_plnt_seq_no[temp_plnt_seq_no.length-1];
						String query2="select plant_name from fms7_customer_plant_dtl where seq_no='"+plnt_seq_no+"' and customer_cd='"+report_customer_cd+"'";
						rset3=stmt3.executeQuery(query2);
						if(rset3.next())
						{
							//rpt_plant_nm+=(rset3.getString(1)==null?"":rset3.getString(1))+":";
							rpt_plant_nm=(rset3.getString(1)==null?"":rset3.getString(1))+"";
						}
						
						tempadjamt+=Double.parseDouble(amt);
						rpt_sn_total_adj_amt.add(tempadjamt+"");
						if((""+rpt_sn_adv_cur.elementAt(i)).equalsIgnoreCase("INR"))
							report_sn_adv_cur.add(" Rs");
						else if((""+rpt_sn_adv_cur.elementAt(i)).equalsIgnoreCase("USD"))
							report_sn_adv_cur.add(" $");
						
						//report_sn_adv_cur.add(rpt_sn_adv_cur.elementAt(c).toString());
						report_sn_adv_amt.add(rpt_sn_adv_amt.elementAt(i).toString());
						report_sn_inv_seq_no.add(rpt_inv_seq_no);
						report_sn_adjusted_amt.add(rpt_adj_amt);
						report_sn_balance.add(rpt_adj_bal);
						report_sn_inv_date.add(rpt_inv_dt);
						report_sn_plant_nm.add(rpt_plant_nm);
						report_sn_no.add(rpt_sn_no.elementAt(i).toString());
						report_sn_rev_no.add(rpt_sn_rev_no.elementAt(i).toString());
						report_fgsa_no.add(rpt_fgsa_no.elementAt(i).toString());
						report_fgsa_rev_no.add(rpt_fgsa_rev_no.elementAt(i).toString());
						c++;	
					}
					
				}
				
				
			}		
				 
		/*	//System.out.println("report_fgsa_no.."+report_fgsa_no);
			//System.out.println("report_sn_no.."+report_sn_no);
			//System.out.println("report_sn_plant_nm.."+report_sn_plant_nm);
			//System.out.println("report_sn_adv_inv_no.."+report_sn_adv_inv_no);
			//System.out.println("report_sn_adv_inv_dt.."+report_sn_adv_inv_dt);
			//System.out.println("report_sn_adv_amt.."+report_sn_adv_amt);
			//System.out.println("report_sn_adv_cur.."+report_sn_adv_cur);
		*/	
			mst_sn_no.clear();
			mst_sn_rev_no.clear();
			mst_fgsa_no.clear();
			mst_fgsa_rev_no.clear();			
			
			//LOA
			queryString="SELECT A.LOA_NO,A.LOA_REV_NO,A.TENDER_NO,A.CUSTOMER_CD " +
						" from FMS7_LOA_MST A WHERE A.FLAG='T' AND  " +
						" A.LOA_REV_NO=(SELECT MAX(B.LOA_REV_NO) FROM FMS7_LOA_MST B" +
						" WHERE A.LOA_NO=B.LOA_NO AND A.TENDER_NO=B.TENDER_NO AND" +
						" B.FLAG='T' AND A.CUSTOMER_CD=B.CUSTOMER_CD) AND A.CUSTOMER_CD='"+report_customer_cd+"' " +
						" order by A.customer_cd,A.tender_no,A.loa_no";
			rset=stmt.executeQuery(queryString);
			while(rset.next())
			{
				mst_sn_no.add(rset.getString(1)==null?"0":rset.getString(1));
				mst_sn_rev_no.add(rset.getString(2)==null?"0":rset.getString(2));
				mst_fgsa_no.add(rset.getString(3)==null?"0":rset.getString(3));
				mst_fgsa_rev_no.add("0");
				
			}
			
			////System.out.println("--->>>"+mst_sn_no.size());
			
			mapping_id="";
			
			for(int i=0;i<mst_sn_no.size();i++)
			{
				mapping_id=report_customer_cd+"-"+mst_fgsa_no.elementAt(i)+"-"+mst_fgsa_rev_no.elementAt(i)+"-"+mst_sn_no.elementAt(i)+"-"+mst_sn_rev_no.elementAt(i)+"-"+"L";
			
				String query= "select price_rate,currency_cd,flag " +
				"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
				"price_cd='1'  AND FLAG='Y' ";	
				////System.out.println("FETCHING LOA ADJUSTMENT DETAILS-->"+query);
				rset1=stmt1.executeQuery(query);
				if(rset1.next())
				{
					String tempcur=rset1.getString(2)==null?"0":rset1.getString(2);
					if(tempcur.equalsIgnoreCase("1"))
						rpt_loa_adv_cur.add("INR");
					else if(tempcur.equalsIgnoreCase("2"))
						rpt_loa_adv_cur.add("USD");
					rpt_loa_adv_amt.add(rset1.getString(1)==null?"0":rset1.getString(1));
					
					rpt_loa_no.add(mst_sn_no.elementAt(i));
					rpt_loa_rev_no.add(mst_sn_rev_no.elementAt(i));
					rpt_tender_no.add(mst_fgsa_no.elementAt(i));
					rpt_tender_rev_no.add(mst_fgsa_rev_no.elementAt(i));
						
				}
				
				
			}
			c=0;
			for(int i=0;i<rpt_loa_no.size();i++)
			{
				
				String rpt_adj_amt="";
				//String rpt_adj_cur="";
				String rpt_adj_bal="";
				//String rpt_fy_yr="";
				String rpt_inv_seq_no="";
				String rpt_inv_dt="";
				String rpt_plant_nm="";
				double tempadjamt=0;
				
				String rpt_Final_Total_Collection=rpt_loa_adv_amt.elementAt(i).toString();
				String rpt_Final_Total_Currency=rpt_loa_adv_cur.elementAt(i).toString();
				if(rpt_Final_Total_Currency.equalsIgnoreCase("1"))
					rpt_Final_Total_Currency="INR";
				else if(rpt_Final_Total_Currency.equalsIgnoreCase("2"))
					rpt_Final_Total_Currency="USD";
				
				

				String map_id=report_customer_cd+":"+rpt_tender_no.elementAt(i)+":"+rpt_tender_rev_no.elementAt(i)+":"+rpt_loa_no.elementAt(i)+":"+rpt_loa_rev_no.elementAt(i)+":%";
				String temp_Final_Total_Collection=rpt_Final_Total_Collection;
				
				String query="select flag, amount, operation, inv_seq_no, currency , mapping_id from fms7_inv_compo_dtl where mapping_id LIKE '"+map_id+"' "+ 
				" and inv_seq_no LIKE 'L%"+report_year+"' and price_cd='1'  and (flag_temp not like 'T' or flag_temp is null) "
				+" order by decode(substr(inv_seq_no,14,1),':',CAST(substr(inv_seq_no,13,1) AS INT)), " +
				" decode(substr(inv_seq_no,15,1),':',CAST(substr(inv_seq_no,13,2) AS INT))";		
				////System.out.println("QUERY for compo details--"+query);
				rset2=stmt2.executeQuery(query);
//				int c=0;
				while(rset2.next())
				{
					String amt="0",tempamt="0";
					if(rset2.getString(1).equalsIgnoreCase("Y"))
					{
						
						if(rset2.getString(3).equalsIgnoreCase("1"))
						{
							amt=rset2.getString(2)==null?"0":rset2.getString(2);
							//Invoice_adj_amt.add(amt);
							//rpt_adj_amt+=amt+":";
							rpt_adj_amt=amt+"";
							
							tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)-Double.parseDouble(amt));
							//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
							//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
							rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
							
						}
						else if(rset2.getString(3).equalsIgnoreCase("2"))
						{
							amt=rset2.getString(2)==null?"0":rset2.getString(2);
							//Invoice_adj_amt.add(amt);
							//rpt_adj_amt+=amt+":";
							rpt_adj_amt=amt+"";
							
							tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)+Double.parseDouble(amt));
							//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
							//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
							rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
							
						}
						temp_Final_Total_Collection=tempamt;
						//Invoice_adj_cur.add(Final_Total_Currency);
						String seq_no=rset2.getString(4);
						String tempseq_no[]=seq_no.split(":");
						String no=tempseq_no[2];
						if(no.length()==1)
							no="000"+no;
						else if(no.length()==2)
							no="00"+no;
						else if(no.length()==3)
							no="0"+no;
						else
							no=no;
						String yr=tempseq_no[1];
						//Invoice_no.add(no+"/"+yr.substring(2,4)+"-"+yr.substring(7));
						//Invoice_dt.add(tempseq_no[3]);
						//rpt_inv_seq_no+=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+":";
						//rpt_inv_dt+=tempseq_no[3]+":";
						rpt_inv_seq_no=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+"";
						rpt_inv_dt=tempseq_no[3]+"";
						
						
						
						String temp_map_id=rset2.getString(6)==null?"":rset2.getString(6);
						String temp_map_id1[]=temp_map_id.split(":");
						String q1="select adv_inv_no,TO_CHAR(adv_inv_dt,'DD/MM/YYYY') from DLNG_INVOICE_MST where customer_cd='"+temp_map_id1[0]+"' and " +
								" fgsa_no='"+temp_map_id1[1]+"' and fgsa_rev_no='"+temp_map_id1[2]+"' " +
								" and sn_no='"+temp_map_id1[3]+"' and sn_rev_no='"+temp_map_id1[4]+"' and plant_seq_no='"+temp_map_id1[5]+"' " +
								" and contract_type='L' and hlpl_inv_seq_no='"+tempseq_no[2]+"' " +
								" and financial_year='"+tempseq_no[1]+"'";
						
						rset4=stmt4.executeQuery(q1);
						if(rset4.next())
						{
							report_loa_adv_inv_no.add(rset4.getString(1)==null?"":rset4.getString(1));
							report_loa_adv_inv_dt.add(rset4.getString(2)==null?"":rset4.getString(2));
							
							
						}
						else
						{
							report_loa_adv_inv_no.add("");
							report_loa_adv_inv_dt.add("");
						}
						if(!mst_report_loa_adv_inv_no.contains(report_loa_adv_inv_no.elementAt(c)+""))
						{
							mst_report_loa_adv_inv_no.add(report_loa_adv_inv_no.elementAt(c));
						}
						
						
						
						
						String temp_plnt_seq_no[]=rset2.getString(6).split(":");
						String plnt_seq_no=temp_plnt_seq_no[temp_plnt_seq_no.length-1];
						String query2="select plant_name from fms7_customer_plant_dtl where seq_no='"+plnt_seq_no+"' and customer_cd='"+report_customer_cd+"'";
						rset3=stmt3.executeQuery(query2);
						if(rset3.next())
						{
							//rpt_plant_nm+=(rset3.getString(1)==null?"":rset3.getString(1))+":";
							rpt_plant_nm=(rset3.getString(1)==null?"":rset3.getString(1))+"";
						}
						
						tempadjamt+=Double.parseDouble(amt);
						
						rpt_loa_total_adj_amt.add(tempadjamt+"");
						if((""+rpt_loa_adv_cur.elementAt(i)).equalsIgnoreCase("INR"))
							report_loa_adv_cur.add(" Rs");
						else if((""+rpt_loa_adv_cur.elementAt(i)).equalsIgnoreCase("USD"))
							report_loa_adv_cur.add(" $");
						
						//report_loa_adv_cur.add(rpt_loa_adv_cur.elementAt(c).toString());
						report_loa_adv_amt.add(rpt_loa_adv_amt.elementAt(i).toString());
						report_loa_inv_seq_no.add(rpt_inv_seq_no);
						report_loa_adjusted_amt.add(rpt_adj_amt);
						report_loa_balance.add(rpt_adj_bal);
						report_loa_inv_date.add(rpt_inv_dt);
						report_loa_plant_nm.add(rpt_plant_nm);
						report_loa_no.add(rpt_loa_no.elementAt(i).toString());
						report_loa_rev_no.add(rpt_loa_rev_no.elementAt(i).toString());
						report_tender_no.add(rpt_tender_no.elementAt(i).toString());
						report_tender_rev_no.add(rpt_tender_rev_no.elementAt(i).toString());
						
						c++;
					}
					
					
				}
				
				
				
			}
			
			mst_sn_no.clear();
			mst_sn_rev_no.clear();
			mst_fgsa_no.clear();
			mst_fgsa_rev_no.clear();	
			//Re gas
			queryString="SELECT A.cargo_seq_no, A.re_gas_no,A.re_gas_rev_no,A.CUSTOMER_CD " +
					" from fms7_re_gas_cargo_dtl A WHERE A.FLAG='Y' AND " +
					" A.re_gas_rev_no=(SELECT MAX(B.re_gas_rev_no) FROM fms7_re_gas_cargo_dtl B" +
					" WHERE A.re_gas_no=B.re_gas_no AND A.cargo_seq_no=B.cargo_seq_no " +
					" AND B.FLAG='Y' AND A.CUSTOMER_CD=B.CUSTOMER_CD) AND A.CUSTOMER_CD='"+report_customer_cd+"' " +
					" order by A.customer_cd,A.re_gas_no,A.cargo_seq_no";
			rset=stmt.executeQuery(queryString);
			while(rset.next())
			{
				mst_sn_no.add(rset.getString(1)==null?"0":rset.getString(1));
				mst_sn_rev_no.add("0");
				mst_fgsa_no.add(rset.getString(2)==null?"0":rset.getString(2));
				mst_fgsa_rev_no.add(rset.getString(3)==null?"0":rset.getString(3));
				
			}
			
	//		//System.out.println("--->>>"+mst_sn_no.size());
			
			mapping_id="";
			
			for(int i=0;i<mst_sn_no.size();i++)
			{
				mapping_id=report_customer_cd+"-"+mst_fgsa_no.elementAt(i)+"-"+mst_fgsa_rev_no.elementAt(i)+"-"+mst_sn_no.elementAt(i)+"-"+mst_sn_rev_no.elementAt(i)+"-"+"R";
			
				String query= "select price_rate,currency_cd,flag " +
				"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
				"price_cd='1'  AND FLAG='Y' ";	
				////System.out.println("FETCHING LOA ADJUSTMENT DETAILS-->"+query);
				rset1=stmt1.executeQuery(query);
				if(rset1.next())
				{
					String tempcur=rset1.getString(2)==null?"0":rset1.getString(2);
					if(tempcur.equalsIgnoreCase("1"))
						rpt_regas_adv_cur.add("INR");
					else if(tempcur.equalsIgnoreCase("2"))
						rpt_regas_adv_cur.add("USD");
					rpt_regas_adv_amt.add(rset1.getString(1)==null?"0":rset1.getString(1));
					
					rpt_regas_cargo_no.add(mst_sn_no.elementAt(i));
					rpt_regas_cargo_rev_no.add(mst_sn_rev_no.elementAt(i));
					rpt_regas_no.add(mst_fgsa_no.elementAt(i));
					rpt_regas_rev_no.add(mst_fgsa_rev_no.elementAt(i));
						
				}
				
				
			}
			c=0;

		for(int i=0;i<rpt_regas_no.size();i++)
		{
			
			String rpt_adj_amt="";
			//String rpt_adj_cur="";
			String rpt_adj_bal="";
			//String rpt_fy_yr="";
			String rpt_inv_seq_no="";
			String rpt_inv_dt="";
			String rpt_plant_nm="";
			double tempadjamt=0;
			
			String rpt_Final_Total_Collection=rpt_regas_adv_amt.elementAt(i).toString();
			String rpt_Final_Total_Currency=rpt_regas_adv_cur.elementAt(i).toString();
			if(rpt_Final_Total_Currency.equalsIgnoreCase("1"))
				rpt_Final_Total_Currency="INR";
			else if(rpt_Final_Total_Currency.equalsIgnoreCase("2"))
				rpt_Final_Total_Currency="USD";
			
			
		
			String map_id=report_customer_cd+":"+rpt_regas_no.elementAt(i)+":"+rpt_regas_rev_no.elementAt(i)+":"+rpt_regas_cargo_no.elementAt(i)+":"+rpt_regas_cargo_rev_no.elementAt(i)+":%";
			String temp_Final_Total_Collection=rpt_Final_Total_Collection;
			
			String query="select flag, amount, operation, inv_seq_no, currency , mapping_id from fms7_inv_compo_dtl where mapping_id LIKE '"+map_id+"' "+ 
			" and inv_seq_no LIKE 'R%"+report_year+"' and price_cd='1'  and (flag_temp not like 'T' or flag_temp is null) "
			+" order by decode(substr(inv_seq_no,14,1),':',CAST(substr(inv_seq_no,13,1) AS INT)), " +
			" decode(substr(inv_seq_no,15,1),':',CAST(substr(inv_seq_no,13,2) AS INT))";		
			////System.out.println("QUERY for compo details RE GAS--"+query);
			rset2=stmt2.executeQuery(query);
//			int c=0;
			while(rset2.next())
			{
				String amt="0",tempamt="0";
				if(rset2.getString(1).equalsIgnoreCase("Y"))
				{
					
					if(rset2.getString(3).equalsIgnoreCase("1"))
					{
						amt=rset2.getString(2)==null?"0":rset2.getString(2);
						//Invoice_adj_amt.add(amt);
						//rpt_adj_amt+=amt+":";
						rpt_adj_amt=amt+"";
						
						tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)-Double.parseDouble(amt));
						//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
						//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
						rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
						
					}
					else if(rset2.getString(3).equalsIgnoreCase("2"))
					{
						amt=rset2.getString(2)==null?"0":rset2.getString(2);
						//Invoice_adj_amt.add(amt);
						///rpt_adj_amt+=amt+":";
						rpt_adj_amt=amt+"";
						
						tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)+Double.parseDouble(amt));
						//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
						//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
						rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
						
					}
					temp_Final_Total_Collection=tempamt;
					//Invoice_adj_cur.add(Final_Total_Currency);
					String seq_no=rset2.getString(4);
					String tempseq_no[]=seq_no.split(":");
					String no=tempseq_no[2];
					if(no.length()==1)
						no="000"+no;
					else if(no.length()==2)
						no="00"+no;
					else if(no.length()==3)
						no="0"+no;
					else
						no=no;
					String yr=tempseq_no[1];
					//Invoice_no.add(no+"/"+yr.substring(2,4)+"-"+yr.substring(7));
					//Invoice_dt.add(tempseq_no[3]);
					//rpt_inv_seq_no+=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+":";
					//rpt_inv_dt+=tempseq_no[3]+":";
					rpt_inv_seq_no=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+"";
					rpt_inv_dt=tempseq_no[3]+"";
					
					String temp_map_id=rset2.getString(6)==null?"":rset2.getString(6);
					String temp_map_id1[]=temp_map_id.split(":");
					String q1="select adv_inv_no,TO_CHAR(adv_inv_dt,'DD/MM/YYYY') from DLNG_INVOICE_MST where customer_cd='"+temp_map_id1[0]+"' and " +
							" fgsa_no='"+temp_map_id1[1]+"' and fgsa_rev_no='"+temp_map_id1[2]+"' " +
							" and sn_no='"+temp_map_id1[3]+"' and sn_rev_no='"+temp_map_id1[4]+"' and plant_seq_no='"+temp_map_id1[5]+"' " +
							" and contract_type='R' and hlpl_inv_seq_no='"+tempseq_no[2]+"' " +
							" and financial_year='"+tempseq_no[1]+"'";
					
					rset4=stmt4.executeQuery(q1);
					if(rset4.next())
					{
						report_regas_adv_inv_no.add(rset4.getString(1)==null?"":rset4.getString(1));
						report_regas_adv_inv_dt.add(rset4.getString(2)==null?"":rset4.getString(2));
						
						
					}
					else
					{
						report_regas_adv_inv_no.add("");
						report_regas_adv_inv_dt.add("");
					}
					if(!mst_report_regas_adv_inv_no.contains(report_regas_adv_inv_no.elementAt(c)+""))
					{
						mst_report_regas_adv_inv_no.add(report_regas_adv_inv_no.elementAt(c));
					}
					
					
					String temp_plnt_seq_no[]=rset2.getString(6).split(":");
					String plnt_seq_no=temp_plnt_seq_no[temp_plnt_seq_no.length-1];
					String query2="select plant_name from fms7_customer_plant_dtl where seq_no='"+plnt_seq_no+"' and customer_cd='"+report_customer_cd+"'";
					rset3=stmt3.executeQuery(query2);
					if(rset3.next())
					{
						//rpt_plant_nm+=(rset3.getString(1)==null?"":rset3.getString(1))+":";
						rpt_plant_nm=(rset3.getString(1)==null?"":rset3.getString(1))+"";
					}
					tempadjamt+=Double.parseDouble(amt);
					
					rpt_regas_total_adj_amt.add(tempadjamt+"");
					if((""+rpt_regas_adv_cur.elementAt(i)).equalsIgnoreCase("INR"))
						report_regas_adv_cur.add(" Rs");
					else if((""+rpt_regas_adv_cur.elementAt(i)).equalsIgnoreCase("USD"))
						report_regas_adv_cur.add(" $");
					
					//report_regas_adv_cur.add(rpt_regas_adv_cur.elementAt(c).toString());
					report_regas_adv_amt.add(rpt_regas_adv_amt.elementAt(c).toString());
					report_regas_inv_seq_no.add(rpt_inv_seq_no);
					report_regas_adjusted_amt.add(rpt_adj_amt);
					report_regas_balance.add(rpt_adj_bal);
					report_regas_inv_date.add(rpt_inv_dt);
					report_regas_plant_nm.add(rpt_plant_nm);
					report_regas_cargo_no.add(rpt_regas_cargo_no.elementAt(i).toString());
					report_regas_cargo_rev_no.add(rpt_regas_cargo_rev_no.elementAt(i).toString());
					report_regas_no.add(rpt_regas_no.elementAt(i).toString());
					report_regas_rev_no.add(rpt_regas_rev_no.elementAt(i).toString());
					c++;
				}
			}
			
	
			
			
		}
		
		
		////////////addedfor ltcora and cn
		mst_sn_no.clear();
		mst_sn_rev_no.clear();
		mst_fgsa_no.clear();
		mst_fgsa_rev_no.clear();	
		
		
		mapping_id="";
		
		

		
		String rpt_adj_amt="";
		//String rpt_adj_cur="";
		String rpt_adj_bal="";
		//String rpt_fy_yr="";
		String rpt_inv_seq_no="";
		String rpt_inv_dt="";
		String rpt_plant_nm="";
		double tempadjamt=0;
		
		String rpt_Final_Total_Collection="0";
		String rpt_Final_Total_Currency="";
		/*if(rpt_Final_Total_Currency.equalsIgnoreCase("1"))
			rpt_Final_Total_Currency="INR";
		else if(rpt_Final_Total_Currency.equalsIgnoreCase("2"))
			rpt_Final_Total_Currency="USD";
		
		
	*/
		String map_id=report_customer_cd+":%";
		
		
		String query="select flag, amount, operation, inv_seq_no, currency , mapping_id,ltcora_no, ltcora_rev_no from fms7_inv_compo_dtl where "+ 
		" mapping_id like '"+map_id+"' and inv_seq_no LIKE 'T%"+report_year+"' and price_cd='1'  and (flag_temp not like 'T' or flag_temp is null) "
		+" order by decode(substr(inv_seq_no,14,1),':',CAST(substr(inv_seq_no,13,1) AS INT)), " +
		" decode(substr(inv_seq_no,15,1),':',CAST(substr(inv_seq_no,13,2) AS INT))";		
		////System.out.println("QUERY for compo details LTCORA--"+query);
		rset2=stmt2.executeQuery(query);
		 c=0;
		while(rset2.next())
		{
			
			//mapping_id=report_customer_cd+"-"+mst_fgsa_no.elementAt(i)+"-"+mst_fgsa_rev_no.elementAt(i)+"-"+mst_sn_no.elementAt(i)+"-"+mst_sn_rev_no.elementAt(i)+"-"+"T";
			String mst_temp_mapping_id=rset2.getString(6)==null?"0":rset2.getString(6);
			String temp_map_id[]=mst_temp_mapping_id.toString().split(":");
			mapping_id=temp_map_id[0]+"-"+temp_map_id[1]+"-"+temp_map_id[2]+"-"+temp_map_id[3]+"-"+temp_map_id[4]+"-"+"T";
			
			String query1= "select price_rate,currency_cd,flag " +
			"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
			"price_cd='1' and ltcora_no='"+rset2.getString(7)+"' and ltcora_rev_no='"+rset2.getString(8)+"' AND FLAG='Y' ";	
			////System.out.println("FETCHING LTCORA ADJUSTMENT DETAILS-->"+query);
			rset1=stmt1.executeQuery(query1);
			if(rset1.next())
			{
				String tempcur=rset1.getString(2)==null?"0":rset1.getString(2);
				if(tempcur.equalsIgnoreCase("1"))
					rpt_ltcora_adv_cur.add("INR");
				else if(tempcur.equalsIgnoreCase("2"))
					rpt_ltcora_adv_cur.add("USD");
				rpt_ltcora_adv_amt.add(rset1.getString(1)==null?"0":rset1.getString(1));
				
				rpt_ltcora_cargo_no.add(temp_map_id[3]);
				rpt_ltcora_cargo_rev_no.add(temp_map_id[4]);
				rpt_ltcora_no.add(temp_map_id[1]);
				rpt_ltcora_rev_no.add(temp_map_id[2]);
				
				rpt_Final_Total_Collection=rpt_ltcora_adv_amt.elementAt(c).toString();
				rpt_Final_Total_Currency=rpt_ltcora_adv_cur.elementAt(c).toString();
				if(rpt_Final_Total_Currency.equalsIgnoreCase("1"))
					rpt_Final_Total_Currency="INR";
				else if(rpt_Final_Total_Currency.equalsIgnoreCase("2"))
					rpt_Final_Total_Currency="USD";
					
			}
		
			String temp_Final_Total_Collection=rpt_Final_Total_Collection;
			
			String amt="0",tempamt="0";
			if(rset2.getString(1).equalsIgnoreCase("Y"))
			{
				
				if(rset2.getString(3).equalsIgnoreCase("1"))
				{
					amt=rset2.getString(2)==null?"0":rset2.getString(2);
					//Invoice_adj_amt.add(amt);
					//rpt_adj_amt+=amt+":";
					rpt_adj_amt=amt+"";
					
					tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)-Double.parseDouble(amt));
					//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
					//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
					rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
					
				}
				else if(rset2.getString(3).equalsIgnoreCase("2"))
				{
					amt=rset2.getString(2)==null?"0":rset2.getString(2);
					//Invoice_adj_amt.add(amt);
					///rpt_adj_amt+=amt+":";
					rpt_adj_amt=amt+"";
					
					tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)+Double.parseDouble(amt));
					//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
					//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
					rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
					
				}
				temp_Final_Total_Collection=tempamt;
				//Invoice_adj_cur.add(Final_Total_Currency);
				String seq_no=rset2.getString(4);
				String tempseq_no[]=seq_no.split(":");
				String no=tempseq_no[2];
				if(no.length()==1)
					no="000"+no;
				else if(no.length()==2)
					no="00"+no;
				else if(no.length()==3)
					no="0"+no;
				else
					no=no;
				String yr=tempseq_no[1];
				//Invoice_no.add(no+"/"+yr.substring(2,4)+"-"+yr.substring(7));
				//Invoice_dt.add(tempseq_no[3]);
				//rpt_inv_seq_no+=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+":";
				//rpt_inv_dt+=tempseq_no[3]+":";
				rpt_inv_seq_no=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+"";
				rpt_inv_dt=tempseq_no[3]+"";
				
				String temp_map_id11=rset2.getString(6)==null?"":rset2.getString(6);
				String temp_map_id1[]=temp_map_id11.split(":");
				String q1="select adv_inv_no,TO_CHAR(adv_inv_dt,'DD/MM/YYYY') from DLNG_INVOICE_MST where customer_cd='"+temp_map_id1[0]+"' and " +
						" fgsa_no='"+temp_map_id1[1]+"' and fgsa_rev_no='"+temp_map_id1[2]+"' " +
						" and sn_no='"+temp_map_id1[3]+"' and sn_rev_no='"+temp_map_id1[4]+"' and plant_seq_no='"+temp_map_id1[5]+"' " +
						" and contract_type='T' and hlpl_inv_seq_no='"+tempseq_no[2]+"' " +
						" and financial_year='"+tempseq_no[1]+"'";
				
				rset4=stmt4.executeQuery(q1);
				if(rset4.next())
				{
					report_ltcora_adv_inv_no.add(rset4.getString(1)==null?"":rset4.getString(1));
					report_ltcora_adv_inv_dt.add(rset4.getString(2)==null?"":rset4.getString(2));
					
					
				}
				else
				{
					report_ltcora_adv_inv_no.add("");
					report_ltcora_adv_inv_dt.add("");
				}
				if(!mst_ltcora_regas_adv_inv_no.contains(report_ltcora_adv_inv_no.elementAt(c)+""))
				{
					mst_ltcora_regas_adv_inv_no.add(report_ltcora_adv_inv_no.elementAt(c));
				}
				
				
				String temp_plnt_seq_no[]=rset2.getString(6).split(":");
				String plnt_seq_no=temp_plnt_seq_no[temp_plnt_seq_no.length-1];
				String query2="select plant_name from fms7_customer_plant_dtl where seq_no='"+plnt_seq_no+"' and customer_cd='"+report_customer_cd+"'";
				////System.out.println("query2...."+query2);
				rset3=stmt3.executeQuery(query2);
				if(rset3.next())
				{
					//rpt_plant_nm+=(rset3.getString(1)==null?"":rset3.getString(1))+":";
					rpt_plant_nm=(rset3.getString(1)==null?"":rset3.getString(1))+"";
				}
				tempadjamt+=Double.parseDouble(amt);
				
				rpt_ltcora_total_adj_amt.add(tempadjamt+"");
				
				if((""+rpt_ltcora_adv_cur.elementAt(c)).trim().equalsIgnoreCase("INR"))
					report_ltcora_adv_cur.add(" Rs");
				else if((""+rpt_ltcora_adv_cur.elementAt(c)).trim().equalsIgnoreCase("USD"))
					report_ltcora_adv_cur.add(" $");
				
				//report_ltcora_adv_cur.add(rpt_ltcora_adv_cur.elementAt(c).toString());
				report_ltcora_adv_amt.add(rpt_ltcora_adv_amt.elementAt(c).toString());
				report_ltcora_inv_seq_no.add(rpt_inv_seq_no);
				report_ltcora_adjusted_amt.add(rpt_adj_amt);
				report_ltcora_balance.add(rpt_adj_bal);
				report_ltcora_inv_date.add(rpt_inv_dt);
				report_ltcora_plant_nm.add(rpt_plant_nm);
				report_ltcora_cargo_no.add(rpt_ltcora_cargo_no.elementAt(c).toString());
				report_ltcora_cargo_rev_no.add(rpt_ltcora_cargo_rev_no.elementAt(c).toString());
				report_ltcora_no.add(rpt_ltcora_no.elementAt(c).toString());
				report_ltcora_rev_no.add(rpt_ltcora_rev_no.elementAt(c).toString());
				c++;
			}
		}
		////System.out.println("report_ltcora_adv_cur.."+report_ltcora_adv_cur);
		////System.out.println("report_ltcora_adv_amt.."+report_ltcora_adv_amt);
		////System.out.println("report_ltcora_adjusted_amt.."+report_ltcora_adjusted_amt);

		///////CN////
		mapping_id="";
		 rpt_adj_amt="";
		//String rpt_adj_cur="";
		 rpt_adj_bal="";
		//String rpt_fy_yr="";
		 rpt_inv_seq_no="";
		 rpt_inv_dt="";
		 rpt_plant_nm="";
		tempadjamt=0;
		
			Vector temp_cn_ltcora_no=new Vector();
			Vector temp_cn_ltcora_rev_no=new Vector();
		
		 rpt_Final_Total_Collection="0";
		 rpt_Final_Total_Currency="";
		/*if(rpt_Final_Total_Currency.equalsIgnoreCase("1"))
			rpt_Final_Total_Currency="INR";
		else if(rpt_Final_Total_Currency.equalsIgnoreCase("2"))
			rpt_Final_Total_Currency="USD";
		
		
		*/
		//String map_id=report_customer_cd+":"+rpt_regas_no.elementAt(i)+":"+rpt_regas_rev_no.elementAt(i)+":"+rpt_regas_cargo_no.elementAt(i)+":"+rpt_regas_cargo_rev_no.elementAt(i)+":%";
		 map_id=report_customer_cd+":%";
		
		 query="select flag, amount, operation, inv_seq_no, currency , mapping_id,ltcora_no, ltcora_rev_no from fms7_inv_compo_dtl where "+ 
		" mapping_id like '"+map_id+"' and inv_seq_no LIKE 'C%"+report_year+"' and price_cd='1'  and (flag_temp not like 'T' or flag_temp is null) "
		+" order by decode(substr(inv_seq_no,14,1),':',CAST(substr(inv_seq_no,13,1) AS INT)), " +
		" decode(substr(inv_seq_no,15,1),':',CAST(substr(inv_seq_no,13,2) AS INT))";		
		////System.out.println("QUERY for compo details CN--"+query);
		rset2=stmt2.executeQuery(query);
		 c=0;
		while(rset2.next())
		{
			
			//mapping_id=report_customer_cd+"-"+mst_fgsa_no.elementAt(i)+"-"+mst_fgsa_rev_no.elementAt(i)+"-"+mst_sn_no.elementAt(i)+"-"+mst_sn_rev_no.elementAt(i)+"-"+"T";
			String mst_temp_mapping_id=rset2.getString(6)==null?"0":rset2.getString(6);
			String temp_map_id[]=mst_temp_mapping_id.toString().split(":");
			mapping_id=temp_map_id[0]+"-"+temp_map_id[1]+"-"+temp_map_id[2]+"-"+temp_map_id[3]+"-"+temp_map_id[4]+"-"+"C";
			
			boolean flag1=false;
			////System.out.println("CONTRACT_TYPE_->>>>++0"+contract_type);
			if(contract_type.equalsIgnoreCase("period"))
			{
				////System.out.println("CONTRACT_TYPE_->>>>++0"+temp_map_id[1]);
				if(Double.parseDouble(temp_map_id[1])>9999)
				{
					flag1=true;
					
				}
			}
			else
			{
				if(Double.parseDouble(temp_map_id[1])<9999)
				{
					flag1=true;
					
				}
			}
				
			if(flag1)
			{
			String query1= "select price_rate,currency_cd,flag " +
			"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
			"price_cd='1' and ltcora_no='"+rset2.getString(7)+"' and ltcora_rev_no='"+rset2.getString(8)+"' AND FLAG='Y' ";	
			////System.out.println("FETCHING CN ADJUSTMENT DETAILS-->"+query1);
			rset1=stmt1.executeQuery(query1);
			if(rset1.next())
			{
				String tempcur=rset1.getString(2)==null?"0":rset1.getString(2);
				if(tempcur.equalsIgnoreCase("1"))
					rpt_cn_adv_cur.add("INR");
				else if(tempcur.equalsIgnoreCase("2"))
					rpt_cn_adv_cur.add("USD");
				rpt_cn_adv_amt.add(rset1.getString(1)==null?"0":rset1.getString(1));
				
				rpt_cn_cargo_no.add(temp_map_id[3]);
				rpt_cn_cargo_rev_no.add(temp_map_id[4]);
				rpt_cn_no.add(temp_map_id[1]);
				rpt_cn_rev_no.add(temp_map_id[2]);
				
				rpt_Final_Total_Collection=rpt_cn_adv_amt.elementAt(c).toString();
				rpt_Final_Total_Currency=rpt_cn_adv_cur.elementAt(c).toString();
				if(rpt_Final_Total_Currency.equalsIgnoreCase("1"))
					rpt_Final_Total_Currency="INR";
				else if(rpt_Final_Total_Currency.equalsIgnoreCase("2"))
					rpt_Final_Total_Currency="USD";
				temp_cn_ltcora_no.add(rset2.getString(7));
				temp_cn_ltcora_rev_no.add(rset2.getString(8));
				
			}
		
			String temp_Final_Total_Collection=rpt_Final_Total_Collection;
			
			String amt="0",tempamt="0";
			if(rset2.getString(1).equalsIgnoreCase("Y"))
			{
				
				if(rset2.getString(3).equalsIgnoreCase("1"))
				{
					amt=rset2.getString(2)==null?"0":rset2.getString(2);
					//Invoice_adj_amt.add(amt);
					//rpt_adj_amt+=amt+":";
					rpt_adj_amt=amt+"";
					
					tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)-Double.parseDouble(amt));
					//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
					//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
					rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
					
				}
				else if(rset2.getString(3).equalsIgnoreCase("2"))
				{
					amt=rset2.getString(2)==null?"0":rset2.getString(2);
					//Invoice_adj_amt.add(amt);
					///rpt_adj_amt+=amt+":";
					rpt_adj_amt=amt+"";
					
					tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)+Double.parseDouble(amt));
					//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
					//rpt_adj_bal+=nf.format(Double.parseDouble(tempamt))+":";
					rpt_adj_bal=nf.format(Double.parseDouble(tempamt))+"";
					
				}
				temp_Final_Total_Collection=tempamt;
				//Invoice_adj_cur.add(Final_Total_Currency);
				String seq_no=rset2.getString(4);
				String tempseq_no[]=seq_no.split(":");
				String no=tempseq_no[2];
				if(no.length()==1)
					no="000"+no;
				else if(no.length()==2)
					no="00"+no;
				else if(no.length()==3)
					no="0"+no;
				else
					no=no;
				String yr=tempseq_no[1];
				//Invoice_no.add(no+"/"+yr.substring(2,4)+"-"+yr.substring(7));
				//Invoice_dt.add(tempseq_no[3]);
				//rpt_inv_seq_no+=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+":";
				//rpt_inv_dt+=tempseq_no[3]+":";
				rpt_inv_seq_no=no+"/"+yr.substring(2,4)+"-"+yr.substring(7)+"";
				rpt_inv_dt=tempseq_no[3]+"";
				
				String temp_map_id11=rset2.getString(6)==null?"":rset2.getString(6);
				String temp_map_id1[]=temp_map_id11.split(":");
				String q1="select adv_inv_no,TO_CHAR(adv_inv_dt,'DD/MM/YYYY') from DLNG_INVOICE_MST where customer_cd='"+temp_map_id1[0]+"' and " +
						" fgsa_no='"+temp_map_id1[1]+"' and fgsa_rev_no='"+temp_map_id1[2]+"' " +
						" and sn_no='"+temp_map_id1[3]+"' and sn_rev_no='"+temp_map_id1[4]+"' and plant_seq_no='"+temp_map_id1[5]+"' " +
						" and contract_type='C' and hlpl_inv_seq_no='"+tempseq_no[2]+"' AND FLAG='Y' " +
						" and financial_year='"+tempseq_no[1]+"'";
				
				
				////System.out.println("FETCHING CN ADJUSTMENT DETAILS22222-->"+q1);
				rset4=stmt4.executeQuery(q1);
				if(rset4.next())
				{
					report_cn_adv_inv_no.add(rset4.getString(1)==null?"":rset4.getString(1));
					report_cn_adv_inv_dt.add(rset4.getString(2)==null?"":rset4.getString(2));
					
					
				}
				else
				{
					report_cn_adv_inv_no.add("");
					report_cn_adv_inv_dt.add("");
				}
				if(!mst_cn_regas_adv_inv_no.contains(report_cn_adv_inv_no.elementAt(c)+""))
				{
					mst_cn_regas_adv_inv_no.add(report_cn_adv_inv_no.elementAt(c));
				}
				
				
				String temp_plnt_seq_no[]=rset2.getString(6).split(":");
				String plnt_seq_no=temp_plnt_seq_no[temp_plnt_seq_no.length-1];
				String query2="select plant_name from fms7_customer_plant_dtl where seq_no='"+plnt_seq_no+"' and customer_cd='"+report_customer_cd+"'";
				rset3=stmt3.executeQuery(query2);
				if(rset3.next())
				{
					//rpt_plant_nm+=(rset3.getString(1)==null?"":rset3.getString(1))+":";
					rpt_plant_nm=(rset3.getString(1)==null?"":rset3.getString(1))+"";
				}
				tempadjamt+=Double.parseDouble(amt);
				
				rpt_cn_total_adj_amt.add(tempadjamt+"");
				if((""+rpt_cn_adv_cur.elementAt(c)).trim().equalsIgnoreCase("INR"))
					report_cn_adv_cur.add(" Rs");
				else if((""+rpt_cn_adv_cur.elementAt(c)).trim().equalsIgnoreCase("USD"))
					report_cn_adv_cur.add(" $");
				
			//	report_cn_adv_cur.add(rpt_cn_adv_cur.elementAt(c).toString());
				report_cn_adv_amt.add(rpt_cn_adv_amt.elementAt(c).toString());
				report_cn_inv_seq_no.add(rpt_inv_seq_no);
				report_cn_adjusted_amt.add(rpt_adj_amt);
				report_cn_balance.add(rpt_adj_bal);
				report_cn_inv_date.add(rpt_inv_dt);
				report_cn_plant_nm.add(rpt_plant_nm);
				report_cn_cargo_no.add(rpt_cn_cargo_no.elementAt(c).toString());
				report_cn_cargo_rev_no.add(rpt_cn_cargo_rev_no.elementAt(c).toString());
				report_cn_no.add(rpt_cn_no.elementAt(c).toString());
				report_cn_rev_no.add(rpt_cn_rev_no.elementAt(c).toString());
				report_cn_ltcora_no.add(temp_cn_ltcora_no.elementAt(c).toString());
				report_cn_ltcora_rev_no.add(temp_cn_ltcora_rev_no.elementAt(c).toString());
				
				c++;
			}
			}
		}
		////System.out.println("..."+rpt_cn_adv_cur);
	
		
		
					
			////System.out.println("rpt_regas_total_adj_amt-->"+rpt_regas_total_adj_amt+"<--rpt_sn_total_adj_amt-->"+rpt_sn_total_adj_amt);
		}
		catch(Exception e)
		{
			//System.out.println("Exception in report_advance_adjustment_collection_dtls Data..."+e.getMessage());
			e.printStackTrace();
		}
	}
	
	
	public String createPdfFileForRegs_ene_stmt()
	{
		try
		{
			String to_day_dt="";
			String Cr_dr_no_pdf_arr[]=Cr_dr_no_pdf.split("/");
			String query="select to_char(sysdate,'dd-mm-yyyy') from dual ";
			rset=stmt.executeQuery(query);
			if(rset.next())
				to_day_dt=rset.getString(1);
			
			credit_debit_pdf_path = request.getRealPath("credit_debit//credit_debit_pdf");
			String fileName = "Credit_Debit_For_"+Cust_nm_pdf+"_"+Plant_nm_pdf+"_"+Credit_Debit_pdf+"_"+Cr_dr_no_pdf_arr[0]+"_"+Cr_dr_no_pdf_arr[1]+"_"+to_day_dt+".pdf";
			credit_debit_pdf_path = credit_debit_pdf_path+"//"+fileName;
		//	//System.out.println("regas_pdf_path:"+Regas_ene_pdf_path);
		}
		catch(Exception e)
		{
			//System.out.println("Exception in createPdfFileForRegs_ene_stmt() Method :\n"+e.getMessage());
			e.printStackTrace();
		}
		return credit_debit_pdf_path;
	}
	
	public void debit_credit_generate_pdf_report()
	{
        Document document = new Document();
		try 
		{
//			 Step 2:
			// We create a writer that listens to the document, and directs a PDF-stream to a file ...
			PdfWriter writer = PdfWriter.getInstance(document,new FileOutputStream(createPdfFileForRegs_ene_stmt()));
		
			
			Rectangle pageSize = new Rectangle(595, 842);
			if(flag_DCB==true)
			{
				pageSize.setBackgroundColor(new java.awt.Color(0xe3f8c0)); 
			}
			else
			{
				pageSize.setBackgroundColor(new java.awt.Color(0xffffff)); 
			}
			 document.setPageSize(pageSize);
			 
			document.addTitle("Credit Debit Pdf Report");
            document.addSubject("Credit Debit Pdf Report");
            document.addKeywords("iText, Credit Debit Pdf Report, Step 2, metadata");
            document.addCreator("Credit Debit Pdf Report using iText");
            document.addAuthor("FMS7");
			
            document.open();
			
			//Step 4: We create Page Size, Font Size , and Font Type ... Then add some paragraphs to the document ...
			
            
            //document.setPageSize(PageSize.A4);
			document.newPage();
                     
            Font black_bold = FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            Font black_bold1 = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, new Color(0x00, 0x00, 0x00));
            Font black_small = FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            Font black_normal = FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            Font black_very_small_bold = FontFactory.getFont(FontFactory.HELVETICA, 6, Font.BOLD, new Color(0x00, 0x00, 0x00));
            Font red_bold = FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD, new Color(0x00, 0x00, 0x00));
            Font red_normal = FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, new Color(0xFF, 0x00, 0x00));
         
            
            String context_nm = request.getContextPath();
			String server_nm = request.getServerName();
			String server_port = ""+request.getServerPort();
			  
			url_start = "http://"+server_nm+":"+server_port+context_nm;
			PdfPCell cell;
			
			PdfPTable Table = new PdfPTable(1);
			
			cell = new PdfPCell(new Paragraph("",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(0);
			
			Table.setWidthPercentage(100);
			Table.addCell(cell);
			
			document.add(Table);
			
			PdfPTable buyerTable = new PdfPTable(1);
			buyerTable.setWidthPercentage(100);
			
			cell = new PdfPCell(new Paragraph("Hazira LNG Private Limited "+Credit_Debit_pdf+" Note ",black_bold1));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(0);
			buyerTable.addCell(cell);
			//buyerTable.setWidthPercentage(100);		
			//document.add(buyerTable);
			
			if(Customer_tax_pdf.equalsIgnoreCase("regas")) 
			{
			cell = new PdfPCell(new Paragraph("Issued under Rule-4A of the Service Tax Rules, 1994",black_bold1));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setBorder(0);
				buyerTable.addCell(cell);
				//buyerTable.setWidthPercentage(100);		
				//document.add(buyerTable);
			}
			
			
			cell = new PdfPCell(new Paragraph(""+Cr_dr_header_pdf,black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(0);
			buyerTable.addCell(cell);
			
			document.add(buyerTable);
			PdfPTable buyerTablenew = new PdfPTable(2);
			buyerTablenew.setWidthPercentage(100);
			
			cell = new PdfPCell(new Paragraph("\n\n",black_small));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(0);
			cell.setColspan(2);
			buyerTablenew.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("Registered Office:",black_small));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_LEFT);
			cell.setBorder(0);
			buyerTablenew.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("To: ",black_small));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(0);
			buyerTablenew.addCell(cell);
			//buyerTable.setWidthPercentage(100);		
			//document.add(buyerTable);
			
			cell = new PdfPCell(new Paragraph(""+DRCRcontact_Suppl_Name_pdf+",",black_small));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(0);
			buyerTablenew.addCell(cell);
			
			cell = new PdfPCell(new Paragraph(""+DRCRcontact_customer_name_pdf+",",black_small));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(0);
			buyerTablenew.addCell(cell);
			
			cell = new PdfPCell(new Paragraph(""+DRCRcontact_Suppl_Person_Address_pdf+",",black_small));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(0);
			buyerTablenew.addCell(cell);
			
			cell = new PdfPCell(new Paragraph(""+DRCRcontact_Customer_Person_Address_pdf+",",black_small));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(0);
			buyerTablenew.addCell(cell);
			
			cell = new PdfPCell(new Paragraph(""+DRCRcontact_Suppl_Person_City_pdf+"-"+DRCRcontact_Suppl_Person_Pin_pdf,black_small));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(0);
			buyerTablenew.addCell(cell);
			//buyerTable.setWidthPercentage(100);		
			//document.add(buyerTable);
			
			cell = new PdfPCell(new Paragraph(""+DRCRcontact_Customer_Person_City_pdf+"-"+DRCRcontact_Customer_Person_Pin_pdf,black_small));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(0);
			buyerTablenew.addCell(cell);
			//buyerTable.setWidthPercentage(100);		
			
			document.add(buyerTablenew);
			PdfPTable buyerTablenew1 = new PdfPTable(2);
			buyerTablenew1.setWidthPercentage(100);
			
			cell = new PdfPCell(new Paragraph("\n\n",black_small));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(0);
			cell.setColspan(2);
			buyerTablenew1.addCell(cell);
			
			if(Customer_tax_pdf.equalsIgnoreCase("cst") || Customer_tax_pdf.equalsIgnoreCase("vat"))
			{
				if(!DRCRcontact_Suppl_GST_NO_pdf.trim().equals(""))
				{
					cell = new PdfPCell(new Paragraph("GST TIN No. : "+DRCRcontact_Suppl_GST_NO_pdf+" DT. "+DRCRcontact_Suppl_GST_DT_pdf,black_small));
					cell.setHorizontalAlignment(Element.ALIGN_LEFT);
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
					cell.setBorder(0);
					buyerTablenew1.addCell(cell);
				}
				else
				{
					cell = new PdfPCell(new Paragraph("",black_small));
					cell.setHorizontalAlignment(Element.ALIGN_LEFT);
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
					cell.setBorder(0);
					buyerTablenew1.addCell(cell);
				}
				
				cell = new PdfPCell(new Paragraph("GST TIN NO: "+DRCRcontact_customer_gst_tin_no_pdf+" DT. "+DRCRcontact_customer_gst_tin_dt_pdf,black_small));
				cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setBorder(0);
				buyerTablenew1.addCell(cell);
				
				if(!DRCRcontact_Suppl_CST_NO_pdf.trim().equals(""))
				{
					cell = new PdfPCell(new Paragraph("CST TIN No. : "+DRCRcontact_Suppl_CST_NO_pdf+" DT. "+DRCRcontact_Suppl_CST_DT_pdf,black_small));
					cell.setHorizontalAlignment(Element.ALIGN_LEFT);
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
					cell.setBorder(0);
					buyerTablenew1.addCell(cell);
				}
				else
				{
					cell = new PdfPCell(new Paragraph("",black_small));
					cell.setHorizontalAlignment(Element.ALIGN_LEFT);
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
					cell.setBorder(0);
					buyerTablenew1.addCell(cell);
				}
				
				cell = new PdfPCell(new Paragraph("CST TIN NO: "+DRCRcontact_customer_cst_tin_no_pdf+" DT. "+DRCRcontact_customer_cst_tin_dt_pdf,black_small));
				cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setBorder(0);
				buyerTablenew1.addCell(cell);
			}
			else if(Customer_tax_pdf.equalsIgnoreCase("regas"))
			{
				cell = new PdfPCell(new Paragraph("Service Tax Registration No. : "+DRCRcontact_Suppl_Service_Tax_NO_pdf+"\n (Business Auxiliary Service)",black_small));
				cell.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setBorder(0);
				cell.setColspan(2);
				buyerTablenew1.addCell(cell);
			}
			
			document.add(buyerTablenew1);
			
			PdfPTable buyerTable2 = new PdfPTable(1);
			buyerTable2.setWidthPercentage(100);
			
			cell = new PdfPCell(new Paragraph("\n",black_small));
			cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(0);
			buyerTable2.addCell(cell);
			
			cell = new PdfPCell(new Paragraph(Credit_Debit_pdf+" Note Date: "+Cr_dr_dt_pdf,black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(0);
			//cell.setFixedHeight(10f);
			buyerTable2.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("HLPL "+Credit_Debit_pdf+" Note No: "+Cr_dr_no_pdf,black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(0);
			//cell.setFixedHeight(10f);
			buyerTable2.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("Billing Period : From Dt : "+Cr_dr_prd_st_dt_pdf+" To Dt : "+Cr_dr_prd_end_dt_pdf,black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(0);
			//cell.setFixedHeight(10f);
			buyerTable2.addCell(cell);
			
			document.add(buyerTable2);
			
			int col=20;
			PdfPTable buyerTable1 = new PdfPTable(col);
		    buyerTable1.setWidthPercentage(100);
			
		    cell = new PdfPCell(new Paragraph("",red_bold));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(0);
			cell.setColspan(col);
			buyerTable1.addCell(cell);
		    
			cell = new PdfPCell(new Paragraph("Sr No.",red_bold));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(col/col);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("Item",red_bold));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(8);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("Attachment Reference",red_bold));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("Currency",red_bold));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("Quantity (MMBTU)",red_bold));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("Rate",red_bold));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("Amount",red_bold));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(3);
			buyerTable1.addCell(cell);
			
			int	sr_no = 1;
			cell = new PdfPCell(new Paragraph(""+(sr_no++),black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(1);
			cell.setFixedHeight(10f);
			buyerTable1.addCell(cell);
			
			
			cell = new PdfPCell(new Paragraph("Natural Gas (Delivered) (USD) as per the invoice "+Cr_dr_inv_no_pdf+" dated "+Cr_dr_inv_dt_pdf,black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(8);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
					
			cell = new PdfPCell(new Paragraph("USD",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph(""+Cr_dr_qty_pdf,black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			if(Customer_tax_pdf.equalsIgnoreCase("regas"))
			{
				cell = new PdfPCell(new Paragraph("",black_bold));
				cell.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setBorder(Rectangle.BOX);
				cell.setColspan(2);
				buyerTable1.addCell(cell);
				
				cell = new PdfPCell(new Paragraph("",black_bold));
				cell.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setBorder(Rectangle.BOX);
				cell.setColspan(3);
				buyerTable1.addCell(cell);
			}
			else
			{
				cell = new PdfPCell(new Paragraph(""+Cr_dr_rate_pdf,black_bold));
				cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setBorder(Rectangle.BOX);
				cell.setColspan(2);
				buyerTable1.addCell(cell);
				
				cell = new PdfPCell(new Paragraph(""+Cr_dr_gross_amt_usd_pdf,black_bold));
				cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setBorder(Rectangle.BOX);
				cell.setColspan(3);
				buyerTable1.addCell(cell);
			}
			
			if(Customer_tax_pdf.equalsIgnoreCase("regas"))
			{
				cell = new PdfPCell(new Paragraph(""+sr_no++,black_bold));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setBorder(Rectangle.BOX);
				cell.setColspan(1);
				buyerTable1.addCell(cell);
				
				cell = new PdfPCell(new Paragraph("Regasification Tariff (USD/mmbtu)",black_bold));
				cell.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setBorder(Rectangle.BOX);
				cell.setColspan(8);
				buyerTable1.addCell(cell);
				
				cell = new PdfPCell(new Paragraph("",black_bold));
				cell.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setBorder(Rectangle.BOX);
				cell.setColspan(2);
				buyerTable1.addCell(cell);
				
				cell = new PdfPCell(new Paragraph("USD",black_bold));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setBorder(Rectangle.BOX);
				cell.setColspan(2);
				buyerTable1.addCell(cell);
				
				cell = new PdfPCell(new Paragraph("",black_bold));
				cell.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setBorder(Rectangle.BOX);
				cell.setColspan(2);
				buyerTable1.addCell(cell);
				
				cell = new PdfPCell(new Paragraph(""+Cr_dr_rate_pdf,black_bold));
				cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setBorder(Rectangle.BOX);
				cell.setColspan(2);
				buyerTable1.addCell(cell);
				
				cell = new PdfPCell(new Paragraph("",black_bold));
				cell.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setBorder(Rectangle.BOX);
				cell.setColspan(3);
				buyerTable1.addCell(cell);
			}
			
			
			cell = new PdfPCell(new Paragraph(""+sr_no++,black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(1);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("Gross Amount (USD)",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(8);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("USD",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph(""+Cr_dr_qty_pdf,black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph(""+Cr_dr_gross_amt_usd_pdf,black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(3);
			buyerTable1.addCell(cell);
			
			//////////////////////////////////////////////////////////////
			
			cell = new PdfPCell(new Paragraph(""+sr_no++,black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(1);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("Exchange Rate",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(8);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("Att1",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph(""+Cr_dr_exchg_rate_diff_pdf,black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph(" ",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(3);
			buyerTable1.addCell(cell);
			
			//////////////////////////////////////////////////
			
			cell = new PdfPCell(new Paragraph(""+sr_no++,black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(1);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("Gross Amount (Rupees)",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(8);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("Rupees",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph(""+Cr_dr_gross_amt_inr_pdf,black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(3);
			buyerTable1.addCell(cell);
			
			
			//////////////////////////////////////////////////
			for(int i=0;i<DRCRcust_tax_code_pdf.size();i++)
			{
				if(i==0)
				{
					cell = new PdfPCell(new Paragraph(""+sr_no++,black_bold));
					cell.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
					cell.setBorder(Rectangle.BOX);
					cell.setColspan(1);
					buyerTable1.addCell(cell);
				}
				else
				{
					cell = new PdfPCell(new Paragraph("",black_bold));
					cell.setHorizontalAlignment(Element.ALIGN_LEFT);
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
					cell.setBorder(Rectangle.BOX);
					cell.setColspan(1);
					buyerTable1.addCell(cell);
				}
				
				cell = new PdfPCell(new Paragraph(""+DRCRcust_tax_nm_pdf.elementAt(i),black_bold));
				cell.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setBorder(Rectangle.BOX);
				cell.setColspan(8);
				buyerTable1.addCell(cell);
				
				cell = new PdfPCell(new Paragraph("",black_bold));
				cell.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setBorder(Rectangle.BOX);
				cell.setColspan(2);
				buyerTable1.addCell(cell);
				
				cell = new PdfPCell(new Paragraph("Rupees",black_bold));
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setBorder(Rectangle.BOX);
				cell.setColspan(2);
				buyerTable1.addCell(cell);
				
				cell = new PdfPCell(new Paragraph("",black_bold));
				cell.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setBorder(Rectangle.BOX);
				cell.setColspan(2);
				buyerTable1.addCell(cell);
				
				cell = new PdfPCell(new Paragraph(""+DRCRcust_tax_rate_pdf.elementAt(i)+"%",black_bold));
				cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setBorder(Rectangle.BOX);
				cell.setColspan(2);
				buyerTable1.addCell(cell);
				
				cell = new PdfPCell(new Paragraph(""+DRCRcust_tax_amt_pdf.elementAt(i),black_bold));
				cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setBorder(Rectangle.BOX);
				cell.setColspan(3);
				buyerTable1.addCell(cell);
				
			}
			
			cell = new PdfPCell(new Paragraph(""+sr_no++,black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(1);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("Amount (Rupees)",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(8);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("Rupees",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph(""+DRCRcustomer_Invoice_Tax_Net_Amt_INR_pdf,black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(3);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph(""+sr_no++,black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(1);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("Net Amount (Rupees)",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(8);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("Rupees",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(2);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph(""+Cr_dr_net_amt_inr_pdf,black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(Rectangle.BOX);
			cell.setColspan(3);
			buyerTable1.addCell(cell);
			
			///////////////////////////////////////////////
			

			cell = new PdfPCell(new Paragraph("\n\n"));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(0);
			cell.setColspan(col);
			buyerTable1.addCell(cell);
			
			if(Customer_tax_pdf.equalsIgnoreCase("regas"))
			{
				if(!invoice_title.equalsIgnoreCase("CREDIT") ){
					cell = new PdfPCell(new Paragraph("Please pay the amount by wire transfer at our Bank Account : Standard Chartered Bank (Ahmedabad Branch) - A/c No: 233-0-505333-1",black_bold));
					cell.setHorizontalAlignment(Element.ALIGN_LEFT);
					cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
					cell.setBorder(0);
					cell.setColspan(col);
					buyerTable1.addCell(cell);
				}
				
				cell = new PdfPCell(new Paragraph("Re-gas servies for the Cargo (BOE no. "+Boe_no_pdf+" dated "+Boe_dt_pdf+")",black_bold));
				cell.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
				cell.setBorder(0);
				cell.setColspan(col);
				buyerTable1.addCell(cell);
				
			}
			
			cell = new PdfPCell(new Paragraph("For Hazira LNG Private Limited",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(0);
			cell.setColspan(col);
			buyerTable1.addCell(cell);
			
			cell = new PdfPCell(new Paragraph("Authorised Signatory",black_bold));
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
			cell.setBorder(0);
			cell.setColspan(col);
			buyerTable1.addCell(cell);
			
			document.add(buyerTable1);
			
		} 
		catch (Exception e) 
		{
			e.printStackTrace();// TODO: handle exception
		}
		finally
		{
			document.close();
		}
				
	}
	
	public void debit_credit_fetch_attachment_dtls()
	{
		try
		{
		//	//System.out.println("Signing Date Fetch Query For TYPE--- = "+DRCRcustomer_Attach_Exchng_Rate_Dts1);
	
			
			String DRCR_attach_exchngrate_dt1="";
			
			for(int i=0;i<DRCRcustomer_Attach_Exchng_Rate_Dts1.size();i++)
			{
					DRCR_attach_exchngrate_dt1=DRCRcustomer_Attach_Exchng_Rate_Dts1.elementAt(i).toString();
				if(!DRCRcustomer_Attach_Exchg_Rate_Cd1.equals(DRCRsbi_avg_tt_selling_buying_cd))
				{
					queryString = "SELECT NVL(A.exchg_val,'0.00') FROM FMS7_EXCHG_RATE_ENTRY A WHERE A.exchg_rate_cd="+DRCRcustomer_Attach_Exchg_Rate_Cd1+" " +
								  "AND A.eff_dt=TO_DATE('"+DRCR_attach_exchngrate_dt1+"','DD/MM/YYYY')";
			//		//System.out.println("Query For Fetching Exchange Rate For Invoicing From FMS7_EXCHG_RATE_ENTRY Table = "+queryString);
					
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						DRCRcustomer_Invoice_Exchg_Rate_Code1.add(DRCRcustomer_Attach_Exchg_Rate_Cd1);
						DRCRcustomer_Invoice_Exchg_Rate_Date1.add(DRCR_attach_exchngrate_dt1);
						DRCRcustomer_Attach_Exchg_Rate_Value1.add(nf2.format(Double.parseDouble(rset.getString(1))));
					}
					else
					{
						DRCRcustomer_Invoice_Exchg_Rate_Code1.add(DRCRcustomer_Attach_Exchg_Rate_Cd1);
						DRCRcustomer_Invoice_Exchg_Rate_Date1.add(DRCR_attach_exchngrate_dt1);
						DRCRcustomer_Attach_Exchg_Rate_Value1.add("0.00");
					}
				}
				else
				{
					queryString = "SELECT NVL(A.exchg_val,'0.00') FROM FMS7_EXCHG_RATE_ENTRY A WHERE A.exchg_rate_cd="+DRCRsbi_tt_buying_cd+" " +
								  "AND A.eff_dt=TO_DATE('"+DRCR_attach_exchngrate_dt1+"','DD/MM/YYYY')";
			//		//System.out.println("Query For Fetching Exchange Rate For Invoicing From FMS7_EXCHG_RATE_ENTRY Table = "+queryString);
					
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						DRCRcustomer_Invoice_Exchg_Rate_Code1.add(DRCRsbi_tt_buying_cd);
						DRCRcustomer_Invoice_Exchg_Rate_Date1.add(DRCR_attach_exchngrate_dt1);
						DRCRcustomer_Attach_Exchg_Rate_Value1.add(nf2.format(Double.parseDouble(rset.getString(1))));
					}
					else
					{
						DRCRcustomer_Invoice_Exchg_Rate_Code1.add(DRCRsbi_tt_buying_cd);
						DRCRcustomer_Invoice_Exchg_Rate_Date1.add(DRCR_attach_exchngrate_dt1);
						DRCRcustomer_Attach_Exchg_Rate_Value1.add("0.00");
					}
					
					queryString = "SELECT NVL(A.exchg_val,'0.00') FROM FMS7_EXCHG_RATE_ENTRY A WHERE A.exchg_rate_cd="+DRCRsbi_tt_selling_cd+" " +
								  "AND A.eff_dt=TO_DATE('"+DRCR_attach_exchngrate_dt1+"','DD/MM/YYYY')";
			//		//System.out.println("Query For Fetching Exchange Rate For Invoicing From FMS7_EXCHG_RATE_ENTRY Table = "+queryString);
					
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						DRCRcustomer_Invoice_Exchg_Rate_Code1.add(DRCRsbi_tt_selling_cd);
						DRCRcustomer_Invoice_Exchg_Rate_Date1.add(DRCR_attach_exchngrate_dt1);
						DRCRcustomer_Attach_Exchg_Rate_Value1.add(nf2.format(Double.parseDouble(rset.getString(1))));
					}
					else
					{
						DRCRcustomer_Invoice_Exchg_Rate_Code1.add(DRCRsbi_tt_selling_cd);
						DRCRcustomer_Invoice_Exchg_Rate_Date1.add(DRCR_attach_exchngrate_dt1);
						DRCRcustomer_Attach_Exchg_Rate_Value1.add("0.00");
					}
				}
				
			}
			
			for(int i=0; i<DRCRcustomer_Invoice_Exchg_Rate_Code1.size(); i++)
			{
				queryString = "SELECT A.exc_rate_nm FROM FMS7_CONT_EXCHG_RATE_MST A WHERE " +
							  "A.exc_rate_cd="+DRCRcustomer_Invoice_Exchg_Rate_Code1.elementAt(i)+"";
			//	//System.out.println("Query For Fetching Exchange Rate Name For Invoicing From FMS7_CONT_EXCHG_RATE_MST Table = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					DRCRcustomer_Invoice_Exchg_Rate_Name1.add(rset.getString(1)==null?"":rset.getString(1));
				}
				else
				{
					DRCRcustomer_Invoice_Exchg_Rate_Name1.add("");
				}
			}
				
				 
		}
		catch(Exception e)
		{
			//System.out.println("Exception in Fetching Data..."+e.getMessage());
			e.printStackTrace();
		}
	}
		
	public void debit_credit_fetch_cust_tax_dtls()
	{
		try
		{
			String DRCR_CUST_tax_structure_dtl="";
			String DRCR_CUST_tax_struct_cd="";
			String DRCR_CUST_APPLICABLE_TAX1="";
			
			String DRCR_CUST_SERVICE_tax_structure_dtl="";
			String DRCR_CUST_SERVICE_tax_struct_cd="";
			
	//		//System.out.println("Signing Date Fetch Query For TYPE--- = "+mstcontract_type);
	//		//System.out.println("DRCR_CUST_APPLICABLE_TAX--"+DRCRcust_cd);
			//DRCRcust_cd
			for(int i=0;i<DRCRcust_cd.size();i++)
			{
				DRCR_CUST_APPLICABLE_TAX1="";
				queryString = "SELECT A.TAX_STRUCT_DTL,A.TAX_STRUCT_CD FROM FMS7_CUSTOMER_TAX_STRUCT_DTL A WHERE " +
							  "A.customer_cd="+DRCRcust_cd.elementAt(i)+" AND " +
					 		  "A.tax_struct_dt=(SELECT MAX(B.tax_struct_dt) FROM FMS7_CUSTOMER_TAX_STRUCT_DTL B WHERE " +
					 		  "A.customer_cd=B.customer_cd AND A.plant_seq_no=B.plant_seq_no AND " +
					 		  "TO_DATE(B.tax_struct_dt,'DD/MM/YYYY')<=TO_DATE(sysdate,'DD/MM/YYYY'))";
				
				rset = stmt.executeQuery(queryString);
		//		//System.out.println("FETCH TAX SRUCTURE--"+queryString);
				if(rset.next())
				{
					DRCR_CUST_tax_structure_dtl = rset.getString(1)==null?"":rset.getString(1);
					DRCR_CUST_tax_struct_cd = rset.getString(2)==null?"0":rset.getString(2);
					
				}
				else
				{
					DRCR_CUST_tax_structure_dtl = "";
					DRCR_CUST_tax_struct_cd = "0";
					
				}
				
				
			
				queryString = "SELECT A.TAX_STRUCT_DTL,A.TAX_STRUCT_CD FROM FMS7_CUSTOMER_SERVICE_TAX_DTL A WHERE " +
							  "A.customer_cd="+DRCRcust_cd.elementAt(i)+" AND " +
					 		  "A.tax_struct_dt=(SELECT MAX(B.tax_struct_dt) FROM FMS7_CUSTOMER_SERVICE_TAX_DTL B WHERE " +
					 		  "A.customer_cd=B.customer_cd AND A.plant_seq_no=B.plant_seq_no AND " +
					 		  "TO_DATE(B.tax_struct_dt,'DD/MM/YYYY')<=TO_DATE(sysdate,'DD/MM/YYYY'))";
		//		//System.out.println("FETCH TAX SRUCTURE--"+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					DRCR_CUST_SERVICE_tax_structure_dtl = rset.getString(1)==null?"":rset.getString(1);
					DRCR_CUST_SERVICE_tax_struct_cd = rset.getString(2)==null?"0":rset.getString(2);
					
				}
				else
				{
					DRCR_CUST_SERVICE_tax_structure_dtl = "";
					DRCR_CUST_SERVICE_tax_struct_cd = "0";
					
				}
			
				//DRCR_CUST_SERVICE_tax_structure_dtl = "";
				//DRCR_CUST_SERVICE_tax_struct_cd = "0";
			
			
				if(!DRCR_CUST_tax_struct_cd.equalsIgnoreCase("0"))
				{	
					
					queryString="SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0')"+
					" , B.sht_nm,TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A , FMS7_TAX_MST B "+
					" WHERE A.tax_str_cd='"+DRCR_CUST_tax_struct_cd+"' AND a.tax_code=b.tax_code AND "+
					" A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+DRCR_CUST_tax_struct_cd+"' AND "+ 
					" to_date(B.app_date,'dd/mm/yyyy')<=TO_DATE(sysdate,'DD/MM/YYYY')) ORDER BY A.tax_code ";				
			//		//System.out.println("Query For Finding Out Correct Tax Structure Details = "+queryString);
						rset=stmt.executeQuery(queryString);
						
						while(rset.next())
						{
							String temp_tax_nm=rset.getString(5)==null?"":rset.getString(5);
							if(temp_tax_nm.equalsIgnoreCase("VAT"))
							{
								DRCR_CUST_APPLICABLE_TAX1+="VAT"+"@";
							}
							else if(temp_tax_nm.equalsIgnoreCase("CST"))
							{
								DRCR_CUST_APPLICABLE_TAX1+="CST"+"@";
							}
							else if(temp_tax_nm.equalsIgnoreCase("ST"))
							{
								DRCR_CUST_APPLICABLE_TAX1+="ST"+"@";
							}
						}
				}
				if(!DRCR_CUST_SERVICE_tax_struct_cd.equalsIgnoreCase("0"))
				{
					queryString="SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0')"+
					" , B.sht_nm,TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A , FMS7_TAX_MST B "+
					" WHERE A.tax_str_cd='"+DRCR_CUST_SERVICE_tax_struct_cd+"' AND a.tax_code=b.tax_code AND "+
					" A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+DRCR_CUST_SERVICE_tax_struct_cd+"' AND "+ 
					" to_date(B.app_date,'dd/mm/yyyy')<=TO_DATE(sysdate,'DD/MM/YYYY')) ORDER BY A.tax_code ";				
			//		//System.out.println("Query For Finding Out Correct Tax Structure Details = "+queryString);
						rset=stmt.executeQuery(queryString);
						
						while(rset.next())
						{
							String temp_tax_nm=rset.getString(5)==null?"":rset.getString(5);
							if(temp_tax_nm.equalsIgnoreCase("VAT"))
							{
								DRCR_CUST_APPLICABLE_TAX1+="VAT"+"@";
							}
							else if(temp_tax_nm.equalsIgnoreCase("CST"))
							{
								DRCR_CUST_APPLICABLE_TAX1+="CST"+"@";
							}
							else if(temp_tax_nm.equalsIgnoreCase("ST"))
							{
								DRCR_CUST_APPLICABLE_TAX1+="ST"+"@";
							}
						}
				}
				
				DRCR_CUST_APPLICABLE_TAX.add(DRCR_CUST_APPLICABLE_TAX1);
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in Fetching Data..."+e.getMessage());
			e.printStackTrace();
		}
	}
	
	public void debit_credit_fetch_tax_details_rpt()
	{
		
		DRCRcustomer_Invoice_Tax_Abbr.clear();
		DRCRcustomer_Invoice_Tax_Code.clear();
		DRCRcustomer_Invoice_Tax_Rate.clear();
		DRCRcustomer_Invoice_Tax_Amt.clear();
		DRCRcustomer_Invoice_Tax_Name.clear();
		
		
//		//System.out.println("ENTER IN DATABEAN-------------"+DRCR_tax_customer_tax);
			
		
		try
		{
			
			double total_tax_amt = 0;
			double tax_amt = 0;
			String tax_cd = "0";
			String tax_factor = "0.00";
	//		//System.out.println("CUSTOMER INVOICE---------------"+customer_Invoice_Gross_Amt_INR);
			
			queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
						  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+DRCR_tax_struct_cd_rpt+" AND " +
						  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+DRCR_tax_struct_cd_rpt+" AND " +
						  "B.app_date<=TO_DATE('"+DRCR_tax_note_date_rpt+"','DD/MM/YYYY')) ORDER BY A.tax_code";
		//	//System.out.println("Query For Finding Out Correct Tax Structure Details = "+queryString);
			rset=stmt.executeQuery(queryString);
		//	//System.out.println("TAX AMT-0->"+tax_amt+"--------"+DRCRcustomer_Invoice_Gross_Amt_INR);
			while(rset.next())
			{
				tax_cd = rset.getString(1);
				tax_factor = rset.getString(2);
				
				if(!DRCRcustomer_Invoice_Gross_Amt_INR_rpt.equalsIgnoreCase("")){
					if(rset.getString(3).equals("1"))
					{
						tax_amt = (Double.parseDouble(DRCRcustomer_Invoice_Gross_Amt_INR_rpt)*Double.parseDouble(rset.getString(2)))/100;
			//			//System.out.println("TAX AMT-1->"+tax_amt);
					}
					else if(rset.getString(3).equals("2"))
					{
						queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
									  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+DRCR_tax_struct_cd_rpt+" AND " +
									  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+DRCR_tax_struct_cd_rpt+" AND " +
									  "B.app_date<=TO_DATE('"+DRCR_tax_note_date_rpt+"','DD/MM/YYYY')) AND A.tax_code="+rset.getString(4)+"";
				//		//System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
					 			if(rset1.getString(3).equals("1"))
								{
									tax_amt = (Double.parseDouble(DRCRcustomer_Invoice_Gross_Amt_INR_rpt)*Double.parseDouble(rset1.getString(2)))/100;
								}
								
					 			tax_amt = (tax_amt*Double.parseDouble(rset.getString(2)))/100;
					// 			//System.out.println("TAX AMT-2->"+tax_amt);
						}
						else
						{
							tax_amt = 0;
						}
					}
					else
					{
						tax_amt = 0;
					}
				}
				else
				{
					DRCRcustomer_Invoice_Gross_Amt_INR="0";
				}
				DRCRcustomer_Invoice_Tax_Code.add(tax_cd);
				DRCRcustomer_Invoice_Tax_Rate.add(nf.format(Double.parseDouble(tax_factor)));
				DRCRcustomer_Invoice_Tax_Amt.add(nf3.format(tax_amt));
				total_tax_amt += Double.parseDouble(nf.format(tax_amt));
			//	//System.out.println("TTOTAL-AX AMT-1->"+total_tax_amt);
			}
			DRCRcustomer_Invoice_Tax_Net_Amt_INR = nf.format(total_tax_amt);
		//	DRCRcustomer_Invoice_Net_Amt_INR = nf3.format(total_tax_amt+Double.parseDouble(DRCRcustomer_Invoice_Gross_Amt_INR));
			
			for(int i=0; i<DRCRcustomer_Invoice_Tax_Code.size(); i++)
			{
				queryString = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " +
							  "tax_code="+DRCRcustomer_Invoice_Tax_Code.elementAt(i)+"";
			//	//System.out.println("Query For Fetching Tax Name = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					String tax_abbr = rset.getString(1).trim()==null?"":rset.getString(1).trim();
					String tax_nm = rset.getString(2).trim()==null?"":rset.getString(2).trim();
					DRCRcustomer_Invoice_Tax_Abbr.add(tax_abbr);
					DRCRcustomer_Invoice_Tax_Name.add(tax_nm);
				}
				else
				{
					DRCRcustomer_Invoice_Tax_Abbr.add("");
					DRCRcustomer_Invoice_Tax_Name.add("");
				}
			}
		//	//System.out.println("NET111 -->"+DRCRcustomer_Invoice_Tax_Code);
		//	//System.out.println("NET -->"+DRCRcustomer_Invoice_Net_Amt_INR);
		}
		catch(Exception e)
		{
			//System.out.println("In DATA BEAN FOR DEBIT CREDIT-"+e);
			e.printStackTrace();
		}
	}
		
	public void Fetch_Data_Report()
	{
		try
		{
			if(crdr.startsWith("C"))
				crdr="0";
			else if(crdr.startsWith("D"))
				crdr="1";
			else
				crdr="-1";
			
			String query="select cr_dr_no,to_char(cr_dr_dt,'dd/mm/yyyy'),to_char(period_start_dt,'dd/mm/yyyy')," +
					"to_char(period_end_dt,'dd/mm/yyyy'),year,inv_no,to_char(inv_dt,'dd/mm/yyyy')," +
					"qty,rate,exchg_rate_cd,to_char(exchg_rate_dt1,'dd/mm/yyyy'),to_char(exchg_rate_dt2,'dd/mm/yyyy')," +
					"to_char(exchg_rate_dt3,'dd/mm/yyyy'),to_char(exchg_rate_dt4,'dd/mm/yyyy')," +
					"exchg_rate_diff,tax_struct_cd,gross_amt_usd,gross_amt_inr,net_amt_inr,header_dtl,boe_no," +
					"to_char(boe_dt,'dd/mm/yyyy'),flag " +
					"from fms7_cr_dr_mst where customer_cd='"+custcd+"' and seq_no='"+seqno+"' and plant_seq_no='"+plant_cd+"' and " +
					"cr_dr='"+crdr+"' ";
		//	//System.out.println("......."+query);
			rset=stmt.executeQuery(query);
			while(rset.next())
			{
				cr_dr_no=rset.getString(1)==null?"":rset.getString(1);
				cr_dr_dt=rset.getString(2)==null?"":rset.getString(2);
				cr_dr_prd_st_dt=rset.getString(3)==null?"":rset.getString(3);
				cr_dr_prd_end_dt=rset.getString(4)==null?"":rset.getString(4);
				cr_dr_year=rset.getString(5)==null?"":rset.getString(5);
				cr_dr_inv_no=rset.getString(6)==null?"":rset.getString(6);
				cr_dr_inv_dt=rset.getString(7)==null?"":rset.getString(7);
				cr_dr_qty=rset.getString(8)==null?"":rset.getString(8);
				cr_dr_rate=rset.getString(9)==null?"":rset.getString(9);
				cr_dr_exch_cd=rset.getString(10)==null?"":rset.getString(10);
				cr_dr_exchg_rate_dt1=rset.getString(11)==null?"":rset.getString(11);
				cr_dr_exchg_rate_dt2=rset.getString(12)==null?"":rset.getString(12);
				cr_dr_exchg_rate_dt3=rset.getString(13)==null?"":rset.getString(13);
				cr_dr_exchg_rate_dt4=rset.getString(14)==null?"":rset.getString(14);
				cr_dr_exchg_rate_diff=rset.getString(15)==null?"":rset.getString(15);
				cr_dr_tax_structure_cd=rset.getString(16)==null?"":rset.getString(16);
				cr_dr_gross_amt_usd=rset.getString(17)==null?"":rset.getString(17);
				cr_dr_gross_amt_inr=rset.getString(18)==null?"":rset.getString(18);
				cr_dr_net_amt_inr=rset.getString(19)==null?"":rset.getString(19);
				cr_dr_header=rset.getString(20)==null?"":rset.getString(20);
				boe_no=rset.getString(21)==null?"":rset.getString(21);
				boe_dt=rset.getString(22)==null?"":rset.getString(22);
				String f=rset.getString(23)==null?"":rset.getString(23);
				if(f.equalsIgnoreCase("R"))
					flag="regas";
				else if(f.equalsIgnoreCase("C"))
					flag="cst";
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public void FETCH_GENERATED_CREDIT_DEBITS()
	{
		try
		{
			String addQuery="";
			if(cr_dr_rpt.startsWith("C"))
				cr_dr_rpt="0";
			else if(cr_dr_rpt.startsWith("D"))
				cr_dr_rpt="1";
			else
				cr_dr_rpt="-1";
			
			String query="SELECT CR_DR_NO,TO_CHAR(CR_DR_DT,'DD/MM/YYYY'),INV_NO,TO_CHAR(INV_DT,'DD/MM/YYYY')," +
					"EXCHG_RATE_DIFF,NET_AMT_INR,PLANT_SEQ_NO,CR_DR,SEQ_NO,CR_DR_DT,TO_CHAR(CR_DR_DT,'YYYY') " +
					"FROM FMS7_CR_DR_MST WHERE CUSTOMER_CD='"+Customer_cd_crdr_rpt+"' ";
			if(!Plant_cd_crdr_rpt.equalsIgnoreCase("0"))
			{
				addQuery=" AND PLANT_SEQ_NO='"+Plant_cd_crdr_rpt+"' ";
			}
			if(!cr_dr_rpt.equalsIgnoreCase("-1"))
			{
				addQuery=addQuery+" AND CR_DR='"+cr_dr_rpt+"' ";
			}
			query=query+addQuery+" ORDER BY PLANT_SEQ_NO,CR_DR,CR_DR_DT ";
				
			int i=0;
		//	//System.out.println("Fetching generated credit debit data..."+query);
			rset=stmt.executeQuery(query);
			while(rset.next())
			{
				CR_DR_NO.add(rset.getString(1));
				CR_DR_DT.add(rset.getString(2));
				CR_DR_INV_NO.add(rset.getString(3));
				CR_DR_INV_DT.add(rset.getString(4));
				CR_DR_EXCHG_RT_DIFF.add(rset.getString(5));
				CR_DR_NET_AMT_INR.add(rset.getString(6));
				CR_DR_PLANT_SEQ_NO.add(rset.getString(7));
				String credit_debit=rset.getString(8);
				if(credit_debit.equalsIgnoreCase("0"))
					credit_debit="Credit";
				else if(credit_debit.equalsIgnoreCase("1"))
					credit_debit="Debit";
				CR_DR.add(credit_debit);
				CR_DR_SEQ_NO.add(rset.getString(9));
				
				CR_DR_YEAR.put(i+"",rset.getString(11));
				i++;
				
				query="select plant_name from fms7_customer_plant_dtl where customer_cd='"+Customer_cd_crdr_rpt+"' and seq_no='"+rset.getString(7)+"' ";
			//	//System.out.println("............"+query);
				rset1=stmt1.executeQuery(query);
				if(rset1.next())
				{
					CR_DR_PLANT_NAME.add(rset1.getString(1));
				}
				else
				{
					CR_DR_PLANT_NAME.add("");
				}
			}
			////System.out.println("........."+CR_DR_YEAR.keySet());
			
			query="select distinct(year) from fms7_cr_dr_mst order by year desc ";
			rset=stmt.executeQuery(query);
			while(rset.next())
			{
				CR_DR_YEAR_DIS.add(rset.getString(1));
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in FUnction()-->"+e.getMessage());
			e.printStackTrace();
		}
	}
	
	public void invoice_adjustment_attachment_dtls_old()
	{
		double USD=0;
		double INR=0;
		
		
		NumberFormat nf=new DecimalFormat("##,###,###,###,##0.00##");
		try
		{
			String tempmap[]=customer_inv_mapping_id.split("-");
			String mapping_id="";	
			if(ContractType.equalsIgnoreCase("S"))
			{
				mapping_id=CustomerCd+"-"+FgsaNo+"-"+FgsaRevNo+"-"+SnNo+"-"+SnRevNo+"-"+"S";
				
				queryString = "select price_rate,currency_cd,flag " +
					"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
					"price_cd='1'  AND FLAG='Y' ";
			//	//System.out.println("Fetching flag of sn..."+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					Final_Total_Collection=rset.getString(1)==null?"0":rset.getString(1);
					Final_Total_Currency=rset.getString(2);
				}
			}
			else if(ContractType.equalsIgnoreCase("L"))
			{
				mapping_id=CustomerCd+"-"+FgsaNo+"-"+0+"-"+SnNo+"-"+SnRevNo+"-"+"L";
				
				queryString = "select price_rate,currency_cd,flag " +
				"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
				"price_cd='1'  AND FLAG='Y' ";
//				//System.out.println("Fetching flag of sn..."+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					Final_Total_Collection=rset.getString(1)==null?"0":rset.getString(1);
					Final_Total_Currency=rset.getString(2);
				}
			}
			else if(ContractType.equalsIgnoreCase("R"))
			{
				mapping_id=CustomerCd+"-"+FgsaNo+"-"+0+"-"+SnNo+"-"+0+"-"+"R";
				
				queryString = "select price_rate,currency_cd,flag " +
				"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
				"price_cd='1'  AND FLAG='Y' ";
				
		//		//System.out.println("Fetching flag of regas..."+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					Final_Total_Collection=rset.getString(1)==null?"0":rset.getString(1);
					Final_Total_Currency=rset.getString(2);
				}
			}
			else if(ContractType.equalsIgnoreCase("T"))
			{
				
				mapping_id=CustomerCd+"-"+FgsaNo+"-"+tempmap[2]+"-"+SnNo+"-"+0+"-"+"T";
				
				queryString = "select price_rate,currency_cd,flag " +
				"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
				"price_cd='1' and ltcora_no='"+tempmap[1]+"' and ltcora_rev_no='"+tempmap[2]+"' AND FLAG='Y' ";
				
			//	//System.out.println("Fetching flag of ltcora..."+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					Final_Total_Collection=rset.getString(1)==null?"0":rset.getString(1);
					Final_Total_Currency=rset.getString(2);
				}
			}
			else if(ContractType.equalsIgnoreCase("C"))
			{
				mapping_id=CustomerCd+"-"+FgsaNo+"-"+FgsaRevNo+"-"+SnNo+"-"+0+"-"+"C";
				
				queryString = "select price_rate,currency_cd,flag " +
				"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
				"price_cd='1' and ltcora_no='"+tempmap[1]+"' and ltcora_rev_no='"+tempmap[2]+"' AND FLAG='Y'  ";
				
			//	//System.out.println("Fetching flag of regas..."+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					Final_Total_Collection=rset.getString(1)==null?"0":rset.getString(1);
					Final_Total_Currency=rset.getString(2);
				}
			}
			
			
			
			if(Final_Total_Currency.equalsIgnoreCase("1"))
				Final_Total_Currency="INR";
			else if(Final_Total_Currency.equalsIgnoreCase("2"))
				Final_Total_Currency="USD";
			
			String map_id=CustomerCd+":"+FgsaNo+":"+FgsaRevNo+":"+SnNo+":"+SnRevNo+":%";
			
			
			String temp_Final_Total_Collection=Final_Total_Collection;
			double temp_bal=Double.parseDouble(temp_Final_Total_Collection);
		//	//System.out.println("...1///"+temp_bal);
			
			String query="select flag, amount, operation, inv_seq_no, currency from fms7_inv_compo_dtl where mapping_id LIKE '"+map_id+"' "+ 
			" and inv_seq_no LIKE '"+ContractType+":"+invFinancialYear+"%' and price_cd='1'  and (flag_temp not like 'T' or flag_temp is null)";

			if(modifycontract_type.equalsIgnoreCase("T"))
			{
				queryString1+=" AND LTCORA_NO='"+tempmap[1]+"'";
			}
			else if(modifycontract_type.equalsIgnoreCase("C"))
			{
				queryString1+=" AND LTCORA_NO='"+tempmap[1]+"' AND LTCORA_REV_NO='"+tempmap[2]+"'";
			}
			
		//	//System.out.println("QUERY for compo details--"+query);
		//	//System.out.println("temp_Final_Total_Collection--"+temp_Final_Total_Collection);
			rset1=stmt1.executeQuery(query);
			while(rset1.next())
			{
				String amt="0",tempamt="0";
				if(rset1.getString(1).equalsIgnoreCase("Y"))
				{
					String seq_no=rset1.getString(4);
					String tempseq_no[]=seq_no.split(":");
					
					String no=tempseq_no[2];
					if(no.length()==1)
						no="000"+no;
					else if(no.length()==2)
						no="00"+no;
					else if(no.length()==3)
						no="0"+no;
					else
						no=no;
					String yr=tempseq_no[1];
					
					String d1=tempseq_no[3];
					
					
					String tempD1[]=d1.split("/");
					String invd=tempD1[2]+tempD1[1]+tempD1[0];
					
					String tempD2[]=Inv_customer_Invoice_DT.split("/");
					String tempInv_customer_Invoice_DT=tempD2[2]+tempD2[1]+tempD2[0];
					
					
					if(Double.parseDouble(invd)<Double.parseDouble(tempInv_customer_Invoice_DT))
					{
				
					
						if(rset1.getString(3).equalsIgnoreCase("1"))
						{
							amt=rset1.getString(2)==null?"0":rset1.getString(2);
							//Invoice_adj_amt.add(nf.format(Double.parseDouble(amt)));
							
						//	//System.out.println("amt--"+amt);
							temp_bal=(temp_bal-Double.parseDouble(amt));
							//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
							
						}
						else if(rset1.getString(3).equalsIgnoreCase("2"))
						{
							amt=rset1.getString(2)==null?"0":rset1.getString(2);
							//Invoice_adj_amt.add(nf.format(Double.parseDouble(amt)));
							
							temp_bal=(temp_bal+Double.parseDouble(amt));
							//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
							
						}
						
						
					}
					
				}
			
			}
			
			temp_Final_Total_Collection=""+temp_bal;
			
			 query="select flag, amount, operation, inv_seq_no, currency from fms7_inv_compo_dtl where mapping_id LIKE '"+map_id+"' "+ 
						" and inv_seq_no LIKE '"+ContractType+":"+invFinancialYear+"%' and price_cd='1'  and (flag_temp not like 'T' or flag_temp is null)";
		
			if(modifycontract_type.equalsIgnoreCase("T"))
			{
				queryString1+=" AND LTCORA_NO='"+tempmap[1]+"'";
			}
			else if(modifycontract_type.equalsIgnoreCase("C"))
			{
				queryString1+=" AND LTCORA_NO='"+tempmap[1]+"' AND LTCORA_REV_NO='"+tempmap[2]+"'";
			}
			
			////System.out.println("QUERY for compo details--"+query);
			////System.out.println("temp_Final_Total_Collection--"+temp_Final_Total_Collection);
			rset1=stmt1.executeQuery(query);
			while(rset1.next())
			{
				String amt="0",tempamt="0";
				if(rset1.getString(1).equalsIgnoreCase("Y"))
				{
					String seq_no=rset1.getString(4);
					String tempseq_no[]=seq_no.split(":");
					
					String no=tempseq_no[2];
					if(no.length()==1)
						no="000"+no;
					else if(no.length()==2)
						no="00"+no;
					else if(no.length()==3)
						no="0"+no;
					else
						no=no;
					String yr=tempseq_no[1];
					
					String d1=tempseq_no[3];
					
					
					String tempD1[]=d1.split("/");
					String invd=tempD1[2]+tempD1[1]+tempD1[0];
					
					String tempD2[]=Inv_customer_Invoice_DT.split("/");
					String tempInv_customer_Invoice_DT=tempD2[2]+tempD2[1]+tempD2[0];
					
					
					/*if(Double.parseDouble(invd)<Double.parseDouble(tempInv_customer_Invoice_DT))
					{
				
					
						if(rset1.getString(3).equalsIgnoreCase("1"))
						{
							amt=rset1.getString(2)==null?"0":rset1.getString(2);
							Invoice_adj_amt.add(nf.format(Double.parseDouble(amt)));
							
							//System.out.println("amt--"+amt);
							temp_bal=(temp_bal-Double.parseDouble(amt));
							//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
							
						}
						else if(rset1.getString(3).equalsIgnoreCase("2"))
						{
							amt=rset1.getString(2)==null?"0":rset1.getString(2);
							Invoice_adj_amt.add(nf.format(Double.parseDouble(amt)));
							
							temp_bal=(temp_bal+Double.parseDouble(amt));
							//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
							
						}
						
						
					}
					temp_Final_Total_Collection=""+temp_bal;*/
					
					
				//	//System.out.println("temp_Final_Total_Collection"+temp_Final_Total_Collection);
			//		//System.out.println("invd"+invd);
					if(Double.parseDouble(invd)==Double.parseDouble(tempInv_customer_Invoice_DT))
					{
					
					
					
				//	//System.out.println("d1......"+d1);
//					Date invd=new Date(d1);
//					Date tempInv_customer_Invoice_DT=new Date(Inv_customer_Invoice_DT);
//					
//					//System.out.println("tempInv_customer_Invoice_DT"+tempInv_customer_Invoice_DT);
//					//System.out.println("invd"+invd);
//					if(invd.before(tempInv_customer_Invoice_DT) || invd.equals(tempInv_customer_Invoice_DT))
//					{
					
					if(rset1.getString(3).equalsIgnoreCase("1"))
					{
						amt=rset1.getString(2)==null?"0":rset1.getString(2);
						Invoice_adj_amt.add(nf.format(Double.parseDouble(amt)));
						
					//	//System.out.println("amt--"+amt);
						tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)-Double.parseDouble(amt));
						Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
						
					}
					else if(rset1.getString(3).equalsIgnoreCase("2"))
					{
						amt=rset1.getString(2)==null?"0":rset1.getString(2);
						Invoice_adj_amt.add(nf.format(Double.parseDouble(amt)));
						////System.out.println("amt--"+amt);
						tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)+Double.parseDouble(amt));
						Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
						
					}
					temp_Final_Total_Collection=tempamt;
					Invoice_adj_cur.add(Final_Total_Currency);
					
				//	//System.out.println("tempamt"+tempamt);
					
					///added for advance inv no
					/*String adv_inv_no="";
					String q1="select adv_inv_no from DLNG_INVOICE_MST where contract_type='"+tempseq_no[0]+"' " +
							"and hlpl_inv_seq_no='"+tempseq_no[2]+"' and financial_year='"+tempseq_no[1]+"'";
					//System.out.println("Query for inv no---"+q1);
					rset4=stmt4.executeQuery(q1);
					if(rset4.next())
					{
						adv_inv_no=rset4.getString(1)==null?"":rset4.getString(1);
						
						if(adv_inv_no.trim().equalsIgnoreCase(""))
						{
						//	Invoice_no.add(no+"/"+yr.substring(2,4)+"-"+yr.substring(7));
						}
						else
						{
						//	Invoice_no.add(adv_inv_no);
						}
						
						
					}*/
					
						
					
					//end
					////System.out.println("yr---->"+tempseq_no[3]);
					Invoice_no.add(no+"/"+yr.substring(2,4)+"-"+yr.substring(7));
					
					String tempdt1[]=tempseq_no[3].split("/");
					String tempdt2=tempdt1[0]+"/"+tempdt1[1]+"/"+tempdt1[2].substring(2);
					
					//Invoice_dt.add(tempseq_no[3]);
					Invoice_dt.add(tempdt2);
					
				}}
			}
			 balanceason=""+nf.format(temp_bal);
			Final_Total_Collection=nf.format(Double.parseDouble(Final_Total_Collection));
			////System.out.println("Invoice_adj_amt--"+Invoice_adj_amt);
			/*
			String query="SELECT AMT,CUR_INR_USD FROM FMS7_PARTY_ADV_DTL " +
					"WHERE CUSTOMER_CD='"+CustomerCd+"' AND TO_DATE(RECV_DT,'DD/MM/YYYY') <= TO_DATE('"+DueDate+"','dd/mm/yyyy') ";
		//	//System.out.println("Fetching advance adjusted..."+query);
			rset=stmt.executeQuery(query);
			while(rset.next())
			{
				if(rset.getString(2).toString().equalsIgnoreCase("U"))
				{
					flagUSD=true;
					USD=USD+Double.parseDouble(rset.getString(1));
				}
				else if(rset.getString(2).toString().equalsIgnoreCase("I"))
				{
					flagINR=true;
					INR=INR+Double.parseDouble(rset.getString(1));
				}
			}
			Total_Collection_INR=nf.format(Double.parseDouble(""+INR));
			Total_Collection_USD=nf.format(Double.parseDouble(""+USD));
		
			query="SELECT ADV_ADJ_AMT,NVL(ADV_ADJ_CUR,'-'),TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),HLPL_INV_SEQ_NO,FINANCIAL_YEAR " +
					"FROM DLNG_INVOICE_MST WHERE CUSTOMER_CD='"+CustomerCd+"' AND SN_NO='"+SnNo+"' "+ //AND SN_REV_NO='"+SnRevNo+"' " +
					"AND FGSA_NO='"+FgsaNo+"' AND FGSA_REV_NO='"+FgsaRevNo+"' AND CONTRACT_TYPE='"+ContractType+"' AND PLANT_SEQ_NO='"+CustomerPlantSeqNo+"' ";
			////System.out.println("Fetching adjusted amount..."+query);
			rset=stmt.executeQuery(query);
			while(rset.next())
			{
				String yr=rset.getString(5);
				String no=rset.getString(4).toString();
				String amt=rset.getString(1)==null?"0":rset.getString(1);
				if(no.length()==1)
					no="000"+no;
				else if(no.length()==2)
					no="00"+no;
				else if(no.length()==3)
					no="0"+no;
				else
					no=no;
				Invoice_adj_amt.add(""+nf.format(Double.parseDouble(amt)));
				Invoice_adj_cur.add(rset.getString(2)==null?"-":rset.getString(2));
				Invoice_dt.add(rset.getString(3));
				Invoice_no.add(no+"/"+yr.substring(2,4)+"-"+yr.substring(7));
				if(rset.getString(2).toString().equalsIgnoreCase("U"))
				{
					USD=USD-Double.parseDouble(""+rset.getString(1));
					Invoice_Adj_bal.add(""+nf.format(Double.parseDouble(""+USD)));
				}
				else if(rset.getString(2).toString().equalsIgnoreCase("I"))
				{
					INR=INR-Double.parseDouble(""+rset.getString(1));
					Invoice_Adj_bal.add(""+nf.format(Double.parseDouble(""+INR)));
				}
				else
				{	
					Invoice_Adj_bal.add("-");
				}
			}*/
		}
		catch(Exception e)
		{
			//System.out.println("Exception in Fetching Data..."+e.getMessage());
			e.printStackTrace();
		}
	}
	
	
	Vector Invoice_Tax_adj_amt = new Vector();
	Vector Invoice_Tax_adj_cur = new Vector();
	Vector Invoice_Tax_Adj_bal = new Vector();
	Vector Invoice_SBC_adj_amt = new Vector();
	Vector Invoice_SBC_adj_cur = new Vector();
	Vector Invoice_SBC_Adj_bal = new Vector();
	Vector Invoice_KKC_adj_amt = new Vector();
	Vector Invoice_KKC_adj_cur = new Vector();
	Vector Invoice_KKC_Adj_bal = new Vector();
	
	String Final_Total_Tax_Collection="0";
	String Final_Total_Tax_Currency="INR";
	String Final_Total_SBC_Collection="0";
	String Final_Total_SBC_Currency="INR";
	String Final_Total_KKC_Collection="0";
	String Final_Total_KKC_Currency="INR";
	
	boolean SBC_flag=false,SER_flag=false,KKC_flag=false; 
	String balanceason_tax="0";
	String balanceason_SBC="0";
	String balanceason_KKC="0";
	String payment_type="",ADV_ADJ_FLG=""; //HS20160725
	public String getADV_ADJ_FLG() {
		return ADV_ADJ_FLG;
	}

	public void setADV_ADJ_FLG(String aDV_ADJ_FLG) {
		ADV_ADJ_FLG = aDV_ADJ_FLG;
	}

	public String getPayment_type() {
		return payment_type;
	}

	String tax_Structure_Dtl = "";
	Map TAX_FLAG = new HashMap();
	Map TAX_TOTAL_COLLECTION = new HashMap();
	Map TAX_TOTAL_CURRENCY = new HashMap();
	Map TAX_PAYMENT_TYPE = new HashMap();
	Map TAX_BALANCE_ASON = new HashMap();
	Map TAX_INVOICE_DT = new HashMap();
	Map TAX_INVOICE_NO = new HashMap();
	Map TAX_ADJ_AMT = new HashMap();
	Map TAX_ADJ_CUR = new HashMap();
	Map TAX_ADJ_BAL = new HashMap();
	Vector compo_cd = new Vector();
	Vector compo_abbr = new Vector();
	
	public void invoice_adjustment_attachment_dtls()
	{
		double USD=0;
		double INR=0;
		
		
		NumberFormat nf=new DecimalFormat("##,###,###,###,##0.00##");
		try
		{
			////System.out.println("STEP-3: GET Adjustment Details: ");
			String tempmap[]=customer_inv_mapping_id.split("-");
			String mapping_id="";	
			if(ContractType.equalsIgnoreCase("S"))
			{
				mapping_id=CustomerCd+"-"+FgsaNo+"-"+FgsaRevNo+"-"+SnNo+"-"+SnRevNo+"-"+"S";
				
				queryString = "select price_rate,currency_cd,flag " +
					"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
					"price_cd='1'  AND FLAG='Y' ";
			//	//System.out.println("Fetching flag of sn..."+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					Final_Total_Collection=rset.getString(1)==null?"0":rset.getString(1);
					Final_Total_Currency=rset.getString(2);
				}
			}
			else if(ContractType.equalsIgnoreCase("L"))
			{
				mapping_id=CustomerCd+"-"+FgsaNo+"-"+0+"-"+SnNo+"-"+SnRevNo+"-"+"L";
				
				queryString = "select price_rate,currency_cd,flag " +
				"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
				"price_cd='1'  AND FLAG='Y' ";
//				////System.out.println("Fetching flag of sn..."+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					Final_Total_Collection=rset.getString(1)==null?"0":rset.getString(1);
					Final_Total_Currency=rset.getString(2);
				}
			}
			else if(ContractType.equalsIgnoreCase("R"))
			{
				mapping_id=CustomerCd+"-"+FgsaNo+"-"+0+"-"+SnNo+"-"+0+"-"+"R";
				
				queryString = "select price_rate,currency_cd,flag " +
				"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
				"price_cd='1'  AND FLAG='Y' ";
				
		//		//System.out.println("Fetching flag of regas..."+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					Final_Total_Collection=rset.getString(1)==null?"0":rset.getString(1);
					Final_Total_Currency=rset.getString(2);
				}
			}
			else if(ContractType.equalsIgnoreCase("T"))
			{
				
				mapping_id=CustomerCd+"-"+FgsaNo+"-"+tempmap[2]+"-"+SnNo+"-"+0+"-"+"T";
				
				queryString = "select price_rate,currency_cd,flag " +
				"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
				"price_cd='1' and ltcora_no='"+tempmap[1]+"' and ltcora_rev_no='"+tempmap[2]+"' AND FLAG='Y' ";
				
			//	//System.out.println("Fetching flag of ltcora..."+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					Final_Total_Collection=rset.getString(1)==null?"0":rset.getString(1);
					Final_Total_Currency=rset.getString(2);
				}
			}
			else if(ContractType.equalsIgnoreCase("C"))
			{
				mapping_id=CustomerCd+"-"+FgsaNo+"-"+FgsaRevNo+"-"+SnNo+"-"+0+"-"+"C";
				
				queryString = "select price_rate,currency_cd,flag,pay_type " + // HS20160725
				"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
				"price_cd='1' and ltcora_no='"+tempmap[1]+"' and ltcora_rev_no='"+tempmap[2]+"' AND FLAG='Y'  ";
				
				////System.out.println("Fetching flag of regas..."+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					Final_Total_Collection=rset.getString(1)==null?"0":rset.getString(1);
					Final_Total_Currency=rset.getString(2);
					payment_type=rset.getString(4)==null?"AP":rset.getString(4);
				}

				queryString = "select price_rate,currency_cd,flag,pay_type " + //DS20160510 && HS20160725
						"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
						"price_cd='6' and ltcora_no='"+tempmap[1]+"' and ltcora_rev_no='"+tempmap[2]+"' AND FLAG='Y'  ";
						
//				//System.out.println("Fetching flag of regas..."+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					SER_flag=true;
					Final_Total_Tax_Collection=rset.getString(1)==null?"0":rset.getString(1);
					Final_Total_Tax_Currency=rset.getString(2);
					payment_type=rset.getString(4)==null?"AP":rset.getString(4);
				}
				
				queryString = "select price_rate,currency_cd,flag,pay_type " + //DS20160510 && HS20160725
				"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
				"price_cd='7' and ltcora_no='"+tempmap[1]+"' and ltcora_rev_no='"+tempmap[2]+"' AND FLAG='Y'  ";
				
				////System.out.println("Fetching flag of regas..."+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					SBC_flag=true;
					Final_Total_SBC_Collection=rset.getString(1)==null?"0":rset.getString(1);
					Final_Total_SBC_Currency=rset.getString(2);
					payment_type=rset.getString(4)==null?"AP":rset.getString(4);
				} 
				
				queryString = "select price_rate,currency_cd,flag,pay_type " + //DS20160510 && HS20160725
				"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
				"price_cd='8' and ltcora_no='"+tempmap[1]+"' and ltcora_rev_no='"+tempmap[2]+"' AND FLAG='Y'  ";
				
				////System.out.println("Fetching flag of regas..."+queryString);
				rset=stmt.executeQuery(queryString);
				if(rset.next())
				{
					KKC_flag=true;
					Final_Total_KKC_Collection=rset.getString(1)==null?"0":rset.getString(1);
					Final_Total_KKC_Currency=rset.getString(2);
					payment_type=rset.getString(4)==null?"AP":rset.getString(4);
				} 
				
				queryString = "SELECT COMPO_ABR,COMPO_CD FROM FMS7_COMPO_MST WHERE COMPO_CD IN ('10','11','12','13')";
				rset = stmt.executeQuery(queryString);
				while(rset.next()) {
					compo_abbr.add(rset.getString(1)==null?"":rset.getString(1));
					compo_cd.add(rset.getString(2)==null?"":rset.getString(2));
				}
				
				for(int i=0;i<compo_cd.size();i++) {
//					if(tax_Structure_Dtl.contains(""+compo_abbr.elementAt(i))) {
						queryString = "SELECT PRICE_RATE,CURRENCY_CD,FLAG,PAY_TYPE "
								+ "FROM FMS7_CONT_PRICE_DTL WHERE MAPPING_ID = '"+mapping_id+"' "
								+ "AND PRICE_CD = '"+compo_cd.elementAt(i)+"' AND LTCORA_NO='"+tempmap[1]+"' "
								+ "AND LTCORA_REV_NO='"+tempmap[2]+"' AND FLAG='Y' ";
						rset = stmt.executeQuery(queryString);
						if(rset.next())
						{
							TAX_FLAG.put(compo_cd.elementAt(i),"Y");
							TAX_TOTAL_COLLECTION.put(compo_cd.elementAt(i),rset.getString(1)==null?"0":rset.getString(1));
							TAX_TOTAL_CURRENCY.put(compo_cd.elementAt(i),"INR");
							TAX_PAYMENT_TYPE.put(compo_cd.elementAt(i),rset.getString(4)==null?"AP":rset.getString(4));
						}
						else {
							compo_cd.removeElementAt(i);
							compo_abbr.removeElementAt(i);
							if(i!=0)
								i = i-1;
							else 
								i = 0;
						}
//					}
				}
			}
			
			if(Final_Total_Tax_Currency.equalsIgnoreCase("1"))
				Final_Total_Tax_Currency="INR";
			else if(Final_Total_Tax_Currency.equalsIgnoreCase("2"))
				Final_Total_Tax_Currency="USD";
			
			if(Final_Total_SBC_Currency.equalsIgnoreCase("1"))
				Final_Total_SBC_Currency="INR";
			else if(Final_Total_SBC_Currency.equalsIgnoreCase("2"))
				Final_Total_SBC_Currency="USD";
			
			if(Final_Total_KKC_Currency.equalsIgnoreCase("1"))
				Final_Total_KKC_Currency="INR";
			else if(Final_Total_KKC_Currency.equalsIgnoreCase("2"))
				Final_Total_KKC_Currency="USD";
			
			////System.out.println("...0///"+Final_Total_Currency);
			if(Final_Total_Currency.equalsIgnoreCase("1"))
				Final_Total_Currency="INR";
			else if(Final_Total_Currency.equalsIgnoreCase("2"))
				Final_Total_Currency="USD";
			
			String map_id=CustomerCd+":"+FgsaNo+":"+FgsaRevNo+":"+SnNo+":"+SnRevNo+":%";
			
			/////////////////////////////////////////////////////////////////////////////
			
			NumberFormat nf_2 = new DecimalFormat("#00.00");
			String temp_Final_Total_Tax_Collection=Final_Total_Tax_Collection;
			double temp_bal=Double.parseDouble(temp_Final_Total_Tax_Collection);
		//	//System.out.println("...1///"+Final_Total_Currency);
			
			String query="select flag, amount, operation, inv_seq_no, currency from fms7_inv_compo_dtl where mapping_id LIKE '"+map_id+"' "+ 
			" and inv_seq_no LIKE '"+ContractType+":"+invFinancialYear+"%' and price_cd='6'  and (flag_temp not like 'T' or flag_temp is null)";
			if(modifycontract_type.equalsIgnoreCase("T"))
			{
				query+=" AND LTCORA_NO='"+tempmap[1]+"'";
			}
			else if(modifycontract_type.equalsIgnoreCase("C"))
			{
				query+=" AND LTCORA_NO='"+tempmap[1]+"' AND LTCORA_REV_NO='"+tempmap[2]+"'";
			}
			
			////System.out.println("QUERY for compo details--"+query);
		//	//System.out.println("temp_Final_Total_Collection--"+temp_Final_Total_Collection);
			rset1=stmt1.executeQuery(query);
			while(rset1.next())
			{
				String amt="0",tempamt="0";
				if(rset1.getString(1).equalsIgnoreCase("Y"))
				{
					String seq_no=rset1.getString(4);
					String tempseq_no[]=seq_no.split(":");
					
					String no=tempseq_no[2];
					if(no.length()==1)
						no="000"+no;
					else if(no.length()==2)
						no="00"+no;
					else if(no.length()==3)
						no="0"+no;
					else
						no=no;
					String yr=tempseq_no[1];
					
					String d1=tempseq_no[3];
					
					
					String tempD1[]=d1.split("/");
					String invd=tempD1[2]+tempD1[1]+tempD1[0];
					
					String tempD2[]=Inv_customer_Invoice_DT.split("/");
					String tempInv_customer_Invoice_DT=tempD2[2]+tempD2[1]+tempD2[0];
					
					
					if(Double.parseDouble(invd)<Double.parseDouble(tempInv_customer_Invoice_DT))
					{
				
					
						if(rset1.getString(3).equalsIgnoreCase("1"))
						{
							amt=rset1.getString(2)==null?"0":rset1.getString(2);
							temp_bal=(temp_bal-Double.parseDouble(amt));
						}
						else if(rset1.getString(3).equalsIgnoreCase("2"))
						{
							amt=rset1.getString(2)==null?"0":rset1.getString(2);
							temp_bal=(temp_bal+Double.parseDouble(amt));
						}
					}
				}
			}
			
			temp_Final_Total_Tax_Collection=""+temp_bal;
			
			query="select flag, amount, operation, inv_seq_no, currency from fms7_inv_compo_dtl where mapping_id LIKE '"+map_id+"' "+ 
					" and inv_seq_no LIKE '"+ContractType+":"+invFinancialYear+"%' and price_cd='6'  and (flag_temp not like 'T' or flag_temp is null)";
		
			if(modifycontract_type.equalsIgnoreCase("T"))
			{
				query+=" AND LTCORA_NO='"+tempmap[1]+"'";
			}
			else if(modifycontract_type.equalsIgnoreCase("C"))
			{
				query+=" AND LTCORA_NO='"+tempmap[1]+"' AND LTCORA_REV_NO='"+tempmap[2]+"'";
			}
			
			//System.out.println("QUERY for compo details--"+query);
			////System.out.println("temp_Final_Total_Collection--"+temp_Final_Total_Collection);
			rset1=stmt1.executeQuery(query);
			while(rset1.next())
			{
				String amt="0",tempamt="0";
				if(rset1.getString(1).equalsIgnoreCase("Y"))
				{
					String seq_no=rset1.getString(4);
					String tempseq_no[]=seq_no.split(":");
					
					String no=tempseq_no[2];
					if(no.length()==1)
						no="000"+no;
					else if(no.length()==2)
						no="00"+no;
					else if(no.length()==3)
						no="0"+no;
					else
						no=no;
					String yr=tempseq_no[1];
					
					String d1=tempseq_no[3];
					
					String tempD1[]=d1.split("/");
					String invd=tempD1[2]+tempD1[1]+tempD1[0];
					
					String tempD2[]=Inv_customer_Invoice_DT.split("/");
					String tempInv_customer_Invoice_DT=tempD2[2]+tempD2[1]+tempD2[0];
					
					if(Double.parseDouble(invd)==Double.parseDouble(tempInv_customer_Invoice_DT))
					{
					
					if(rset1.getString(3).equalsIgnoreCase("1"))
					{
						amt=rset1.getString(2)==null?"0":rset1.getString(2);
						Invoice_Tax_adj_amt.add(nf.format(Double.parseDouble(amt)));
						
						tempamt=""+(Double.parseDouble(temp_Final_Total_Tax_Collection)-Double.parseDouble(amt));
						
						String temp_balance_for_checking1 = nf_2.format(Double.parseDouble(""+NumberFormat.getInstance().parse(tempamt)));
						double temp_bal_check1 = Double.parseDouble(""+NumberFormat.getInstance().parse(temp_balance_for_checking1));
						if(temp_bal_check1<=0 && temp_bal_check1>=-0.5)
							temp_bal_check1 = 0;
						
						tempamt = ""+temp_bal_check1;
						
						Invoice_Tax_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
						
					}
					else if(rset1.getString(3).equalsIgnoreCase("2"))
					{
						amt=rset1.getString(2)==null?"0":rset1.getString(2);
						Invoice_Tax_adj_amt.add(nf.format(Double.parseDouble(amt)));
						////System.out.println("amt--"+amt);
						tempamt=""+(Double.parseDouble(temp_Final_Total_Tax_Collection)+Double.parseDouble(amt));
						
						String temp_balance_for_checking1 = nf_2.format(Double.parseDouble(""+NumberFormat.getInstance().parse(tempamt)));
						double temp_bal_check1 = Double.parseDouble(""+NumberFormat.getInstance().parse(temp_balance_for_checking1));
						if(temp_bal_check1<=0 && temp_bal_check1>=-0.5)
							temp_bal_check1 = 0;
						
						tempamt = ""+temp_bal_check1;
						
						Invoice_Tax_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
						
					}
					
					temp_Final_Total_Tax_Collection=tempamt;
					Invoice_Tax_adj_cur.add(Final_Total_Tax_Currency);
					
				}}
			}
			
			String temp_balance_for_checking1 = nf_2.format(temp_bal);
			double temp_bal_check1 = Double.parseDouble(""+NumberFormat.getInstance().parse(temp_balance_for_checking1));
			if(temp_bal_check1<=0 && temp_bal_check1>=-0.5)
				temp_bal_check1 = 0 ;
			
			balanceason_tax=""+nf.format(temp_bal_check1);
			Final_Total_Tax_Collection=nf.format(Double.parseDouble(Final_Total_Tax_Collection));
			
			////System.out.println("**temp_bal:   "+temp_bal);
			/////////----SBC----////
			
			String temp_Final_Total_SBC_Collection=Final_Total_SBC_Collection;
			double temp_bal1=Double.parseDouble(temp_Final_Total_SBC_Collection);
		//	//System.out.println("...1///"+Final_Total_Currency);
			
			query="select flag, amount, operation, inv_seq_no, currency from fms7_inv_compo_dtl where mapping_id LIKE '"+map_id+"' "+ 
			" and inv_seq_no LIKE '"+ContractType+":"+invFinancialYear+"%' and price_cd='7' and (flag_temp not like 'T' or flag_temp is null)";

			if(modifycontract_type.equalsIgnoreCase("T"))
			{
				query+=" AND LTCORA_NO='"+tempmap[1]+"'";
			}
			else if(modifycontract_type.equalsIgnoreCase("C"))
			{
				query+=" AND LTCORA_NO='"+tempmap[1]+"' AND LTCORA_REV_NO='"+tempmap[2]+"'";
			}
			
		//	//System.out.println("QUERY for compo details--"+query);
		//	//System.out.println("temp_Final_Total_Collection--"+temp_Final_Total_Collection);
			rset1=stmt1.executeQuery(query);
			while(rset1.next())
			{
				String amt="0",tempamt="0";
				if(rset1.getString(1).equalsIgnoreCase("Y"))
				{
					String seq_no=rset1.getString(4);
					String tempseq_no[]=seq_no.split(":");
					
					String no=tempseq_no[2];
					if(no.length()==1)
						no="000"+no;
					else if(no.length()==2)
						no="00"+no;
					else if(no.length()==3)
						no="0"+no;
					else
						no=no;
					String yr=tempseq_no[1];
					
					String d1=tempseq_no[3];
					
					
					String tempD1[]=d1.split("/");
					String invd=tempD1[2]+tempD1[1]+tempD1[0];
					
					String tempD2[]=Inv_customer_Invoice_DT.split("/");
					String tempInv_customer_Invoice_DT=tempD2[2]+tempD2[1]+tempD2[0];
					
					
					if(Double.parseDouble(invd)<Double.parseDouble(tempInv_customer_Invoice_DT))
					{
						if(rset1.getString(3).equalsIgnoreCase("1"))
						{
							amt=rset1.getString(2)==null?"0":rset1.getString(2);
							temp_bal1=(temp_bal1-Double.parseDouble(amt));
						}
						else if(rset1.getString(3).equalsIgnoreCase("2"))
						{
							amt=rset1.getString(2)==null?"0":rset1.getString(2);
							temp_bal1=(temp_bal1+Double.parseDouble(amt));
						}
					}
				}
			}
			
			temp_Final_Total_SBC_Collection=""+temp_bal1;
			
			query="select flag, amount, operation, inv_seq_no, currency from fms7_inv_compo_dtl where mapping_id LIKE '"+map_id+"' "+ 
						" and inv_seq_no LIKE '"+ContractType+":"+invFinancialYear+"%' and price_cd='7' " +
						"and (flag_temp not like 'T' or flag_temp is null)";
		
			if(modifycontract_type.equalsIgnoreCase("T"))
			{
				query+=" AND LTCORA_NO='"+tempmap[1]+"'";
			}
			else if(modifycontract_type.equalsIgnoreCase("C"))
			{
				query+=" AND LTCORA_NO='"+tempmap[1]+"' AND LTCORA_REV_NO='"+tempmap[2]+"'";
			}
			
			////System.out.println("QUERY for compo details--"+query);
			////System.out.println("temp_Final_Total_Collection--"+temp_Final_Total_Collection);
			rset1=stmt1.executeQuery(query);
			while(rset1.next())
			{
				String amt="0",tempamt="0";
				if(rset1.getString(1).equalsIgnoreCase("Y"))
				{
					String seq_no=rset1.getString(4);
					String tempseq_no[]=seq_no.split(":");
					
					String no=tempseq_no[2];
					if(no.length()==1)
						no="000"+no;
					else if(no.length()==2)
						no="00"+no;
					else if(no.length()==3)
						no="0"+no;
					else
						no=no;
					String yr=tempseq_no[1];
					
					String d1=tempseq_no[3];
					
					
					String tempD1[]=d1.split("/");
					String invd=tempD1[2]+tempD1[1]+tempD1[0];
					
					String tempD2[]=Inv_customer_Invoice_DT.split("/");
					String tempInv_customer_Invoice_DT=tempD2[2]+tempD2[1]+tempD2[0];
					
					if(Double.parseDouble(invd)==Double.parseDouble(tempInv_customer_Invoice_DT))
					{
					
					if(rset1.getString(3).equalsIgnoreCase("1"))
					{
						amt=rset1.getString(2)==null?"0":rset1.getString(2);
						Invoice_SBC_adj_amt.add(nf.format(Double.parseDouble(amt)));
						
						tempamt=""+(Double.parseDouble(temp_Final_Total_SBC_Collection)-Double.parseDouble(amt));
						
						String temp_balance_for_checking2 = nf_2.format(Double.parseDouble(""+NumberFormat.getInstance().parse(tempamt)));
						double temp_bal_check2 = Double.parseDouble(""+NumberFormat.getInstance().parse(temp_balance_for_checking2));
						if(temp_bal_check1<=0 && temp_bal_check1>=-0.5)
							temp_bal_check1 = 0;
						
						tempamt = ""+temp_bal_check2;
						
						Invoice_SBC_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));//CHECK
						
					}
					else if(rset1.getString(3).equalsIgnoreCase("2"))
					{
						amt=rset1.getString(2)==null?"0":rset1.getString(2);
						Invoice_SBC_adj_amt.add(nf.format(Double.parseDouble(amt)));
						////System.out.println("amt--"+amt);
						tempamt=""+(Double.parseDouble(temp_Final_Total_SBC_Collection)+Double.parseDouble(amt));
						
						String temp_balance_for_checking2 = nf_2.format(Double.parseDouble(""+NumberFormat.getInstance().parse(tempamt)));
						double temp_bal_check2 = Double.parseDouble(""+NumberFormat.getInstance().parse(temp_balance_for_checking2));
						if(temp_bal_check2<=0 && temp_bal_check2>=-0.5)
							temp_bal_check2 = 0;
						
						tempamt = ""+temp_bal_check2;
						
						Invoice_SBC_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
						
					}
					temp_Final_Total_SBC_Collection=tempamt;
					Invoice_SBC_adj_cur.add(Final_Total_SBC_Currency);
					
				}}
			}
			
			String temp_balance_for_checking2 = nf_2.format(temp_bal1);
			double temp_bal_check2 = Double.parseDouble(""+NumberFormat.getInstance().parse(temp_balance_for_checking2));
			if(temp_bal_check2<=0 && temp_bal_check2>=-0.5)
				temp_bal_check2 = 0 ;
			
			balanceason_SBC=""+nf.format(temp_bal_check2);
			Final_Total_SBC_Collection=nf.format(Double.parseDouble(Final_Total_SBC_Collection));
			////System.out.println("**Final_Total_SBC_Collection:   "+Final_Total_SBC_Collection);
			////////----SBC----////
			
/////////----KKC----////
			
			String temp_Final_Total_KKC_Collection=Final_Total_KKC_Collection;
			double temp_bal2=Double.parseDouble(temp_Final_Total_KKC_Collection);
		//	//System.out.println("...1///"+Final_Total_Currency);
			
			query="select flag, amount, operation, inv_seq_no, currency from fms7_inv_compo_dtl where mapping_id LIKE '"+map_id+"' "+ 
			" and inv_seq_no LIKE '"+ContractType+":"+invFinancialYear+"%' and price_cd='8' and (flag_temp not like 'T' or flag_temp is null)";

			if(modifycontract_type.equalsIgnoreCase("T"))
			{
				query+=" AND LTCORA_NO='"+tempmap[1]+"'";
			}
			else if(modifycontract_type.equalsIgnoreCase("C"))
			{
				query+=" AND LTCORA_NO='"+tempmap[1]+"' AND LTCORA_REV_NO='"+tempmap[2]+"'";
			}
			
		//	//System.out.println("QUERY for compo details--"+query);
		//	//System.out.println("temp_Final_Total_Collection--"+temp_Final_Total_Collection);
			rset1=stmt1.executeQuery(query);
			while(rset1.next())
			{
				String amt="0",tempamt="0";
				if(rset1.getString(1).equalsIgnoreCase("Y"))
				{
					String seq_no=rset1.getString(4);
					String tempseq_no[]=seq_no.split(":");
					
					String no=tempseq_no[2];
					if(no.length()==1)
						no="000"+no;
					else if(no.length()==2)
						no="00"+no;
					else if(no.length()==3)
						no="0"+no;
					else
						no=no;
					String yr=tempseq_no[1];
					
					String d1=tempseq_no[3];
					
					
					String tempD1[]=d1.split("/");
					String invd=tempD1[2]+tempD1[1]+tempD1[0];
					
					String tempD2[]=Inv_customer_Invoice_DT.split("/");
					String tempInv_customer_Invoice_DT=tempD2[2]+tempD2[1]+tempD2[0];
					
					
					if(Double.parseDouble(invd)<Double.parseDouble(tempInv_customer_Invoice_DT))
					{
						if(rset1.getString(3).equalsIgnoreCase("1"))
						{
							amt=rset1.getString(2)==null?"0":rset1.getString(2);
							temp_bal2=(temp_bal2-Double.parseDouble(amt));
						}
						else if(rset1.getString(3).equalsIgnoreCase("2"))
						{
							amt=rset1.getString(2)==null?"0":rset1.getString(2);
							temp_bal2=(temp_bal2+Double.parseDouble(amt));
						}
					}
				}
			}
			
			temp_Final_Total_KKC_Collection=""+temp_bal2;
			
			query="select flag, amount, operation, inv_seq_no, currency from fms7_inv_compo_dtl where mapping_id LIKE '"+map_id+"' "+ 
						" and inv_seq_no LIKE '"+ContractType+":"+invFinancialYear+"%' and price_cd='8' " +
						"and (flag_temp not like 'T' or flag_temp is null)";
		
			if(modifycontract_type.equalsIgnoreCase("T"))
			{
				query+=" AND LTCORA_NO='"+tempmap[1]+"'";
			}
			else if(modifycontract_type.equalsIgnoreCase("C"))
			{
				query+=" AND LTCORA_NO='"+tempmap[1]+"' AND LTCORA_REV_NO='"+tempmap[2]+"'";
			}
			
			////System.out.println("QUERY for compo details--"+query);
			////System.out.println("temp_Final_Total_Collection--"+temp_Final_Total_Collection);
			rset1=stmt1.executeQuery(query);
			while(rset1.next())
			{
				String amt="0",tempamt="0";
				if(rset1.getString(1).equalsIgnoreCase("Y"))
				{
					String seq_no=rset1.getString(4);
					String tempseq_no[]=seq_no.split(":");
					
					String no=tempseq_no[2];
					if(no.length()==1)
						no="000"+no;
					else if(no.length()==2)
						no="00"+no;
					else if(no.length()==3)
						no="0"+no;
					else
						no=no;
					String yr=tempseq_no[1];
					
					String d1=tempseq_no[3];
					
					
					String tempD1[]=d1.split("/");
					String invd=tempD1[2]+tempD1[1]+tempD1[0];
					
					String tempD2[]=Inv_customer_Invoice_DT.split("/");
					String tempInv_customer_Invoice_DT=tempD2[2]+tempD2[1]+tempD2[0];
					
					if(Double.parseDouble(invd)==Double.parseDouble(tempInv_customer_Invoice_DT))
					{
					
					if(rset1.getString(3).equalsIgnoreCase("1"))
					{
						amt=rset1.getString(2)==null?"0":rset1.getString(2);
						Invoice_KKC_adj_amt.add(nf.format(Double.parseDouble(amt)));
						
						tempamt=""+(Double.parseDouble(temp_Final_Total_KKC_Collection)-Double.parseDouble(amt));
						
						String temp_balance_for_checking3 = nf_2.format(Double.parseDouble(""+NumberFormat.getInstance().parse(tempamt)));
						double temp_bal_check3 = Double.parseDouble(""+NumberFormat.getInstance().parse(temp_balance_for_checking3));
						if(temp_bal_check3<=0 && temp_bal_check3>=-0.5)
							temp_bal_check3 = 0;
						
						tempamt = ""+temp_bal_check3;
						
						Invoice_KKC_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));//CHECK
						
					}
					else if(rset1.getString(3).equalsIgnoreCase("2"))
					{
						amt=rset1.getString(2)==null?"0":rset1.getString(2);
						Invoice_KKC_adj_amt.add(nf.format(Double.parseDouble(amt)));
						////System.out.println("amt--"+amt);
						tempamt=""+(Double.parseDouble(temp_Final_Total_KKC_Collection)+Double.parseDouble(amt));
						
						String temp_balance_for_checking3 = nf_2.format(Double.parseDouble(""+NumberFormat.getInstance().parse(tempamt)));
						double temp_bal_check3 = Double.parseDouble(""+NumberFormat.getInstance().parse(temp_balance_for_checking3));
						if(temp_bal_check3<=0 && temp_bal_check3>=-0.5)
							temp_bal_check3 = 0;
						
						tempamt = ""+temp_bal_check3;
						
						Invoice_KKC_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
						
					}
					temp_Final_Total_KKC_Collection=tempamt;
					Invoice_KKC_adj_cur.add(Final_Total_KKC_Currency);
					
				}}
			}
			
			String temp_balance_for_checking3 = nf_2.format(temp_bal2);
			double temp_bal_check3 = Double.parseDouble(""+NumberFormat.getInstance().parse(temp_balance_for_checking3));
			if(temp_bal_check3<=0 && temp_bal_check3>=-0.5)
				temp_bal_check3 = 0 ;
			
			balanceason_KKC=""+nf.format(temp_bal_check3);
			Final_Total_KKC_Collection=nf.format(Double.parseDouble(Final_Total_KKC_Collection));
			
			////////---KKCC----////
			
			/////////////////////////////////////////////////
			System.out.println("compo_cd=="+compo_cd);
			System.out.println("TAX_TOTAL_COLLECTION=="+TAX_TOTAL_COLLECTION);
			if(TAX_TOTAL_COLLECTION.size()>0) { 
			for(int i =0;i<compo_cd.size();i++) {
				String temp_Final_Total_Collection=""+TAX_TOTAL_COLLECTION.get(compo_cd.elementAt(i));
				temp_bal=Double.parseDouble(temp_Final_Total_Collection);
				if(temp_bal!=0.00) {
					query="select flag, amount, operation, inv_seq_no, currency from fms7_inv_compo_dtl where mapping_id LIKE '"+map_id+"' "+ 
							" and inv_seq_no LIKE '"+ContractType+":"+invFinancialYear+"%' "
							+ "and price_cd='"+compo_cd.elementAt(i)+"'  and "
							+ "(flag_temp not like 'T' or flag_temp is null)";
					if(modifycontract_type.equalsIgnoreCase("T"))
					{
						query+=" AND LTCORA_NO='"+tempmap[1]+"'";
					}
					else if(modifycontract_type.equalsIgnoreCase("C"))
					{
						query+=" AND LTCORA_NO='"+tempmap[1]+"' AND LTCORA_REV_NO='"+tempmap[2]+"'";
					}
						rset1=stmt1.executeQuery(query);
						while(rset1.next())
						{
							String amt="0",tempamt="0";
							if(rset1.getString(1).equalsIgnoreCase("Y"))
							{
								String seq_no=rset1.getString(4);
								String tempseq_no[]=seq_no.split(":");
								
								String no=tempseq_no[2];
								if(no.length()==1)
									no="000"+no;
								else if(no.length()==2)
									no="00"+no;
								else if(no.length()==3)
									no="0"+no;
								else
									no=no;
								String yr=tempseq_no[1];
								String d1=tempseq_no[3];
								String tempD1[]=d1.split("/");
								String invd=tempD1[2]+tempD1[1]+tempD1[0];
								String tempD2[]=Inv_customer_Invoice_DT.split("/");
								String tempInv_customer_Invoice_DT=tempD2[2]+tempD2[1]+tempD2[0];
								
								if(Double.parseDouble(invd)<Double.parseDouble(tempInv_customer_Invoice_DT))
								{
									if(rset1.getString(3).equalsIgnoreCase("1"))
									{
										amt=rset1.getString(2)==null?"0":rset1.getString(2);
										temp_bal=(temp_bal-Double.parseDouble(amt.replaceAll(",", "")));
									}
									else if(rset1.getString(3).equalsIgnoreCase("2"))
									{
										amt=rset1.getString(2)==null?"0":rset1.getString(2);
										temp_bal=(temp_bal+Double.parseDouble(amt.replaceAll(",", "")));
									}
								}
							}
						}
						temp_Final_Total_Collection=""+temp_bal;
					int count_tax = 0;	String invoice_no = "";
					query="select flag, amount, operation, inv_seq_no, currency from fms7_inv_compo_dtl where mapping_id LIKE '"+map_id+"' "+ 
							" and inv_seq_no LIKE '"+ContractType+":"+invFinancialYear+"%' "
							+ "and price_cd='"+compo_cd.elementAt(i)+"'  and (flag_temp not like 'T' or flag_temp is null)";
					if(modifycontract_type.equalsIgnoreCase("T"))
					{
						query+=" AND LTCORA_NO='"+tempmap[1]+"'";
					}
					else if(modifycontract_type.equalsIgnoreCase("C"))
					{
						query+=" AND LTCORA_NO='"+tempmap[1]+"' AND LTCORA_REV_NO='"+tempmap[2]+"'";
					}
					
//					System.out.println("QUERY for compo details--"+query);
					rset1=stmt1.executeQuery(query);
					while(rset1.next())
					{
						count_tax++;
						String amt="0",tempamt="0";
						if(rset1.getString(1).equalsIgnoreCase("Y"))
						{
							String seq_no=rset1.getString(4);
							String tempseq_no[]=seq_no.split(":");
							
							String no=tempseq_no[2];
							if(no.length()==1)
								no="000"+no;
							else if(no.length()==2)
								no="00"+no;
							else if(no.length()==3)
								no="0"+no;
							else
								no=no;
							
							
							
							String yr=tempseq_no[1];
							String d1=tempseq_no[3];
							String tempD1[]=d1.split("/");
							String invd=tempD1[2]+tempD1[1]+tempD1[0];
							String tempD2[]=Inv_customer_Invoice_DT.split("/");
							String tempInv_customer_Invoice_DT=tempD2[2]+tempD2[1]+tempD2[0];
							
							String q = "select new_inv_seq_no from DLNG_INVOICE_MST where financial_year='"+invFinancialYear+"' "
									+ "and hlpl_inv_seq_no = '"+no+"' and contract_type='"+ContractType+"' AND FLAG='Y' ";
							rset = stmt.executeQuery(q);
							if(rset.next()) {
								String temp_no = rset.getString(1)==null?"":rset.getString(1);
								if(!temp_no.equals("")) {
									no = temp_no;
								} else {
									no = no+"/"+yr.substring(2,4)+"-"+yr.substring(7);
								}
							} else {
								no = no+"/"+yr.substring(2,4)+"-"+yr.substring(7);
							}
							
							if(Double.parseDouble(invd)==Double.parseDouble(tempInv_customer_Invoice_DT))
							{
								if(rset1.getString(3).equalsIgnoreCase("1"))
								{
									amt=rset1.getString(2)==null?"0":rset1.getString(2);
									TAX_ADJ_AMT.put(compo_cd.elementAt(i)+":"+no,nf.format(Double.parseDouble(amt.replaceAll(",", ""))));
									
									tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)-Double.parseDouble(amt.replaceAll(",", "")));
	
									temp_balance_for_checking1 =nf_2.format(Double.parseDouble(""+NumberFormat.getInstance().parse(tempamt)));
									temp_bal_check1 = Double.parseDouble(""+NumberFormat.getInstance().parse(temp_balance_for_checking1));
									if(temp_bal_check1<=0 && temp_bal_check1>=-0.5)
										temp_bal_check1 = 0;
									tempamt = ""+temp_bal_check1;
									
									TAX_ADJ_BAL.put(compo_cd.elementAt(i)+":"+no,nf.format(Double.parseDouble(tempamt)));
								}
								else if(rset1.getString(3).equalsIgnoreCase("2"))
								{
									amt=rset1.getString(2)==null?"0":rset1.getString(2);
									TAX_ADJ_AMT.put(compo_cd.elementAt(i),nf.format(Double.parseDouble(amt.replaceAll(",", ""))));
									
									tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)+Double.parseDouble(amt.replaceAll(",", "")));
									
									temp_balance_for_checking1 = nf_2.format(Double.parseDouble(""+NumberFormat.getInstance().parse(tempamt)));
									temp_bal_check1 = Double.parseDouble(""+NumberFormat.getInstance().parse(temp_balance_for_checking1));
									if(temp_bal_check1<=0 && temp_bal_check1>=-0.5)
										temp_bal_check1 = 0;
									tempamt = ""+temp_bal_check1;
									
									TAX_ADJ_BAL.put(compo_cd.elementAt(i)+":"+no,nf.format(Double.parseDouble(tempamt)));
								}
								else {
									TAX_ADJ_AMT.put(compo_cd.elementAt(i),nf.format(Double.parseDouble("0")));
									TAX_ADJ_BAL.put(compo_cd.elementAt(i)+":"+no,nf.format(Double.parseDouble(tempamt)));
								}
								temp_Final_Total_Collection=tempamt;
								TAX_ADJ_CUR.put(compo_cd.elementAt(i)+":"+no,TAX_TOTAL_CURRENCY.get(compo_cd.elementAt(i)));
								
								
								TAX_INVOICE_NO.put(compo_cd.elementAt(i),no);
								
								String tempdt1[]=tempseq_no[3].split("/");
								String tempdt2=tempdt1[0]+"/"+tempdt1[1]+"/"+tempdt1[2].substring(2);
								invoice_no = no;
								TAX_INVOICE_DT.put(compo_cd.elementAt(i)+":"+no,tempdt2);
							}
						}
					}
					
					
					
					
					if(count_tax==0) {
						TAX_ADJ_AMT.put(compo_cd.elementAt(i),nf.format(Double.parseDouble("0")));
						TAX_ADJ_BAL.put(compo_cd.elementAt(i)+":"+invoice_no,nf.format(Double.parseDouble(temp_Final_Total_Collection)));
						TAX_ADJ_CUR.put(compo_cd.elementAt(i)+":"+invoice_no,TAX_TOTAL_CURRENCY.get(compo_cd.elementAt(i)));
						TAX_INVOICE_NO.put(compo_cd.elementAt(i),invoice_no);
						TAX_INVOICE_DT.put(compo_cd.elementAt(i)+":"+invoice_no,"");
						
					}
					
					System.out.println("TAX_ADJ_BAL"+TAX_ADJ_BAL);
					String temp_balance_for_checking = nf_2.format(temp_bal);
					double temp_bal_check = Double.parseDouble(""+NumberFormat.getInstance().parse(temp_balance_for_checking));
					if(temp_bal_check<=0 && temp_bal_check>=-0.5)
						temp_bal_check = 0;
					
					String val_amt = ""+TAX_TOTAL_COLLECTION.get(compo_cd.elementAt(i));
					TAX_TOTAL_COLLECTION.put(compo_cd.elementAt(i),nf.format(Double.parseDouble(val_amt)));
					TAX_BALANCE_ASON.put(compo_cd.elementAt(i),nf.format(temp_bal_check));
				}
			}
			}
			System.out.println("TAX_-----"+TAX_ADJ_BAL);
			
			/////////////////////////////////////////////////////////////////////
			
			
			
			String temp_Final_Total_Collection=Final_Total_Collection;
			temp_bal=Double.parseDouble(temp_Final_Total_Collection);
		//	//System.out.println("...1///"+temp_bal);
			
			query="select flag, amount, operation, inv_seq_no, currency from fms7_inv_compo_dtl where mapping_id LIKE '"+map_id+"' "+ 
			" and inv_seq_no LIKE '"+ContractType+":"+invFinancialYear+"%' and price_cd='1'  and (flag_temp not like 'T' or flag_temp is null)";

			if(modifycontract_type.equalsIgnoreCase("T"))
			{
				query+=" AND LTCORA_NO='"+tempmap[1]+"'";
			}
			else if(modifycontract_type.equalsIgnoreCase("C"))
			{
				query+=" AND LTCORA_NO='"+tempmap[1]+"' AND LTCORA_REV_NO='"+tempmap[2]+"'";
			}
			
			System.out.println("QUERY for compo details--"+query);
		//	//System.out.println("temp_Final_Total_Collection--"+temp_Final_Total_Collection);
			rset1=stmt1.executeQuery(query);
			while(rset1.next())
			{
				String amt="0",tempamt="0";
				if(rset1.getString(1).equalsIgnoreCase("Y"))
				{
					String seq_no=rset1.getString(4);
					String tempseq_no[]=seq_no.split(":");
					
					String no=tempseq_no[2];
					if(no.length()==1)
						no="000"+no;
					else if(no.length()==2)
						no="00"+no;
					else if(no.length()==3)
						no="0"+no;
					else
						no=no;
					String yr=tempseq_no[1];
					
					String d1=tempseq_no[3];
					
					
					String tempD1[]=d1.split("/");
					String invd=tempD1[2]+tempD1[1]+tempD1[0];
					
					String tempD2[]=Inv_customer_Invoice_DT.split("/");
					String tempInv_customer_Invoice_DT=tempD2[2]+tempD2[1]+tempD2[0];
					
					
					if(Double.parseDouble(invd)<Double.parseDouble(tempInv_customer_Invoice_DT))
					{
				
					
						if(rset1.getString(3).equalsIgnoreCase("1"))
						{
							amt=rset1.getString(2)==null?"0":rset1.getString(2);
							//Invoice_adj_amt.add(nf.format(Double.parseDouble(amt)));
							
						//	//System.out.println("amt--"+amt);
							temp_bal=(temp_bal-Double.parseDouble(amt));
							//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
							
						}
						else if(rset1.getString(3).equalsIgnoreCase("2"))
						{
							amt=rset1.getString(2)==null?"0":rset1.getString(2);
							//Invoice_adj_amt.add(nf.format(Double.parseDouble(amt)));
							
							temp_bal=(temp_bal+Double.parseDouble(amt));
							//Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
							
						}
						
						
					}
					
				}
			
			}
			
			temp_Final_Total_Collection=""+temp_bal;
			
			 query="select flag, amount, operation, inv_seq_no, currency from fms7_inv_compo_dtl where mapping_id LIKE '"+map_id+"' "+ 
						" and inv_seq_no LIKE '"+ContractType+":"+invFinancialYear+"%' and price_cd='1'  and (flag_temp not like 'T' or flag_temp is null)";
		
			if(modifycontract_type.equalsIgnoreCase("T"))
			{
				query+=" AND LTCORA_NO='"+tempmap[1]+"'";
			}
			else if(modifycontract_type.equalsIgnoreCase("C"))
			{
				query+=" AND LTCORA_NO='"+tempmap[1]+"' AND LTCORA_REV_NO='"+tempmap[2]+"'";
			}
			
			System.out.println("QUERY for compo details--"+query);
			////System.out.println("temp_Final_Total_Collection--"+temp_Final_Total_Collection);
			rset1=stmt1.executeQuery(query);
			while(rset1.next())
			{
				String amt="0",tempamt="0";
				if(rset1.getString(1).equalsIgnoreCase("Y"))
				{
					String seq_no=rset1.getString(4);
					String tempseq_no[]=seq_no.split(":");
					
					String no=tempseq_no[2];
					if(no.length()==1)
						no="000"+no;
					else if(no.length()==2)
						no="00"+no;
					else if(no.length()==3)
						no="0"+no;
					else
						no=no;
					String yr=tempseq_no[1];
					
					String d1=tempseq_no[3];
					
					
					String tempD1[]=d1.split("/");
					String invd=tempD1[2]+tempD1[1]+tempD1[0];
					
					String tempD2[]=Inv_customer_Invoice_DT.split("/");
					String tempInv_customer_Invoice_DT=tempD2[2]+tempD2[1]+tempD2[0];
					
					if(Double.parseDouble(invd)==Double.parseDouble(tempInv_customer_Invoice_DT))
					{
					
					if(rset1.getString(3).equalsIgnoreCase("1"))
					{
						amt=rset1.getString(2)==null?"0":rset1.getString(2);
						Invoice_adj_amt.add(nf.format(Double.parseDouble(amt)));
						
						tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)-Double.parseDouble(amt));

						temp_balance_for_checking1 =nf_2.format(Double.parseDouble(""+NumberFormat.getInstance().parse(tempamt)));
						temp_bal_check1 = Double.parseDouble(""+NumberFormat.getInstance().parse(temp_balance_for_checking1));
						if(temp_bal_check1<=0 && temp_bal_check1>=-0.5)
							temp_bal_check1 = 0;
						
						tempamt = ""+temp_bal_check1;
						
						Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
						
					}
					else if(rset1.getString(3).equalsIgnoreCase("2"))
					{
						amt=rset1.getString(2)==null?"0":rset1.getString(2);
						Invoice_adj_amt.add(nf.format(Double.parseDouble(amt)));
						
						tempamt=""+(Double.parseDouble(temp_Final_Total_Collection)+Double.parseDouble(amt));
						
						temp_balance_for_checking1 = nf_2.format(Double.parseDouble(""+NumberFormat.getInstance().parse(tempamt)));
						temp_bal_check1 = Double.parseDouble(""+NumberFormat.getInstance().parse(temp_balance_for_checking1));
						if(temp_bal_check1<=0 && temp_bal_check1>=-0.5)
							temp_bal_check1 = 0;
						
						tempamt = ""+temp_bal_check1;
						
						Invoice_Adj_bal.add(nf.format(Double.parseDouble(tempamt)));
						
					}
					temp_Final_Total_Collection=tempamt;
					Invoice_adj_cur.add(Final_Total_Currency);
					
					String q = "select new_inv_seq_no from DLNG_INVOICE_MST where financial_year='"+invFinancialYear+"' "
							+ "and hlpl_inv_seq_no = '"+no+"' and contract_type='"+ContractType+"' and flag='Y' and"
							+ " ((new_inv_seq_no not like 'A%' and new_inv_seq_no not like 'C%' and new_inv_seq_no not like 'D%') or new_inv_seq_no is null "
							+ ")";
					rset = stmt.executeQuery(q);
					if(rset.next()) {
						String temp_no = rset.getString(1)==null?"":rset.getString(1);
						if(!temp_no.equals("")) {
							Invoice_no.add(temp_no);
						} else {
							Invoice_no.add(no+"/"+yr.substring(2,4)+"-"+yr.substring(7));
						}
					} else {
						Invoice_no.add(no+"/"+yr.substring(2,4)+"-"+yr.substring(7));
					}
					
					
					String tempdt1[]=tempseq_no[3].split("/");
					String tempdt2=tempdt1[0]+"/"+tempdt1[1]+"/"+tempdt1[2].substring(2);
					
					//Invoice_dt.add(tempseq_no[3]);
					Invoice_dt.add(tempdt2);
					
				}}
			}
			
			
			String temp_balance_for_checking = nf_2.format(temp_bal);
			double temp_bal_check = Double.parseDouble(""+NumberFormat.getInstance().parse(temp_balance_for_checking));
			if(temp_bal_check<=0 && temp_bal_check>=-0.5)
				temp_bal_check = 0;
			
			 balanceason=""+nf.format(temp_bal_check);
			Final_Total_Collection=nf.format(Double.parseDouble(Final_Total_Collection));
		
		}
		catch(Exception e)
		{
			//System.out.println("Exception in Fetching Data..."+e.getMessage());
			e.printStackTrace();
		}
	}
	
	
	public void updategettariffanddiscountdetailsfrominvoice()
	{
		try
		{
	//		//System.out.println("Signing Date Fetch Query For TYPE--- = "+mstcontract_type);
			String mapid[]=customer_inv_mapping_id.split("-");
			String mapping_id=modifycontract_type+":"+modifyFinancialYear+":"+modifyhlplInvoiceNo+":"+"%";
			queryString = "SELECT FLAG FROM FMS7_INV_COMPO_DTL WHERE PRICE_CD='2' AND INV_SEQ_NO LIKE '"+mapping_id+"' and (flag_temp not like 'T' or flag_temp is null) ";
			if(modifycontract_type.equalsIgnoreCase("T") || modifycontract_type.equalsIgnoreCase("C"))
			{
				queryString+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
			}
			
			rset=stmt.executeQuery(queryString);
			if(rset.next())
			{
				modifydiscount_flag = rset.getString(1)==null?"N":rset.getString(1);
			}
			else
			{
				modifydiscount_flag="N";
			}
			
			queryString = "SELECT FLAG FROM FMS7_INV_COMPO_DTL WHERE PRICE_CD='3' AND INV_SEQ_NO LIKE '"+mapping_id+"'  and (flag_temp not like 'T' or flag_temp is null)";
			if(modifycontract_type.equalsIgnoreCase("T") || modifycontract_type.equalsIgnoreCase("C"))
			{
				queryString+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
			}
			
			rset=stmt.executeQuery(queryString);
			if(rset.next())
			{
				modifytariff_flag = rset.getString(1)==null?"N":rset.getString(1);
			}
			else
			{
				modifytariff_flag="N";
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in Fetching Data..."+e.getMessage());
			e.printStackTrace();
		}
	}
	
	public void debit_credit_fetch_tax_details()
	{
		
		
		String tempnote_dt="";
		DRCRcustomer_Invoice_Tax_Abbr.clear();
		DRCRcustomer_Invoice_Tax_Code.clear();
		DRCRcustomer_Invoice_Tax_Rate.clear();
		DRCRcustomer_Invoice_Tax_Amt.clear();
		DRCRcustomer_Invoice_Tax_Name.clear();
		
		
	//	//System.out.println("ENTER IN DATABEAN-------------"+DRCR_tax_customer_tax);
			
		
		try
		{
			tempnote_dt=DRCRexchg_rate_dt;
			if(DRCR_tax_note_date.equalsIgnoreCase(""))
			{
				String query="select to_char(sysdate,'dd/mm/yyyy') from dual";
				rset1=stmt1.executeQuery(query);
				if(rset1.next())
					DRCR_tax_note_date=rset1.getString(1);
			}
			
			if(DRCR_tax_customer_tax.equalsIgnoreCase("cst") || DRCR_tax_customer_tax.equalsIgnoreCase("vat"))
			{
				queryString = "SELECT A.TAX_STRUCT_DTL,A.TAX_STRUCT_CD FROM FMS7_CUSTOMER_TAX_STRUCT_DTL A WHERE " +
							  "A.customer_cd="+DRCR_tax_customer_cd+" AND a.plant_seq_no='"+DRCRplant_cd+"' and " +
					 		  "A.tax_struct_dt=(SELECT MAX(B.tax_struct_dt) FROM FMS7_CUSTOMER_TAX_STRUCT_DTL B WHERE " +
					 		  "A.customer_cd=B.customer_cd AND A.plant_seq_no=B.plant_seq_no AND " +
					 		  "B.tax_struct_dt<=TO_DATE('"+DRCR_tax_note_date+"','DD/MM/YYYY'))";
				
				rset = stmt.executeQuery(queryString);
		//		//System.out.println("FETCH TAX SRUCTURE--"+queryString);
				if(rset.next())
				{
					DRCR_tax_structure_dtl = rset.getString(1)==null?"":rset.getString(1);
					DRCR_tax_struct_cd = rset.getString(2)==null?"0":rset.getString(2);
				}
				else
				{
					DRCR_tax_structure_dtl = "";
					DRCR_tax_struct_cd = "0";
				}
			}
			else if(DRCR_tax_customer_tax.equalsIgnoreCase("regas"))
			{
				queryString = "SELECT A.TAX_STRUCT_DTL,A.TAX_STRUCT_CD FROM FMS7_CUSTOMER_SERVICE_TAX_DTL A WHERE " +
							  "A.customer_cd="+DRCR_tax_customer_cd+" AND a.plant_seq_no='"+DRCRplant_cd+"' and " +
					 		  "A.tax_struct_dt=(SELECT MAX(B.tax_struct_dt) FROM FMS7_CUSTOMER_SERVICE_TAX_DTL B WHERE " +
					 		  "A.customer_cd=B.customer_cd AND A.plant_seq_no=B.plant_seq_no AND " +
					 		  "B.tax_struct_dt<=TO_DATE('"+DRCR_tax_note_date+"','DD/MM/YYYY'))";
		//		//System.out.println("FETCH TAX SRUCTURE--"+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					DRCR_tax_structure_dtl = rset.getString(1)==null?"":rset.getString(1);
					DRCR_tax_struct_cd = rset.getString(2)==null?"0":rset.getString(2);
				}
				else
				{
					DRCR_tax_structure_dtl = "";
					DRCR_tax_struct_cd = "0";
				}
			}
			else
			{
				DRCR_tax_structure_dtl = "";
				DRCR_tax_struct_cd = "0";
			}
			
			

			double total_tax_amt = 0;
			double tax_amt = 0;
			String tax_cd = "0";
			String tax_factor = "0.00";
	//		//System.out.println("CUSTOMER INVOICE---------------"+customer_Invoice_Gross_Amt_INR);
			
			queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
						  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+DRCR_tax_struct_cd+" AND " +
						  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+DRCR_tax_struct_cd+" AND " +
						  "B.app_date<=TO_DATE('"+DRCR_tax_note_date+"','DD/MM/YYYY')) ORDER BY A.tax_code";
		//	//System.out.println("Query For Finding Out Correct Tax Structure Details = "+queryString);
			rset=stmt.executeQuery(queryString);
		//	//System.out.println("TAX AMT-0->"+tax_amt+"--------"+DRCRcustomer_Invoice_Gross_Amt_INR);
			while(rset.next())
			{
				tax_cd = rset.getString(1);
				tax_factor = rset.getString(2);
				
				if(!DRCRcustomer_Invoice_Gross_Amt_INR.equalsIgnoreCase("")){
					if(rset.getString(3).equals("1"))
					{
						tax_amt = (Double.parseDouble(DRCRcustomer_Invoice_Gross_Amt_INR)*Double.parseDouble(rset.getString(2)))/100;
				//		//System.out.println("TAX AMT-1->"+tax_amt);
					}
					else if(rset.getString(3).equals("2"))
					{
						queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
									  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+DRCR_tax_struct_cd+" AND " +
									  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+DRCR_tax_struct_cd+" AND " +
									  "B.app_date<=TO_DATE('"+DRCR_tax_note_date+"','DD/MM/YYYY')) AND A.tax_code="+rset.getString(4)+"";
					//	//System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
					 			if(rset1.getString(3).equals("1"))
								{
									tax_amt = (Double.parseDouble(DRCRcustomer_Invoice_Gross_Amt_INR)*Double.parseDouble(rset1.getString(2)))/100;
								}
								
					 			tax_amt = (tax_amt*Double.parseDouble(rset.getString(2)))/100;
					 	//		//System.out.println("TAX AMT-2->"+tax_amt);
						}
						else
						{
							tax_amt = 0;
						}
					}
					else
					{
						tax_amt = 0;
					}
				}
				else
				{
					DRCRcustomer_Invoice_Gross_Amt_INR="0";
				}
				DRCRcustomer_Invoice_Tax_Code.add(tax_cd);
				DRCRcustomer_Invoice_Tax_Rate.add(nf.format(Double.parseDouble(tax_factor)));
				DRCRcustomer_Invoice_Tax_Amt.add(nf3.format(tax_amt));
				total_tax_amt += Double.parseDouble(nf.format(tax_amt));
			//	//System.out.println("TTOTAL-AX AMT-1->"+total_tax_amt);
			}
			
			DRCRcustomer_Invoice_Tax_Net_Amt_INR = nf.format(total_tax_amt);
			if(!DRCRcustomer_Invoice_Gross_Amt_INR.equalsIgnoreCase("")){
				
			
			DRCRcustomer_Invoice_Net_Amt_INR = nf.format(total_tax_amt+Double.parseDouble(DRCRcustomer_Invoice_Gross_Amt_INR));
}
			for(int i=0; i<DRCRcustomer_Invoice_Tax_Code.size(); i++)
			{
				queryString = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " +
							  "tax_code="+DRCRcustomer_Invoice_Tax_Code.elementAt(i)+"";
		//		//System.out.println("Query For Fetching Tax Name = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					String tax_abbr = rset.getString(1).trim()==null?"":rset.getString(1).trim();
					String tax_nm = rset.getString(2).trim()==null?"":rset.getString(2).trim();
					DRCRcustomer_Invoice_Tax_Abbr.add(tax_abbr);
					DRCRcustomer_Invoice_Tax_Name.add(tax_nm);
				}
				else
				{
					DRCRcustomer_Invoice_Tax_Abbr.add("");
					DRCRcustomer_Invoice_Tax_Name.add("");
				}
			}
		//	//System.out.println("NET111 -->"+DRCRcustomer_Invoice_Tax_Code);
		//	//System.out.println("NET -->"+DRCRcustomer_Invoice_Net_Amt_INR);
		}
		catch(Exception e)
		{
			//System.out.println("In DATA BEAN FOR DEBIT CREDIT-"+e);
			e.printStackTrace();
		}
	}
	
	
	public void debit_credit_fetch_exchng_rate_attachment()
	{
		
		try
		{
			
			
	//		//System.out.println("ENTERt---"+DRCR_attach_exchngrate_dt);
				////System.out.println("tempexchngrate_dt---"+DRCRexchg_rate_dt);
			
			if(!DRCRcustomer_Attach_Exchg_Rate_Cd.equals(DRCRsbi_avg_tt_selling_buying_cd))
			{
				queryString = "SELECT NVL(A.exchg_val,'0.00') FROM FMS7_EXCHG_RATE_ENTRY A WHERE A.exchg_rate_cd="+DRCRcustomer_Attach_Exchg_Rate_Cd+" " +
							  "AND A.eff_dt=TO_DATE('"+DRCR_attach_exchngrate_dt+"','DD/MM/YYYY')";
		//		//System.out.println("Query For Fetching Exchange Rate For Invoicing From FMS7_EXCHG_RATE_ENTRY Table = "+queryString);
				
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					//DRCRcustomer_Invoice_Exchg_Rate_Code.add(DRCRcustomer_Invoice_Exchg_Rate_Cd);
					//DRCRcustomer_Invoice_Exchg_Rate_Date.add(tempexchngrate_dt);
					DRCRcustomer_Attach_Exchg_Rate_Value=nf2.format(Double.parseDouble(rset.getString(1)));
				}
				else
				{
					//DRCRcustomer_Invoice_Exchg_Rate_Code.add(DRCRcustomer_Invoice_Exchg_Rate_Cd);
					//DRCRcustomer_Invoice_Exchg_Rate_Date.add(tempexchngrate_dt);
					DRCRcustomer_Attach_Exchg_Rate_Value="0.00";
				}
			}
			else
			{
				queryString = "SELECT NVL(A.exchg_val,'0.00') FROM FMS7_EXCHG_RATE_ENTRY A WHERE A.exchg_rate_cd="+DRCRsbi_tt_buying_cd+" " +
							  "AND A.eff_dt=TO_DATE('"+DRCR_attach_exchngrate_dt+"','DD/MM/YYYY')";
			//	//System.out.println("Query For Fetching Exchange Rate For Invoicing From FMS7_EXCHG_RATE_ENTRY Table = "+queryString);
				
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					//DRCRcustomer_Invoice_Exchg_Rate_Code.add(DRCRsbi_tt_buying_cd);
					//DRCRcustomer_Invoice_Exchg_Rate_Date.add(tempexchngrate_dt);
					DRCRcustomer_Attach_Exchg_Rate_Value=nf2.format(Double.parseDouble(rset.getString(1)));
				}
				else
				{
					//DRCRcustomer_Invoice_Exchg_Rate_Code.add(DRCRsbi_tt_buying_cd);
					//DRCRcustomer_Invoice_Exchg_Rate_Date.add(tempexchngrate_dt);
					DRCRcustomer_Attach_Exchg_Rate_Value="0.00";
				}
				
				queryString = "SELECT NVL(A.exchg_val,'0.00') FROM FMS7_EXCHG_RATE_ENTRY A WHERE A.exchg_rate_cd="+DRCRsbi_tt_selling_cd+" " +
							  "AND A.eff_dt=TO_DATE('"+DRCR_attach_exchngrate_dt+"','DD/MM/YYYY')";
		//		//System.out.println("Query For Fetching Exchange Rate For Invoicing From FMS7_EXCHG_RATE_ENTRY Table = "+queryString);
				
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					//DRCRcustomer_Invoice_Exchg_Rate_Code.add(DRCRsbi_tt_selling_cd);
					//DRCRcustomer_Invoice_Exchg_Rate_Date.add(tempexchngrate_dt);
					DRCRcustomer_Attach_Exchg_Rate_Value2=nf2.format(Double.parseDouble(rset.getString(1)));
				}
				else
				{
					//DRCRcustomer_Invoice_Exchg_Rate_Code.add(DRCRsbi_tt_selling_cd);
					//DRCRcustomer_Invoice_Exchg_Rate_Date.add(tempexchngrate_dt);
					DRCRcustomer_Attach_Exchg_Rate_Value2="0.00";
				}
			}
			
			
		}
		catch(Exception e)
		{
			//System.out.println("In DATA BEAN FOR DEBIT CREDIT-"+e);
			e.printStackTrace();
		}
	}
	
	public void debit_credit_fetch_exchng_rate_structure()
	{
		String tempexchngrate_dt="";
		try
		{
			for(int i=0;i<Integer.parseInt(DRCRloopSize);i++)
			{
				DRCRexchg_rate_dt=""+DRCRexchg_rate_dt_1.elementAt(i);
				tempexchngrate_dt=DRCRexchg_rate_dt;
				if(DRCRexchg_rate_dt.equalsIgnoreCase(""))
				{
					String query="select to_char(sysdate,'dd/mm/yyyy') from dual";
					rset1=stmt1.executeQuery(query);
					if(rset1.next())
						DRCRexchg_rate_dt=rset1.getString(1);
				}
				
				//	//System.out.println("tempexchngrate_dt---"+DRCRexchg_rate_dt);
				
				if(!DRCRcustomer_Invoice_Exchg_Rate_Cd.equals(DRCRsbi_avg_tt_selling_buying_cd))
				{
					queryString = "SELECT NVL(A.exchg_val,'0.00') FROM FMS7_EXCHG_RATE_ENTRY A WHERE A.exchg_rate_cd="+DRCRcustomer_Invoice_Exchg_Rate_Cd+" " +
								  "AND A.eff_dt=TO_DATE('"+DRCRexchg_rate_dt+"','DD/MM/YYYY')";
				//	//System.out.println("Query For Fetching Exchange Rate For Invoicing From FMS7_EXCHG_RATE_ENTRY Table = "+queryString);
					
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						DRCRcustomer_Invoice_Exchg_Rate_Code.add(DRCRcustomer_Invoice_Exchg_Rate_Cd);
						DRCRcustomer_Invoice_Exchg_Rate_Date.add(tempexchngrate_dt);
						DRCRcustomer_Invoice_Exchg_Rate_Value.add(nf2.format(Double.parseDouble(rset.getString(1))));
					}
					else
					{
						DRCRcustomer_Invoice_Exchg_Rate_Code.add(DRCRcustomer_Invoice_Exchg_Rate_Cd);
						DRCRcustomer_Invoice_Exchg_Rate_Date.add(tempexchngrate_dt);
						DRCRcustomer_Invoice_Exchg_Rate_Value.add("0.00");
					}
				}
				else
				{
					queryString = "SELECT NVL(A.exchg_val,'0.00') FROM FMS7_EXCHG_RATE_ENTRY A WHERE A.exchg_rate_cd="+DRCRsbi_tt_buying_cd+" " +
								  "AND A.eff_dt=TO_DATE('"+DRCRexchg_rate_dt+"','DD/MM/YYYY')";
				//	//System.out.println("Query For Fetching Exchange Rate For Invoicing From FMS7_EXCHG_RATE_ENTRY Table = "+queryString);
					
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						DRCRcustomer_Invoice_Exchg_Rate_Code.add(DRCRsbi_tt_buying_cd);
						DRCRcustomer_Invoice_Exchg_Rate_Date.add(tempexchngrate_dt);
						DRCRcustomer_Invoice_Exchg_Rate_Value.add(nf2.format(Double.parseDouble(rset.getString(1))));
					}
					else
					{
						DRCRcustomer_Invoice_Exchg_Rate_Code.add(DRCRsbi_tt_buying_cd);
						DRCRcustomer_Invoice_Exchg_Rate_Date.add(tempexchngrate_dt);
						DRCRcustomer_Invoice_Exchg_Rate_Value.add("0.00");
					}
					
					queryString = "SELECT NVL(A.exchg_val,'0.00') FROM FMS7_EXCHG_RATE_ENTRY A WHERE A.exchg_rate_cd="+DRCRsbi_tt_selling_cd+" " +
								  "AND A.eff_dt=TO_DATE('"+DRCRexchg_rate_dt+"','DD/MM/YYYY')";
			//		//System.out.println("Query For Fetching Exchange Rate For Invoicing From FMS7_EXCHG_RATE_ENTRY Table = "+queryString);
					
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						DRCRcustomer_Invoice_Exchg_Rate_Code.add(DRCRsbi_tt_selling_cd);
						DRCRcustomer_Invoice_Exchg_Rate_Date.add(tempexchngrate_dt);
						DRCRcustomer_Invoice_Exchg_Rate_Value.add(nf2.format(Double.parseDouble(rset.getString(1))));
					}
					else
					{
						DRCRcustomer_Invoice_Exchg_Rate_Code.add(DRCRsbi_tt_selling_cd);
						DRCRcustomer_Invoice_Exchg_Rate_Date.add(tempexchngrate_dt);
						DRCRcustomer_Invoice_Exchg_Rate_Value.add("0.00");
					}
				}
			}
			for(int i=0; i<DRCRcustomer_Invoice_Exchg_Rate_Code.size(); i++)
			{
				queryString = "SELECT A.exc_rate_nm FROM FMS7_CONT_EXCHG_RATE_MST A WHERE " +
							  "A.exc_rate_cd="+DRCRcustomer_Invoice_Exchg_Rate_Code.elementAt(i)+"";
			//	//System.out.println("Query For Fetching Exchange Rate Name For Invoicing From FMS7_CONT_EXCHG_RATE_MST Table = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					DRCRcustomer_Invoice_Exchg_Rate_Name.add(rset.getString(1)==null?"":rset.getString(1));
				}
				else
				{
					DRCRcustomer_Invoice_Exchg_Rate_Name.add("");
				}
			}
			
		}
		catch(Exception e)
		{
			//System.out.println("In DATA BEAN FOR DEBIT CREDIT-"+e);
			e.printStackTrace();
		}
	}
	
	public void debit_credit_fetch_cust_addrs_dtls()
	{
		
		
		try
		{
			
				
				//customer contact details
				queryString = "SELECT customer_name,gst_tin_no,cst_tin_no,TO_CHAR(gst_tin_dt,'DD-MM-YYYY')," +
				  "TO_CHAR(cst_tin_dt,'DD-MM-YYYY'),addl_no,TO_CHAR(addl_issue_dt,'DD-MM-YYYY') " +
				  "FROM FMS7_CUSTOMER_MST A " +
				  "WHERE A.customer_cd="+DRCRcustomer_cd+" AND " +
				  "A.eff_dt=(SELECT MAX(B.eff_dt) FROM FMS7_CUSTOMER_MST B " +
				  "WHERE A.customer_cd=B.customer_cd AND " +
				  "TO_DATE(B.eff_dt,'DD/MM/YYYY')<=TO_DATE(sysdate,'DD/MM/YYYY'))";
				//	//System.out.println("Customer Details Fetch Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						DRCRcontact_customer_name = rset.getString(1)==null?"":rset.getString(1);
						DRCRcontact_customer_gst_tin_no=rset.getString(2)==null?"":rset.getString(2);
						DRCRcontact_customer_cst_tin_no=rset.getString(3)==null?"":rset.getString(3);
						DRCRcontact_customer_gst_tin_dt=rset.getString(4)==null?"":rset.getString(4);
						DRCRcontact_customer_cst_tin_dt=rset.getString(5)==null?"":rset.getString(5);
						
					}
				
				//customer contact address
				queryString = "SELECT plant_addr,plant_city,plant_state,plant_pin " +
				  "FROM FMS7_CUSTOMER_PLANT_DTL A " +
				  "WHERE A.customer_cd="+DRCRcustomer_cd+"  AND a.seq_no='"+DRCRplant_cd+"' and " +
				  "A.eff_dt=(SELECT MAX(B.eff_dt) FROM FMS7_CUSTOMER_PLANT_DTL B " +
				  "WHERE A.customer_cd=B.customer_cd  AND b.seq_no='"+DRCRplant_cd+"' and " +
				  "TO_DATE(B.eff_dt,'DD/MM/YYYY')<=TO_DATE(sysdate,'DD/MM/YYYY'))";
			//		//System.out.println("Customer Address Fetch Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						DRCRcontact_Customer_Person_Address = rset.getString(1)==null?"":rset.getString(1);
						DRCRcontact_Customer_Person_City = rset.getString(2)==null?"":rset.getString(2);
						DRCRcontact_Customer_Person_State = rset.getString(3)==null?"":rset.getString(3);
						DRCRcontact_Customer_Person_Pin = rset.getString(4)==null?"":rset.getString(4);
					}
					else
					{
						queryString = "SELECT addr,city,pin " +
						  "FROM FMS7_CUSTOMER_ADDRESS_MST A " +
						  "WHERE A.customer_cd="+DRCRcustomer_cd+"  AND " +
						  "A.eff_dt=(SELECT MAX(B.eff_dt) FROM FMS7_CUSTOMER_ADDRESS_MST B " +
						  "WHERE A.customer_cd=B.customer_cd  AND " +
						  "TO_DATE(B.eff_dt,'DD/MM/YYYY')<=TO_DATE(sysdate,'DD/MM/YYYY'))";
					//		//System.out.println("Customer Address Fetch Query = "+queryString);
							rset = stmt.executeQuery(queryString);
							if(rset.next())
							{
								DRCRcontact_Customer_Person_Address = rset.getString(1)==null?"":rset.getString(1);
								DRCRcontact_Customer_Person_City = rset.getString(2)==null?"":rset.getString(2);
								DRCRcontact_Customer_Person_Pin = rset.getString(3)==null?"":rset.getString(3);
							}
					}
					
					
				//supplier address details
				queryString = "SELECT addr,city,pin " +
					 "FROM FMS7_SUPPLIER_ADDRESS_MST A " +
					 "WHERE A.supplier_cd=1 AND A.address_type='R' AND " +
					 "A.eff_dt=(SELECT MAX(B.eff_dt) FROM FMS7_SUPPLIER_ADDRESS_MST B " +
					 "WHERE A.supplier_cd=B.supplier_cd AND B.address_type='R' AND " +
					 "TO_DATE(B.eff_dt,'DD/MM/YYYY')<=TO_DATE(sysdate,'DD/MM/YYYY'))";
			//			//System.out.println("Supplier Address Fetch Query = "+queryString);
						rset = stmt.executeQuery(queryString);
						if(rset.next())
						{
							DRCRcontact_Suppl_Person_Address = rset.getString(1)==null?"":rset.getString(1);
							DRCRcontact_Suppl_Person_City = rset.getString(2)==null?"":rset.getString(2);
							DRCRcontact_Suppl_Person_Pin = rset.getString(3)==null?"":rset.getString(3);
						}
		
					
				//supplier nos						
					queryString = "SELECT supplier_name,gst_tin_no,cst_tin_no,TO_CHAR(gst_tin_dt,'DD-MM-YYYY')," +
					  "TO_CHAR(cst_tin_dt,'DD-MM-YYYY'),addl_no,TO_CHAR(addl_issue_dt,'DD-MM-YYYY') " +
					  "FROM FMS7_SUPPLIER_MST A " +
					  "WHERE A.supplier_cd=1 AND " +
					  "A.eff_dt=(SELECT MAX(B.eff_dt) FROM FMS7_SUPPLIER_MST B " +
					  "WHERE A.supplier_cd=B.supplier_cd AND " +
					  "TO_DATE(B.eff_dt,'DD/MM/YYYY')<=TO_DATE(sysdate,'DD/MM/YYYY'))";
			//		//System.out.println("Supplier Details Fetch Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						DRCRcontact_Suppl_Name = rset.getString(1)==null?"":rset.getString(1);
						DRCRcontact_Suppl_GST_NO = rset.getString(2)==null?"":rset.getString(2);
						DRCRcontact_Suppl_CST_NO = rset.getString(3)==null?"":rset.getString(3);
						DRCRcontact_Suppl_GST_DT = rset.getString(4)==null?"":rset.getString(4);
						DRCRcontact_Suppl_CST_DT = rset.getString(5)==null?"":rset.getString(5);
						DRCRcontact_Suppl_Service_Tax_NO = rset.getString(6)==null?"":rset.getString(6);
						DRCRcontact_Suppl_Service_Tax_DT = rset.getString(7)==null?"":rset.getString(7);
					}
					
					
//								//System.out.println("1--"+DRCRcontact_customer_name);
//								//System.out.println("2--"+DRCRcontact_Customer_Person_Address);
//								//System.out.println("3--"+DRCRcontact_Customer_Person_City);
//								//System.out.println("4--"+DRCRcontact_Customer_Person_Pin);
						
					}
		catch(Exception e)
		{
			//System.out.println("In DATA BEAN FOR DEBIT CREDIT-"+e);
			e.printStackTrace();
		}
	}
	
	String Emp_cd="";
	String Customer_access_flag = "N";
	
	public void debit_credit_fetch_cust_names()
	{
		try
		{
			if(Customer_access_flag.equals("Y"))
			{
				queryString = "SELECT A.CUSTOMER_CD,CUSTOMER_NAME,CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST A, "
						+ "SEC_EMP_CUSTOMER_ALLOC_MST B WHERE B.CUSTOMER_CD= A.CUSTOMER_CD AND B.EMP_CD='"+Emp_cd+"' "
						+ "ORDER BY A.CUSTOMER_CD";
			} else {
				queryString = "SELECT CUSTOMER_CD,CUSTOMER_NAME,CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST ORDER BY CUSTOMER_CD";
			}
				
			//	//System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
				rset = stmt.executeQuery(queryString);				
				while(rset.next())
				{
					DRCRcust_cd.add(rset.getString(1)==null?"":rset.getString(1));	
					DRCRcust_nm.add(rset.getString(2)==null?"":rset.getString(2));
					DRCRcust_abbr.add(rset.getString(3)==null?"":rset.getString(3));
				}
				for(int i=0;i<DRCRcust_cd.size();i++)
				{
						String temp_plant_cd="0";
						String temp_plant_nm="";
					int j=0;	
					queryString=" Select DISTINCT(A.SEQ_NO), A.PLANT_NAME, A.PLANT_ABBR, A.PLANT_ADDR," +
							" A.PLANT_STATE, A.PLANT_ZONE, A.PLANT_CITY,  A.PLANT_PIN, A.PLANT_SECTOR " +
							" from FMS7_CUSTOMER_PLANT_DTL A WHERE A.CUSTOMER_CD='"+DRCRcust_cd.elementAt(i)+"' " +
							" and A.EFF_DT=(select max(B.eff_dt) from FMS7_CUSTOMER_PLANT_DTL B " +
							" where A.seq_no=B.seq_no and B.CUSTOMER_CD='"+DRCRcust_cd.elementAt(i)+"') " +
							" order by A.SEQ_NO";	
			//		//System.out.println("Last date = "+queryString);
					rset = stmt.executeQuery(queryString);
					while(rset.next())
					{
						if(j==0)
						{
							temp_plant_cd=rset.getString(1)==null?"0":rset.getString(1);
							temp_plant_nm=rset.getString(2)==null?"0":rset.getString(2);
						}
						else
						{
							temp_plant_cd=temp_plant_cd+":"+(rset.getString(1)==null?"0":rset.getString(1));
							temp_plant_nm=temp_plant_nm+":"+(rset.getString(2)==null?"0":rset.getString(2));
						}
						j++;
					}
					cust_plant_cd.add(temp_plant_cd);
					cust_plant_nm.add(temp_plant_nm);
				}
			
		}
		catch(Exception e)
		{
			//System.out.println("In DATA BEAN FOR DEBIT CREDIT-"+e);
			e.printStackTrace();
		}
	}
	
//	public void adjustment_dtl_for_modify_invoice()
//	{
//		try
//		{
//			String query="SELECT A.ADV_ADJ_AMT,A.ADV_SEQ_NO, ADV_ADJ_SIGN " +
//						"FROM FMS7_PARTY_ADV_ADJ_DTL A " +
//						"WHERE FINANCIAL_YEAR='"+Inv_financial_year_update+"'  " +
//						"AND A.CUSTOMER_CD='"+Customer_cd_update+"' AND HLPL_INV_SEQ_NO='"+Hlpl_inv_seq_no2_update+"' " +
//						"AND PLANT_SEQ_NO='"+Customer_plant_seq_no_update+"' AND CONTRACT_TYPE='"+Contract_type_update+"' " +
//						"ORDER BY A.ADV_SEQ_NO ";
//		//	//System.out.println("Fetching adjustmet...."+query);
//			rset=stmt.executeQuery(query);
//			while(rset.next())
//			{
//				adjusted_amt_invoice.add(rset.getString(1));
//				adjusted_seq_no_invoice.add(rset.getString(2));
//				adjusted_sign_invoice.add(rset.getString(3));
//			}
//		}
//		catch(Exception e)
//		{
//			e.printStackTrace();
//		}
//	}
//
	String TAX_ADV_ADJ_FLAG="N";
	String TAX_ADV_ADJ_AMT="0";
	String TAX_ADV_ADJ_CUR="1";
	String TAX_ADV_ADJ_CUR_ABR="";
	String TAX_ADV_ADJ_RMK="";
	String TAX_ADV_ADJ_SIGN="1";
	String TAX_ADV_ADJ_GROSS_INR="0";
	String TAX_ADV_ADJ_GROSS_USD="0";
	String TAX_ADV_ADJ_remark="";
	
	String SBC_ADV_ADJ_FLAG="N";//DS20160509
	String SBC_ADV_ADJ_AMT="0";//DS20160509
	String SBC_ADV_ADJ_CUR="1";//DS20160509
	String SBC_ADV_ADJ_CUR_ABR="";
	String SBC_ADV_ADJ_RMK="";
	String SBC_ADV_ADJ_SIGN="1";//DS20160509
	String SBC_ADV_ADJ_GROSS_INR="0";//DS20160509
	String SBC_ADV_ADJ_GROSS_USD="0";//DS20160509
	String SBC_ADV_ADJ_remark="";//DS20160509
	
	String KKC_ADV_ADJ_FLAG="N";//DS20160509
	String KKC_ADV_ADJ_AMT="0";//DS20160509
	String KKC_ADV_ADJ_CUR="1";//DS20160509
	String KKC_ADV_ADJ_CUR_ABR="";
	String KKC_ADV_ADJ_RMK="";
	String KKC_ADV_ADJ_SIGN="1";//DS20160509
	String KKC_ADV_ADJ_GROSS_INR="0";//DS20160509
	String KKC_ADV_ADJ_GROSS_USD="0";//DS20160509
	String KKC_ADV_ADJ_remark="";//DS20160509
	
	String total_invoice_payable_usd="0";
	String total_invoice_payable_inr="0";
	String total_tax_payable="0";
	String total_adv_tax_payable="0",total_adv_sbc_payable="0",total_adv_kkc_payable="0",inv_pay_type="",inv_advance_adj_flg="";
	String First_gross_amt_inr="";
	
	Map TAX_ADV_ADJ_FLAG_GST = new HashMap();
	Map TAX_ADV_ADJ_AMT_GST = new HashMap();
	Map TAX_ADV_ADJ_CUR_GST = new HashMap();
	Map TAX_ADV_ADJ_GROSS_INR_GST = new HashMap();
	Map TAX_ADV_ADJ_GROSS_USD_GST = new HashMap();
	Map TAX_ADV_ADJ_SIGN_GST = new HashMap();
	Map TAX_ADV_ADJ_REMARK_GST = new HashMap();
	Vector TAX_ADV_ADJ_CODE_GST = new Vector();
	Vector total_compo_tax_payable = new Vector();
	Map TAX_ADV_ADJ_ABBR_GST = new HashMap();
	Map TOTAL_TAX_PAYABLE = new HashMap();
	
	public void FetchAdjustmentofInvoiceDetailsforviewinvoice()
	{	
		try
		{   
			String invadjrecv="";
			String invgrossamt_inr="";
			String invgrossamt_usd="";
			String invnetamtinr="";
			String invgrossadjustedinr="";
			String invgrossadjustedusd="";
			String invadjustmentamtinr="";
			String invtaxstructcd="";
			String tempinvadjustamt="";
			String invadjustsign="";
			String invtariff_inr="";
			String invtariff_inv_amt_inr="";
			String invinv_amt_inr="";
			String invinv_amt_usd="";
			String invtotal_qty="";
			String Invoice_Sequence_Flag="";
			String First_gross_amt_usd="";
			//String Final_first_gross_amt="0";
			String invdiscount_price_usd="";
			String invdiscount_price_inr="";
			String rate_usd="";
			String rate_inr="";
			String adjust_amt_usd="";
			String adjust_amt_inr="";
			String basic_amt_usd="0";
			String basic_amt_inr="0";
			String raw_amt_usd="0";
			String raw_amt_inr="0";
			String invsaleprice="";
			String invinvoicedt="";
			String invadvinvno="";
			String invadvinvdt="";
			String invoice_dtl = "", invoice_dates = "", rec_remark="";
			if(date_flag) {
				queryString = "select gross_amt_usd,gross_amt_inr," +
				" net_amt_inr,exchg_rate_value, tax_struct_cd, " +
				" total_qty, sale_price,to_char(invoice_dt,'dd/mm/yyyy')" +
				" ,ADV_INV_NO,TO_CHAR(ADV_INV_DT,'DD/MM/YYYY') "+//ADDED FOR ADVANCE INV NO
				" ,INV_AMT_INR,INV_AMT_USD,PAY_TYPE,ADV_ADJ_FLG,REMARK_SPECIFICATION  " + //HS20160725
				" FROM DLNG_INVOICE_MST WHERE " +
				" financial_year='"+invFinancialYear+"' AND " +
				" hlpl_inv_seq_no='"+invHlplinvseqno+"' AND " +
				" contract_type='"+invContractType+"' AND FLAG='Y' ";
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					invgrossamt_usd=rset.getString(1)==null?"0":rset.getString(1);
					invgrossamt_inr=rset.getString(2)==null?"0":rset.getString(2);
					invnetamtinr=rset.getString(3)==null?"0":rset.getString(3);
					invexchngrt=rset.getString(4)==null?"0":rset.getString(4);
					invtaxstructcd=rset.getString(5)==null?"0":rset.getString(5);
					invtotal_qty=rset.getString(6)==null?"0":rset.getString(6);
					invsaleprice=rset.getString(7)==null?"0":rset.getString(7);
					invinvoicedt=rset.getString(8)==null?"":rset.getString(8);
					invadvinvno=rset.getString(9)==null?"":rset.getString(9);
					invadvinvdt=rset.getString(10)==null?"":rset.getString(10);
					if((rset.getString(14)==null?"BA":rset.getString(14)).toString().equalsIgnoreCase("AA")){
						raw_amt_inr=invgrossamt_inr;
					}else{
						raw_amt_inr=rset.getString(11)==null?"0":rset.getString(11);
					}
					raw_amt_usd=rset.getString(12)==null?"0":rset.getString(12);	
					inv_pay_type=rset.getString(13)==null?"AP":rset.getString(13);	
					inv_advance_adj_flg=rset.getString(14)==null?"BA":rset.getString(14);
					rec_remark=rset.getString(15)==null?"":rset.getString(15);
					
					//ADDED BY RS20170413 FOR MULTIPLE ADVANCE INVOICES....
					String same_no = invadvinvno, diff_no = "";
					invoice_dtl = invadvinvno +" dated "+invadvinvdt; invoice_dates = invadvinvdt;
					String query = "SELECT ADV_INV_NO, NVL(TO_CHAR(ADV_INV_DT,'DD/MM/YYYY'),'') "
							+ "FROM FMS8_ADV_INV_DTL "
							+ "WHERE FINANCIAL_YEAR = '"+invFinancialYear+"' AND CONTRACT_TYPE = '"+invContractType+"' "
							+ "AND HLPL_INV_SEQ_NO = '"+invHlplinvseqno+"' AND ADV_INV_NO != '"+invadvinvno+"' ";
					rset = stmt.executeQuery(query);
					while(rset.next())
					{
//							invoice_dtl += ", "+rset.getString(1)+" dated "+rset.getString(2);
							String dt = rset.getString(2);
							if(!invadvinvdt.trim().equals(dt.trim()) && !invoice_dates.contains(dt)) {
								if(diff_no.length()==0) {
									diff_no = rset.getString(1)+" dated "+rset.getString(2);
								} else {
									diff_no += " , "+ rset.getString(1)+" dated "+rset.getString(2);
								}
							} else {
								same_no += ", "+rset.getString(1);
							}
					}
					same_no += " dated "+invadvinvdt;
					if(diff_no.length()!=0) {
						same_no += " , "+diff_no;
					}
					invoice_dtl = same_no;
					
					if(rec_remark.trim().length()>1) {
						invoice_dtl = rec_remark;
					}
				}
				
				String Mapping_seq_no=invContractType+":"+invFinancialYear+":"+invHlplinvseqno+":"+invinvoicedt;
				String mapid[]=customer_inv_mapping_id.split("-");
				String queryString1="select price_cd, AMOUNT, CURRENCY, TOTAL_TARIFF, INV_AMT_INR, " +
						" INV_AMT_USD, REC_FLAG, REMARK, FLAG, OPERATION, BASIC_INV_AMT_INR, BASIC_INV_AMT_USD from FMS7_INV_COMPO_DTL" +
						" where INV_SEQ_NO='"+Mapping_seq_no+"'  and (flag_temp not like 'T' or flag_temp is null)";
				if(modifycontract_type.equalsIgnoreCase("T") || modifycontract_type.equalsIgnoreCase("C"))
				{
					queryString1+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
				}
				rset1=stmt1.executeQuery(queryString1);
				while(rset1.next())
				{
					String price_cd=rset1.getString(1)==null?"0":rset1.getString(1);
					basic_amt_usd=rset1.getString(12)==null?"0":rset1.getString(12);
					basic_amt_inr=rset1.getString(11)==null?"0":rset1.getString(11);
					if(price_cd.equalsIgnoreCase("1"))
					{
						invadjflag=rset1.getString(9)==null?"N":rset1.getString(9);
						if(invadjflag.equalsIgnoreCase("Y"))
						{
							invadjustmentamt=rset1.getString(2)==null?"0":rset1.getString(2);
							invadjustcur=rset1.getString(3)==null?"0":rset1.getString(3);
							adjust_gross_amt_inr=rset1.getString(5)==null?"0":rset1.getString(5);
							adjust_gross_amt_usd=rset1.getString(6)==null?"0":rset1.getString(6);
							invadjrecv=rset1.getString(7)==null?"0":rset1.getString(7);
							invadjremark=rset1.getString(8)==null?"":rset1.getString(8);
							invadjustsign=rset1.getString(10)==null?"1":rset1.getString(10);
							
							if(invadjremark.trim().equalsIgnoreCase("")){ //HS20160725
								invadjremark="Adjustment for";
								if(inv_pay_type.equalsIgnoreCase("AP")) {  //HS20160725
									invadjremark+=" advance amount"; 
								}else{
									invadjremark+=" special payment";
								}
								invadjremark+=" paid against Receipt Voucher No. "+invoice_dtl;
							}	
							if(rec_remark.trim().length()>1) {
								invadjremark = rec_remark;
							}				
						}
					}
					if(price_cd.equalsIgnoreCase("3"))
					{
						invtariff_flag=rset1.getString(9)==null?"N":rset1.getString(9);
						if(invtariff_flag.equalsIgnoreCase("Y"))
						{
							invtariff_inr=rset1.getString(2)==null?"0":rset1.getString(2);
							invtariff_total_inr=rset1.getString(4)==null?"0":rset1.getString(4);
							tariff_gross_amt_inr=rset1.getString(5)==null?"0":rset1.getString(5);
							tariff_gross_amt_usd=rset1.getString(6)==null?"0":rset1.getString(6);						
						}
					}
					if(price_cd.equalsIgnoreCase("2"))
					{
						invdiscount_flag=rset1.getString(9)==null?"N":rset1.getString(9);
						if(invdiscount_flag.equalsIgnoreCase("Y"))
						{
							invdiscount_price=rset1.getString(2)==null?"0":rset1.getString(2);
							discount_gross_amt_inr=rset1.getString(5)==null?"0":rset1.getString(5);
							discount_gross_amt_usd=rset1.getString(6)==null?"0":rset1.getString(6);						
						}
					}
					
					if(price_cd.equalsIgnoreCase("6"))
					{
						TAX_ADV_ADJ_FLAG=rset1.getString(9)==null?"N":rset1.getString(9);
						if(TAX_ADV_ADJ_FLAG.equalsIgnoreCase("Y"))
						{
							TAX_ADV_ADJ_AMT=rset1.getString(2)==null?"0":rset1.getString(2);
							TAX_ADV_ADJ_CUR=rset1.getString(3)==null?"0":rset1.getString(3);
							TAX_ADV_ADJ_GROSS_INR=rset1.getString(5)==null?"0":rset1.getString(5);
							TAX_ADV_ADJ_GROSS_USD=rset1.getString(6)==null?"0":rset1.getString(6);
							TAX_ADV_ADJ_SIGN=rset1.getString(10)==null?"1":rset1.getString(10);						
							TAX_ADV_ADJ_remark="Adjustment for Service Tax paid on";
								if(inv_pay_type.equalsIgnoreCase("AP")) {  //HS20160725
									TAX_ADV_ADJ_remark+=" advance amount"; 
								}else{
									TAX_ADV_ADJ_remark+=" special payment";
								}
								TAX_ADV_ADJ_remark+=" paid against Receipt Voucher No. "+invoice_dtl;
							if(rec_remark.trim().length()>1) {
								TAX_ADV_ADJ_remark = rec_remark;
							}	
						}
					}
					if(price_cd.equalsIgnoreCase("7"))
					{
						SBC_ADV_ADJ_FLAG=rset1.getString(9)==null?"N":rset1.getString(9);
						if(SBC_ADV_ADJ_FLAG.equalsIgnoreCase("Y"))
						{
							SBC_ADV_ADJ_AMT=rset1.getString(2)==null?"0":rset1.getString(2);
							SBC_ADV_ADJ_CUR=rset1.getString(3)==null?"0":rset1.getString(3);
							SBC_ADV_ADJ_GROSS_INR=rset1.getString(5)==null?"0":rset1.getString(5);
							SBC_ADV_ADJ_GROSS_USD=rset1.getString(6)==null?"0":rset1.getString(6);
							SBC_ADV_ADJ_SIGN=rset1.getString(10)==null?"1":rset1.getString(10);						
							SBC_ADV_ADJ_remark="Adjustment for Swachh Bharat Cess paid on";
							if(inv_pay_type.equalsIgnoreCase("AP")) {  //HS20160725
								SBC_ADV_ADJ_remark+=" advance amount"; 
							}else{
								SBC_ADV_ADJ_remark+=" special payment";
							}
							SBC_ADV_ADJ_remark+=" paid against Receipt Voucher No. "+invoice_dtl;
							if(rec_remark.trim().length()>1) {
								SBC_ADV_ADJ_remark = rec_remark;
							}
						}
					}
					if(price_cd.equalsIgnoreCase("8"))
					{
						KKC_ADV_ADJ_FLAG=rset1.getString(9)==null?"N":rset1.getString(9);
						if(KKC_ADV_ADJ_FLAG.equalsIgnoreCase("Y"))
						{
							KKC_ADV_ADJ_AMT=rset1.getString(2)==null?"0":rset1.getString(2);
							KKC_ADV_ADJ_CUR=rset1.getString(3)==null?"0":rset1.getString(3);
							KKC_ADV_ADJ_GROSS_INR=rset1.getString(5)==null?"0":rset1.getString(5);
							KKC_ADV_ADJ_GROSS_USD=rset1.getString(6)==null?"0":rset1.getString(6);
							KKC_ADV_ADJ_SIGN=rset1.getString(10)==null?"1":rset1.getString(10);						
							KKC_ADV_ADJ_remark="Adjustment for Krishi Kalyan Cess paid on";
							if(inv_pay_type.equalsIgnoreCase("AP")) {  //HS20160725
								KKC_ADV_ADJ_remark+=" advance amount"; 
							}else{
								KKC_ADV_ADJ_remark+=" special payment";
							}
							KKC_ADV_ADJ_remark+=" paid against Receipt Voucher No. "+invoice_dtl;
							if(rec_remark.trim().length()>1) {
								KKC_ADV_ADJ_remark = rec_remark;
							}
						}
					}
					if(price_cd.equalsIgnoreCase("10") || price_cd.equalsIgnoreCase("11") || price_cd.equalsIgnoreCase("12") || price_cd.equalsIgnoreCase("13"))
					{
						String abbr = price_cd;
						String q = "SELECT COMPO_NM FROM FMS7_COMPO_MST WHERE COMPO_CD='"+price_cd+"' ";
						rset = stmt.executeQuery(q);
						if(rset.next()) {
							abbr = rset.getString(1);
						}
						TAX_ADV_ADJ_FLAG_GST.put(price_cd,rset1.getString(9)==null?"N":rset1.getString(9));
						TAX_ADV_ADJ_AMT_GST.put(price_cd,rset1.getString(2)==null?"0":nf3.format(Double.parseDouble(rset1.getString(2))));
						TAX_ADV_ADJ_CUR_GST.put(price_cd,rset1.getString(3)==null?"0":rset1.getString(3));
						TAX_ADV_ADJ_GROSS_INR_GST.put(price_cd,rset1.getString(5)==null?"0":rset1.getString(5));
						TAX_ADV_ADJ_GROSS_USD_GST.put(price_cd,rset1.getString(6)==null?"0":rset1.getString(6));
						TAX_ADV_ADJ_SIGN_GST.put(price_cd,rset1.getString(10)==null?"1":rset1.getString(10));
						TAX_ADV_ADJ_CODE_GST.add(price_cd);
						
						TAX_ADV_ADJ_ABBR_GST.put(abbr,price_cd);
						
						String remark = "Adjustment for "+abbr+" paid on";
							if(inv_pay_type.equalsIgnoreCase("AP")) {  //HS20160725
								remark+=" advance amount"; 
							}else{
								remark+=" special payment";
							}
							remark+=" paid against Receipt Voucher No. "+invoice_dtl;
						if(rec_remark.trim().length()>1) {
							remark = rec_remark;
						}	
						TAX_ADV_ADJ_REMARK_GST.put(price_cd,remark);
					}
				}
			//	//System.out.println("basic_amt_usd"+basic_amt_usd);
				
				First_gross_amt_usd=basic_amt_usd;
				First_gross_amt_inr=basic_amt_inr;
				
				if(invtariff_flag.equalsIgnoreCase("Y"))
				{
					display_rate=invtariff_total_inr;
					if(invdiscount_flag.equalsIgnoreCase("Y"))
					{
						invdiscount_price=""+nf3a.format((Double.parseDouble(invdiscount_price)*Double.parseDouble(invexchngrt)));
						First_gross_amt_inr=nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(discount_gross_amt_inr)));
						
					}
					if(invadjflag.equalsIgnoreCase("Y"))
					{
						if(invadjustcur.equalsIgnoreCase("2"))			//2 is for usd
						{
							invadjustmentamt=""+(Double.parseDouble(invadjustmentamt)*Double.parseDouble(invexchngrt));
							invadjustmentamt=nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(invadjustmentamt)));
							Final_adjust_gross_amt=adjust_gross_amt_inr;
						}
						else
						{
							Final_adjust_gross_amt=adjust_gross_amt_inr;
							/*added on 13-052-2015 RG*/
							invadjustmentamt=nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(invadjustmentamt)));
						}
					}
					Final_first_gross_amt=tariff_gross_amt_inr;
				//	//System.out.println("Final_first_gross_amt"+Final_first_gross_amt);
				}
				else
				{
					display_rate=invsaleprice;
					String temp_amt=First_gross_amt_usd;
					
					if(invdiscount_flag.equalsIgnoreCase("Y"))
					{
						temp_amt=discount_gross_amt_usd;
						First_gross_amt_usd=nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(discount_gross_amt_usd)));	
					}
					
					
					////System.out.println("HERE----------->>>>>"+display_rate);
					
					if(invadjflag.equalsIgnoreCase("Y"))
					{
						invadjustmentamt=nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(invadjustmentamt)));
						
						if(invadjustcur.equalsIgnoreCase("2"))			//2 is for usd
						{
							Final_adjust_gross_amt=adjust_gross_amt_usd;
							
						}
						else if(invadjustcur.equalsIgnoreCase("1"))
						{
							Final_adjust_gross_amt=adjust_gross_amt_inr;
						}
						total_invoice_payable_usd=nf3.format(Double.parseDouble(""+java.text.NumberFormat.getInstance().parse(adjust_gross_amt_usd)));
						total_invoice_payable_inr=nf3.format(Double.parseDouble(""+java.text.NumberFormat.getInstance().parse(adjust_gross_amt_inr)));
						
					}
				//	//System.out.println("111First_gross_amt_usd"+temp_amt);
					Final_first_gross_amt=temp_amt;
					
				}
//				System.out.println("111"+Final_first_gross_amt);
				
				Final_first_gross_amt=Final_first_gross_amt;
				
			//	Final_first_gross_amt=nf3.format(Double.parseDouble(""+java.text.NumberFormat.getInstance().parse(Final_first_gross_amt)));
				if(modifycontract_type.equalsIgnoreCase("T") || modifycontract_type.equalsIgnoreCase("C")) {
					Final_adjust_gross_amt=""+Math.round(Double.parseDouble(Final_adjust_gross_amt));
				} else {
					Final_adjust_gross_amt=nf3.format(Double.parseDouble(Final_adjust_gross_amt));
				}
				
				invdiscount_price=""+Double.parseDouble(nf3a.format((Double.parseDouble(invdiscount_price))));
				if(!display_rate.equals("")) {
					display_rate=nf3a.format(Double.parseDouble(display_rate)); }
				
						customer_Invoice_Gross_Amt_INR=invgrossamt_inr;
						if(TAX_ADV_ADJ_FLAG.equalsIgnoreCase("Y")){
							customer_Invoice_Gross_Amt_INR=raw_amt_inr;
						}
						
			//			//System.out.println("invgrossamt_inr-------->"+invgrossamt_inr+"customer_Invoice_Gross_Amt_INR---->"+customer_Invoice_Gross_Amt_INR);
						// calculate tax details for adjusted gross
						double tax_amt = 0;
						String tax_cd = "0";
						String tax_factor = "0.00";
						double total_tax=0;
						
						queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
									  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+invtaxstructcd+"' AND " +
									  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+invtaxstructcd+"' AND " +
									  "B.app_date<=TO_DATE('"+invbill_period_end_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code";
						System.out.println("DEEP Query For Finding Out Correct Tax Structure Details = "+queryString);
						rset=stmt.executeQuery(queryString);
						while(rset.next())
						{
							tax_cd = rset.getString(1);
							tax_factor = rset.getString(2);
							
							if(rset.getString(3).equals("1"))
							{
								tax_amt = (Double.parseDouble(customer_Invoice_Gross_Amt_INR)*Double.parseDouble(rset.getString(2)))/100;
							}
							else if(rset.getString(3).equals("2"))
							{
								queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
											  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+invtaxstructcd+"' AND " +
											  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+invtaxstructcd+"' AND " +
											  "B.app_date<=TO_DATE('"+invbill_period_end_dt+"','DD/MM/YYYY')) AND A.tax_code="+rset.getString(4)+"";
					//			//System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
						 		rset1=stmt1.executeQuery(queryString1);
						 		if(rset1.next())
						 		{
							 			if(rset1.getString(3).equals("1"))
										{
											tax_amt = (Double.parseDouble(customer_Invoice_Gross_Amt_INR)*Double.parseDouble(rset1.getString(2)))/100;
										}
										
							 			tax_amt = (tax_amt*Double.parseDouble(rset.getString(2)))/100;
						 		}
						 		else
						 		{
						 			tax_amt = 0;
						 		}
							}
							else
							{
								tax_amt = 0;
							}
							
							customer_Invoice_Tax_Code.add(tax_cd);
							customer_Invoice_Tax_Rate.add(nf.format(Double.parseDouble(tax_factor)));
							
							if(modifycontract_type.equals("C")) {
								total_tax+=Math.round(tax_amt);
								customer_Invoice_Tax_Amt.add(nf3.format(Math.round(Double.parseDouble(""+tax_amt))));
							} else {
								total_tax+=tax_amt;
								customer_Invoice_Tax_Amt.add(nf3.format(Double.parseDouble(""+tax_amt)));
							}
						}
						//System.out.println("total_tax===-- "+total_tax);
						total_tax_payable=total_tax+"";
						
						if(TAX_ADV_ADJ_FLAG.equalsIgnoreCase("Y")){
						//SB20160517	if(TAX_ADV_ADJ_CUR.equalsIgnoreCase("1"))
							if(TAX_ADV_ADJ_SIGN.equalsIgnoreCase("1"))
							{
								TAX_ADV_ADJ_CUR="INR";
								total_tax_payable=(Double.parseDouble(total_tax_payable)-Double.parseDouble(TAX_ADV_ADJ_AMT))+"";
							}
							//SB20160517 else if(TAX_ADV_ADJ_CUR.equalsIgnoreCase("2"))
							else if(TAX_ADV_ADJ_SIGN.equalsIgnoreCase("2"))
							{
								TAX_ADV_ADJ_CUR="USD";
								total_tax_payable=(Double.parseDouble(total_tax_payable)+Double.parseDouble(TAX_ADV_ADJ_AMT))+"";
							}
							TAX_ADV_ADJ_RMK = "Service Tax Payable";
						}
						////System.out.println("total_tax_payable............."+total_tax_payable);
						if(SBC_ADV_ADJ_FLAG.equalsIgnoreCase("Y")){
						//SB20160517	if(SBC_ADV_ADJ_CUR.equalsIgnoreCase("1"))
							if(SBC_ADV_ADJ_SIGN.equalsIgnoreCase("1"))	
							{
								SBC_ADV_ADJ_CUR="INR";
								total_tax_payable=(Double.parseDouble(total_tax_payable)-Double.parseDouble(SBC_ADV_ADJ_AMT))+"";
							}
						//SB20160517	else if(SBC_ADV_ADJ_CUR.equalsIgnoreCase("2"))
							else if(SBC_ADV_ADJ_SIGN.equalsIgnoreCase("2"))
							{
								SBC_ADV_ADJ_CUR="INR";
								total_tax_payable=(Double.parseDouble(total_tax_payable)+Double.parseDouble(SBC_ADV_ADJ_AMT))+"";
							}
							SBC_ADV_ADJ_RMK = "Swacch Bharat Cess Payable";
						}
						if(KKC_ADV_ADJ_FLAG.equalsIgnoreCase("Y")){
							//SB20160517	if(SBC_ADV_ADJ_CUR.equalsIgnoreCase("1"))
								if(KKC_ADV_ADJ_SIGN.equalsIgnoreCase("1"))	
								{
									KKC_ADV_ADJ_CUR="INR";
									total_tax_payable=(Double.parseDouble(total_tax_payable)-Double.parseDouble(KKC_ADV_ADJ_AMT))+"";
								}
							//SB20160517	else if(SBC_ADV_ADJ_CUR.equalsIgnoreCase("2"))
								else if(KKC_ADV_ADJ_SIGN.equalsIgnoreCase("2"))
								{
									KKC_ADV_ADJ_CUR="INR";
									total_tax_payable=(Double.parseDouble(total_tax_payable)+Double.parseDouble(KKC_ADV_ADJ_AMT))+"";
								}
								KKC_ADV_ADJ_RMK = "Krishi Kalyan Cess Payable";
							}
						
						for(int k=0;k<TAX_ADV_ADJ_CODE_GST.size();k++) {
							String sign = ""+TAX_ADV_ADJ_SIGN_GST.get(TAX_ADV_ADJ_CODE_GST.elementAt(k));
							TAX_ADV_ADJ_SIGN_GST.put(TAX_ADV_ADJ_CODE_GST.elementAt(k),"INR");
							String amt = ""+TAX_ADV_ADJ_AMT_GST.get(TAX_ADV_ADJ_CODE_GST.elementAt(k));
							if(sign.equalsIgnoreCase("1"))	
							{
								total_tax_payable=(Double.parseDouble(total_tax_payable.replace(",",""))-Double.parseDouble(amt.replace(",","")))+"";
							}
							else if(sign.equalsIgnoreCase("2"))
							{
								total_tax_payable=(Double.parseDouble(total_tax_payable.replace(",",""))+Double.parseDouble(amt.replace(",","")))+"";
							}
						}
						
						for(int i=0; i<TAX_ADV_ADJ_AMT_GST.size(); i++) {
							String tax_amt_ = ""+TAX_ADV_ADJ_AMT_GST.get(TAX_ADV_ADJ_CODE_GST.elementAt(i)+"");
							double amt = Math.round(Double.parseDouble(customer_Invoice_Tax_Amt.elementAt(i).toString().replace(",",""))-Double.parseDouble(tax_amt_.replace(",","")));
							total_compo_tax_payable.add(nf3.format(amt));
							TOTAL_TAX_PAYABLE.put(TAX_ADV_ADJ_CODE_GST.elementAt(i),amt);
						}
						if(modifycontract_type.equals("C")) {
							total_tax_payable=nf3.format(Math.round(Double.parseDouble(total_tax_payable)));
						} else {
							total_tax_payable=nf3.format((Double.parseDouble(total_tax_payable)));
						}
						if(!customer_Invoice_Gross_Amt_INR.equals(""))
							customer_Invoice_Gross_Amt_INR = nf3.format(Double.parseDouble(customer_Invoice_Gross_Amt_INR));
			} else {
				
				queryString = "select gross_amt_usd,gross_amt_inr," +
				" net_amt_inr,exchg_rate_value, tax_struct_cd, " +
				" total_qty, sale_price,to_char(invoice_dt,'dd/mm/yyyy')" +
				" ,ADV_INV_NO,TO_CHAR(ADV_INV_DT,'DD/MM/YYYY') "+//ADDED FOR ADVANCE INV NO
				" ,INV_AMT_INR,INV_AMT_USD,PAY_TYPE,ADV_ADJ_FLG  " + //HS20160725
				" FROM DLNG_INVOICE_MST WHERE " +
				" financial_year='"+invFinancialYear+"' AND " +
				" hlpl_inv_seq_no='"+invHlplinvseqno+"' AND " +
				" contract_type='"+invContractType+"'  AND FLAG='Y' ";
				////System.out.println("STEP-2A:DLNG_INVOICE_MST: "+queryString);
				////System.out.println("Invoice Details Fetch Query = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					invgrossamt_usd=rset.getString(1)==null?"0":rset.getString(1);
					invgrossamt_inr=rset.getString(2)==null?"0":rset.getString(2);
					invnetamtinr=rset.getString(3)==null?"0":rset.getString(3);
					invexchngrt=rset.getString(4)==null?"0":rset.getString(4);
					invtaxstructcd=rset.getString(5)==null?"0":rset.getString(5);
					invtotal_qty=rset.getString(6)==null?"0":rset.getString(6);
					invsaleprice=rset.getString(7)==null?"0":rset.getString(7);
					invinvoicedt=rset.getString(8)==null?"":rset.getString(8);
					invadvinvno=rset.getString(9)==null?"":rset.getString(9);
					invadvinvdt=rset.getString(10)==null?"":rset.getString(10);
					if((rset.getString(14)==null?"BA":rset.getString(14)).toString().equalsIgnoreCase("AA")){
						raw_amt_inr=invgrossamt_inr;
					}else{
						raw_amt_inr=rset.getString(11)==null?"0":rset.getString(11);
					}
					raw_amt_usd=rset.getString(12)==null?"0":rset.getString(12);	
					inv_pay_type=rset.getString(13)==null?"AP":rset.getString(13);	
					inv_advance_adj_flg=rset.getString(14)==null?"BA":rset.getString(14);
					
					//ADDED BY RS20170413 FOR MULTIPLE ADVANCE INVOICES....
					String same_no = invadvinvno, diff_no = "";
					invoice_dtl = invadvinvno+ " dated "+invadvinvdt; invoice_dates = invadvinvdt;
					String query = "SELECT ADV_INV_NO, NVL(TO_CHAR(ADV_INV_DT,'DD/MM/YYYY'),'') "
							+ "FROM FMS8_ADV_INV_DTL "
							+ "WHERE FINANCIAL_YEAR = '"+invFinancialYear+"' AND CONTRACT_TYPE = '"+invContractType+"' "
							+ "AND HLPL_INV_SEQ_NO = '"+invHlplinvseqno+"' AND ADV_INV_NO != '"+invadvinvno+"' ";
					rset = stmt.executeQuery(query);
					while(rset.next())
					{
//							invoice_dtl += ", "+rset.getString(1)+" dated "+rset.getString(2);
							String dt = rset.getString(2);
							if(!invadvinvdt.trim().equals(dt.trim()) && !invoice_dates.contains(dt)) {
								if(diff_no.length()==0) {
									diff_no = rset.getString(1)+" dated "+rset.getString(2);
								} else {
									diff_no += " , "+ rset.getString(1)+" dated "+rset.getString(2);
								}
							} else {
								same_no += ", "+rset.getString(1);
							}
					}
					same_no += " dated "+invadvinvdt;
					if(diff_no.length()!=0) {
						same_no += " , "+diff_no;
					}
					invoice_dtl = same_no;
				}
				
				String Mapping_seq_no=invContractType+":"+invFinancialYear+":"+invHlplinvseqno+":"+invinvoicedt;
				String mapid[]=customer_inv_mapping_id.split("-");
				String queryString1="select price_cd, AMOUNT, CURRENCY, TOTAL_TARIFF, INV_AMT_INR, " +
						" INV_AMT_USD, REC_FLAG, REMARK, FLAG, OPERATION, BASIC_INV_AMT_INR, BASIC_INV_AMT_USD from FMS7_INV_COMPO_DTL" +
						" where INV_SEQ_NO='"+Mapping_seq_no+"'  and (flag_temp not like 'T' or flag_temp is null)";
				if(modifycontract_type.equalsIgnoreCase("T") || modifycontract_type.equalsIgnoreCase("C"))
				{
					queryString1+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
				}
				////System.out.println("STEP-2A.1:DLNG_INVOICE_MST: "+queryString1);
				rset1=stmt1.executeQuery(queryString1);
				while(rset1.next())
				{
					String price_cd=rset1.getString(1)==null?"0":rset1.getString(1);
					basic_amt_usd=rset1.getString(12)==null?"0":rset1.getString(12);
					basic_amt_inr=rset1.getString(11)==null?"0":rset1.getString(11);
					
			//		//System.out.println("price_cd--"+price_cd+""+""+"");
					if(price_cd.equalsIgnoreCase("1"))
					{
						invadjflag=rset1.getString(9)==null?"N":rset1.getString(9);
					//	//System.out.println("price_cd--"+price_cd+"invadjflag--->"+invadjflag+""+"");
						if(invadjflag.equalsIgnoreCase("Y"))
						{
							invadjustmentamt=rset1.getString(2)==null?"0":rset1.getString(2);
							invadjustcur=rset1.getString(3)==null?"0":rset1.getString(3);
							adjust_gross_amt_inr=rset1.getString(5)==null?"0":rset1.getString(5);
							adjust_gross_amt_usd=rset1.getString(6)==null?"0":rset1.getString(6);
							invadjrecv=rset1.getString(7)==null?"0":rset1.getString(7);
							invadjremark=rset1.getString(8)==null?"":rset1.getString(8);
							invadjustsign=rset1.getString(10)==null?"1":rset1.getString(10);
							
							if(invadjremark.trim().equalsIgnoreCase("")){ //HS20160725
								invadjremark="Adjustment for";
								if(inv_pay_type.equalsIgnoreCase("AP")) {  //HS20160725
									invadjremark+=" advance amount"; 
								}else{
									invadjremark+=" special payment";
								}
								invadjremark+=" paid against Receipt Voucher No. "+invoice_dtl;
							}						
						}
					//	//System.out.println("price_cd--"+price_cd+"invadjflag--->"+invadjflag+"invadjustmentamt--->"+invadjustmentamt+"");
					}
					if(price_cd.equalsIgnoreCase("3"))
					{
						invtariff_flag=rset1.getString(9)==null?"N":rset1.getString(9);
						if(invtariff_flag.equalsIgnoreCase("Y"))
						{
							invtariff_inr=rset1.getString(2)==null?"0":rset1.getString(2);
							invtariff_total_inr=rset1.getString(4)==null?"0":rset1.getString(4);
							tariff_gross_amt_inr=rset1.getString(5)==null?"0":rset1.getString(5);
							tariff_gross_amt_usd=rset1.getString(6)==null?"0":rset1.getString(6);						
						}
					}
					if(price_cd.equalsIgnoreCase("2"))
					{
						invdiscount_flag=rset1.getString(9)==null?"N":rset1.getString(9);
						if(invdiscount_flag.equalsIgnoreCase("Y"))
						{
							invdiscount_price=rset1.getString(2)==null?"0":rset1.getString(2);
							
							discount_gross_amt_inr=rset1.getString(5)==null?"0":rset1.getString(5);
							discount_gross_amt_usd=rset1.getString(6)==null?"0":rset1.getString(6);						
						}
					}
					
					if(price_cd.equalsIgnoreCase("6"))
					{
						TAX_ADV_ADJ_FLAG=rset1.getString(9)==null?"N":rset1.getString(9);
					//	//System.out.println("price_cd--"+price_cd+"invadjflag--->"+invadjflag+""+"");
						if(TAX_ADV_ADJ_FLAG.equalsIgnoreCase("Y"))
						{
							TAX_ADV_ADJ_AMT=rset1.getString(2)==null?"0":rset1.getString(2);
							TAX_ADV_ADJ_CUR=rset1.getString(3)==null?"0":rset1.getString(3);
							TAX_ADV_ADJ_GROSS_INR=rset1.getString(5)==null?"0":rset1.getString(5);
							TAX_ADV_ADJ_GROSS_USD=rset1.getString(6)==null?"0":rset1.getString(6);
							//invadjrecv=rset1.getString(7)==null?"0":rset1.getString(7);
							//invadjremark=rset1.getString(8)==null?"":rset1.getString(8);
							TAX_ADV_ADJ_SIGN=rset1.getString(10)==null?"1":rset1.getString(10);						
							TAX_ADV_ADJ_remark="Adjustment for Service Tax paid on";
								if(inv_pay_type.equalsIgnoreCase("AP")) {  //HS20160725
									TAX_ADV_ADJ_remark+=" advance amount"; 
								}else{
									TAX_ADV_ADJ_remark+=" special payment";
								}
								TAX_ADV_ADJ_remark+=" paid against Receipt Voucher No. "+invoice_dtl;
						}
					//	//System.out.println("price_cd--"+price_cd+"invadjflag--->"+invadjflag+"invadjustmentamt--->"+invadjustmentamt+"");
					}
					if(price_cd.equalsIgnoreCase("7"))
					{
						SBC_ADV_ADJ_FLAG=rset1.getString(9)==null?"N":rset1.getString(9);
					//	//System.out.println("price_cd--"+price_cd+"invadjflag--->"+invadjflag+""+"");
						if(SBC_ADV_ADJ_FLAG.equalsIgnoreCase("Y"))
						{
							SBC_ADV_ADJ_AMT=rset1.getString(2)==null?"0":rset1.getString(2);
							SBC_ADV_ADJ_CUR=rset1.getString(3)==null?"0":rset1.getString(3);
							SBC_ADV_ADJ_GROSS_INR=rset1.getString(5)==null?"0":rset1.getString(5);
							SBC_ADV_ADJ_GROSS_USD=rset1.getString(6)==null?"0":rset1.getString(6);
							//invadjrecv=rset1.getString(7)==null?"0":rset1.getString(7);
							//invadjremark=rset1.getString(8)==null?"":rset1.getString(8);
							SBC_ADV_ADJ_SIGN=rset1.getString(10)==null?"1":rset1.getString(10);						
							SBC_ADV_ADJ_remark="Adjustment for Swachh Bharat Cess paid on";
							if(inv_pay_type.equalsIgnoreCase("AP")) {  //HS20160725
								SBC_ADV_ADJ_remark+=" advance amount"; 
							}else{
								SBC_ADV_ADJ_remark+=" special payment";
							}
							SBC_ADV_ADJ_remark+=" paid against Receipt Voucher No. "+invoice_dtl;
						}
					//	//System.out.println("price_cd--"+price_cd+"invadjflag--->"+invadjflag+"invadjustmentamt--->"+invadjustmentamt+"");
					}
					if(price_cd.equalsIgnoreCase("8"))
					{
						KKC_ADV_ADJ_FLAG=rset1.getString(9)==null?"N":rset1.getString(9);
					//	//System.out.println("price_cd--"+price_cd+"invadjflag--->"+invadjflag+""+"");
						if(KKC_ADV_ADJ_FLAG.equalsIgnoreCase("Y"))
						{
							KKC_ADV_ADJ_AMT=rset1.getString(2)==null?"0":rset1.getString(2);
							KKC_ADV_ADJ_CUR=rset1.getString(3)==null?"0":rset1.getString(3);
							KKC_ADV_ADJ_GROSS_INR=rset1.getString(5)==null?"0":rset1.getString(5);
							KKC_ADV_ADJ_GROSS_USD=rset1.getString(6)==null?"0":rset1.getString(6);
							//invadjrecv=rset1.getString(7)==null?"0":rset1.getString(7);
							//invadjremark=rset1.getString(8)==null?"":rset1.getString(8);
							KKC_ADV_ADJ_SIGN=rset1.getString(10)==null?"1":rset1.getString(10);						
							KKC_ADV_ADJ_remark="Adjustment for Krishi Kalyan Cess paid on";
							if(inv_pay_type.equalsIgnoreCase("AP")) {  //HS20160725
								KKC_ADV_ADJ_remark+=" advance amount"; 
							}else{
								KKC_ADV_ADJ_remark+=" special payment";
							}
							KKC_ADV_ADJ_remark+=" paid against Receipt Voucher No. "+invoice_dtl;
						}
					//	//System.out.println("price_cd--"+price_cd+"invadjflag--->"+invadjflag+"invadjustmentamt--->"+invadjustmentamt+"");
					}
				}
			//	//System.out.println("basic_amt_usd"+basic_amt_usd);
				
				First_gross_amt_usd=basic_amt_usd;
				First_gross_amt_inr=basic_amt_inr;
				
				if(invtariff_flag.equalsIgnoreCase("Y"))
				{
					display_rate=invtariff_total_inr;
					if(invdiscount_flag.equalsIgnoreCase("Y"))
					{
						invdiscount_price=""+nf3a.format((Double.parseDouble(invdiscount_price)*Double.parseDouble(invexchngrt)));
						First_gross_amt_inr=nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(discount_gross_amt_inr)));
						
					}
					if(invadjflag.equalsIgnoreCase("Y"))
					{
						if(invadjustcur.equalsIgnoreCase("2"))			//2 is for usd
						{
							invadjustmentamt=""+(Double.parseDouble(invadjustmentamt)*Double.parseDouble(invexchngrt));
							invadjustmentamt=nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(invadjustmentamt)));
							Final_adjust_gross_amt=adjust_gross_amt_inr;
						}
						else
						{
							Final_adjust_gross_amt=adjust_gross_amt_inr;
							/*added on 13-052-2015 RG*/
							invadjustmentamt=nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(invadjustmentamt)));
						}
					}
					Final_first_gross_amt=tariff_gross_amt_inr;
				//	//System.out.println("Final_first_gross_amt"+Final_first_gross_amt);
				}
				else
				{
					display_rate=invsaleprice;
					String temp_amt=First_gross_amt_usd;
					
					if(invdiscount_flag.equalsIgnoreCase("Y"))
					{
						temp_amt=discount_gross_amt_usd;
						First_gross_amt_usd=nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(discount_gross_amt_usd)));	
					}
					
					
					////System.out.println("HERE----------->>>>>"+display_rate);
					
					if(invadjflag.equalsIgnoreCase("Y"))
					{
						invadjustmentamt=nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(invadjustmentamt)));
						
						if(invadjustcur.equalsIgnoreCase("2"))			//2 is for usd
						{
							Final_adjust_gross_amt=adjust_gross_amt_usd;
							
						}
						else if(invadjustcur.equalsIgnoreCase("1"))
						{
							Final_adjust_gross_amt=adjust_gross_amt_inr;
						}
						total_invoice_payable_usd=nf3.format(Double.parseDouble(""+java.text.NumberFormat.getInstance().parse(adjust_gross_amt_usd)));
						total_invoice_payable_inr=nf3.format(Double.parseDouble(""+java.text.NumberFormat.getInstance().parse(adjust_gross_amt_inr)));
						
					}
				//	//System.out.println("111First_gross_amt_usd"+temp_amt);
					Final_first_gross_amt=temp_amt;
					
				}
			//	//System.out.println("111"+Final_first_gross_amt);
				
				Final_first_gross_amt=Final_first_gross_amt;
				
			//	Final_first_gross_amt=nf3.format(Double.parseDouble(""+java.text.NumberFormat.getInstance().parse(Final_first_gross_amt)));
				Final_adjust_gross_amt=nf3.format(Double.parseDouble(Final_adjust_gross_amt));
				invdiscount_price=""+Double.parseDouble(nf3a.format((Double.parseDouble(invdiscount_price))));
				if(!display_rate.equals(""))
					display_rate=nf3a.format(Double.parseDouble(display_rate));
				
						customer_Invoice_Gross_Amt_INR=invgrossamt_inr;
						if(TAX_ADV_ADJ_FLAG.equalsIgnoreCase("Y")){
							customer_Invoice_Gross_Amt_INR=raw_amt_inr;
						}
						
			//			//System.out.println("invgrossamt_inr-------->"+invgrossamt_inr+"customer_Invoice_Gross_Amt_INR---->"+customer_Invoice_Gross_Amt_INR);
						// calculate tax details for adjusted gross
						double tax_amt = 0;
						String tax_cd = "0";
						String tax_factor = "0.00";
						double total_tax=0;
						
						queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
									  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+invtaxstructcd+"' AND " +
									  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+invtaxstructcd+"' AND " +
									  "B.app_date<=TO_DATE('"+invbill_period_end_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code";
						////System.out.println("DEEP Query For Finding Out Correct Tax Structure Details = "+queryString);
						rset=stmt.executeQuery(queryString);
						while(rset.next())
						{
							tax_cd = rset.getString(1);
							tax_factor = rset.getString(2);
							
							if(rset.getString(3).equals("1"))
							{
								tax_amt = (Double.parseDouble(customer_Invoice_Gross_Amt_INR)*Double.parseDouble(rset.getString(2)))/100;
							}
							else if(rset.getString(3).equals("2"))
							{
								queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
											  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd='"+invtaxstructcd+"' AND " +
											  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd='"+invtaxstructcd+"' AND " +
											  "B.app_date<=TO_DATE('"+invbill_period_end_dt+"','DD/MM/YYYY')) AND A.tax_code="+rset.getString(4)+"";
					//			//System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
						 		rset1=stmt1.executeQuery(queryString1);
						 		if(rset1.next())
						 		{
							 			if(rset1.getString(3).equals("1"))
										{
											tax_amt = (Double.parseDouble(customer_Invoice_Gross_Amt_INR)*Double.parseDouble(rset1.getString(2)))/100;
										}
										
							 			tax_amt = (tax_amt*Double.parseDouble(rset.getString(2)))/100;
						 		}
						 		else
						 		{
						 			tax_amt = 0;
						 		}
							}
							else
							{
								tax_amt = 0;
							}
							total_tax+=tax_amt;
							customer_Invoice_Tax_Code.add(tax_cd);
							customer_Invoice_Tax_Rate.add(nf.format(Double.parseDouble(tax_factor)));
							customer_Invoice_Tax_Amt.add(nf3.format(Double.parseDouble(""+tax_amt)));
						}
						//System.out.println("total_tax===-- "+total_tax);
						total_tax_payable=total_tax+"";
						
						if(TAX_ADV_ADJ_FLAG.equalsIgnoreCase("Y")){
						//SB20160517	if(TAX_ADV_ADJ_CUR.equalsIgnoreCase("1"))
							if(TAX_ADV_ADJ_SIGN.equalsIgnoreCase("1"))
							{
								TAX_ADV_ADJ_CUR="INR";
								total_tax_payable=(Double.parseDouble(total_tax_payable)-Double.parseDouble(TAX_ADV_ADJ_AMT))+"";
							}
							//SB20160517 else if(TAX_ADV_ADJ_CUR.equalsIgnoreCase("2"))
							else if(TAX_ADV_ADJ_SIGN.equalsIgnoreCase("2"))
							{
								TAX_ADV_ADJ_CUR="USD";
								total_tax_payable=(Double.parseDouble(total_tax_payable)+Double.parseDouble(TAX_ADV_ADJ_AMT))+"";
							}
							TAX_ADV_ADJ_RMK = "Service Tax Payable";
						}
						////System.out.println("total_tax_payable............."+total_tax_payable);
						if(SBC_ADV_ADJ_FLAG.equalsIgnoreCase("Y")){
						//SB20160517	if(SBC_ADV_ADJ_CUR.equalsIgnoreCase("1"))
							if(SBC_ADV_ADJ_SIGN.equalsIgnoreCase("1"))	
							{
								SBC_ADV_ADJ_CUR="INR";
								total_tax_payable=(Double.parseDouble(total_tax_payable)-Double.parseDouble(SBC_ADV_ADJ_AMT))+"";
							}
						//SB20160517	else if(SBC_ADV_ADJ_CUR.equalsIgnoreCase("2"))
							else if(SBC_ADV_ADJ_SIGN.equalsIgnoreCase("2"))
							{
								SBC_ADV_ADJ_CUR="INR";
								total_tax_payable=(Double.parseDouble(total_tax_payable)+Double.parseDouble(SBC_ADV_ADJ_AMT))+"";
							}
							SBC_ADV_ADJ_RMK = "Swacch Bharat Cess Payable";
						}
						if(KKC_ADV_ADJ_FLAG.equalsIgnoreCase("Y")){
							//SB20160517	if(SBC_ADV_ADJ_CUR.equalsIgnoreCase("1"))
								if(KKC_ADV_ADJ_SIGN.equalsIgnoreCase("1"))	
								{
									KKC_ADV_ADJ_CUR="INR";
									total_tax_payable=(Double.parseDouble(total_tax_payable)-Double.parseDouble(KKC_ADV_ADJ_AMT))+"";
								}
							//SB20160517	else if(SBC_ADV_ADJ_CUR.equalsIgnoreCase("2"))
								else if(KKC_ADV_ADJ_SIGN.equalsIgnoreCase("2"))
								{
									KKC_ADV_ADJ_CUR="INR";
									total_tax_payable=(Double.parseDouble(total_tax_payable)+Double.parseDouble(KKC_ADV_ADJ_AMT))+"";
								}
								KKC_ADV_ADJ_RMK = "Krishi Kalyan Cess Payable";
							}
						////System.out.println("customer_Invoice_Tax_Code: "+customer_Invoice_Tax_Code);
						for(int i=0; i<customer_Invoice_Tax_Code.size(); i++) {
							if(customer_Invoice_Tax_Code.elementAt(i).toString().equalsIgnoreCase("102")) {
								total_adv_tax_payable=nf3.format(Double.parseDouble(customer_Invoice_Tax_Amt.elementAt(i).toString().replace(",",""))-Double.parseDouble(TAX_ADV_ADJ_AMT.toString().replace(",",""))); 
							} else if(customer_Invoice_Tax_Code.elementAt(i).toString().equalsIgnoreCase("117")) { 
								total_adv_sbc_payable=nf3.format(Double.parseDouble(customer_Invoice_Tax_Amt.elementAt(i).toString().replace(",",""))-Double.parseDouble(SBC_ADV_ADJ_AMT.toString().replace(",","")));
							} else {
								total_adv_kkc_payable=nf3.format(Double.parseDouble(customer_Invoice_Tax_Amt.elementAt(i).toString().replace(",",""))-Double.parseDouble(KKC_ADV_ADJ_AMT.toString().replace(",","")));
							}
						}
						////System.out.println("total_adv_sbc_payable****"+total_adv_sbc_payable); 
						total_tax_payable=nf3.format(Double.parseDouble(total_tax_payable));
						////System.out.println("total_tax_payable............."+total_tax_payable);
						if(!customer_Invoice_Gross_Amt_INR.equals(""))
							customer_Invoice_Gross_Amt_INR = nf3.format(Double.parseDouble(customer_Invoice_Gross_Amt_INR));
						////System.out.println("customer_Invoice_Gross_Amt_INR-"+customer_Invoice_Gross_Amt_INR);
						TAX_ADV_ADJ_AMT=nf3.format(Double.parseDouble(TAX_ADV_ADJ_AMT));
						SBC_ADV_ADJ_AMT=nf3.format(Double.parseDouble(SBC_ADV_ADJ_AMT));
						KKC_ADV_ADJ_AMT=nf3.format(Double.parseDouble(KKC_ADV_ADJ_AMT));
						//invadjustmentamt=nf3.format(Double.parseDouble(invadjustmentamt));
				}
		}
		catch(Exception e)
		{
			//System.out.println("In databean advance pament");
			e.printStackTrace();
		}
	}
	
	String advflag=""; //HS20160903
	public String getAdvflag() {
		return advflag;
	}
	
	Vector TAX_CODE = new Vector();
	Map Adjust_total_avail_bal_gst = new HashMap();
	Map tax_adv_flag = new HashMap();
	Map tax_adv_curr = new HashMap();
	Map tax_inv_amt_inr = new HashMap();
	Map tax_adv_adjustment = new HashMap();

	public void updategetadvancedetailsfrominvoice()
	{
		try
		{
			////System.out.println("Signing Date Fetch Query For TYPE--- = "+customer_inv_mapping_id);
	
			 modifycustomer_Invoice_Tax_Code.clear();
			 modifycustomer_Invoice_Tax_Rate.clear();
			 modifycustomer_Invoice_Tax_Amt.clear();
			 modifycustomer_Invoice_Tax_Abbr.clear();
			 modifycustomer_Invoice_Tax_Name.clear();
			
			 String mapid[]=customer_inv_mapping_id.split("-");
			 
			 
			 String Mapping_seq_no=modifycontract_type+":"+modifyFinancialYear+":"+modifyhlplInvoiceNo+":"+"%";
				
				String queryString1="select price_cd, AMOUNT, CURRENCY,   " +
						"  REC_FLAG, REMARK, FLAG, OPERATION  from FMS7_INV_COMPO_DTL" +
						" where INV_SEQ_NO like '"+Mapping_seq_no+"' and price_cd='1' "
								+ "and (flag_temp not like 'T' or flag_temp is null)";
				
				if(modifycontract_type.equalsIgnoreCase("T") || modifycontract_type.equalsIgnoreCase("C"))
				{
					queryString1+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
				}
				System.out.println("queryString1"+queryString1);
			 rset=stmt.executeQuery(queryString1);
			 if(rset.next())
			 {
				 	modifyadjflag = rset.getString(6)==null?"N":rset.getString(6);
					modifyadjamt = rset.getString(2)==null?"0":rset.getString(2);
					modifyadjcur = rset.getString(3)==null?"":rset.getString(3);
					modifyadjrecv = rset.getString(4)==null?"N":rset.getString(4);
					modifyadjremark = rset.getString(5)==null?"":rset.getString(5);
					modifyadjsign= rset.getString(7)==null?"1":rset.getString(7);
			 }
			 else
			 {
				 	modifyadjrecv = "N";
					modifyadjsign= "1";
			 }
			 
			 if(modifyadjcur.equalsIgnoreCase("1"))
				 modifyadjcur="I";
			 else if(modifyadjcur.equalsIgnoreCase("2"))
				 modifyadjcur="U";
			 
				String raw_amt_inr="0";
				
			queryString = "SELECT gross_amt_inr, gross_amt_usd, net_amt_inr, tax_amt_inr, exchg_rate_value" +
			",ADV_INV_NO,INV_AMT_INR,ADV_ADJ_FLG " +///ADDED FOR ADVANCE INVOICE NO &&HS20160903
			  " FROM DLNG_INVOICE_MST WHERE HLPL_INV_SEQ_NO='"+modifyhlplInvoiceNo+"' AND " +
			  "FINANCIAL_YEAR='"+modifyFinancialYear+"' AND CONTRACT_TYPE='"+modifycontract_type+"'  AND FLAG='Y' ";
			if(modifycontract_type.equalsIgnoreCase("T") || modifycontract_type.equalsIgnoreCase("C"))
			{
				queryString+=" AND MAPPING_ID='"+customer_inv_mapping_id+"'";
			}
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				
				modifygrossamtinr = rset.getString(1)==null?"0":rset.getString(1);
				modifygrossamtusd = rset.getString(2)==null?"0":rset.getString(2);
				modifynetamtinr = rset.getString(3)==null?"0":rset.getString(3);
				modifytaxaminr = rset.getString(4)==null?"0":rset.getString(4);
				modifyexchngratevalue = rset.getString(5)==null?"0":rset.getString(5);
				modifyadvinvno = rset.getString(6)==null?"":rset.getString(6);
				raw_amt_inr=rset.getString(7)==null?"0":rset.getString(7);
				advflag=rset.getString(8)==null?"NA":rset.getString(8);
			}

			if(date_flag && modifycontract_type.equalsIgnoreCase("C")) {
				String tax_adj_flag="N";
				String total_tax_inr="0";
				String gross_inr_after_adjust=modifygrossamtinr;
				String gross_usd_after_adjust=modifygrossamtusd;
				
				for(int i=0;i<TAX_CODE.size();i++) {
				String queryString2="select price_cd, AMOUNT, CURRENCY,   " +
						"  REC_FLAG, REMARK, FLAG, OPERATION ,INV_AMT_INR from FMS7_INV_COMPO_DTL" +
						" where INV_SEQ_NO like '"+Mapping_seq_no+"' and price_cd='"+TAX_CODE.elementAt(i)+"' "
						+ "and (flag_temp not like 'T' or flag_temp is null) AND "
						+ "LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"' ";
				rset = stmt.executeQuery(queryString2);
				if(rset.next()) {
					 tax_adj_flag="Y";
					 total_tax_inr=rset.getString(8)==null?"0":rset.getString(8);
					 
					 tax_adv_flag.put(""+TAX_CODE.elementAt(i),"Y");
					tax_adv_adjustment.put(""+TAX_CODE.elementAt(i),rset.getString(2)==null?"0":rset.getString(2));
					tax_adv_curr.put(""+TAX_CODE.elementAt(i),rset.getString(3)==null?"0":rset.getString(3));
					tax_inv_amt_inr.put(""+TAX_CODE.elementAt(i),rset.getString(8)==null?"0":rset.getString(8));
				}
				}
				if(!modifyexchangerateselected.equalsIgnoreCase(""))
				{
					modifyexchngratevalue=modifyexchangerateselected;
				}

				if(modifyadjflag.equalsIgnoreCase("Y"))
				{
					if(modifyadjcur.equalsIgnoreCase("U"))
					{
						if(modifyadjsign.equalsIgnoreCase("1"))
						{
							modifygrossamtadjusted=""+(Double.parseDouble(modifygrossamtusd)-Double.parseDouble(modifyadjamt));
						}
						else if(modifyadjsign.equalsIgnoreCase("2"))
						{
							modifygrossamtadjusted=""+(Double.parseDouble(modifygrossamtusd)+Double.parseDouble(modifyadjamt));
						}
						modifygrossamtinradjusted=""+(Double.parseDouble(modifygrossamtadjusted)*Double.parseDouble(modifyexchngratevalue));
					}
					else if(modifyadjcur.equalsIgnoreCase("I"))
					{
						if(modifyadjsign.equalsIgnoreCase("1"))
						{
							modifygrossamtadjusted=""+(Double.parseDouble(modifygrossamtinr)-Double.parseDouble(modifyadjamt));
						}
						else if(modifyadjsign.equalsIgnoreCase("2"))
						{
							modifygrossamtadjusted=""+(Double.parseDouble(modifygrossamtinr)+Double.parseDouble(modifyadjamt));
						}
						modifygrossamtinradjusted=modifygrossamtadjusted;
					}
				}
				else
				{
					modifygrossamtadjusted="0";
					modifygrossamtinradjusted=modifygrossamtadjusted;
				}
				
				
				modifygrossamtadjusted=nf3.format(Double.parseDouble(modifygrossamtadjusted));
				modifygrossamtinradjusted=nf3.format(Double.parseDouble(modifygrossamtinradjusted));
				String modifytax_struct_cd="";
				modifycustomer_Invoice_Gross_Amt_INR=modifygrossamtinradjusted;
				
				if(tax_adj_flag.equalsIgnoreCase("Y"))
				{
					modifycustomer_Invoice_Gross_Amt_INR=""+Math.round(Double.parseDouble(raw_amt_inr));
				}
				else if(!modifyadjflag.equalsIgnoreCase("Y"))
				{
					modifycustomer_Invoice_Gross_Amt_INR=""+Math.round(Double.parseDouble(raw_amt_inr));
				}
				
				if(modifycontract_type.equalsIgnoreCase("S") || modifycontract_type.equalsIgnoreCase("L"))
				{
					queryString = "SELECT A.TAX_STRUCT_DTL,A.TAX_STRUCT_CD FROM FMS7_CUSTOMER_TAX_STRUCT_DTL A WHERE " +
								  "A.customer_cd="+modifycustomercd+" AND " +
								  "A.plant_seq_no="+modifyplantseqno+" AND " +
						 		  "A.tax_struct_dt=(SELECT MAX(B.tax_struct_dt) FROM FMS7_CUSTOMER_TAX_STRUCT_DTL B WHERE " +
						 		  "A.customer_cd=B.customer_cd AND A.plant_seq_no=B.plant_seq_no AND " +
						 		  "B.tax_struct_dt<=TO_DATE('"+modifybillperiodenddate+"','DD/MM/YYYY'))";
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						modifytax_struct_cd = rset.getString(2)==null?"0":rset.getString(2);
					}
					else
					{
						modifytax_struct_cd = "0";
					}
				}
				else if(modifycontract_type.equalsIgnoreCase("R") || modifycontract_type.equalsIgnoreCase("T") || modifycontract_type.equalsIgnoreCase("C"))
				{
					queryString = "SELECT A.TAX_STRUCT_DTL,A.TAX_STRUCT_CD FROM FMS7_CUSTOMER_SERVICE_TAX_DTL A WHERE " +
								  "A.customer_cd="+modifycustomercd+" AND " +
								  "A.plant_seq_no="+modifyplantseqno+" AND " +
						 		  "A.tax_struct_dt=(SELECT MAX(B.tax_struct_dt) FROM FMS7_CUSTOMER_SERVICE_TAX_DTL B WHERE " +
						 		  "A.customer_cd=B.customer_cd AND A.plant_seq_no=B.plant_seq_no AND " +
						 		  "B.tax_struct_dt<=TO_DATE('"+modifybillperiodenddate+"','DD/MM/YYYY'))";
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						modifytax_struct_cd = rset.getString(2)==null?"0":rset.getString(2);
					}
					else
					{
						modifytax_struct_cd = "0";
					}
				}
				else
				{
					modifytax_struct_cd = "0";
				}
				
				double total_tax_amt = 0;
				double tax_amt = 0;
				String tax_cd = "0";
				String tax_factor = "0.00";
				
				queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
							  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+modifytax_struct_cd+" AND " +
							  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+modifytax_struct_cd+" AND " +
							  "B.app_date<=TO_DATE('"+modifybillperiodenddate+"','DD/MM/YYYY')) ORDER BY A.tax_code";
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{
					tax_cd = rset.getString(1);
					tax_factor = rset.getString(2);
					
					if(rset.getString(3).equals("1"))
					{
						tax_amt = (Double.parseDouble(""+NumberFormat.getInstance().parse(modifycustomer_Invoice_Gross_Amt_INR))*Double.parseDouble(rset.getString(2)))/100;
					}
					else if(rset.getString(3).equals("2"))
					{
						queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
									  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+modifytax_struct_cd+" AND " +
									  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+modifytax_struct_cd+" AND " +
									  "B.app_date<=TO_DATE('"+modifybillperiodenddate+"','DD/MM/YYYY')) AND A.tax_code="+rset.getString(4)+"";
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
					 			if(rset1.getString(3).equals("1"))
								{
									tax_amt = (Double.parseDouble(""+NumberFormat.getInstance().parse(modifycustomer_Invoice_Gross_Amt_INR))*Double.parseDouble(rset1.getString(2)))/100;
								}
								
					 			tax_amt = (tax_amt*Double.parseDouble(rset.getString(2)))/100;
						}
						else
						{
							tax_amt = 0;
						}
					}
					else
					{
						tax_amt = 0;
					}
					
					modifycustomer_Invoice_Tax_Code.add(tax_cd);
					modifycustomer_Invoice_Tax_Rate.add(nf.format(Double.parseDouble(tax_factor)));
					modifycustomer_Invoice_Tax_Amt.add(Math.round(tax_amt));
					total_tax_amt += Math.round(tax_amt);
				}
				modifycustomer_Invoice_Net_Amt_INR = ""+Math.round(total_tax_amt+Double.parseDouble(""+NumberFormat.getInstance().parse(""+modifycustomer_Invoice_Gross_Amt_INR)));
				
				for(int ii=0; ii<modifycustomer_Invoice_Tax_Code.size(); ii++)
				{
					queryString = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " +
								  "tax_code="+modifycustomer_Invoice_Tax_Code.elementAt(ii)+"";
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						String tax_abbr = rset.getString(1).trim()==null?"":rset.getString(1).trim();
						String tax_nm = rset.getString(2).trim()==null?"":rset.getString(2).trim();
						modifycustomer_Invoice_Tax_Abbr.add(tax_abbr);
						modifycustomer_Invoice_Tax_Name.add(tax_nm);
					}
					else
					{
						modifycustomer_Invoice_Tax_Abbr.add("");
						modifycustomer_Invoice_Tax_Name.add("");
					}
				}
				
				if(tax_adj_flag.equalsIgnoreCase("Y"))
				{
					modifygrossamtadjusted=nf3.format(Double.parseDouble(gross_usd_after_adjust));
					modifygrossamtinradjusted=nf3.format(Double.parseDouble(gross_inr_after_adjust));
					modifycustomer_Invoice_Net_Amt_INR = ""+Math.round(Double.parseDouble(gross_inr_after_adjust)+Double.parseDouble(total_tax_inr));
				}
				
				Vector cust_cut_bal=new Vector();
				double modifytotalavailbal=0.0;
				double modifyadjustamtmst1=Double.parseDouble(modifyadjustamtmst);
				System.out.println("Modify==="+modifyadjustamtmst1);
				String map_id=modifycustomercd+":"+modifyfgsano+":"+modifyfgsarevno+":"+modifysnno+":"+"%";
				
				queryString2="select flag, AMOUNT, CURRENCY,   " +
						"  OPERATION,inv_seq_no  from FMS7_INV_COMPO_DTL" +
						" where mapping_id like '"+map_id+"' and price_cd='1' and inv_seq_no like '"+modifycontract_type+"%' "
								+ "and (flag_temp not like 'T' or flag_temp is null)";
					if(modifycontract_type.equalsIgnoreCase("C"))
					{
						queryString2+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
					}
					rset2=stmt2.executeQuery(queryString2);
					while(rset2.next())
					{
						String temp_inv_no[]=rset2.getString(5).split(":");
						String invno=temp_inv_no[2];
						String yr=temp_inv_no[1];
						String ADJUST_FLAG_MST=rset2.getString(1)==null?"N":rset2.getString(1);
						if(modifyhlplInvoiceNo.equalsIgnoreCase(invno) && modifyFinancialYear.equalsIgnoreCase(yr))
						{
							
						}
						else
						{
							if(ADJUST_FLAG_MST.equalsIgnoreCase("Y"))
							{
								String adjust_sign_mst=rset2.getString(4)==null?"1":rset2.getString(4);
								if(adjust_sign_mst.equalsIgnoreCase("1"))
								{
									String adjust_amt_mst=rset2.getString(2)==null?"0":rset2.getString(2);
									modifyadjustamtmst1=modifyadjustamtmst1-Double.parseDouble(adjust_amt_mst);
								}
								else if(adjust_sign_mst.equalsIgnoreCase("2"))
								{
									String adjust_amt_mst=rset2.getString(2)==null?"0":rset2.getString(2);
									modifyadjustamtmst1=modifyadjustamtmst1+Double.parseDouble(adjust_amt_mst);
								}
							}
						}
						
						
					}
					System.out.println("Modify==="+modifyadjustamtmst1);
					modifytotalavailbal=Double.parseDouble(nf.format(modifyadjustamtmst1));
			
					 modifytotalavailbal1=nf3.format(Double.parseDouble(""+modifytotalavailbal));
					 
					 System.out.println("Modify==="+modifytotalavailbal1);
					 /**************************************************/
					 String mapping_id=modifycustomercd+"-"+modifyfgsano+"-"+modifyfgsarevno+"-"+modifysnno+"-"+0+"-"+"C";
					 
					 for(int k=0;k<TAX_CODE.size();k++) {
						 String modifyadjustamtmst12="0";
						 
						 queryString = "select price_rate,currency_cd,flag " +
									"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
									"price_cd='"+TAX_CODE.elementAt(k)+"' AND FLAG='Y' ";
						 	if(modifycontract_type.equalsIgnoreCase("C"))
							{
								queryString+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
							}	
						 
						 	rset1=stmt1.executeQuery(queryString);
							if(rset1.next())
							{
								modifyadjustamtmst12=rset1.getString(1);
								
							}
							
							double modifytotalavailbal1=0.0;
							double modifyadjustamtmst11=Double.parseDouble(modifyadjustamtmst12);
							map_id=modifycustomercd+":"+modifyfgsano+":"+modifyfgsarevno+":"+modifysnno+":"+"%";
							
							queryString2="select flag, AMOUNT, CURRENCY,   " +
									"  OPERATION,inv_seq_no  from FMS7_INV_COMPO_DTL" +
									" where mapping_id like '"+map_id+"' and price_cd='"+TAX_CODE.elementAt(k)+"' and inv_seq_no like '"+modifycontract_type+"%' "
									+ "and (flag_temp not like 'T' or flag_temp is null)";
								if(modifycontract_type.equalsIgnoreCase("C"))
								{
									queryString2+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
								}
								
								rset2=stmt2.executeQuery(queryString2);
								while(rset2.next())
								{
									String temp_inv_no[]=rset2.getString(5).split(":");
									String invno=temp_inv_no[2];
									String yr=temp_inv_no[1];
									String ADJUST_FLAG_MST=rset2.getString(1)==null?"N":rset2.getString(1);
									if(modifyhlplInvoiceNo.equalsIgnoreCase(invno) && modifyFinancialYear.equalsIgnoreCase(yr))
									{
										
									}
									else
									{
										if(ADJUST_FLAG_MST.equalsIgnoreCase("Y"))
										{
											String adjust_sign_mst=rset2.getString(4)==null?"1":rset2.getString(4);
											if(adjust_sign_mst.equalsIgnoreCase("1"))
											{
												String adjust_amt_mst=rset2.getString(2)==null?"0":rset2.getString(2);
												modifyadjustamtmst11=modifyadjustamtmst11-Double.parseDouble(adjust_amt_mst);
											}
											else if(adjust_sign_mst.equalsIgnoreCase("2"))
											{
												String adjust_amt_mst=rset2.getString(2)==null?"0":rset2.getString(2);
												modifyadjustamtmst11=modifyadjustamtmst11+Double.parseDouble(adjust_amt_mst);
											}
										}
									}
								}
								modifytotalavailbal1=Double.parseDouble(nf.format(modifyadjustamtmst11));
								Adjust_total_avail_bal_gst.put(""+TAX_CODE.elementAt(k),nf3.format(Double.parseDouble(""+modifytotalavailbal1)));
//								Adjust_total_avail_bal_tax=nf3.format(Double.parseDouble(""+modifytotalavailbal1));
					 }
				
			} else {
				String tax_adj_flag="N";
				String total_tax_inr="0";
				String gross_inr_after_adjust=modifygrossamtinr;
				String gross_usd_after_adjust=modifygrossamtusd;
				String queryString2="select price_cd, AMOUNT, CURRENCY,   " +
				"  REC_FLAG, REMARK, FLAG, OPERATION ,INV_AMT_INR from FMS7_INV_COMPO_DTL" +
				" where INV_SEQ_NO like '"+Mapping_seq_no+"' and price_cd='6' "
						+ "and (flag_temp not like 'T' or flag_temp is null)";
				////System.out.println("xxx: "+queryString2);
				if(modifycontract_type.equalsIgnoreCase("T") || modifycontract_type.equalsIgnoreCase("C"))
				{
					queryString2+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
				}
				////System.out.println("queryString1"+queryString1);
			 rset=stmt.executeQuery(queryString2);
			 if(rset.next())
			 {
				 tax_adj_flag="Y";
				 total_tax_inr=rset.getString(8)==null?"0":rset.getString(8);
				 
				 MODIFY_TAX_ADV_FLAG="Y";
				 MODIFY_TAX_ADV_ADJUSTMENT=rset.getString(2)==null?"0":rset.getString(2);
				 MODIFY_TAX_ADV_CURR=rset.getString(3)==null?"0":rset.getString(3);
				 MODIFY_TAX_INV_AMT_INR=rset.getString(8)==null?"0":rset.getString(8);
			 }
			 
			 queryString2="select price_cd, AMOUNT, CURRENCY,   " +
				"  REC_FLAG, REMARK, FLAG, OPERATION ,INV_AMT_INR from FMS7_INV_COMPO_DTL" +
				" where INV_SEQ_NO like '"+Mapping_seq_no+"' and price_cd='7' "
						+ "and (flag_temp not like 'T' or flag_temp is null)";
				////System.out.println("xxx: "+queryString2);
				if(modifycontract_type.equalsIgnoreCase("T") || modifycontract_type.equalsIgnoreCase("C"))
				{
					queryString2+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
				}
				////System.out.println("queryString1"+queryString1);
			 rset=stmt.executeQuery(queryString2);
			 if(rset.next())
			 {
				 tax_adj_flag="Y";
				 total_tax_inr=rset.getString(8)==null?"0":rset.getString(8);
				 
				 MODIFY_SBC_ADV_FLAG="Y";
				 MODIFY_SBC_ADV_ADJUSTMENT=rset.getString(2)==null?"0":rset.getString(2);
				 MODIFY_SBC_ADV_CURR=rset.getString(3)==null?"0":rset.getString(3);
				 MODIFY_SBC_INV_AMT_INR=rset.getString(8)==null?"0":rset.getString(8);
			 }
			 
			 queryString2="select price_cd, AMOUNT, CURRENCY,   " +
				"  REC_FLAG, REMARK, FLAG, OPERATION ,INV_AMT_INR from FMS7_INV_COMPO_DTL" +
				" where INV_SEQ_NO like '"+Mapping_seq_no+"' and price_cd='8' "
						+ "and (flag_temp not like 'T' or flag_temp is null)";
				////System.out.println("xxx: "+queryString2);
				if(modifycontract_type.equalsIgnoreCase("T") || modifycontract_type.equalsIgnoreCase("C"))
				{
					queryString2+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
				}
				////System.out.println("queryString1"+queryString1);
			 rset=stmt.executeQuery(queryString2);
			 if(rset.next())
			 {
				 tax_adj_flag="Y";
				 total_tax_inr=rset.getString(8)==null?"0":rset.getString(8);
				 
				 MODIFY_KKC_ADV_FLAG="Y";
				 MODIFY_KKC_ADV_ADJUSTMENT=rset.getString(2)==null?"0":rset.getString(2);
				 MODIFY_KKC_ADV_CURR=rset.getString(3)==null?"0":rset.getString(3);
				 MODIFY_KKC_INV_AMT_INR=rset.getString(8)==null?"0":rset.getString(8);
			 }
				
				if(!modifyexchangerateselected.equalsIgnoreCase(""))
				{
					modifyexchngratevalue=modifyexchangerateselected;
				}
				if(modifyadjflag.equalsIgnoreCase("Y"))
				{
					if(modifyadjcur.equalsIgnoreCase("U"))
					{
						
						if(modifyadjsign.equalsIgnoreCase("1"))
						{
							modifygrossamtadjusted=""+(Double.parseDouble(modifygrossamtusd)-Double.parseDouble(modifyadjamt));
						}
						else if(modifyadjsign.equalsIgnoreCase("2"))
						{
							modifygrossamtadjusted=""+(Double.parseDouble(modifygrossamtusd)+Double.parseDouble(modifyadjamt));
						}
				//			//System.out.println("MODIFY--111--"+modifygrossamtadjusted+"==="+modifyexchngratevalue);
						modifygrossamtinradjusted=""+(Double.parseDouble(modifygrossamtadjusted)*Double.parseDouble(modifyexchngratevalue));
					}
					else if(modifyadjcur.equalsIgnoreCase("I"))
					{
						if(modifyadjsign.equalsIgnoreCase("1"))
						{
							modifygrossamtadjusted=""+(Double.parseDouble(modifygrossamtinr)-Double.parseDouble(modifyadjamt));
						}
						else if(modifyadjsign.equalsIgnoreCase("2"))
						{
							modifygrossamtadjusted=""+(Double.parseDouble(modifygrossamtinr)+Double.parseDouble(modifyadjamt));
						}
						modifygrossamtinradjusted=modifygrossamtadjusted;
					}
				}
				else
				{
					modifygrossamtadjusted="0";
					modifygrossamtinradjusted=modifygrossamtadjusted;
			//		//System.out.println("IN DATABEAN------"+modifycustomer_Invoice_Gross_Amt_INR);
				}
			//	//System.out.println("IN DATABEAN----999--"+modifycustomer_Invoice_Gross_Amt_INR);
				
				
				
				modifygrossamtadjusted=nf3.format(Double.parseDouble(modifygrossamtadjusted));
				modifygrossamtinradjusted=nf3.format(Double.parseDouble(modifygrossamtinradjusted));
				//calculaion of tax
				String modifytax_struct_cd="";
				modifycustomer_Invoice_Gross_Amt_INR=modifygrossamtinradjusted;
				
				if(tax_adj_flag.equalsIgnoreCase("Y"))
				{
					modifycustomer_Invoice_Gross_Amt_INR=""+Math.round(Double.parseDouble(raw_amt_inr));
				}
				else if(!modifyadjflag.equalsIgnoreCase("Y"))
				{
					modifycustomer_Invoice_Gross_Amt_INR=""+Math.round(Double.parseDouble(raw_amt_inr));
				}
				////System.out.println("IN DATABEAN------"+raw_amt_inr);
				////System.out.println("IN DATABEAN---0000---"+modifycustomer_Invoice_Gross_Amt_INR);
				
				
				if(modifycontract_type.equalsIgnoreCase("S") || modifycontract_type.equalsIgnoreCase("L"))
				{
					queryString = "SELECT A.TAX_STRUCT_DTL,A.TAX_STRUCT_CD FROM FMS7_CUSTOMER_TAX_STRUCT_DTL A WHERE " +
								  "A.customer_cd="+modifycustomercd+" AND " +
								  "A.plant_seq_no="+modifyplantseqno+" AND " +
						 		  "A.tax_struct_dt=(SELECT MAX(B.tax_struct_dt) FROM FMS7_CUSTOMER_TAX_STRUCT_DTL B WHERE " +
						 		  "A.customer_cd=B.customer_cd AND A.plant_seq_no=B.plant_seq_no AND " +
						 		  "B.tax_struct_dt<=TO_DATE('"+modifybillperiodenddate+"','DD/MM/YYYY'))";
			//		//System.out.println("TAX-------------"+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						//tax_Structure_Dtl = rset.getString(1)==null?"":rset.getString(1);
						modifytax_struct_cd = rset.getString(2)==null?"0":rset.getString(2);
					}
					else
					{
						//tax_Structure_Dtl = "";
						modifytax_struct_cd = "0";
					}
				}
				else if(modifycontract_type.equalsIgnoreCase("R") || modifycontract_type.equalsIgnoreCase("T") || modifycontract_type.equalsIgnoreCase("C"))
				{
					queryString = "SELECT A.TAX_STRUCT_DTL,A.TAX_STRUCT_CD FROM FMS7_CUSTOMER_SERVICE_TAX_DTL A WHERE " +
								  "A.customer_cd="+modifycustomercd+" AND " +
								  "A.plant_seq_no="+modifyplantseqno+" AND " +
						 		  "A.tax_struct_dt=(SELECT MAX(B.tax_struct_dt) FROM FMS7_CUSTOMER_SERVICE_TAX_DTL B WHERE " +
						 		  "A.customer_cd=B.customer_cd AND A.plant_seq_no=B.plant_seq_no AND " +
						 		  "B.tax_struct_dt<=TO_DATE('"+modifybillperiodenddate+"','DD/MM/YYYY'))";
					
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						//tax_Structure_Dtl = rset.getString(1)==null?"":rset.getString(1);
						modifytax_struct_cd = rset.getString(2)==null?"0":rset.getString(2);
					}
					else
					{
						//tax_Structure_Dtl = "";
						modifytax_struct_cd = "0";
					}
				}
				else
				{
					//tax_Structure_Dtl = "";
					modifytax_struct_cd = "0";
				}
				
			//	//System.out.println("TAx cd---------"+modifytax_struct_cd+"==="+modifybillperiodenddate+"@@@");
				double total_tax_amt = 0;
				double tax_amt = 0;
				String tax_cd = "0";
				String tax_factor = "0.00";
				
				queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
							  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+modifytax_struct_cd+" AND " +
							  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+modifytax_struct_cd+" AND " +
							  "B.app_date<=TO_DATE('"+modifybillperiodenddate+"','DD/MM/YYYY')) ORDER BY A.tax_code";
			//	//System.out.println("Query For Finding Out Correct Tax Structure Details = "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{
					tax_cd = rset.getString(1);
					tax_factor = rset.getString(2);
					
					if(rset.getString(3).equals("1"))
					{
						tax_amt = (Double.parseDouble(""+NumberFormat.getInstance().parse(modifycustomer_Invoice_Gross_Amt_INR))*Double.parseDouble(rset.getString(2)))/100;
					}
					else if(rset.getString(3).equals("2"))
					{
						queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
									  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+modifytax_struct_cd+" AND " +
									  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+modifytax_struct_cd+" AND " +
									  "B.app_date<=TO_DATE('"+modifybillperiodenddate+"','DD/MM/YYYY')) AND A.tax_code="+rset.getString(4)+"";
				//		//System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
						rset1=stmt1.executeQuery(queryString1);
						if(rset1.next())
						{
					 			if(rset1.getString(3).equals("1"))
								{
									tax_amt = (Double.parseDouble(""+NumberFormat.getInstance().parse(modifycustomer_Invoice_Gross_Amt_INR))*Double.parseDouble(rset1.getString(2)))/100;
								}
								
					 			tax_amt = (tax_amt*Double.parseDouble(rset.getString(2)))/100;
						}
						else
						{
							tax_amt = 0;
						}
					}
					else
					{
						tax_amt = 0;
					}
					
					modifycustomer_Invoice_Tax_Code.add(tax_cd);
					modifycustomer_Invoice_Tax_Rate.add(nf.format(Double.parseDouble(tax_factor)));
					modifycustomer_Invoice_Tax_Amt.add(nf3.format(tax_amt));
					total_tax_amt += tax_amt;
				}
				modifycustomer_Invoice_Net_Amt_INR = nf3.format(total_tax_amt+Double.parseDouble(""+NumberFormat.getInstance().parse(""+modifycustomer_Invoice_Gross_Amt_INR)));
				
				for(int i=0; i<modifycustomer_Invoice_Tax_Code.size(); i++)
				{
					queryString = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " +
								  "tax_code="+modifycustomer_Invoice_Tax_Code.elementAt(i)+"";
			//		//System.out.println("Query For Fetching Tax Name = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						String tax_abbr = rset.getString(1).trim()==null?"":rset.getString(1).trim();
						String tax_nm = rset.getString(2).trim()==null?"":rset.getString(2).trim();
						modifycustomer_Invoice_Tax_Abbr.add(tax_abbr);
						modifycustomer_Invoice_Tax_Name.add(tax_nm);
					}
					else
					{
						modifycustomer_Invoice_Tax_Abbr.add("");
						modifycustomer_Invoice_Tax_Name.add("");
					}
				}
				
				if(tax_adj_flag.equalsIgnoreCase("Y"))
				{
					modifygrossamtadjusted=nf3.format(Double.parseDouble(gross_inr_after_adjust));
					modifygrossamtinradjusted=nf3.format(Double.parseDouble(gross_inr_after_adjust));
					modifycustomer_Invoice_Net_Amt_INR = nf3.format(Double.parseDouble(gross_inr_after_adjust)+Double.parseDouble(total_tax_inr));
				}
				
				////System.out.println(gross_inr_after_adjust+" MODIFY IN DATBENA---DEEP---"+total_tax_inr+"--"+modifycustomer_Invoice_Net_Amt_INR);
			
				Vector cust_cut_bal=new Vector();
				double modifytotalavailbal=0.0;
				double modifyadjustamtmst1=Double.parseDouble(modifyadjustamtmst);
			//	//System.out.println("MODIFY IN DATBENA------"+modifyadjustamtmst1);
				String map_id=modifycustomercd+":"+modifyfgsano+":"+modifyfgsarevno+":"+modifysnno+":"+"%";
				
				queryString2="select flag, AMOUNT, CURRENCY,   " +
						"  OPERATION,inv_seq_no  from FMS7_INV_COMPO_DTL" +
						" where mapping_id like '"+map_id+"' and price_cd='1' and inv_seq_no like '"+modifycontract_type+"%' "
								+ "and (flag_temp not like 'T' or flag_temp is null)";
					if(modifycontract_type.equalsIgnoreCase("T"))
					{
						queryString2+=" AND LTCORA_NO='"+mapid[1]+"'";
					}
					else if(modifycontract_type.equalsIgnoreCase("C"))
					{
						queryString2+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
					}
					
//					queryString2="select  adv_adj_flag , adv_adj_amt, adv_adj_cur, adv_adj_sign, hlpl_inv_seq_no, financial_year from DLNG_INVOICE_MST where contract_type='"+modifycontract_type+"' "+ 
//								" and sn_no='"+modifysnno+"' and fgsa_no='"+modifyfgsano+"' and customer_cd='"+modifycustomercd+"'";
//					System.out.println("......................................."+queryString2+"&.........."+modifyadjustamtmst);
					rset2=stmt2.executeQuery(queryString2);
					while(rset2.next())
					{
						String temp_inv_no[]=rset2.getString(5).split(":");
						String invno=temp_inv_no[2];
						String yr=temp_inv_no[1];
						String ADJUST_FLAG_MST=rset2.getString(1)==null?"N":rset2.getString(1);
						if(modifyhlplInvoiceNo.equalsIgnoreCase(invno) && modifyFinancialYear.equalsIgnoreCase(yr))
						{
							
						}
						else
						{
							if(ADJUST_FLAG_MST.equalsIgnoreCase("Y"))
							{
								String adjust_sign_mst=rset2.getString(4)==null?"1":rset2.getString(4);
								if(adjust_sign_mst.equalsIgnoreCase("1"))
								{
									String adjust_amt_mst=rset2.getString(2)==null?"0":rset2.getString(2);
									modifyadjustamtmst1=modifyadjustamtmst1-Double.parseDouble(adjust_amt_mst);
								}
								else if(adjust_sign_mst.equalsIgnoreCase("2"))
								{
									String adjust_amt_mst=rset2.getString(2)==null?"0":rset2.getString(2);
									modifyadjustamtmst1=modifyadjustamtmst1+Double.parseDouble(adjust_amt_mst);
								}
							}
						}
						
						
					}
					modifytotalavailbal=Double.parseDouble(nf.format(modifyadjustamtmst1));
			
					 modifytotalavailbal1=nf3.format(Double.parseDouble(""+modifytotalavailbal));
					 
					 
					 /**************************************************/
					 String mapping_id=modifycustomercd+"-"+modifyfgsano+"-"+modifyfgsarevno+"-"+modifysnno+"-"+0+"-"+"C";
					 String modifyadjustamtmst12="0";
					 queryString = "select price_rate,currency_cd,flag " +
								"FROM fms7_cont_price_dtl WHERE mapping_id='"+mapping_id+"' AND " +
								"price_cd='6' AND FLAG='Y' ";
						//system.out.println("Fetching flag of sn..."+queryString);
					 	if(modifycontract_type.equalsIgnoreCase("T"))
						{
						 queryString+=" AND LTCORA_NO='"+mapid[1]+"'";
						}
						else if(modifycontract_type.equalsIgnoreCase("C"))
						{
							queryString+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
						}	
					 
					 rset1=stmt1.executeQuery(queryString);
						if(rset1.next())
						{
							modifyadjustamtmst12=rset1.getString(1);
							
						}
						
					 double modifytotalavailbal1=0.0;
						double modifyadjustamtmst11=Double.parseDouble(modifyadjustamtmst12);
						 map_id=modifycustomercd+":"+modifyfgsano+":"+modifyfgsarevno+":"+modifysnno+":"+"%";
						
						queryString2="select flag, AMOUNT, CURRENCY,   " +
								"  OPERATION,inv_seq_no  from FMS7_INV_COMPO_DTL" +
								" where mapping_id like '"+map_id+"' and price_cd='6' and inv_seq_no like '"+modifycontract_type+"%' "
										+ "and (flag_temp not like 'T' or flag_temp is null)";
						////System.out.println("Deep query "+queryString2);
							if(modifycontract_type.equalsIgnoreCase("T"))
							{
								queryString2+=" AND LTCORA_NO='"+mapid[1]+"'";
							}
							else if(modifycontract_type.equalsIgnoreCase("C"))
							{
								queryString2+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
							}
							
//							queryString2="select  adv_adj_flag , adv_adj_amt, adv_adj_cur, adv_adj_sign, hlpl_inv_seq_no, financial_year from DLNG_INVOICE_MST where contract_type='"+modifycontract_type+"' "+ 
//										" and sn_no='"+modifysnno+"' and fgsa_no='"+modifyfgsano+"' and customer_cd='"+modifycustomercd+"'";
							////System.out.println("......................................."+queryString2+"&.........."+modifyadjustamtmst);
							rset2=stmt2.executeQuery(queryString2);
							while(rset2.next())
							{
								String temp_inv_no[]=rset2.getString(5).split(":");
								String invno=temp_inv_no[2];
								String yr=temp_inv_no[1];
								String ADJUST_FLAG_MST=rset2.getString(1)==null?"N":rset2.getString(1);
								if(modifyhlplInvoiceNo.equalsIgnoreCase(invno) && modifyFinancialYear.equalsIgnoreCase(yr))
								{
									
								}
								else
								{
									if(ADJUST_FLAG_MST.equalsIgnoreCase("Y"))
									{
										String adjust_sign_mst=rset2.getString(4)==null?"1":rset2.getString(4);
										if(adjust_sign_mst.equalsIgnoreCase("1"))
										{
											String adjust_amt_mst=rset2.getString(2)==null?"0":rset2.getString(2);
											modifyadjustamtmst11=modifyadjustamtmst11-Double.parseDouble(adjust_amt_mst);
										}
										else if(adjust_sign_mst.equalsIgnoreCase("2"))
										{
											String adjust_amt_mst=rset2.getString(2)==null?"0":rset2.getString(2);
											modifyadjustamtmst11=modifyadjustamtmst11+Double.parseDouble(adjust_amt_mst);
										}
									}
								}
								
								
							}
							modifytotalavailbal1=Double.parseDouble(nf.format(modifyadjustamtmst11));
					
							Adjust_total_avail_bal_tax=nf3.format(Double.parseDouble(""+modifytotalavailbal1));
							
			}
			
						String query = "SELECT ADV_INV_NO, NVL(TO_CHAR(ADV_INV_DT,'DD/MM/YYYY'),'') "
								+ "FROM FMS8_ADV_INV_DTL "
								+ "WHERE FINANCIAL_YEAR = '"+modifyFinancialYear+"' AND CONTRACT_TYPE = '"+modifycontract_type+"' "
								+ "AND HLPL_INV_SEQ_NO = '"+modifyhlplInvoiceNo+"' AND ADV_INV_NO != '"+modifyadvinvno+"'";
						//System.out.println("Fetching Data--"+query);
						rset = stmt.executeQuery(query);
						while(rset.next())
						{
							multiple_adv_inv_no.add(rset.getString(1).replaceAll(" ", "@#@#"));
							multiple_adv_inv_dt.add(rset.getString(2)==null?"":rset.getString(2));
						}
//						System.out.println("====avail=="+modifytotalavailbal1);
				 
		}
		catch(Exception e)
		{
			//System.out.println("Exception in Fetching Data..."+e.getMessage());
			e.printStackTrace();
		}
	}
	
//	public void fetchadjustmentflagforsnloaregas()
//	{
//		try
//		{
//	//		//System.out.println("Signing Date Fetch Query For TYPE--- = "+mstcontract_type);
//			
//			if(mstcontract_type.equalsIgnoreCase("S"))
//			{
//				queryString = "SELECT adjust_flag "+
//	  			  "FROM FMS7_SN_MST WHERE " +
//	  			  "fgsa_no="+mstfgsa_no+" AND fgsa_rev_no="+mstfgsa_rev_no+" AND " +
//	  			  "sn_no="+mstsn_no+" AND sn_rev_no="+mstsn_rev_no+" AND " +
//	  			  "customer_cd="+mstcustomer_cd+"";
//		//		//System.out.println("Signing Date Fetch Query For LOA Master = "+queryString);
//				rset = stmt.executeQuery(queryString);
//				if(rset.next())
//				{
//					mstadjust_flag = rset.getString(1)==null?"N":rset.getString(1);
//				}
//			
//			}
//			else if(mstcontract_type.equalsIgnoreCase("L"))
//			{queryString = "SELECT adjust_flag "+
//	  			  "FROM FMS7_LOA_MST WHERE " +
//	  			  "tender_no="+mstfgsa_no+" AND " +
//	  			  "loa_no="+mstsn_no+" AND loa_rev_no="+mstsn_rev_no+" AND " +
//	  			  "customer_cd="+mstcustomer_cd+"";
//		//		//System.out.println("Signing Date Fetch Query For LOA Master = "+queryString);
//				rset = stmt.executeQuery(queryString);
//				if(rset.next())
//				{
//					mstadjust_flag = rset.getString(1)==null?"N":rset.getString(1);
//				}
//		}
//			else if(mstcontract_type.equalsIgnoreCase("R"))
//			{
//				queryString = "SELECT adjust_flag " +
//				  "FROM FMS7_RE_GAS_CARGO_DTL WHERE " +
//				  "re_gas_no="+mstfgsa_no+" AND " +
//				  "customer_cd="+mstcustomer_cd+" AND " +
//				  "cargo_seq_no="+mstsn_no+" " +
//				  "ORDER BY re_gas_rev_no DESC";
//		//		//System.out.println("Signing Date Fetch Query For RE-GAS Master = "+queryString);
//				rset = stmt.executeQuery(queryString);
//				if(rset.next())
//				{
//					mstadjust_flag = rset.getString(1)==null?"N":rset.getString(1);
//				}
//			}
//		}
//		catch(Exception e)
//		{
//			//System.out.println("Exception in Fetching Data..."+e.getMessage());
//			e.printStackTrace();
//		}
//	}
//	
	
	public String getAdjust_total_avail_bal_tax() {
		return Adjust_total_avail_bal_tax;
	}

	public void setAdjust_total_avail_bal_tax(String adjust_total_avail_bal_tax) {
		Adjust_total_avail_bal_tax = adjust_total_avail_bal_tax;
	}

	public String createPdfFileForInvoiceAtt1()
	{
		try
		{
			HttpSession sess = request.getSession();
			invoice_att1_pdf_path = sess.getAttribute("invoice_pdf_path").toString();
			////System.out.println("invoice_date----"+invoice_date);
			String fileName = "INVOICE-Att1-"+invoice_date.trim().substring(0,2)+invoice_date.trim().substring(3,5)+invoice_date.trim().substring(6)+"-"+customer_abbr+"-"+customer_plant_nm+".pdf";
			invoice_att1_pdf_path = invoice_att1_pdf_path+"//"+fileName;
			invoice_att1_file_name = fileName;
		//	//System.out.println("INVOICE ATTT1-----------"+invoice_att1_file_name);
		}
		catch(Exception e)
		{
			//System.out.println("Exception in createPdfFileForInvoiceAtt1() Method :\n"+e.getMessage());
			e.printStackTrace();
		}
		return invoice_att1_pdf_path;
	}
	
	public String createPdfFileForInvoiceAtt2()
	{
		try
		{
			HttpSession sess = request.getSession();
			invoice_att2_pdf_path = sess.getAttribute("invoice_pdf_path").toString();
			String fileName = "INVOICE-Att2-"+invoice_date.trim().substring(0,2)+invoice_date.trim().substring(3,5)+invoice_date.trim().substring(6)+"-"+customer_abbr+"-"+customer_plant_nm+".pdf";
			invoice_att2_pdf_path = invoice_att2_pdf_path+"//"+fileName;
			invoice_att2_file_name = fileName; 
		//	//System.out.println("INVOICE ATTT2-----------"+invoice_att2_file_name);
		}
		catch(Exception e)
		{
			//System.out.println("Exception in createPdfFileForInvoiceAtt2() Method :\n"+e.getMessage());
			e.printStackTrace();
		}
		return invoice_att2_pdf_path;
	}
	
	public String createPdfFileForInvoiceAtt3()
	{
		try
		{
			HttpSession sess = request.getSession();
			invoice_att3_pdf_path = sess.getAttribute("invoice_pdf_path").toString();
			String fileName = "INVOICE-Att3-"+invoice_date.trim().substring(0,2)+invoice_date.trim().substring(3,5)+invoice_date.trim().substring(6)+"-"+customer_abbr+"-"+customer_plant_nm+".pdf";
			invoice_att3_pdf_path = invoice_att3_pdf_path+"//"+fileName;
			invoice_att3_file_name = fileName; 
		//	//System.out.println("INVOICE ATTT2-----------"+invoice_att2_file_name);
		}
		catch(Exception e)
		{
			//System.out.println("Exception in createPdfFileForInvoiceAtt2() Method :\n"+e.getMessage());
			e.printStackTrace();
		}
		return invoice_att3_pdf_path;
	}
	boolean tax_gst = false;
	//--yy
	public void printAllPdfFileForInvoice()	throws Exception	//BK20160211
	{
		System.out.println("in regural funciton");
		Rectangle pageSize = new Rectangle(595, 842);
		Rectangle pageSize1 = new Rectangle(842,595);
		if(flag_DCB==true)
		{
			pageSize.setBackgroundColor(new java.awt.Color(0xe3f8c0));
			pageSize1.setBackgroundColor(new java.awt.Color(0xe3f8c0));
		}
		else
		{
			pageSize.setBackgroundColor(new java.awt.Color(0xffffff));
			pageSize1.setBackgroundColor(new java.awt.Color(0xffffff));
		}
		 Document document = new Document(pageSize);
        
		try
		{
			// Step 2:s
			// We create a writer that listens to the document, and directs a PDF-stream to a file ...
			PdfWriter writer = PdfWriter.getInstance(document,new FileOutputStream(createPdfFileForInvoice()));

			//	writer.setEncryption(PdfWriter.STRENGTH128BITS, "", "Invoice Details", PdfWriter.AllowCopy | PdfWriter.AllowPrinting);

			document.addTitle("Invoice Details");
			document.addSubject("Invoice Details For Customer");
            document.addKeywords("iText, Invoice Details, Step 2, metadata");
            document.addCreator("Invoice Details Generation using iText");
            //SB20160404 document.addAuthor("Samik Shah");
            document.addAuthor("FMS8@BIPL");
          //Step 3: We open the document for PDF writing ...			
            document.open();
			
			//Step 4: We create Page Size, Font Size , and Font Type ... Then add some paragraphs to the document ...
			document.setPageSize(pageSize);
            document.newPage();
                      
            //iText-5.0.4 ...
            /*Font very_small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 6.00f, Font.NORMAL, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 7.00f, Font.NORMAL, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font small_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 7.00f, Font.BOLD, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font black_bold = FontFactory.getFont(FontFactory.HELVETICA, 8.00f, Font.BOLD, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font big_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 12.00f, Font.BOLD, new BaseColor(new Color(0x00, 0x00, 0x00)));*/
            //itext-1.4 ...
            Font very_small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 7, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            Font small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 8, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            Font small_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD, new Color(0x00, 0x00, 0x00));
            Font black_bold = FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, new Color(0x00, 0x00, 0x00));
            Font big_black_bold_2 = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, new Color(0x00, 0x00, 0x00));
            Font big_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 14, Font.BOLD, new Color(0x00, 0x00, 0x00));
            
            String context_nm = request.getContextPath();
			String server_nm = request.getServerName();
			String server_port = ""+request.getServerPort();
			  
			url_start = "http://"+server_nm+":"+server_port+context_nm;
			
            Image hlpl_logo = Image.getInstance(url_start+"//images//LOGO//company_Logo.png");
			  
            sr_no=0;//ADDED NEW
            
			String inv_nm = "";
			if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
			{	
				if(customer_Invoice_Tax_Flag.equalsIgnoreCase("V"))
				{	
					inv_nm = "TAX INVOICE";
				}
				else
				{
					inv_nm = "RETAIL INVOICE";
				}
			}	
			else if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
			{
				if(date_flag) {
					inv_nm = "TAX INVOICE";
				} else {
					inv_nm = "INVOICE";
				}
			}
			
			String inv_desc = "";
			
			if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
			{	
				inv_desc = "Hazira LNG Private Limited";
			}	
			else if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN)
			{
				inv_desc = "Hazira LNG Private Limited";
				if(date_flag) {
					if(invoice_title.equals("CREDIT")) { 
						inv_nm += "\nCredit Note issued under Rule 53 of the Central Goods and Services Tax Rules, 2017";
					 } else if(invoice_title.equals("SUPPLEMENTARY INVOICE") || invoice_title.equals("DEBIT")) { 
						inv_nm += "\nDebit Note issued under Rule 53 of the Central Goods and Services Tax Rules, 2017";
					 } else { 
						 inv_nm += "\n"+Rule_remark;
					 } 
				} else {
					inv_nm += "\nInvoice issued under Rule-4A of the Service tax Rules, 1994";
				}			
			}
			
			String sn = "";
			
			if(sn_ref_no.trim().equals(""))
			{
				sn = sn_no;
			}
			else
			{
				sn = sn_ref_no;
			}
			
			String inv_note = "";
			
			if(contract_type.equalsIgnoreCase("S"))
			{	
				inv_note = "In respect of Supply Notice (SN-"+sn+") executed on "+customer_Invoice_SN_Dt+" pursuant to Framework Gas Sales Agreement executed on "+customer_Invoice_FGSA_Dt+"\nbetween "+contact_Suppl_Name+" and "+contact_Customer_Name;
			}
			else if(contract_type.equalsIgnoreCase("L"))
			{
				inv_note = "In respect of Letter of Agreement (LOA-"+sn+") executed on "+customer_Invoice_SN_Dt+" pursuant to Tender executed on "+customer_Invoice_FGSA_Dt+"\nbetween "+contact_Suppl_Name+" and "+contact_Customer_Name;
			}
			else if(contract_type.equalsIgnoreCase("R"))
			{
				inv_note = "In respect of Regassification Agreement executed on "+customer_Invoice_FGSA_Dt+" and subsequent side letters\nbetween "+contact_Customer_Name+" and "+contact_Suppl_Name;
			} 
			else if(contract_type.equalsIgnoreCase("T"))//ADDED FOR LTCORA AND CN
			{
				inv_note = "In respect of LTCORA executed on "+customer_Invoice_FGSA_Dt+" \nbetween "+contact_Customer_Name+" and "+contact_Suppl_Name;
			}  
			else if(contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
			{
				inv_note = "In respect of LTCORA  executed on "+customer_Invoice_FGSA_Dt+" ";
				
				if(Double.parseDouble(FgsaNo)<9999) 
				{
					inv_note = inv_note+"& CN-"+FgsaNo+" executed on "+customer_Invoice_SN_Dt+"";
				}
						
				inv_note = inv_note + "\nbetween "+contact_Customer_Name+" and "+contact_Suppl_Name;
			}  
			
            
			String addr_supl = "Registered Office:";
            
            if(!contact_Suppl_Name.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Name;     	
            }
            if(!contact_Suppl_Person_Address.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Person_Address;     	
            }
            if(!contact_Suppl_Person_City.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Person_City;     	
            }
            if(!contact_Suppl_Person_Pin.trim().equals(""))
            {
            	addr_supl += " "+"-"+" "+contact_Suppl_Person_Pin;     	
            }
			
			String addr_customer = "";
            
			if(contact_Person_Name_And_Designation.trim().equalsIgnoreCase(contact_Customer_Name.trim()))
			{
				if(!contact_Customer_Name.trim().equals(""))
	            {
	            	addr_customer += contact_Customer_Name;    	
	            }
			}
			else
			{
	            if(!contact_Person_Name_And_Designation.trim().equals(""))
	            {
	            	addr_customer += contact_Person_Name_And_Designation;     	
	            }
	            if(!contact_Customer_Name.trim().equals(""))
	            {
	            	addr_customer += "\n"+contact_Customer_Name;     	
	            }
			}
            if(!contact_Customer_Person_Address.trim().equals(""))
            {
            	addr_customer += "\n"+contact_Customer_Person_Address;     	
            }
            if(!contact_Customer_Person_City.trim().equals(""))
            {
            	addr_customer += "\n"+contact_Customer_Person_City;     	
            }
            if(!contact_Customer_Person_Pin.trim().equals(""))
            {
            	addr_customer += " "+"-"+" "+contact_Customer_Person_Pin;     	
            }
                        
            ////System.out.println("invoice_title--------------1111--------->"+invoice_title);
            String inv_tit=invoice_title;
            if(contract_type.equals("C")) {
            	if(tax_gst) {
            		if(invoice_title.equalsIgnoreCase("ORIGINAL")) {
                    	inv_tit += " FOR RECIPIENT"; 
                    } else if(invoice_title.equalsIgnoreCase("DUPLICATE")) {
                    	inv_tit += " FOR SUPPLIER";
                    } 
            	}
            }
            
            ////System.out.println("invoice_title--------------1111-2222-------->"+inv_tit);
            PdfPTable InvoiceTitleTable = new PdfPTable(1);
            InvoiceTitleTable.setWidthPercentage(100);
            InvoiceTitleTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceTitleTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            //SB20160601 InvoiceTitleTable.addCell(new Phrase(new Chunk(inv_tit,black_bold)));
            if(invoice_title.equalsIgnoreCase("CREDIT")) //SB20160601
            	InvoiceTitleTable.addCell(new Phrase(new Chunk("",black_bold)));
            else
            	InvoiceTitleTable.addCell(new Phrase(new Chunk(inv_tit,black_bold)));
            
            
            PdfPTable InvoiceDescTable = new PdfPTable(1);
            InvoiceDescTable.setWidthPercentage(100);
            InvoiceDescTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDescTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            InvoiceDescTable.addCell(new Phrase(new Chunk(inv_desc,big_black_bold)));
            
            PdfPTable InvoiceDescTable2 = new PdfPTable(1);
            InvoiceDescTable2.setWidthPercentage(100);
            InvoiceDescTable2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDescTable2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            //SB20160601 InvoiceDescTable2.addCell(new Phrase(new Chunk(inv_nm,big_black_bold_2)));
            if(invoice_title.equalsIgnoreCase("CREDIT")) //SB20160601
            	InvoiceDescTable2.addCell(new Phrase(new Chunk("CREDIT NOTE",big_black_bold_2)));
            else
            	InvoiceDescTable2.addCell(new Phrase(new Chunk(inv_nm,big_black_bold_2)));
            
            PdfPTable InvoiceNoteTable = new PdfPTable(1);
            InvoiceNoteTable.setWidthPercentage(100);
            InvoiceNoteTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNoteTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            InvoiceNoteTable.addCell(new Phrase(new Chunk(inv_note,small_black_normal)));
            
            
            float[] ContactAddrWidths = {0.50f, 0.10f, 0.40f};
            PdfPTable contact_addr_table = new PdfPTable(ContactAddrWidths);
            contact_addr_table.setWidthPercentage(100);
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(addr_supl,small_black_normal)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk("To:",small_black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(addr_customer,small_black_normal)));
			
            String supl_gst_cst_info = "";
            String customer_gst_cst_info = "";
            
   //         //System.out.println("-----INSIDE PRINTALL 2---");
            
            if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
    		{
            	if(!contact_Suppl_GST_NO.trim().equals(""))
            	{
            		supl_gst_cst_info = " GST TIN No. : "+contact_Suppl_GST_NO+" DT. "+contact_Suppl_GST_DT;
            	}
            	else
            	{
            		supl_gst_cst_info = "";
            	}
            	
            	if(!contact_Suppl_CST_NO.trim().equals(""))
            	{
            		supl_gst_cst_info += " \nCST TIN No. : "+contact_Suppl_CST_NO+" DT. "+contact_Suppl_CST_DT;
            	}
            	else
            	{
            		supl_gst_cst_info += "\n";
            	}
            	
            	//BK20160211
            	if(!contact_Suppl_PAN_NO.trim().equals(""))
            	{
            		supl_gst_cst_info += " \nPAN : "+contact_Suppl_PAN_NO+" ";
            	}
            	else
            	{
            		supl_gst_cst_info += "\n";
            	}
            	//supl_gst_cst_info = "GST TIN No. : "+contact_Suppl_GST_NO+" DT. "+contact_Suppl_GST_DT+"\nCST TIN No. : "+contact_Suppl_CST_NO+" DT. "+contact_Suppl_CST_DT;
            	//customer_gst_cst_info = "GST TIN No. : "+contact_Customer_GST_NO+" DT. "+contact_Customer_GST_DT+"\nCST TIN No. : "+contact_Customer_CST_NO+" DT. "+contact_Customer_CST_DT;
    		}
            else if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
            {
            	if(date_flag) {
	            	supl_gst_cst_info = "State : "+contact_Suppl_State+"\n";
	            	supl_gst_cst_info += "State Code : "+contact_Suppl_State_Code+"\n";
	            	
	            	
	            	 if(!contact_Suppl_GSTIN_NO.trim().equals("")) { 
	            		 supl_gst_cst_info += "GSTIN : "+contact_Suppl_GSTIN_NO+"\n";
	            	  }  
	            	 if(!contact_Suppl_PAN_NO.trim().equals("")) { 
	            		 supl_gst_cst_info += "PAN : "+contact_Suppl_PAN_NO+"\n";
	            	 } 
	            	 supl_gst_cst_info += ""+sac_name +" : "+sac_code+"\n";
	            	 supl_gst_cst_info += "Description of Service : "+service_desc+"\n";
	            	 supl_gst_cst_info += "Place Of Supply : "+contact_customer_State+"\n";
	            	 
	            	 
            	} else {
            		supl_gst_cst_info = "Service Tax Registration No. : "+contact_Suppl_Service_Tax_NO+"\n(Business Auxiliary Service)";
                	//customer_gst_cst_info = " "+"\n"+" ";
                	
                	//BK20160211
                	if(!contact_Suppl_PAN_NO.trim().equals(""))
                	{
                		supl_gst_cst_info += "\nPAN : "+contact_Suppl_PAN_NO+" ";
                	}
                	else
                	{
                		supl_gst_cst_info += "\n";
                	}
            	}
            }
            
            
            if(vSTAT_CD.size()>0)
    		{	
    			if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
    			{
    				for(int i=0; i<vSTAT_CD.size(); i++)
					{
    					if(i==0)
    					{
    						if(vSTAT_NM.elementAt(i).toString().equalsIgnoreCase("PAN No.")) 
    						{
    							customer_gst_cst_info = "PAN : "+vSTAT_NO.elementAt(i)+" ";
    						}
    						else
    						{
    							customer_gst_cst_info = ""+vSTAT_NM.elementAt(i)+" : "+vSTAT_NO.elementAt(i)+" DT. "+vSTAT_EFF_DT.elementAt(i);
    						}
    					}
    					else if(i>0)
    					{
    						if(vSTAT_NM.elementAt(i).toString().equalsIgnoreCase("PAN No.")) 
    						{
    							customer_gst_cst_info += "\nPAN : "+vSTAT_NO.elementAt(i)+" ";
    						}
    						else
    						{
    							customer_gst_cst_info += "\n"+vSTAT_NM.elementAt(i)+" : "+vSTAT_NO.elementAt(i)+" DT. "+vSTAT_EFF_DT.elementAt(i);
    						}
    					}
					}
    			}
    			else
    			{
    				if(date_flag) {
	    				customer_gst_cst_info = "State : "+contact_customer_State+"\n";
	    				customer_gst_cst_info += "State Code : "+contact_customer_State_Code+"\n";
						//BK20160211
	    				for(int i=0; i<vSTAT_CD.size(); i++)
						{
	    					if(vSTAT_NM.elementAt(i).toString().contains("GSTIN")) { 
	    						customer_gst_cst_info += vSTAT_NM.elementAt(i).toString()+" : "+vSTAT_NO.elementAt(i)+"\n";
	    					} else if(vSTAT_NM.elementAt(i).toString().equalsIgnoreCase("PAN No.")) 
	    						{
	    							customer_gst_cst_info += "PAN : "+vSTAT_NO.elementAt(i)+"\n";	
	    						}
						}
    				} else {
    					for(int i=0; i<vSTAT_CD.size(); i++)
    					{
        					if(i==0)
        					{
        						if(vSTAT_NM.elementAt(i).toString().equalsIgnoreCase("PAN No.")) 
        						{
        							customer_gst_cst_info = "PAN : "+vSTAT_NO.elementAt(i)+" ";
        						}
        						else
        						{
        							customer_gst_cst_info = ""+vSTAT_NM.elementAt(i)+" : "+vSTAT_NO.elementAt(i)+" DT. "+vSTAT_EFF_DT.elementAt(i);
        						}
        					}
        					else if(i>0)
        					{
        						if(vSTAT_NM.elementAt(i).toString().equalsIgnoreCase("PAN No.")) 
        						{
        							customer_gst_cst_info += "\nPAN : "+vSTAT_NO.elementAt(i)+" ";	
        						}
        						else
        						{
        							customer_gst_cst_info += "\n"+vSTAT_NM.elementAt(i)+" : "+vSTAT_NO.elementAt(i)+" DT. "+vSTAT_EFF_DT.elementAt(i);
        						}
        					}
    					}
    				}
    			}
    		}
            else
            {
            	if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
        		{
            		if(!contact_Customer_GST_NO.trim().equals(""))
                	{
                		customer_gst_cst_info = "GST TIN No. : "+contact_Customer_GST_NO+" DT. "+contact_Customer_GST_DT;
                	}
                	else
                	{
                		customer_gst_cst_info = "";
                	}
                	
                	if(!contact_Customer_CST_NO.trim().equals(""))
                	{
                		customer_gst_cst_info += "\nCST TIN No. : "+contact_Customer_CST_NO+" DT. "+contact_Customer_CST_DT;
                	}
                	else
                	{
                		customer_gst_cst_info += "\n";
                	}
                	
                	if(!contact_Customer_GVAT_NO.trim().equals(""))
                	{
                		customer_gst_cst_info += "\nGVAT TIN No. : "+contact_Customer_GVAT_NO+" DT. "+contact_Customer_GVAT_DT;
                	}
                	else
                	{
                		customer_gst_cst_info += "\n";
                	}
        		}
            }
            
            
            float[] GstCstInfoWidths = {0.50f, 0.10f, 0.40f};
            PdfPTable GstCstInfoTable = new PdfPTable(GstCstInfoWidths);
            GstCstInfoTable.setWidthPercentage(100);
            GstCstInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            GstCstInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            GstCstInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            GstCstInfoTable.addCell(new Phrase(new Chunk("\n"+supl_gst_cst_info,small_black_normal)));
            GstCstInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            GstCstInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            GstCstInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            GstCstInfoTable.addCell(new Phrase(new Chunk("\n ",small_black_normal)));
            GstCstInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            GstCstInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            GstCstInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            GstCstInfoTable.addCell(new Phrase(new Chunk("\n"+customer_gst_cst_info,small_black_normal)));
			
            //////////////SB20160530////////////
            String invno = "";
            if(!new_inv_seq_no.equals("")) {
            	invno = new_inv_seq_no; 
            } else {
            	if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
            	{
            		if(hlpl_inv_no.length()>13)
            		{
            			invno = hlpl_inv_no.substring(0,10)+""+hlpl_inv_no.substring(12);
            		}      		
            	}
            	else
            	{
            		if(hlpl_inv_no.length()>13)
            		{
            			invno = hlpl_inv_no.substring(0,5)+""+hlpl_inv_no.substring(7,10)+""+hlpl_inv_no.substring(12);
            		}       		
            	}
            }
            
            
			String inv_no_info = "";
			String invoiceType = "";
			String inv_dt_Header = "Invoice Date:";
			String inv_due_dt_Header = "Payment Due Date:";
			String Inv_Ref_Dtl = ""; //HS20160614  
			customer_Invoice_DT =customer_Invoice_DT;//HS20160825
			if(invoice_title.equalsIgnoreCase("CREDIT")) //SB20160530
			{
				Inv_Ref_Dtl = " as per the invoice "+invno+" dated "+customer_Invoice_DT;
				invoiceType = "Credit Seq No:";
				inv_dt_Header = "";
				//customer_Invoice_DT =invno+":"+customer_Invoice_DT;
				customer_Invoice_DT =""; //HS20160825
				invno = hlpl_drcr_docNo;
				customer_Invoice_Due_DT =hlpl_drcr_dt;//HS20160825
				inv_due_dt_Header = "Credit Note Date:";
				//customer_Invoice_Due_DT ="";
			}
			else
				invoiceType = "Invoice Seq No:";
			if(invoice_title.equalsIgnoreCase("CREDIT")) //SB20160530
			{
				inv_no_info = "HLPL Credit Note No:";
			}else{
				if(contract_type.equalsIgnoreCase("R"))
				{
				//SB	inv_no_info = "HLPL R-gas Invoice Seq No:";
					inv_no_info = "HLPL R-gas "+invoiceType;
				}
				else if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
				{
					if(date_flag) {
						inv_no_info = "HLPL Tax "+invoiceType;
					} else {
						inv_no_info = "HLPL LTCORA "+invoiceType;
					}
				}
				else
				{
				//SB	inv_no_info = "HLPL Invoice Seq No:";
					inv_no_info = "HLPL "+invoiceType;
				}
			}
			
            
			float[] InvoiceDateInfoWidths = {0.60f, 0.25f, 0.15f};
            PdfPTable InvoiceDateInfoTable = new PdfPTable(InvoiceDateInfoWidths);
            InvoiceDateInfoTable.setWidthPercentage(100);
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            if(invoice_title.equalsIgnoreCase("CREDIT") ) //SB20160611
            {
	            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            
            }
            else
            {
	            InvoiceDateInfoTable.addCell(new Phrase(new Chunk("Invoice Date:",small_black_bold)));
	            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            }
//          SB20160530   InvoiceDateInfoTable.addCell(new Phrase(new Chunk(inv_dt_Header,small_black_bold))); //SB20160530
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_DT,small_black_bold)));
            
            float[] InvoiceDueDateInfoWidths = {0.60f, 0.25f, 0.15f};
            PdfPTable InvoiceDueDateInfoTable = new PdfPTable(InvoiceDueDateInfoWidths);
            InvoiceDueDateInfoTable.setWidthPercentage(100);
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
        //SB20160601    InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk("Payment Due Date:",small_black_bold)));
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(inv_due_dt_Header,small_black_bold)));
            
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Due_DT,small_black_bold)));
            
          //--------------------------HS20160825 All matches ends--------------------------------------------------------------
            
            float[] InvoiceNOInfoWidths = {0.60f, 0.25f, 0.15f};
            PdfPTable InvoiceNOInfoTable = new PdfPTable(InvoiceNOInfoWidths);
            InvoiceNOInfoTable.setWidthPercentage(100);
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(inv_no_info,small_black_bold)));
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(invno,small_black_bold)));
                        
            
            float[] BillingPeriodInfoWidths = {0.55f, 0.05f, 0.15f, 0.10f, 0.15f};
            PdfPTable BillingPeriodInfoTable = new PdfPTable(BillingPeriodInfoWidths);
            BillingPeriodInfoTable.setWidthPercentage(100);
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk("For the Billing Period",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Start_DT,small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk("to",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_End_DT,small_black_bold)));
            
            
            float[] BillingFieldsInfoWidths = {0.06f, 0.34f, 0.10f, 0.10f, 0.15f, 0.10f, 0.15f};
            PdfPTable BillingFieldsInfoTable = new PdfPTable(BillingFieldsInfoWidths);
            BillingFieldsInfoTable.setWidthPercentage(100);
            BillingFieldsInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsInfoTable.addCell(new Phrase(new Chunk("Sr. No.",small_black_bold)));
            BillingFieldsInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsInfoTable.addCell(new Phrase(new Chunk("Item",small_black_bold)));
            BillingFieldsInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsInfoTable.addCell(new Phrase(new Chunk("Attachment\nRef.",small_black_bold)));
            BillingFieldsInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsInfoTable.addCell(new Phrase(new Chunk("Currency",small_black_bold)));
            BillingFieldsInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsInfoTable.addCell(new Phrase(new Chunk("Quantity\n(MMBTUS)",small_black_bold)));
            BillingFieldsInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsInfoTable.addCell(new Phrase(new Chunk("Rate",small_black_bold)));
            BillingFieldsInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsInfoTable.addCell(new Phrase(new Chunk("Amount",small_black_bold)));
            
            
            String field_1 = "";
            String field_2 = "";
            String field_3 = "";
            String field_4 = "";
            String field_5 = "";
            String field_6 = "";
            String field_7 = "";
            
            if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_1 = ++sr_no+" \n\n"+(++sr_no)+" \n\n"+(++sr_no)+" \n\n"+(++sr_no)+" ";
            	}
            	else
            	{
            		field_1 = (++sr_no)+" \n\n"+(++sr_no)+" \n\n"+(++sr_no)+" ";
            	}
            	if(Discount_flag)
            	{
            		field_1 = field_1+" \n\n"+(++sr_no)+" ";
            	}
            	
            }
            else
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_1 = (++sr_no)+" \n\n"+(++sr_no)+" \n\n"+(++sr_no)+" ";
            	}
            	else
            	{
            		field_1 = (++sr_no)+" \n\n"+(++sr_no)+" ";
            	}
            	if(Discount_flag)
            	{
            		field_1 = field_1+" \n\n"+(++sr_no)+" ";
            	}
            }
            
            ////System.out.println("gas_Delivered_Amt_USD.....PDF ORIG...  "+gas_Delivered_Amt_USD);
            String discount_field_2="";
            String discount_filed_3="";
            String discount_filed_4="";
            String discount_filed_5="";
            String discount_filed_6="";
            String discount_filed_6_2="";
            String discount_filed_7="";
            String discount_filed_7_2="";
            if(Discount_flag)
        	{
            	if(contract_type.equalsIgnoreCase("R"))
                {
            		discount_field_2 = "Volume Discount on Reasification Tariff ("+pdfCurrency+"/mmbtu)\n";
            		discount_filed_3="\n\n";
            		discount_filed_4="\n\n"+pdfCurrency+"";
            		discount_filed_5="\n\n";
            		discount_filed_6=pdftotal_tariff_discount;
            		discount_filed_6_2=""+pdfinv_discount_price+"\n\n\n";
            		if(offspec_Flag.trim().equalsIgnoreCase("Y"))
                	{
            			//discount_filed_7_2="\n\n "+pdfFinal_first_gross_amt;
            			discount_filed_7_2="\n\n ";
                	}
            		else
            		{
            			discount_filed_7_2="\n\n ";
            		}
                }
            	else if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
            	{
            		discount_field_2 = "Volume Discount on LTCORA Tariff ("+pdfCurrency+"/mmbtu)\n";
            		discount_filed_3="\n\n";
            		discount_filed_4="\n\n"+pdfCurrency+"";
            		discount_filed_5="\n\n";
            		discount_filed_6=pdftotal_tariff_discount;
            		discount_filed_6_2=""+pdfinv_discount_price+"\n\n\n";
            		if(offspec_Flag.trim().equalsIgnoreCase("Y"))
                	{
            			//discount_filed_7_2="\n\n "+pdfFinal_first_gross_amt;
            			discount_filed_7_2="\n\n ";
                	}
            		else
            		{
            			discount_filed_7_2="\n\n ";
            		}
            	}
            	else
            	{
            		discount_field_2 = "Discount on Rate ("+pdfCurrency+"/mmbtu)\n\n";
            		discount_filed_3="\n\n ";
            		discount_filed_4="\n\n"+pdfCurrency+"";
            		discount_filed_5="\n\n";
            		discount_filed_6=pdftotal_tariff_discount;
            		discount_filed_6_2=""+pdfinv_discount_price+"\n\n\n";
            		if(offspec_Flag.trim().equalsIgnoreCase("Y"))
                	{
            			//discount_filed_7_2="\n\n "+pdfFinal_first_gross_amt;
            			discount_filed_7_2="\n\n ";
                	}
            		else
            		{
            			discount_filed_7_2="\n\n ";
            		}
            	}
            	
        	}
            else
            {
            	discount_filed_6=pdfinv_display_rate;
            	discount_filed_7=""; //nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(gas_Delivered_Amt_USD)));
            }
            
            
            ////System.out.println("discount_filed_7_2.....PDF ORIG...  "+discount_filed_7_2);
            ////System.out.println("discount_filed_6.....PDF ORIG...  "+discount_filed_6);
            ////System.out.println("discount_filed_7.....PDF ORIG...  "+discount_filed_7);
            
            if(contract_type.equalsIgnoreCase("R"))
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		
            		field_2 = " Natural Gas (Regasified)"+Inv_Ref_Dtl+"\n\n Regasification Tariff ("+pdfCurrency+"/mmbtu)\n\n Offspec QTY\n\n "+discount_field_2+"Gross Amount ("+pdfCurrency+")";
            	}
            	else
            	{
            		field_2 = " Natural Gas (Regasified)"+Inv_Ref_Dtl+"\n\n Regasification Tariff ("+pdfCurrency+"/mmbtu)\n\n "+discount_field_2+"Gross Amount ("+pdfCurrency+")";
            	}
            }
            else if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_2 = " Natural Gas (Regasified)"+Inv_Ref_Dtl+"\n\n LTCORA Tariff ("+pdfCurrency+"/mmbtu)\n\n Offspec QTY\n\n "+discount_field_2+"Gross Amount ("+pdfCurrency+")";
            	}
            	else
            	{
            		field_2 = " Natural Gas (Regasified)"+Inv_Ref_Dtl+"\n\n LTCORA Tariff ("+pdfCurrency+"/mmbtu)\n\n "+discount_field_2+"Gross Amount ("+pdfCurrency+")";
            	}
            }
            else
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_2 = " Natural Gas (Delivered) ("+pdfCurrency+")"+Inv_Ref_Dtl+"\n\n Offspec QTY\n\n "+discount_field_2+"Gross Amount ("+pdfCurrency+")";
            	}
            	else
            	{
            		field_2 = " Natural Gas (Delivered) ("+pdfCurrency+")"+Inv_Ref_Dtl+"\n\n "+discount_field_2+"Gross Amount ("+pdfCurrency+")";
            	}
            }
            if(!invoice_title.equalsIgnoreCase("CREDIT") ) //HS20160613
			{
	            if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDDED FOR LTCORA AND CN
	            {
	            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
	            	{
	            		field_3 = "Att 1\n\n \n\n \n\n \n"+discount_filed_3;
	            	}
	            	else
	            	{
	            		field_3 = "Att 1\n\n \n\n \n"+discount_filed_3;
	            	}
	            }
	            else
	            {
	            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
	            	{
	            		field_3 = "Att 1\n\n \n\n \n"+discount_filed_3;
	            	}
	            	else
	            	{
	            		field_3 = "Att1\n\n \n"+discount_filed_3;
	            	}
	            }
			}
            if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDDED FOR LTCORA AND CN
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_4 = " \n\n"+pdfCurrency+"\n\n"+pdfCurrency+"\n\n"+pdfCurrency+""+discount_filed_4;
            	}
            	else
            	{
            		field_4 = " \n\n"+pdfCurrency+"\n\n"+pdfCurrency+""+discount_filed_4;
            	}
            }
            else
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_4 = ""+pdfCurrency+"\n\n"+pdfCurrency+"\n\n"+pdfCurrency+""+discount_filed_4;
            	}
            	else
            	{
            		field_4 = ""+pdfCurrency+"\n\n"+pdfCurrency+""+discount_filed_4;
            	}
            }
            
            if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDDED FOR LTCORA AND CN)
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		//field_5 = total_Gas_Delivered+" \n\n"+total_Gas_Delivered+" \n\n"+total_Offspec_Qty+" \n\n"+discount_filed_5+""+total_Invoice_Qty+" ";
            		field_5 = total_Gas_Delivered+" \n\n \n\n"+total_Offspec_Qty+" \n\n"+discount_filed_5+""+total_Invoice_Qty+" ";
            	}
            	else
            	{
            		//field_5 = total_Gas_Delivered+" \n\n"+total_Gas_Delivered+" \n\n"+discount_filed_5+""+total_Invoice_Qty+" ";
            		field_5 = total_Gas_Delivered+" \n\n \n\n"+discount_filed_5+""+total_Invoice_Qty+" ";
            	}
            }
            else
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_5 = total_Gas_Delivered+" \n\n"+total_Offspec_Qty+" \n\n"+discount_filed_5+""+total_Invoice_Qty+" ";
            	}
            	else
            	{
            		field_5 = total_Gas_Delivered+" \n\n"+discount_filed_5+""+total_Invoice_Qty+" ";
            	}
            }
            
            if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDDED FOR LTCORA AND CN)
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_6 = " \n\n"+discount_filed_6+" \n\n"+offspec_Sales_Rate+" \n\n  "+discount_filed_6_2;
            	}
            	else
            	{
            		field_6 = " \n\n"+discount_filed_6+" \n\n "+discount_filed_6_2;
            	}
            }
            else
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_6 = discount_filed_6+" \n\n"+offspec_Sales_Rate+" \n\n "+discount_filed_6_2;
            	}
            	else
            	{
            		field_6 = discount_filed_6+" \n\n "+discount_filed_6_2;
            	}
            }
            
            if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDDED FOR LTCORA AND CN)
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_7 = " \n\n"+discount_filed_7+" \n\n"+offspec_Amt_USD+" "+discount_filed_7_2+" \n\n"+nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(pdfFinal_first_gross_amt)))+" ";
            	}
            	else
            	{
            		field_7 = " \n\n"+discount_filed_7+" "+discount_filed_7_2+" \n\n"+nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(pdfFinal_first_gross_amt)))+" ";
            	}
            }
            else
            {
            	if(offspec_Flag.trim().equalsIgnoreCase("Y"))
            	{
            		field_7 = discount_filed_7+" \n\n"+offspec_Amt_USD+" "+discount_filed_7_2+" \n\n"+nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(pdfFinal_first_gross_amt)))+" ";
            	}
            	else
            	{
            		field_7 = discount_filed_7+" "+discount_filed_7_2+" \n\n"+nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(pdfFinal_first_gross_amt)))+" ";
            	}
            }
            
            ////System.out.println("pdfFinal_first_gross_amt.......... "+pdfFinal_first_gross_amt);
            ////System.out.println("field_7.......... "+field_7);
            
            float[] BillingFieldsDetailsWidths = {0.06f, 0.34f, 0.10f, 0.10f, 0.15f, 0.10f, 0.15f};
            PdfPTable BillingFieldsDetailsTable = new PdfPTable(BillingFieldsDetailsWidths);
            BillingFieldsDetailsTable.setWidthPercentage(100);
            BillingFieldsDetailsTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
            BillingFieldsDetailsTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            BillingFieldsDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
            BillingFieldsDetailsTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
          	BillingFieldsDetailsTable.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
            BillingFieldsDetailsTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
            BillingFieldsDetailsTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
            BillingFieldsDetailsTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
            BillingFieldsDetailsTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
     //       //System.out.println("-----INSIDE PRINTALL 3---");
            
            /////////////////////////////////////////start//////////////////////////////////////////////
            float[] BillingFieldsDetailsWidths_a = {0.06f, 0.34f, 0.10f, 0.10f, 0.15f, 0.10f, 0.15f};
            PdfPTable BillingFieldsDetailsTable_a=new PdfPTable(BillingFieldsDetailsWidths_a);
            
            float[] BillingFieldsDetailsWidths_2 = {0.06f, 0.34f, 0.10f, 0.10f, 0.15f, 0.10f, 0.15f};
            PdfPTable BillingFieldsDetailsTable_2 = new PdfPTable(BillingFieldsDetailsWidths_2);
            
            float[] BillingFieldsDetailsWidths_exch = {0.06f, 0.34f, 0.10f, 0.10f, 0.15f, 0.10f, 0.15f};
            PdfPTable BillingFieldsDetailsTable_exch = new PdfPTable(BillingFieldsDetailsWidths_exch);
            
            float[] BillingFieldsDetailsWidths_woexch = {0.06f, 0.34f, 0.10f, 0.10f, 0.15f, 0.10f, 0.15f};
            PdfPTable BillingFieldsDetailsTable_woexch = new PdfPTable(BillingFieldsDetailsWidths_woexch);
            
            if(!Tariff_flag && advance_payment_flag){
        	   if(pdfinvadjustcur.startsWith("2")){
        		   int total_count = pdfinvadjremark.length();
                   String breakLine = "\n\n";
                   for(int k=0;k<total_count/45;k++) {
                	   breakLine += "\n";
                   }
                   	field_1 = (++sr_no)+breakLine+(++sr_no)+" ";
                   field_2 = " "+pdfinvadjremark+"\n\n Gross Amount ("+pdfCurrency+")\n\n";
//                   if(invoice_title.equalsIgnoreCase("CREDIT") ) //SB20160611
//              			field_3 = " Att 2\n\n\n\n ";
//              		else			
//              		  field_3 = "Att 3\n\n \n\n ";
                   field_3 = " \n\n \n\n ";
                   if(pdfinvadjustcur.equalsIgnoreCase("U") || pdfinvadjustcur.equalsIgnoreCase("2"))
                   {
                   		field_4 = "USD"+breakLine+"USD";
                   }
                   else
                   {
                   	field_4 = "Rupees "+breakLine+"Rupees";
                   	
                   }
                   field_5 = " "+breakLine+" ";
             		field_6 = " "+breakLine+" ";
              		field_7 = pdfinvadjustmentamt+" "+breakLine+nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(pdfFinal_adjust_gross_amt)))+" ";
                   
                   BillingFieldsDetailsTable_a = new PdfPTable(BillingFieldsDetailsWidths_a);
                   BillingFieldsDetailsTable_a.setWidthPercentage(100);
                   BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
                   BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                   BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                   BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
                   BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
                   BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
                   BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                   BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
                   BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
                   BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                   BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               	   BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
                   BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
                   BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                   BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                   BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
                   BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
                   BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                   BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                   BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
                   BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
                   BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                   BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
                   BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
                   BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
                   BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                   BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                   BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
        	   }
           }
            
            
           if(Tariff_flag && advance_payment_flag) {
        	   
               //////BillingFieldsDetailsTable_a
               		field_1 = (++sr_no)+" \n\n\n"+(++sr_no)+" ";
               
               field_2 = " "+pdfinvadjremark+"\n\n Gross Amount ("+pdfCurrency+")\n";
               if(!invoice_title.equalsIgnoreCase("CREDIT") ){//HS20160617
            	   field_3 = "Att 2\n \n\n ";
               }else{
            	   field_3 = "Att 1\n \n\n ";
               }
               //field_3 = "Att 2\n\n \n\n ";
           		field_4 = ""+pdfCurrency+"\n\n\n"+pdfCurrency+"";
               field_5 = " \n\n ";
         		field_6 = " \n\n ";
          		field_7 = pdfinvadjustmentamt+" \n\n\n"+nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(pdfFinal_adjust_gross_amt)))+" ";
               
               BillingFieldsDetailsTable_a = new PdfPTable(BillingFieldsDetailsWidths_a);
               BillingFieldsDetailsTable_a.setWidthPercentage(100);
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
           	   BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
               
               field_1 = ""+(++sr_no)+" ";
   			
               int cnt = 0;
               	for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{	
	               	if(i==0)
	               	{
	               		field_1 += "\n\n"+(++sr_no)+" ";
	               	}
	               	else
	               	{
	               		field_1 += "\n"+" ";
	               	}
	               	++cnt;
	   			}
	               if(cnt<1)
	               {
	               		field_1 += "\n\n"+(++sr_no)+" \n ";
	               }
	               else
	               {
	               		field_1 += "\n\n\n"+(++sr_no)+" \n ";
	               }
	               
	               field_2 = " Gross Amount (Rupees)";
	   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{	
	   				if(i==0)
	               	{
	   					field_2 += "\n\n "+customer_Invoice_Tax_Name.elementAt(i);
	               	}
	   				else
	   				{
	   					field_2 += "\n "+customer_Invoice_Tax_Name.elementAt(i);
	   				}
	   			}
	   			if(cnt<1)
	            {
	   				field_2 += "\n\n Invoice Amount\n ";
	            }
	   			else
	   			{
	   				if(tax_gst) {
	   					field_2 += "\n Total GST\n\n Invoice Amount\n ";
	   				} else {
	   					field_2 += "\n Total Tax\n\n Invoice Amount\n ";
	   				}
	   			}
	   			
	   			field_3 = "";
	   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{	
	   				if(i==0)
	               	{
	   					field_3 += "\n\n ";
	               	}
	   				else
	   				{
	   					field_3 += "\n ";
	   				}
	   			}
	   			if(cnt<1)
	               {
	   				field_3 += "\n\n \n ";
	               }
	   			else
	   			{
	   				field_3 += "\n\n\n \n ";
	   			}
	   			
	   			field_4 = " Rupees";
	   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{	
	   				if(i==0)
	               	{
	   					field_4 += "\n\nRupees";
	               	}
	   				else
	   				{
	   					field_4 += "\nRupees";
	   				}
	   			}
	   			if(cnt<1)
	               {
	   				field_4 += "\n\nRupees\n ";
	               }
	   			else
	   			{
	   				field_4 += "\nRupees\n\nRupees\n ";
	   			}
	               
	               field_5 = " "; //+total_Invoice_Qty+" ";
	            for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{
	               	if(i==0)
	               	{
	               		field_5 += " \n\n ";
	               	}
	               	else
	               	{
	               		field_5 += " \n ";
	               	}
	   			}
	               if(cnt<1)
	               {
	               	field_5 += "\n\n \n ";
	               }
	               else
	               {
	               	field_5 += "\n\n\n \n ";
	               }
	               
	            field_6 = "";
	            for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{
	               	if(i==0)
	               	{
	               		field_6 += "\n\n"+customer_Invoice_Tax_Rate.elementAt(i)+" % ";
	               	}
	               	else
	               	{
	               		field_6 += "\n"+customer_Invoice_Tax_Rate.elementAt(i)+" % ";
	               	}
	   			}
	               if(cnt<1)
	               {
	               	field_6 += "\n\n \n ";
	               }
	               else
	               {
	               	field_6 += "\n\n\n \n ";
	               }
	               
	            field_7 = " "+nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(customer_Invoice_Gross_Amt_INR)))+" ";
	   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{
	   				if(i==0)
	               	{
	   					field_7 += "\n\n"+customer_Invoice_Tax_Amt.elementAt(i)+" ";
	               	}
	   				else
	   				{
	   					field_7 += "\n"+customer_Invoice_Tax_Amt.elementAt(i)+" ";
	   				}
	   			}
	   			if(cnt<1)
	               {
	   				field_7 += "\n\n"+customer_Invoice_Net_Amt_INR+" \n ";
	               }
	   			else
	   			{
	   				field_7 += "\n"+total_tax_amt+" \n\n"+customer_Invoice_Net_Amt_INR+" \n ";
	   			}
	               
	   			
	               BillingFieldsDetailsTable_woexch.setWidthPercentage(100);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               //BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_normal)));
	               //BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_normal).setAction(new PdfAction(new URL(invoice_att3_file_name)))));
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
           }
           else if(!Tariff_flag && advance_payment_flag && pdfinvadjustcur.startsWith("1") ) {
        	   //
        	   
        	   ////System.out.println("HERE---------------------------------------------------------------");
        	   
        	   field_1 = "\n"+(++sr_no)+"\n\n"+(++sr_no)+"";
               field_2 = " Exchange Rate \n\n Gross Amount (Rupees)";
               if(!invoice_title.equalsIgnoreCase("CREDIT") ){
            	   field_3 = " Att 2 \n\n\n";
               }else{
            	   field_3 = " Att 1 \n\n\n";
               }
               field_4 = "\n\n\nRupees";
               field_5 = "\n\n\n"; //+total_Invoice_Qty+"";
               field_6 = " "+ customer_Invoice_Exchg_Rate+" \n\n\n";
               field_7 = "\n\n\n"+nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(pdfFinal_first_gross_amt_inr)))+"";
               	
              // float[] BillingFieldsDetailsWidths_exch = {0.06f, 0.34f, 0.10f, 0.10f, 0.15f, 0.10f, 0.15f};
               //PdfPTable BillingFieldsDetailsTable_exch = new PdfPTable(BillingFieldsDetailsWidths_exch);
               BillingFieldsDetailsTable_exch.setWidthPercentage(100);
               BillingFieldsDetailsTable_exch.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_exch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_exch.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
               BillingFieldsDetailsTable_exch.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
               BillingFieldsDetailsTable_exch.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_exch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
               BillingFieldsDetailsTable_exch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_exch.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
               BillingFieldsDetailsTable_exch.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_exch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_exch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
           	   BillingFieldsDetailsTable_exch.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
               BillingFieldsDetailsTable_exch.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_exch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_exch.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
               BillingFieldsDetailsTable_exch.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
               BillingFieldsDetailsTable_exch.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_exch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_exch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_exch.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
               BillingFieldsDetailsTable_exch.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_exch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_exch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_exch.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
               BillingFieldsDetailsTable_exch.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_exch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_exch.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
               BillingFieldsDetailsTable_exch.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
        	   
               
               int total_count = pdfinvadjremark.length();
               String breakLine = "\n\n";
               for(int k=0;k<total_count/45;k++) {
            	   breakLine += "\n";
               }
        	   //BillingFieldsDetailsTable_a
//               		field_1 = (++sr_no)+"\n\n\n\n"+(++sr_no)+" ";
               field_1 = (++sr_no)+breakLine+(++sr_no)+" ";
//               field_2 =" "+pdfinvadjremark+"\n\n\n Gross Amount (Rupees)\n\n";
               field_2 =" "+pdfinvadjremark+"\n\n Gross Amount (Rupees)\n\n";
//               if(!invoice_title.equalsIgnoreCase("CREDIT") ){
//            	   field_3 = "Att 3\n\n \n\n ";
//               }else{
//            	   field_3 = "Att 2\n\n \n\n ";
//               }
               field_3 = " "+breakLine;
               if(pdfinvadjustcur.equalsIgnoreCase("U") || pdfinvadjustcur.equalsIgnoreCase("2"))
               {
               		field_4 = "USD"+breakLine+"USD";
               }
               else
               {
               		field_4 = "Rupees "+breakLine+"Rupees";
               }
               field_5 = " "+breakLine+" ";
         		field_6 = " "+breakLine+" ";
          		field_7 = pdfinvadjustmentamt+breakLine+nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(pdfFinal_adjust_gross_amt)))+" ";
               	
               
               BillingFieldsDetailsTable_a = new PdfPTable(BillingFieldsDetailsWidths_a);
               BillingFieldsDetailsTable_a.setWidthPercentage(100);
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            	   BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
               BillingFieldsDetailsTable_a.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_a.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
               BillingFieldsDetailsTable_a.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
               
        	   //BillingFieldsDetailsTable_woexch
               field_1 = ""+(++sr_no)+" ";
      			
               int cnt = 0;
               	for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{	
	               	if(i==0)
	               	{
	               		field_1 += "\n\n"+(++sr_no)+" ";
	               	}
	               	else
	               	{
	               		field_1 += "\n"+" ";
	               	}
	               	++cnt;
	   			}
               	
	               if(cnt<1)
	               {
	               		field_1 += "\n\n"+(++sr_no)+" \n ";
	               }
	               else
	               {
	               		field_1 += "\n\n\n"+(++sr_no)+" \n ";
	               }
	               
	               field_2 = " Gross Amount (Rupees)";
	   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{	
	   				if(i==0)
	               	{
	   					field_2 += "\n\n "+customer_Invoice_Tax_Name.elementAt(i);
	               	}
	   				else
	   				{
	   					field_2 += "\n "+customer_Invoice_Tax_Name.elementAt(i);
	   				}
	   			}
	   			////System.out.println("cnt----"+cnt+"........."+customer_Invoice_Tax_Code.size());
	   		  
	   			if(cnt<1)
	            {
	   				field_2 += "\n\n Invoice Amount\n ";
	            }
	   			else
	   			{
	   				if(tax_gst) {
	   					field_2 += "\n Total GST\n\n Invoice Amount\n ";
	   				} else {
	   					field_2 += "\n Total Tax\n\n Invoice Amount\n ";
	   				}
	   				
	   			}
	   		  
	   		  field_3 = "  ";
	   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{	
	   				if(i==0)
	               	{
	   					field_3 += "\n\n ";
	               	}
	   				else
	   				{
	   					field_3 += "\n ";
	   				}
	   			}
	   			if(cnt<1)
	               {
	   				field_3 += "\n\n \n ";
	               }
	   			else
	   			{
	   				field_3 += "\n\n\n \n ";
	   			}
	   			
	   			field_4 = " Rupees";
	   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{	
	   				if(i==0)
	               	{
	   					field_4 += "\n\nRupees";
	               	}
	   				else
	   				{
	   					field_4 += "\nRupees";
	   				}
	   			}
	   			if(cnt<1)
	               {
	   				field_4 += "\n\nRupees\n ";
	               }
	   			else
	   			{
	   				field_4 += "\nRupees\n\nRupees\n ";
	   			}
	               
	               field_5 = "  "; //+total_Invoice_Qty+" ";
	            for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{
	               	if(i==0)
	               	{
	               		field_5 += " \n\n ";
	               	}
	               	else
	               	{
	               		field_5 += " \n ";
	               	}
	   			}
	               if(cnt<1)
	               {
	               	field_5 += "\n\n \n ";
	               }
	               else
	               {
	               	field_5 += "\n\n\n \n ";
	               }
	               
	            field_6 = " ";
	            for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{
	               	if(i==0)
	               	{
	               		field_6 += "\n\n"+customer_Invoice_Tax_Rate.elementAt(i)+" % ";
	               	}
	               	else
	               	{
	               		field_6 += "\n"+customer_Invoice_Tax_Rate.elementAt(i)+" % ";
	               	}
	   			}
	               if(cnt<1)
	               {
	               	field_6 += "\n\n \n ";
	               }
	               else
	               {
	               	field_6 += "\n\n\n \n ";
	               }
	               
	            field_7 = " "+nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(customer_Invoice_Gross_Amt_INR)))+" ";
	   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
	   			{
	   				if(i==0)
	               	{
	   					field_7 += "\n\n"+customer_Invoice_Tax_Amt.elementAt(i)+" ";
	               	}
	   				else
	   				{
	   					field_7 += "\n"+customer_Invoice_Tax_Amt.elementAt(i)+" ";
	   				}
	   			}
	   			if(cnt<1)
	               {
	   				field_7 += "\n\n"+customer_Invoice_Net_Amt_INR+" \n ";
	   				
	   				////System.out.println("IF.............................");
	               }
	   			else
	   			{
	   				field_7 += "\n"+total_tax_amt+" \n\n"+customer_Invoice_Net_Amt_INR+" \n ";
	   				////System.out.println("ELSE.............................");
	   			}
	               
	   			
	               BillingFieldsDetailsTable_woexch.setWidthPercentage(100);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               //BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_normal)));
	               //BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_normal).setAction(new PdfAction(new URL(invoice_att3_file_name)))));
            	   BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setBorder(Rectangle.BOX);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	               BillingFieldsDetailsTable_woexch.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
	               BillingFieldsDetailsTable_woexch.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
        	   
           }
           else if(Tariff_flag && !advance_payment_flag)
           {
           		field_1 = (++sr_no)+" ";
               int cnt = 0;
               for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   				{	
               	if(i==0)
               	{
               		field_1 += "\n\n"+(++sr_no)+" ";
               	}
               	else
               	{
               		field_1 += "\n"+" ";
               	}
               	++cnt;
   				}
               if(cnt<1)
               {
               	field_1 += "\n\n"+(++sr_no)+" \n ";
               }
               else
               {
               	field_1 += "\n\n\n"+(++sr_no)+" \n ";
               }
               
               field_2 = "\n Gross Amount (Rupees)";
   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{	
   				if(i==0)
               	{
   					field_2 += "\n\n "+customer_Invoice_Tax_Name.elementAt(i);
               	}
   				else
   				{
   					field_2 += "\n "+customer_Invoice_Tax_Name.elementAt(i);
   				}
   			}
   			
   				if(cnt<1)
	               {
	   				field_2 += "\n\n Invoice Amount\n ";
	               }
	   			else
	   			{
	   				if(tax_gst) {
	   					field_2 += "\n Total GST\n\n Invoice Amount\n ";
	   				} else {
	   					field_2 += "\n Total Tax\n\n Invoice Amount\n ";
	   				}
	   			}
   			
   			field_3 = "";
   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{	
   				if(i==0)
               	{
   					field_3 += "\n\n ";
               	}
   				else
   				{
   					field_3 += "\n ";
   				}
   			}
   			if(cnt<1)
               {
   				field_3 += "\n\n \n ";
               }
   			else
   			{
   				field_3 += "\n\n\n \n ";
   			}
   			
   			field_4 = "Rupees";
   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{	
   				if(i==0)
               	{
   					field_4 += "\n\nRupees";
               	}
   				else
   				{
   					field_4 += "\nRupees";
   				}
   			}
   			if(cnt<1)
               {
   				field_4 += "\n\nRupees\n ";
               }
   			else
   			{
   				field_4 += "\nRupees\n\nRupees\n ";
   			}
               
               field_5 = " "; //+total_Invoice_Qty+" ";
               for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{
               	if(i==0)
               	{
               		field_5 += " \n\n ";
               	}
               	else
               	{
               		field_5 += " \n ";
               	}
   			}
               if(cnt<1)
               {
               	field_5 += "\n\n \n ";
               }
               else
               {
               	field_5 += "\n\n\n \n ";
               }
               
               field_6 = " ";
               for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{
               	if(i==0)
               	{
               		field_6 += "\n\n"+customer_Invoice_Tax_Rate.elementAt(i)+" % ";
               	}
               	else
               	{
               		field_6 += "\n"+customer_Invoice_Tax_Rate.elementAt(i)+" % ";
               	}
   			}
               if(cnt<1)
               {
               	field_6 += "\n\n \n ";
               }
               else
               {
               	field_6 += "\n\n\n \n ";
               }
               
               field_7 = ""+nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(customer_Invoice_Gross_Amt_INR)))+" ";
   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{
   				if(i==0)
               	{
   					field_7 += "\n\n"+customer_Invoice_Tax_Amt.elementAt(i)+" ";
               	}
   				else
   				{
   					field_7 += "\n"+customer_Invoice_Tax_Amt.elementAt(i)+" ";
   				}
   			}
   			if(cnt<1)
               {
   				field_7 += "\n\n"+customer_Invoice_Net_Amt_INR+" \n ";
               }
   			else
   			{
   				field_7 += "\n"+total_tax_amt+" \n\n"+customer_Invoice_Net_Amt_INR+" \n ";
   			}
               
   			
               BillingFieldsDetailsTable_2.setWidthPercentage(100);
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               //BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_normal)));
               //BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_normal).setAction(new PdfAction(new URL(invoice_att3_file_name)))));
           	   BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
           }
           else
           {
           		field_1 = (++sr_no)+" \n\n"+(++sr_no)+" ";
   			
               int cnt = 0;
               for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   				{	
               	if(i==0)
               	{
               		field_1 += "\n\n"+(++sr_no)+" ";
               	}
               	else
               	{
               		field_1 += "\n"+" ";
               	}
               	++cnt;
   				}
               if(cnt<1)
               {
               	field_1 += "\n\n"+(++sr_no)+" \n ";
               }
               else
               {
               	field_1 += "\n\n\n"+(++sr_no)+" \n ";
               }
               
               field_2 = " \n Exchange Rate\n\n Gross Amount (Rupees)";
   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{	
   				if(i==0)
               	{
   					field_2 += "\n\n "+customer_Invoice_Tax_Name.elementAt(i);
               	}
   				else
   				{
   					field_2 += "\n "+customer_Invoice_Tax_Name.elementAt(i);
   				}
   			}
	   			if(cnt<1)
	               {
	   				field_2 += "\n\n Invoice Amount\n ";
	               }
	   			else
	   			{
	   				if(tax_gst) {
	   					field_2 += "\n Total GST\n\n Invoice Amount\n ";
	   				} else {
	   					field_2 += "\n Total Tax\n\n Invoice Amount\n ";
	   				}
	   			}
   			field_3 = " \nAtt 2\n\n ";
   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{	
   				if(i==0)
               	{
   					field_3 += "\n\n ";
               	}
   				else
   				{
   					field_3 += "\n ";
   				}
   			}
   			if(cnt<1)
               {
   				field_3 += "\n\n \n ";
               }
   			else
   			{
   				field_3 += "\n\n\n \n ";
   			}
   			
   			field_4 = " \n \n\nRupees";
   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{	
   				if(i==0)
               	{
   					field_4 += "\n\nRupees";
               	}
   				else
   				{
   					field_4 += "\nRupees";
   				}
   			}
   			if(cnt<1)
               {
   				field_4 += "\n\nRupees\n ";
               }
   			else
   			{
   				field_4 += "\nRupees\n\nRupees\n ";
   			}
               
               field_5 = " \n \n\n"; //+total_Invoice_Qty+" ";
               for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{
               	if(i==0)
               	{
               		field_5 += " \n\n ";
               	}
               	else
               	{
               		field_5 += " \n ";
               	}
   			}
               if(cnt<1)
               {
               	field_5 += "\n\n \n ";
               }
               else
               {
               	field_5 += "\n\n\n \n ";
               }
               
               field_6 = " \n"+customer_Invoice_Exchg_Rate+" \n\n ";
               for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{
               	if(i==0)
               	{
               		field_6 += "\n\n"+customer_Invoice_Tax_Rate.elementAt(i)+" % ";
               	}
               	else
               	{
               		field_6 += "\n"+customer_Invoice_Tax_Rate.elementAt(i)+" % ";
               	}
   			}
               if(cnt<1)
               {
               	field_6 += "\n\n \n ";
               }
               else
               {
               	field_6 += "\n\n\n \n ";
               }
               
               field_7 = " \n \n\n"+customer_Invoice_Gross_Amt_INR+" ";
   			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
   			{
   				if(i==0)
               	{
   					field_7 += "\n\n"+customer_Invoice_Tax_Amt.elementAt(i)+" ";
               	}
   				else
   				{
   					field_7 += "\n"+customer_Invoice_Tax_Amt.elementAt(i)+" ";
   				}
   			}
   			if(cnt<1)
               {
   				field_7 += "\n\n"+customer_Invoice_Net_Amt_INR+" \n ";
               }
   			else
   			{
   				field_7 += "\n"+total_tax_amt+" \n\n"+customer_Invoice_Net_Amt_INR+" \n ";
   			}
               
   			
               BillingFieldsDetailsTable_2.setWidthPercentage(100);
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_1,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_2,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               //BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_normal)));
               //BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_normal).setAction(new PdfAction(new URL(invoice_att3_file_name)))));
            	   BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_3,small_black_bold)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_4,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_5,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_6,small_black_normal)));
               BillingFieldsDetailsTable_2.getDefaultCell().setBorder(Rectangle.BOX);
               BillingFieldsDetailsTable_2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
               BillingFieldsDetailsTable_2.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
               BillingFieldsDetailsTable_2.addCell(new Phrase(new Chunk(field_7,small_black_normal)));
           }
                        
            float[] BillingFieldsDetailsWidths_3 = {0.06f, 0.34f, 0.10f, 0.10f, 0.15f, 0.10f, 0.15f};
            PdfPTable BillingFieldsDetailsTable_3 = new PdfPTable(BillingFieldsDetailsWidths_3);
            BillingFieldsDetailsTable_3.setWidthPercentage(100);
            BillingFieldsDetailsTable_3.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable_3.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_3.addCell(new Phrase(new Chunk(""+(++sr_no)+" ",small_black_bold)));
            BillingFieldsDetailsTable_3.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            BillingFieldsDetailsTable_3.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_3.addCell(new Phrase(new Chunk(" Net Amount Payable",small_black_bold)));
            BillingFieldsDetailsTable_3.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsDetailsTable_3.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_3.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            BillingFieldsDetailsTable_3.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingFieldsDetailsTable_3.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_3.addCell(new Phrase(new Chunk("Rupees",small_black_bold)));
            BillingFieldsDetailsTable_3.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable_3.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_3.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            BillingFieldsDetailsTable_3.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable_3.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_3.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            BillingFieldsDetailsTable_3.getDefaultCell().setBorder(Rectangle.BOX);
            BillingFieldsDetailsTable_3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingFieldsDetailsTable_3.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            BillingFieldsDetailsTable_3.addCell(new Phrase(new Chunk(customer_Invoice_Net_Amt_INR+" ",small_black_bold)));
            
            /*float[] table4Widths = {0.20f, 0.15f, 0.15f, 0.15f, 0.35f};
			PdfPTable table4 = new PdfPTable(table4Widths);
			table4.setWidthPercentage(100);
			table4.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			table4.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			table4.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
			table4.addCell(new Phrase(new Chunk("Container #",black_bold).setUnderline(1f, -4f)));
			table4.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			table4.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			table4.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
			table4.addCell(new Phrase(new Chunk("Size",black_bold).setUnderline(1f, -4f)));
			table4.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			table4.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			table4.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
			table4.addCell(new Phrase(new Chunk("Weight",black_bold).setUnderline(1f, -4f)));
			table4.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			table4.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			table4.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
			table4.addCell(new Phrase(new Chunk("Packages",black_bold).setUnderline(1f, -4f)));
			table4.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			table4.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			table4.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
			table4.addCell(new Phrase(new Chunk("Product",black_bold).setUnderline(1f, -4f)));*/
			
            if(contract_type.trim().equalsIgnoreCase("R") || contract_type.trim().equalsIgnoreCase("T") || contract_type.trim().equalsIgnoreCase("C"))
            {
            	if(!remark_3.trim().equals(""))
            	{
            		//HS20160615  remark_1+ = "\n"+remark_3;
            		remark_1 = "\n"+remark_3; //--please st.---HS20160614
             	}
            }
      //      //System.out.println("-----INSIDE PRINTALL 4---");
            
			PdfPTable RemarkTable = new PdfPTable(1);
            RemarkTable.setWidthPercentage(100);
            RemarkTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            RemarkTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            RemarkTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            RemarkTable.addCell(new Phrase(new Chunk(remark_1,small_black_normal)));
			
            
            PdfPTable SNRemarkTable = new PdfPTable(1);
            SNRemarkTable.setWidthPercentage(100);
            SNRemarkTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            SNRemarkTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            SNRemarkTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            SNRemarkTable.addCell(new Phrase(new Chunk(remark_2,small_black_normal)));
            
            //NB20140909 
            ////System.out.println("REMARK----------------"+Invoice_adj_remark);
            PdfPTable ADJRemarkTable = new PdfPTable(1);
            ADJRemarkTable.setWidthPercentage(100);
            ADJRemarkTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            ADJRemarkTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            ADJRemarkTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            ADJRemarkTable.addCell(new Phrase(new Chunk(pdfinvadjremark,small_black_normal)));
            //
            
			
			PdfPTable SignatureInfoTable = new PdfPTable(1);
			SignatureInfoTable.setWidthPercentage(100);
			SignatureInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			SignatureInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
			SignatureInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
			SignatureInfoTable.addCell(new Phrase(new Chunk("For Hazira LNG Private Limited\n\n\n\n\nAuthorised Signatory",black_bold)));
			                       
            
			PdfPTable GenerationInfoTable = new PdfPTable(1);
            GenerationInfoTable.setWidthPercentage(100);
            GenerationInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            GenerationInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            GenerationInfoTable.addCell(new Phrase(new Chunk("FMS7",small_black_normal)));
            
            
            PdfPTable GenerationInfoTable2 = new PdfPTable(1);
            GenerationInfoTable2.setWidthPercentage(100);
            GenerationInfoTable2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            GenerationInfoTable2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            GenerationInfoTable2.addCell(new Phrase(new Chunk("This is computer generated INVOICE and hence does not require Authorised Signatory.",small_black_normal)));
            
            
			//Adding All Cells To PDF Document - One By One ...
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
			document.add(InvoiceTitleTable);
			document.add(InvoiceDescTable);
			document.add(InvoiceDescTable2);
//			document.add(new Paragraph("              "));
			if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
			{
				document.add(InvoiceNoteTable);
			}
			else if(contract_type.trim().equalsIgnoreCase("R") || contract_type.trim().equalsIgnoreCase("T") || contract_type.trim().equalsIgnoreCase("C"))
			{
				document.add(InvoiceNoteTable);
			}
			document.add(new Paragraph("              "));
			document.add(contact_addr_table);                        
            document.add(GstCstInfoTable);            
            document.add(new Paragraph("              "));
            document.add(InvoiceDateInfoTable);
            document.add(InvoiceDueDateInfoTable);
            document.add(InvoiceNOInfoTable);
            document.add(BillingPeriodInfoTable);
            document.add(new Paragraph("              "));
            document.add(BillingFieldsInfoTable);
            document.add(BillingFieldsDetailsTable);
            
            ////System.out.println("Tariff_flag-->  "+Tariff_flag+"advance_payment_flag-->"+advance_payment_flag+"cur"+pdfinvadjustcur);
            
            if(!Tariff_flag && advance_payment_flag)
            {
            	if(pdfinvadjustcur.startsWith("2")){
            		document.add(BillingFieldsDetailsTable_a);
            		document.add(BillingFieldsDetailsTable_2);
            	}
            	else
            	{
            		////System.out.println("Tariff_flag-->  "+Tariff_flag+"advance_payment_flag-->"+advance_payment_flag);
            		document.add(BillingFieldsDetailsTable_exch);
            		document.add(BillingFieldsDetailsTable_a);
            		document.add(BillingFieldsDetailsTable_woexch);
            	}
            }
            if(Tariff_flag && advance_payment_flag) {
            	//document.add(BillingFieldsDetailsTable_exch);
            	document.add(BillingFieldsDetailsTable_a);
            	document.add(BillingFieldsDetailsTable_woexch);
            }
            else if(Tariff_flag && !advance_payment_flag)
            {
            	document.add(BillingFieldsDetailsTable_2);
            }
            
            if(!Tariff_flag && !advance_payment_flag)
            {
            	document.add(BillingFieldsDetailsTable_2);
            }
            
            
            
            //document.add(BillingFieldsDetailsTable_a);
            
            document.add(BillingFieldsDetailsTable_3);
            document.add(new Paragraph("              "));
            document.add(RemarkTable);
            //if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
			{
	            document.add(SNRemarkTable);
			}            
            if(advance_payment_flag){
           // document.add(ADJRemarkTable);
            }
            document.add(new Paragraph("  "));
            document.add(SignatureInfoTable);            
            /*document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            document.add(GenerationInfoTable2);*/
            
            
            // ********* Following Coding is for Showing Attachment-1 Sheet on the Next (2nd Page) of the Same PDF Document *********** //
            document.setPageSize(pageSize1);
            document.newPage();
      //      document.open();
            
			//iText-5.0.4 ...
            /*Font very_small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 5.00f, Font.NORMAL, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 6.00f, Font.NORMAL, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font small_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 6.00f, Font.BOLD, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font black_bold = FontFactory.getFont(FontFactory.HELVETICA, 8.00f, Font.BOLD, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font big_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 12.00f, Font.BOLD, new BaseColor(new Color(0x00, 0x00, 0x00)));*/
            //itext-1.4 ...
            //HS2016015 
             very_small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 5, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 8, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            Font small_black_normal_new = FontFactory.getFont(FontFactory.HELVETICA, 7, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            small_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 6, Font.BOLD, new Color(0x00, 0x00, 0x00));
            Font small_black_bold2 = FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD, new Color(0x00, 0x00, 0x00));
            Font small_black_bold2_new = FontFactory.getFont(FontFactory.HELVETICA, 7, Font.BOLD, new Color(0x00, 0x00, 0x00));
            big_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, new Color(0x00, 0x00, 0x00));
            black_bold = FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD, new Color(0x00, 0x00, 0x00));
            if(invoice_title.equalsIgnoreCase("CREDIT") ) //HS20160615-----font
			{
	            very_small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, new Color(0x00, 0x00, 0x00));
	            small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.NORMAL, new Color(0x00, 0x00, 0x00));
	            small_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, new Color(0x00, 0x00, 0x00));
	            black_bold = FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD, new Color(0x00, 0x00, 0x00));
	            big_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 15, Font.BOLD, new Color(0x00, 0x00, 0x00));
	             small_black_normal_new = FontFactory.getFont(FontFactory.HELVETICA, 7, Font.NORMAL, new Color(0x00, 0x00, 0x00));
	             small_black_bold2 = FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD, new Color(0x00, 0x00, 0x00));
	             small_black_bold2_new = FontFactory.getFont(FontFactory.HELVETICA, 7, Font.BOLD, new Color(0x00, 0x00, 0x00));
			}
            
			url_start = "http://"+server_nm+":"+server_port+context_nm;
		//	//System.out.println("this is the pic path  "+url_start+"\\images\\LOGO\\company_Logo.png");
						  
            hlpl_logo.setBorder(Rectangle.NO_BORDER);
            hlpl_logo.scaleAbsolute(75,75);
            PdfPCell hlpl_logo_cell = new PdfPCell(hlpl_logo,false);
            hlpl_logo_cell.setBorder(Rectangle.NO_BORDER);
			
            
            float[] hlpl_logo_Widths = {0.45f, 0.51f, 0.08f};
            PdfPTable hlpl_logo_table = new PdfPTable(hlpl_logo_Widths);
            hlpl_logo_table.setWidthPercentage(100);
            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            hlpl_logo_table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            hlpl_logo_table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            hlpl_logo_table.addCell(hlpl_logo_cell);
            
            
			addr_supl = "Registered Office:";
            
            if(!contact_Suppl_Name.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Name;     	
            }
            if(!contact_Suppl_Person_Address.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Person_Address;     	
            }
            if(!contact_Suppl_Person_City.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Person_City;     	
            }
            if(!contact_Suppl_Person_Pin.trim().equals(""))
            {
            	addr_supl += " "+"-"+" "+contact_Suppl_Person_Pin;     	
            }
			
			addr_customer = "";
            
			if(contact_Person_Name_And_Designation.trim().equalsIgnoreCase(contact_Customer_Name.trim()))
			{
				if(!contact_Customer_Name.trim().equals(""))
	            {
	            	addr_customer += contact_Customer_Name;    	
	            }
			}
			else
			{
	            if(!contact_Person_Name_And_Designation.trim().equals(""))
	            {
	            	addr_customer += contact_Person_Name_And_Designation;     	
	            }
	            if(!contact_Customer_Name.trim().equals(""))
	            {
	            	addr_customer += "\n"+contact_Customer_Name;     	
	            }
			}
            if(!contact_Customer_Person_Address.trim().equals(""))
            {
            	addr_customer += "\n"+contact_Customer_Person_Address;     	
            }
            if(!contact_Customer_Person_City.trim().equals(""))
            {
            	addr_customer += "\n"+contact_Customer_Person_City;     	
            }
            if(!contact_Customer_Person_Pin.trim().equals(""))
            {
            	addr_customer += " "+"-"+" "+contact_Customer_Person_Pin;     	
            }
                        
                      
            float[] ContactAddrWidths2 = {0.25f, 0.55f, 0.20f};
            contact_addr_table = new PdfPTable(ContactAddrWidths2);
            contact_addr_table.setWidthPercentage(100);
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(contact_Suppl_Name,black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(" ",black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk("To:",black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(addr_supl,small_black_normal)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(addr_customer,small_black_normal)));
			            
            String title_note="";
            if(!invoice_title.equalsIgnoreCase("CREDIT") ){
            	 title_note = "ATTACHMENT 1 - "; 
                if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
                {
                	title_note += "Properly ";
                }
                title_note += "Nominated Quantities";
            }else{
            	//SB20160611 title_note_table = new PdfPTable(1); 
                title_note = "ATTACHMENT 1 - Exchange Rate Applicable";
                //////////////HS20160613////////////
            }            
            
            PdfPTable title_note_table = new PdfPTable(1);
            title_note_table.setWidthPercentage(100);
            title_note_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            title_note_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            title_note_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
            title_note_table.addCell(new Phrase(new Chunk(title_note,big_black_bold)));
            
            
//////////////SB20160530////////////
            invno = "";
            if(!new_inv_seq_no.equals("")) {
            	invno = new_inv_seq_no;
            } else {
            
            if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
        	{
        		if(hlpl_inv_no.length()>13)
        		{
        			invno = hlpl_inv_no.substring(0,10)+""+hlpl_inv_no.substring(12);
        		}      		
        	}
        	else
        	{
        		if(hlpl_inv_no.length()>13)
        		{
        			invno = hlpl_inv_no.substring(0,5)+""+hlpl_inv_no.substring(7,10)+""+hlpl_inv_no.substring(12);
        		}       		
        	}
            }
            inv_no_info = "";
			invoiceType = "";
			inv_dt_Header = "Invoice Date:";
			inv_due_dt_Header = "Payment Due Date:";
			if(invoice_title.equalsIgnoreCase("CREDIT")) //HS20160614
			{
				invoiceType = "Credit Seq No:";
				inv_dt_Header = "";
				//customer_Invoice_DT =invno+":"+customer_Invoice_DT;
				inv_due_dt_Header = "Credit Note Date:";
				invno = hlpl_drcr_docNo;
				customer_Invoice_Due_DT ="";
			}
			else
				invoiceType = "Invoice Seq No:";
			if(invoice_title.equalsIgnoreCase("CREDIT") )
				inv_no_info = "HLPL Credit Note No:";
			else{
				if(contract_type.equalsIgnoreCase("R"))
				{
				//SB	inv_no_info = "HLPL R-gas Invoice Seq No:";
					inv_no_info = "HLPL R-gas "+invoiceType;
				}
				else if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
				{
				//SB	inv_no_info = "HLPL LTCORA Invoice Seq No:";
					
					if(date_flag) {
						inv_no_info = "HLPL Tax "+invoiceType;
					} else {
						inv_no_info = "HLPL LTCORA "+invoiceType;
					}
				}
				else
				{
				//SB	inv_no_info = "HLPL Invoice Seq No:";
					inv_no_info = "HLPL "+invoiceType;
				}
			}
		
		//SB20160530	float[] InvoiceDateInfoWidths2 = {0.70f, 0.20f, 0.10f};
			if(!invoice_title.equalsIgnoreCase("CREDIT") ){ //HS20160617
				float[] InvoiceDateInfoWidths2 = {0.60f, 0.25f, 0.15f};
	            InvoiceDateInfoTable = new PdfPTable(InvoiceDateInfoWidths2);
	            InvoiceDateInfoTable.setWidthPercentage(100);
	            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            //SB20160530 InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",black_bold)));
	           	InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            	InvoiceDateInfoTable.addCell(new Phrase(new Chunk("Invoice Date:",black_bold)));
                InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
	            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_DT,small_black_normal)));
	            
	           //SB20160530 float[] InvoiceDueDateInfoWidths2 = {0.70f, 0.20f, 0.10f};
	            float[] InvoiceDueDateInfoWidths2 = {0.60f, 0.25f, 0.15f};
	            InvoiceDueDateInfoTable = new PdfPTable(InvoiceDueDateInfoWidths2);
	            InvoiceDueDateInfoTable.setWidthPercentage(100);
	            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",black_bold)));
	            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	     //SB20160601       InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk("Payment Due Date:",black_bold))); 
	            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(inv_due_dt_Header,black_bold)));
	            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
	            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Due_DT,small_black_normal)));
	            
	            
	          //SB20160530  float[] InvoiceNOInfoWidths2 = {0.70f, 0.20f, 0.10f};
	            float[] InvoiceNOInfoWidths2 = {0.60f, 0.25f, 0.15f};
	            InvoiceNOInfoTable = new PdfPTable(InvoiceNOInfoWidths2);
	            InvoiceNOInfoTable.setWidthPercentage(100);
	            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",black_bold)));
	            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(inv_no_info,black_bold)));
	            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
	            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(invno,small_black_normal)));

	            float[] BillingPeriodInfoWidths3 = {0.45f, 0.21f, 0.13f, 0.09f, 0.15f};
	            BillingPeriodInfoTable = new PdfPTable(BillingPeriodInfoWidths3);
	            BillingPeriodInfoTable.setWidthPercentage(100);
	            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            BillingPeriodInfoTable.addCell(new Phrase(new Chunk("For the Billing Period",black_bold)));
	            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Start_DT,small_black_normal)));
	            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
	            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            BillingPeriodInfoTable.addCell(new Phrase(new Chunk("to",black_bold)));
	            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
	            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_End_DT,small_black_normal)));
	            
//	            //System.out.println("---HS-liability_exist_flag--"+liability_exist_flag);
	            if(liability_exist_flag.trim().equals("N"))
	            {
		            float[] BillingPeriodFieldsRE1Widths = {0.31f, 0.18f, 0.28f, 0.23f};
		            PdfPTable BillingPeriodFieldsRE1Table = new PdfPTable(BillingPeriodFieldsRE1Widths);
		            BillingPeriodFieldsRE1Table.setWidthPercentage(100);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Terminal Co. Nomination",small_black_bold)));
		            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            	BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Natural Gas (Regasified)",small_black_bold)));
		            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            	BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Cumulative Natural Gas (Regasified) Quantities",small_black_bold)));
		            
		            float[] BillingPeriodFieldsRE2Widths = {0.04f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
		            PdfPTable BillingPeriodFieldsRE2Table = new PdfPTable(BillingPeriodFieldsRE2Widths);
		            BillingPeriodFieldsRE2Table.setWidthPercentage(100);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Billing\nPeriod\nDay No.",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Date",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Contract\nSend Out\nCapacity",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Shipper\nNomination",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("NDQ",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("RE Gas",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("NDQ",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Re Gas",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Total Natural\nGas (Regasified)",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Billing\nPeriod",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Storage\nDuration",small_black_bold)));
		                        
		            
		            float[] BillingPeriodFieldsREWidths = {0.04f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
		            PdfPTable BillingPeriodFieldsRETable = new PdfPTable(BillingPeriodFieldsREWidths);
		            BillingPeriodFieldsRETable.setWidthPercentage(100);
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.LEFT);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.RIGHT);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            	            
		            
		            float[] BillingPeriodInfoREWidths = {0.04f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
		            PdfPTable BillingPeriodInfoRETable = new PdfPTable(BillingPeriodInfoREWidths);
		            BillingPeriodInfoRETable.setWidthPercentage(100);
		            
		            for(int i=0; i<invoice_Period_DCQ.size(); i++)
		        	{
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+(i+1)+" ",small_black_normal)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Dates.elementAt(i),small_black_normal)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_DCQ.elementAt(i),small_black_normal)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Nom_Qty.elementAt(i),small_black_normal)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_PNQ.elementAt(i),small_black_normal)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_RE_Qty.elementAt(i),small_black_normal)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_PNQ.elementAt(i),small_black_normal)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Re_Qty.elementAt(i),small_black_normal)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Total_Qty.elementAt(i),small_black_normal)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_Qty.elementAt(i),small_black_normal)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_SN_Qty.elementAt(i),small_black_normal)));
			        }
		            
		            float[] BillingPeriodInfoRE2Widths = {0.13f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
		            PdfPTable BillingPeriodInfoRE2Table = new PdfPTable(BillingPeriodInfoRE2Widths);
		            BillingPeriodInfoRE2Table.setWidthPercentage(100);
		            
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk("TOTAL: ",small_black_bold2)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+DCQ_Total,small_black_bold2)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Buyer_Nom_Qty_Total,small_black_bold2)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_PNQ_Total,small_black_bold2)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_RE_Qty_Total,small_black_bold2)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_PNQ_Total,small_black_bold2)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_Re_Qty_Total,small_black_bold2)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Delivered_Total_Qty_Total,small_black_bold2)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2)));
		                                  
	            
		            float[] BillingPeriodFieldsSN1Widths = {0.31f, 0.18f, 0.28f, 0.23f};
		            PdfPTable BillingPeriodFieldsSN1Table = new PdfPTable(BillingPeriodFieldsSN1Widths);
		            BillingPeriodFieldsSN1Table.setWidthPercentage(100);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk("Seller Nomination",small_black_bold)));
		            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk("Natural Gas (Delivered)",small_black_bold)));
		            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk("Cumulative Quantities",small_black_bold)));
		            
		            
		            float[] BillingPeriodFieldsSN2Widths = {0.04f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
		            PdfPTable BillingPeriodFieldsSN2Table = new PdfPTable(BillingPeriodFieldsSN2Widths);
		            BillingPeriodFieldsSN2Table.setWidthPercentage(100);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Billing\nPeriod\nDay No.",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Date",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("DCQ",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Buyer\nNomination",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("PNQ",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("RE Gas",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("PNQ",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Re Gas",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Total\nDelivered\nGas",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Billing\nPeriod",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Transaction\nSupply\nPeriod",small_black_bold)));
		            	            
		            
		            float[] BillingPeriodFieldsSNWidths = {0.04f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
		            PdfPTable BillingPeriodFieldsSNTable = new PdfPTable(BillingPeriodFieldsSNWidths);
		            BillingPeriodFieldsSNTable.setWidthPercentage(100);
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.LEFT);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.RIGHT);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            	            
		            
		            float[] BillingPeriodInfoSNWidths = {0.04f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
		            PdfPTable BillingPeriodInfoSNTable = new PdfPTable(BillingPeriodInfoSNWidths);
		            BillingPeriodInfoSNTable.setWidthPercentage(100);
		            
		            for(int i=0; i<invoice_Period_DCQ.size(); i++)
		        	{
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+(i+1)+" ",small_black_normal)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Dates.elementAt(i),small_black_normal)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_DCQ.elementAt(i),small_black_normal)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Nom_Qty.elementAt(i),small_black_normal)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_PNQ.elementAt(i),small_black_normal)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_RE_Qty.elementAt(i),small_black_normal)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_PNQ.elementAt(i),small_black_normal)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Re_Qty.elementAt(i),small_black_normal)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Total_Qty.elementAt(i),small_black_normal)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("999555000.99",small_black_normal)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_Qty.elementAt(i),small_black_normal)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("999555000.99",small_black_normal)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_SN_Qty.elementAt(i),small_black_normal)));
			            //}
		        	}
		            
		            float[] BillingPeriodInfoSN2Widths = {0.13f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.09f, 0.10f, 0.11f, 0.12f};
		            PdfPTable BillingPeriodInfoSN2Table = new PdfPTable(BillingPeriodInfoSN2Widths);
		            BillingPeriodInfoSN2Table.setWidthPercentage(100);
		            
		            
		                       
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk("TOTAL: ",small_black_bold2)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+nf5.format(Double.parseDouble(DCQ_Total)),small_black_bold2)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Buyer_Nom_Qty_Total,small_black_bold2)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_PNQ_Total,small_black_bold2)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_RE_Qty_Total,small_black_bold2)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_PNQ_Total,small_black_bold2)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_Re_Qty_Total,small_black_bold2)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Delivered_Total_Qty_Total,small_black_bold2)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2)));
		                       
		                       
					//Adding All Cells To PDF Document - One By One ...
					//document.add(new Paragraph("              "));
					document.add(hlpl_logo_table);
					document.add(contact_addr_table);                        
		            document.add(new Paragraph("              "));
		            document.add(title_note_table);
		            document.add(new Paragraph("              "));
		            document.add(InvoiceDateInfoTable);
		            document.add(InvoiceDueDateInfoTable);
		            document.add(InvoiceNOInfoTable);
		            document.add(BillingPeriodInfoTable);
		            document.add(new Paragraph("              "));
		            
		            if(contract_type.trim().equalsIgnoreCase("R") || contract_type.trim().equalsIgnoreCase("T") ||contract_type.trim().equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
					{
		            	document.add(BillingPeriodFieldsRE1Table);
		            	document.add(BillingPeriodFieldsRE2Table);
		            	document.add(BillingPeriodFieldsRETable);
		            	document.add(BillingPeriodInfoRETable);
		                document.add(BillingPeriodInfoRE2Table);
		            }
		            else
		            {
		            	document.add(BillingPeriodFieldsSN1Table);
		            	document.add(BillingPeriodFieldsSN2Table);
		            	document.add(BillingPeriodFieldsSNTable);
		            	document.add(BillingPeriodInfoSNTable);
		                document.add(BillingPeriodInfoSN2Table);
		            }
	            }
	            else
	            {
		            float[] BillingPeriodFieldsRE1Widths = {0.22f, 0.12f, 0.18f, 0.16f, 0.06f, 0.21f, 0.09f};
		            PdfPTable BillingPeriodFieldsRE1Table = new PdfPTable(BillingPeriodFieldsRE1Widths);
		            BillingPeriodFieldsRE1Table.setWidthPercentage(100);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Terminal Co. Nomination",small_black_bold)));
		            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            	BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Natural Gas (Regasified)",small_black_bold)));
		            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            	BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Cumulative Natural Gas (Regasified) Quantities",small_black_bold)));
		            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk("Shortfall Quantities",small_black_bold)));
		            BillingPeriodFieldsRE1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            
		            float[] BillingPeriodFieldsRE2Widths = {0.04f, 0.06f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
		            PdfPTable BillingPeriodFieldsRE2Table = new PdfPTable(BillingPeriodFieldsRE2Widths);
		            BillingPeriodFieldsRE2Table.setWidthPercentage(100);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Billing\nPeriod\nDay No.",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Date",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Contract\nSend Out\nCapacity",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Shipper\nNomination",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("NDQ",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("RE Gas",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("NDQ",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Re Gas",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Total Natural\nGas (Regasified)",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Billing\nPeriod",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Storage\nDuration",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Gas tendered\nfor Delivery,\nnot delivered\ndue to\nReasons\nAttributable\nto Shipper",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Off-Spec\nGas\nrejected\nby\nShipper",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Gas\nnot\ndelivered\ndue to\nShipper's\nSuspension",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Failure\nto\nDeliver",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Total\nShortfall\nQuantities",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("LD\nCredit\nPayable",small_black_bold)));
		            BillingPeriodFieldsRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRE2Table.addCell(new Phrase(new Chunk("Gas\nnot\ndelivered\ndue to\nFM",small_black_bold)));
		            
		            
		            float[] BillingPeriodFieldsREWidths = {0.04f, 0.06f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
		            PdfPTable BillingPeriodFieldsRETable = new PdfPTable(BillingPeriodFieldsREWidths);
		            BillingPeriodFieldsRETable.setWidthPercentage(100);
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.LEFT);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.RIGHT);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("Rupees",small_black_bold)));
		            BillingPeriodFieldsRETable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsRETable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            
		            float[] BillingPeriodInfoREWidths = {0.04f, 0.06f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
		            PdfPTable BillingPeriodInfoRETable = new PdfPTable(BillingPeriodInfoREWidths);
		            BillingPeriodInfoRETable.setWidthPercentage(100);
		            
		            for(int i=0; i<invoice_Period_DCQ.size(); i++)
		        	{
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+(i+1)+" ",small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Dates.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_DCQ.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Nom_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_PNQ.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_RE_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_PNQ.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Re_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Total_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_SN_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Shortfall_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Off_Spec_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Suspension_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Delv_Failure_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_Total_Shortfall_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_LD_Credit_Payable.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoRETable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoRETable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoRETable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoRETable.addCell(new Phrase(new Chunk(""+invoice_Period_FM_Qty.elementAt(i),small_black_normal_new)));
		        	}
		            
		            float[] BillingPeriodInfoRE2Widths = {0.10f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
		            PdfPTable BillingPeriodInfoRE2Table = new PdfPTable(BillingPeriodInfoRE2Widths);
		            BillingPeriodInfoRE2Table.setWidthPercentage(100);
		            
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk("TOTAL: ",small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+DCQ_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Buyer_Nom_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_PNQ_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_RE_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_PNQ_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_Re_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Delivered_Total_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Buyer_Shortfall_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Buyer_Off_Spec_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Buyer_Suspension_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Delv_Failure_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+Total_Shortfall_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+LD_Credit_Payable_Total,small_black_bold2_new)));
		            BillingPeriodInfoRE2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoRE2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoRE2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoRE2Table.addCell(new Phrase(new Chunk(""+FM_Qty_Total,small_black_bold2_new)));
	                      
	            
		            float[] BillingPeriodFieldsSN1Widths = {0.22f, 0.12f, 0.18f, 0.16f, 0.06f, 0.21f, 0.09f};
		            PdfPTable BillingPeriodFieldsSN1Table = new PdfPTable(BillingPeriodFieldsSN1Widths);
		            BillingPeriodFieldsSN1Table.setWidthPercentage(100);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk("Seller Nomination",small_black_bold)));
		            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk("Natural Gas (Delivered)",small_black_bold)));
		            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk("Cumulative Quantities",small_black_bold)));
		            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk("Shortfall Quantities",small_black_bold)));
		            BillingPeriodFieldsSN1Table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN1Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN1Table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            
		            float[] BillingPeriodFieldsSN2Widths = {0.04f, 0.06f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
		            PdfPTable BillingPeriodFieldsSN2Table = new PdfPTable(BillingPeriodFieldsSN2Widths);
		            BillingPeriodFieldsSN2Table.setWidthPercentage(100);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Billing\nPeriod\nDay No.",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Date",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("DCQ",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Buyer\nNomination",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("PNQ",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("RE Gas",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("PNQ",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Re Gas",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Total\nDelivered\nGas",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Billing\nPeriod",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Transaction\nSupply\nPeriod",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Gas tendered\nfor Delivery,\nnot delivered\ndue to\nReasons\nAttributable\nto Buyer",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Off-Spec\nGas\nrejected\nby\nBuyer",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Gas\nnot\ndelivered\ndue to\nBuyer's\nSuspension",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Failure\nto\nDeliver",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Total\nShortfall\nQuantities",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("LD\nCredit\nPayable",small_black_bold)));
		            BillingPeriodFieldsSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSN2Table.addCell(new Phrase(new Chunk("Gas\nnot\ndelivered\ndue to\nFM",small_black_bold)));
		            
		            
		            float[] BillingPeriodFieldsSNWidths = {0.04f, 0.06f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
		            PdfPTable BillingPeriodFieldsSNTable = new PdfPTable(BillingPeriodFieldsSNWidths);
		            BillingPeriodFieldsSNTable.setWidthPercentage(100);
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.LEFT);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.RIGHT);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("Rupees",small_black_bold)));
		            BillingPeriodFieldsSNTable.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodFieldsSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodFieldsSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodFieldsSNTable.addCell(new Phrase(new Chunk("MMBTUS",small_black_bold)));
		            
		            
		            float[] BillingPeriodInfoSNWidths = {0.04f, 0.06f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
		            PdfPTable BillingPeriodInfoSNTable = new PdfPTable(BillingPeriodInfoSNWidths);
		            BillingPeriodInfoSNTable.setWidthPercentage(100);
		            
		            for(int i=0; i<invoice_Period_DCQ.size(); i++)
		        	{
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+(i+1)+" ",small_black_normal_new)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Dates.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_DCQ.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal_new)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Nom_Qty.elementAt(i),small_black_normal_new)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal_new)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_PNQ.elementAt(i),small_black_normal_new)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal_new)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Seller_Nom_RE_Qty.elementAt(i),small_black_normal_new)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal_new)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_PNQ.elementAt(i),small_black_normal_new)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal_new)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Re_Qty.elementAt(i),small_black_normal_new)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("9955000.00",small_black_normal_new)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Gas_Delivered_Total_Qty.elementAt(i),small_black_normal_new)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("999555000.99",small_black_normal_new)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_Qty.elementAt(i),small_black_normal_new)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            /*if(i==(invoice_Period_DCQ.size()-1))
			            {
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk("999555000.99",small_black_normal_new)));
			            }
			            else
			            {*/
			            	BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Cumulative_SN_Qty.elementAt(i),small_black_normal_new)));
			            //}
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Shortfall_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Off_Spec_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Buyer_Suspension_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Delv_Failure_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_Total_Shortfall_Qty.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_LD_Credit_Payable.elementAt(i),small_black_normal_new)));
			            BillingPeriodInfoSNTable.getDefaultCell().setBorder(Rectangle.BOX);
			            BillingPeriodInfoSNTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			            BillingPeriodInfoSNTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
			            BillingPeriodInfoSNTable.addCell(new Phrase(new Chunk(""+invoice_Period_FM_Qty.elementAt(i),small_black_normal_new)));
		        	}
		            
		            
		            float[] BillingPeriodInfoSN2Widths = {0.10f, 0.05f, 0.07f, 0.06f, 0.06f, 0.06f, 0.06f, 0.06f, 0.08f, 0.08f, 0.06f, 0.05f, 0.06f, 0.05f, 0.05f, 0.04f, 0.05f};
		            PdfPTable BillingPeriodInfoSN2Table = new PdfPTable(BillingPeriodInfoSN2Widths);
		            BillingPeriodInfoSN2Table.setWidthPercentage(100);
		            
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk("TOTAL: ",small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+nf5.format(Double.parseDouble(DCQ_Total)),small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Buyer_Nom_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_PNQ_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Seller_Nom_RE_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_PNQ_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Gas_Delivered_Re_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Delivered_Total_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(" - ",small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Buyer_Shortfall_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Buyer_Off_Spec_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Buyer_Suspension_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Delv_Failure_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+Total_Shortfall_Qty_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+LD_Credit_Payable_Total,small_black_bold2_new)));
		            BillingPeriodInfoSN2Table.getDefaultCell().setBorder(Rectangle.BOX);
		            BillingPeriodInfoSN2Table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
		            BillingPeriodInfoSN2Table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
		            BillingPeriodInfoSN2Table.addCell(new Phrase(new Chunk(""+FM_Qty_Total,small_black_bold2_new)));
					//document.add(new Paragraph("              "));
					document.add(hlpl_logo_table);
					document.add(contact_addr_table);                        
		            //document.add(new Paragraph("              "));
		            document.add(title_note_table);
		            //document.add(new Paragraph("              "));
		            document.add(InvoiceDateInfoTable);
		            document.add(InvoiceDueDateInfoTable);
		            document.add(InvoiceNOInfoTable);
		            document.add(BillingPeriodInfoTable);
		            document.add(new Paragraph("              "));
		            
		            if(contract_type.trim().equalsIgnoreCase("R") || contract_type.trim().equalsIgnoreCase("T") ||contract_type.trim().equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
					{
		            	document.add(BillingPeriodFieldsRE1Table);
		            	document.add(BillingPeriodFieldsRE2Table);
		            	document.add(BillingPeriodFieldsRETable);
		            	document.add(BillingPeriodInfoRETable);
		                document.add(BillingPeriodInfoRE2Table);
		            }
		            else
		            {
		            	document.add(BillingPeriodFieldsSN1Table);
		            	document.add(BillingPeriodFieldsSN2Table);
		            	document.add(BillingPeriodFieldsSNTable);
		            	document.add(BillingPeriodInfoSNTable);
		                document.add(BillingPeriodInfoSN2Table);
		            }
	            }
	            //document.add(new Paragraph("              "));
	            //document.add(new Paragraph("              "));
	            //document.add(new Paragraph("              "));
		}//FOR HS320160617
		// ------------HSHS---------finish att1------------   
		
            // ******* Following Coding is for Showing Attachment-2 Sheet on the 3rd Page of the Same PDF Document ******* //
            document.setPageSize(pageSize1);
            document.newPage();
     
            
            //iText-5.0.4 ...
            /*Font very_small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 6.00f, Font.NORMAL, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 7.00f, Font.NORMAL, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font small_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 7.00f, Font.BOLD, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font black_bold = FontFactory.getFont(FontFactory.HELVETICA, 8.00f, Font.BOLD, new BaseColor(new Color(0x00, 0x00, 0x00)));
            Font big_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 12.00f, Font.BOLD, new BaseColor(new Color(0x00, 0x00, 0x00)));*/
            //itext-1.4 ...
            very_small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            small_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, new Color(0x00, 0x00, 0x00));
            black_bold = FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD, new Color(0x00, 0x00, 0x00));
            big_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 15, Font.BOLD, new Color(0x00, 0x00, 0x00));
            
            		  
			url_start = "http://"+server_nm+":"+server_port+context_nm;
		//	//System.out.println("this is the pic path  "+url_start+"\\images\\LOGO\\company_Logo.png");
			
			 
            hlpl_logo.setBorder(Rectangle.NO_BORDER);
            hlpl_logo.scaleAbsolute(75,75);
            hlpl_logo_cell = new PdfPCell(hlpl_logo,false);
            hlpl_logo_cell.setBorder(Rectangle.NO_BORDER);
            
			
            float[] hlpl_logo_Widths2 = {0.45f, 0.41f, 0.14f};
            hlpl_logo_table = new PdfPTable(hlpl_logo_Widths2);
            hlpl_logo_table.setWidthPercentage(100);
            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            hlpl_logo_table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            hlpl_logo_table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            hlpl_logo_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            hlpl_logo_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            hlpl_logo_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_BOTTOM);
            hlpl_logo_table.addCell(hlpl_logo_cell);
            
            
			addr_supl = "Registered Office:";
            
            if(!contact_Suppl_Name.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Name;     	
            }
            if(!contact_Suppl_Person_Address.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Person_Address;     	
            }
            if(!contact_Suppl_Person_City.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Person_City;     	
            }
            if(!contact_Suppl_Person_Pin.trim().equals(""))
            {
            	addr_supl += " "+"-"+" "+contact_Suppl_Person_Pin;     	
            }
			
			addr_customer = "";
            
			if(contact_Person_Name_And_Designation.trim().equalsIgnoreCase(contact_Customer_Name.trim()))
			{
				if(!contact_Customer_Name.trim().equals(""))
	            {
	            	addr_customer += contact_Customer_Name;    	
	            }
			}
			else
			{
	            if(!contact_Person_Name_And_Designation.trim().equals(""))
	            {
	            	addr_customer += contact_Person_Name_And_Designation;     	
	            }
	            if(!contact_Customer_Name.trim().equals(""))
	            {
	            	addr_customer += "\n"+contact_Customer_Name;     	
	            }
			}
            if(!contact_Customer_Person_Address.trim().equals(""))
            {
            	addr_customer += "\n"+contact_Customer_Person_Address;     	
            }
            if(!contact_Customer_Person_City.trim().equals(""))
            {
            	addr_customer += "\n"+contact_Customer_Person_City;     	
            }
            if(!contact_Customer_Person_Pin.trim().equals(""))
            {
            	addr_customer += " "+"-"+" "+contact_Customer_Person_Pin;     	
            }
                        
                      
            float[] ContactAddrWidths3 = {0.45f, 0.21f, 0.34f};
            contact_addr_table = new PdfPTable(ContactAddrWidths3);
            contact_addr_table.setWidthPercentage(100);
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(contact_Suppl_Name,small_black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk("To:",small_black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(addr_supl,small_black_normal)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(addr_customer,small_black_normal)));
			
            if(!invoice_title.equalsIgnoreCase("CREDIT") )
            	title_note = "ATTACHMENT 2 - Exchange Rate Applicable";
            else
            	title_note = "ATTACHMENT 1 - Exchange Rate Applicable";
            
            title_note_table = new PdfPTable(1);
            title_note_table.setWidthPercentage(100);
            title_note_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            title_note_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            title_note_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
            title_note_table.addCell(new Phrase(new Chunk(title_note,black_bold)));
                       
			
//////////////SB20160530////////////
            invno = "";
            if(!new_inv_seq_no.equals("")) {
            	invno = new_inv_seq_no;
            } else {
            if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
        	{
        		if(hlpl_inv_no.length()>13)
        		{
        			invno = hlpl_inv_no.substring(0,10)+""+hlpl_inv_no.substring(12);
        		}      		
        	}
        	else
        	{
        		if(hlpl_inv_no.length()>13)
        		{
        			invno = hlpl_inv_no.substring(0,5)+""+hlpl_inv_no.substring(7,10)+""+hlpl_inv_no.substring(12);
        		}       		
        	}}
            
            inv_no_info = "";
			invoiceType = "";
			inv_dt_Header = "Invoice Date:";
			inv_due_dt_Header = "Payment Due Date:";
			if(invoice_title.equalsIgnoreCase("CREDIT")) //SB20160530
			{
				invoiceType = "Credit No:";
				inv_dt_Header = "Invoice  Ref No: "+invno;
				//customer_Invoice_DT =invno+":"+customer_Invoice_DT;
				inv_due_dt_Header = "Credit Note Date:";
				invno = hlpl_drcr_docNo;
				customer_Invoice_Due_DT =hlpl_drcr_dt;
			}
			else
				invoiceType = "Invoice  Seq No:";
			if(invoice_title.equalsIgnoreCase("CREDIT")) //HS20160615
			{
				inv_no_info = "HLPL Credit Note No:";
			}else{
				if(contract_type.equalsIgnoreCase("R"))
				{
				//SB	inv_no_info = "HLPL R-gas Invoice Seq No:";
					inv_no_info = "HLPL R-gas "+invoiceType;
				}
				else if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
				{
				//SB	inv_no_info = "HLPL LTCORA Invoice Seq No:";
					
					if(date_flag) {
						inv_no_info = "HLPL Tax "+invoiceType;
					} else {
						inv_no_info = "HLPL LTCORA "+invoiceType;
					}
				}
				else
				{
				//SB	inv_no_info = "HLPL Invoice Seq No:";
					inv_no_info = "HLPL "+invoiceType;
				}
		}
		
			float[] InvoiceDateInfoWidths3 = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            InvoiceDateInfoTable = new PdfPTable(InvoiceDateInfoWidths3);
            InvoiceDateInfoTable.setWidthPercentage(100);
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
          /*  if(invoice_title.equalsIgnoreCase("CREDIT") || invoice_title.equalsIgnoreCase("CANCEL")) //SB20160530
            	InvoiceDateInfoTable.addCell(new Phrase(new Chunk(inv_dt_Header,small_black_bold)));
            else
            	InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));*/
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            if(invoice_title.equalsIgnoreCase("CREDIT") || invoice_title.equalsIgnoreCase("CANCEL")){  //HS20160822
            	InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            	InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            }else{
            	InvoiceDateInfoTable.addCell(new Phrase(new Chunk("Invoice Date:",small_black_bold)));
            	InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            }
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_DT,small_black_normal)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            
            float[] InvoiceDueDateInfoWidths3 = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            InvoiceDueDateInfoTable = new PdfPTable(InvoiceDueDateInfoWidths3);
            InvoiceDueDateInfoTable.setWidthPercentage(100);
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
      //SB20160601      InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk("Payment Due Date:",small_black_bold)));
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(inv_due_dt_Header,small_black_bold)));
         
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Due_DT,small_black_normal)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            
            
            float[] InvoiceNOInfoWidths3 = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            InvoiceNOInfoTable = new PdfPTable(InvoiceNOInfoWidths3);
            InvoiceNOInfoTable.setWidthPercentage(100);
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(inv_no_info,small_black_bold)));
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(invno,small_black_normal)));
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
                        
            
            float[] BillingPeriodInfoWidths3 = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            BillingPeriodInfoTable = new PdfPTable(BillingPeriodInfoWidths3);
            BillingPeriodInfoTable.setWidthPercentage(100);
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk("For the Billing Period",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Start_DT,small_black_normal)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk("to",small_black_normal)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_End_DT,small_black_normal)));
                        
            
            float[] ExchgRateDetailsWidths = {0.45f, 0.21f, 0.34f};
            PdfPTable ExchgRateDetailsTable = new PdfPTable(ExchgRateDetailsWidths);
            ExchgRateDetailsTable.setWidthPercentage(100);
            for(int i=0; i<customer_Invoice_Exchg_Rate_Code.size(); i++)
        	{
	            ExchgRateDetailsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            ExchgRateDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	            ExchgRateDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            ExchgRateDetailsTable.addCell(new Phrase(new Chunk(""+customer_Invoice_Exchg_Rate_Name.elementAt(i)+"... On "+customer_Invoice_Exchg_Rate_Date.elementAt(i)+" (INR/USD)",small_black_normal)));
	            ExchgRateDetailsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            ExchgRateDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	            ExchgRateDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            ExchgRateDetailsTable.addCell(new Phrase(new Chunk(""+customer_Invoice_Exchg_Rate_Value.elementAt(i),small_black_normal)));
	            ExchgRateDetailsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	            ExchgRateDetailsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
	            ExchgRateDetailsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	            ExchgRateDetailsTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
        	}
            
            
            float[] ExchgRateApplicableWidths = {0.45f, 0.21f, 0.34f};
            PdfPTable ExchgRateApplicableTable = new PdfPTable(ExchgRateApplicableWidths);
            ExchgRateApplicableTable.setWidthPercentage(100);
            ExchgRateApplicableTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            ExchgRateApplicableTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            ExchgRateApplicableTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            ExchgRateApplicableTable.addCell(new Phrase(new Chunk("Exchange Rate Applicable (INR/USD)",small_black_bold)));
            ExchgRateApplicableTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            ExchgRateApplicableTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            ExchgRateApplicableTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            ExchgRateApplicableTable.addCell(new Phrase(new Chunk(customer_Invoice_Exchg_Rate,small_black_bold)));
            ExchgRateApplicableTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            ExchgRateApplicableTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            ExchgRateApplicableTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            ExchgRateApplicableTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            
            
            PdfPTable BankSourceTable = new PdfPTable(1);
            BankSourceTable.setWidthPercentage(100);
            BankSourceTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BankSourceTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            BankSourceTable.addCell(new Phrase(new Chunk("Source:\n"+customer_Invoice_Bank_Name.elementAt(0),small_black_normal)));
            
            if(Tariff_flag)
            {
            	
            }
            else
            {
            //Adding All Cells To PDF Document - One By One ...
			document.add(new Paragraph("              "));
			document.add(hlpl_logo_table);
			document.add(contact_addr_table);                        
            document.add(new Paragraph("              "));
            document.add(title_note_table);
            document.add(new Paragraph("              "));
            document.add(InvoiceDateInfoTable);
            document.add(InvoiceDueDateInfoTable);
            document.add(InvoiceNOInfoTable);
            document.add(BillingPeriodInfoTable);
            document.add(new Paragraph("              "));
            document.add(ExchgRateDetailsTable);
            document.add(new Paragraph("              "));
            document.add(ExchgRateApplicableTable);
            document.add(new Paragraph("              "));
            document.add(BankSourceTable);
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            }
            
            
//          ******* Following Coding is for Showing Attachment-3 Sheet on the 3rd Page of the Same PDF Document ******* //
            document.setPageSize(pageSize1);
            document.newPage();
            
            very_small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            small_black_normal = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.NORMAL, new Color(0x00, 0x00, 0x00));
            small_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, new Color(0x00, 0x00, 0x00));
            black_bold = FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD, new Color(0x00, 0x00, 0x00));
            big_black_bold = FontFactory.getFont(FontFactory.HELVETICA, 15, Font.BOLD, new Color(0x00, 0x00, 0x00));
            
            url_start = "http://"+server_nm+":"+server_port+context_nm;
            
            
            addr_supl = "Registered Office:";
            
            if(!contact_Suppl_Name.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Name;     	
            }
            if(!contact_Suppl_Person_Address.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Person_Address;     	
            }
            if(!contact_Suppl_Person_City.trim().equals(""))
            {
            	addr_supl += "\n"+contact_Suppl_Person_City;     	
            }
            if(!contact_Suppl_Person_Pin.trim().equals(""))
            {
            	addr_supl += " "+"-"+" "+contact_Suppl_Person_Pin;     	
            }
			
			addr_customer = "";
            
			if(contact_Person_Name_And_Designation.trim().equalsIgnoreCase(contact_Customer_Name.trim()))
			{
				if(!contact_Customer_Name.trim().equals(""))
	            {
	            	addr_customer += contact_Customer_Name;    	
	            }
			}
			else
			{
	            if(!contact_Person_Name_And_Designation.trim().equals(""))
	            {
	            	addr_customer += contact_Person_Name_And_Designation;     	
	            }
	            if(!contact_Customer_Name.trim().equals(""))
	            {
	            	addr_customer += "\n"+contact_Customer_Name;     	
	            }
			}
            if(!contact_Customer_Person_Address.trim().equals(""))
            {
            	addr_customer += "\n"+contact_Customer_Person_Address;     	
            }
            if(!contact_Customer_Person_City.trim().equals(""))
            {
            	addr_customer += "\n"+contact_Customer_Person_City;     	
            }
            if(!contact_Customer_Person_Pin.trim().equals(""))
            {
            	addr_customer += " "+"-"+" "+contact_Customer_Person_Pin;     	
            }
                        
                      
            float[] ContactAddrWidthsa = {0.45f, 0.21f, 0.34f};
            contact_addr_table = new PdfPTable(ContactAddrWidthsa);
            contact_addr_table.setWidthPercentage(100);
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(contact_Suppl_Name,small_black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk("To:",small_black_bold)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(addr_supl,small_black_normal)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            contact_addr_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            contact_addr_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            contact_addr_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            contact_addr_table.addCell(new Phrase(new Chunk(addr_customer,small_black_normal)));
			
            invno = "";
            if(!new_inv_seq_no.equals("")) {
            	invno = new_inv_seq_no;
            } else {
            if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
        	{
        		if(hlpl_inv_no.length()>13)
        		{
        			invno = hlpl_inv_no.substring(0,10)+""+hlpl_inv_no.substring(12);
        		}
        		
        	}
        	else
        	{
        		if(hlpl_inv_no.length()>13)
        		{
        			invno = hlpl_inv_no.substring(0,5)+""+hlpl_inv_no.substring(7,10)+""+hlpl_inv_no.substring(12);
        		}
        		
        	}
            }
            
            if(invoice_advance_inv_no.trim().equalsIgnoreCase(""))
    		{
            	invoice_advance_inv_no=invno;
    		}
    		else
    		{
    			//invno=invoice_advance_inv_no;
    		}
            if(invoice_title.equalsIgnoreCase("CREDIT")) //HS20160615
			{
            	if(Tariff_flag)
	            {
	            	title_note = "ATTACHMENT 1 - Reconciliation of Advance Amount Paid under Receipt Voucher No. "+invoice_advance_inv_no;
	            }
	            else
	            {
	            	title_note = "ATTACHMENT 2 - Reconciliation of Advance Amount Paid under Receipt Voucher No. "+invoice_advance_inv_no;
	            }
			}else{
	            if(Tariff_flag)
	            {
	            	title_note = "ATTACHMENT 2 - Reconciliation of Advance Amount Paid under Receipt Voucher No. "+invoice_advance_inv_no;
	            }
	            else
	            {
	            	title_note = "ATTACHMENT 3 - Reconciliation of Advance Amount Paid under Receipt Voucher No. "+invoice_advance_inv_no;
	            }
			}
            
            title_note_table = new PdfPTable(1);
            title_note_table.setWidthPercentage(100);
            title_note_table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            title_note_table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            title_note_table.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
            title_note_table.addCell(new Phrase(new Chunk(title_note,black_bold)));
            
            invno = "";
            if(!new_inv_seq_no.equals("")) {
            	invno = new_inv_seq_no;
            } else {
			  if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
	        	{
	        		if(hlpl_inv_no.length()>13)
	        		{
	        			invno = hlpl_inv_no.substring(0,10)+""+hlpl_inv_no.substring(12);
	        		}	        		
	        	}
	        	else
	        	{
	        		if(hlpl_inv_no.length()>13)
	        		{
	        			invno = hlpl_inv_no.substring(0,5)+""+hlpl_inv_no.substring(7,10)+""+hlpl_inv_no.substring(12);
	        		}	        		
	        	}}
            inv_no_info = "";
			invoiceType = "";
			inv_dt_Header = "Invoice Date:";
			inv_due_dt_Header = "Payment Due Date:";
			if(invoice_title.equalsIgnoreCase("CREDIT") || invoice_title.equalsIgnoreCase("CANCEL")) //SB20160530
			{
				invoiceType = "Credit Seq No:";
				inv_dt_Header = "Invoice  Ref No: "+invno;
				//customer_Invoice_DT =invno+":"+customer_Invoice_DT;
				inv_due_dt_Header = "Credit Note Date:";
				invno = hlpl_drcr_docNo;
				customer_Invoice_Due_DT =hlpl_drcr_dt;
			}
			else
				invoiceType = "Invoice Seq No:";
			if(contract_type.equalsIgnoreCase("R"))
			{
			//SB	inv_no_info = "HLPL R-gas Invoice Seq No:";
				inv_no_info = "HLPL R-gas "+invoiceType;
			}
			else if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
			{
			//SB	inv_no_info = "HLPL LTCORA Invoice Seq No:";
				
				if(date_flag) {
					inv_no_info = "HLPL Tax "+invoiceType;
				} else {
					inv_no_info = "HLPL LTCORA "+invoiceType;
				}
			}
			else
			{
			//SB	inv_no_info = "HLPL Invoice Seq No:";
				inv_no_info = "HLPL Invoice "+invoiceType;
			}
		/*SB20160530	
			if(contract_type.equalsIgnoreCase("R"))
			{
				inv_no_info = "HLPL R-gas Invoice Seq No:";
			}
			else if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))//ADDED FOR LTCORA AND CN
			{
				if(invoice_title.equalsIgnoreCase("CREDIT") || invoice_title.equalsIgnoreCase("CANCEL")) //SB20160530
					inv_no_info = "Ref. Inv#: HLPL LTCORA Credit Seq No:";
				else
				inv_no_info = "HLPL LTCORA Invoice Seq No:";
			}
			else
			{
				inv_no_info = "HLPL Invoice Seq No:";
			}
            */
			 
	            
	        float[] InvoiceNOInfoWidthsa = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
	        InvoiceNOInfoTable = new PdfPTable(InvoiceNOInfoWidthsa);
	        InvoiceNOInfoTable.setWidthPercentage(100);
	        InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	        InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	        InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	        InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
	        InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	        InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	        InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	        InvoiceNOInfoTable.addCell(new Phrase(new Chunk(inv_no_info,small_black_bold)));
	        InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
	        InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	        InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	        InvoiceNOInfoTable.addCell(new Phrase(new Chunk(invno,small_black_normal)));
	        InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	        InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	        InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	        InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
	        InvoiceNOInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
	        InvoiceNOInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
	        InvoiceNOInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
	        InvoiceNOInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            
	        float[] InvoiceDateInfoWidthsa = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            InvoiceDateInfoTable = new PdfPTable(InvoiceDateInfoWidthsa);
            InvoiceDateInfoTable.setWidthPercentage(100);
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            /*if(invoice_title.equalsIgnoreCase("CREDIT") || invoice_title.equalsIgnoreCase("CANCEL")) //SB20160530
            	InvoiceDateInfoTable.addCell(new Phrase(new Chunk(inv_dt_Header,small_black_bold)));
            else
            	InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));*/
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            
            if(invoice_title.equalsIgnoreCase("CREDIT") || invoice_title.equalsIgnoreCase("CANCEL")){  //HS20160822
            	InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            	InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            }else{
            	InvoiceDateInfoTable.addCell(new Phrase(new Chunk("Invoice Date:",small_black_bold)));
            	InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            }
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_DT,small_black_normal)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            InvoiceDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
           
	        
            float[] InvoiceDueDateInfoWidthsa = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            InvoiceDueDateInfoTable = new PdfPTable(InvoiceDueDateInfoWidthsa);
            InvoiceDueDateInfoTable.setWidthPercentage(100);
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
 //SB20160601           InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk("Payment Due Date:",small_black_bold)));
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(inv_due_dt_Header,small_black_bold)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Due_DT,small_black_normal)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
            InvoiceDueDateInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            InvoiceDueDateInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            InvoiceDueDateInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            InvoiceDueDateInfoTable.addCell(new Phrase(new Chunk(" ",small_black_normal)));
                     
            
            float[] BillingPeriodInfoWidthsa = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            BillingPeriodInfoTable = new PdfPTable(BillingPeriodInfoWidthsa);
            BillingPeriodInfoTable.setWidthPercentage(100);
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(" ",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk("For the Billing Period",small_black_bold)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_Start_DT,small_black_normal)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk("to",small_black_normal)));
            BillingPeriodInfoTable.getDefaultCell().setBorder(Rectangle.BOX);
            BillingPeriodInfoTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            BillingPeriodInfoTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            BillingPeriodInfoTable.addCell(new Phrase(new Chunk(customer_Invoice_End_DT,small_black_normal)));
              
            float[] AdvanceAmountPaid = {0.45f, 0.21f, 0.13f, 0.08f, 0.13f};
            PdfPTable CumulativeAdjustmentsTable = new PdfPTable(1);
            PdfPTable AdvanceAmountPaidTable = new PdfPTable(4);
            if(date_flag && TAX_TOTAL_COLLECTION.size()>0 && contract_type.equals("C")) {
            	System.out.println("in if");
            	AdvanceAmountPaidTable = new PdfPTable(5);
            	
            	AdvanceAmountPaidTable.setWidthPercentage(100);
                
                AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
                AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                AdvanceAmountPaidTable.getDefaultCell().setColspan(5);
                if(payment_type.equalsIgnoreCase("AP")){
                	 AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Reconciliation of Advance Amount",small_black_bold)));
        		}else{
        			 AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Reconciliation of Special Payment Amount",small_black_bold)));
        		}
                
                AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
                AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
                AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
                if(payment_type.equalsIgnoreCase("AP")){
                	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Advance Description",small_black_normal)));
    	   		}else{
    	   			AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Special Payment Description",small_black_normal)));
    	   		}
                
                AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
                AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
                AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
                if(payment_type.equalsIgnoreCase("AP")){
                	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Total Advance Received",small_black_normal)));
                }else{
                	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Total Special Payment Received",small_black_normal)));
                }
                AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
                AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
                AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
                AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Balance Amount After Adjustment Till Last Billing Period",small_black_normal)));
                AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
                AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
                AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
                AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Outstanding Balance Available For Adjustment in Next Billing Period",small_black_normal)));
               
                AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
                AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
                AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
                AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Currency",small_black_normal)));
                
                AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
                AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
                AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
                if(payment_type.equalsIgnoreCase("AP")){
                	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Gross Amount Advance",small_black_normal)));
                }else{
                	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Gross Amount of Special Payment",small_black_normal))); //HS
                }
                AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
                AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
                AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(pdfFinal_Total_Collection,small_black_normal)));
                
                AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
                AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
                AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(balanceason,small_black_normal)));
               
                AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
                AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
             //   //System.out.println("Invoice_Adj_bal"+Invoice_Adj_bal.size());
                if(advance_payment_flag && Invoice_Adj_bal.size()>=1){
                	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+Invoice_Adj_bal.elementAt(Invoice_Adj_bal.size()-1),small_black_normal)));
                }else{
                	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+balanceason,small_black_normal)));
                }
                AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
                AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
                AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(pdfFinal_Total_Currency,small_black_normal)));
               
               
                	for(int i=0;i<compo_cd.size();i++) {
    	            	if(contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C")) {
    	                	if(!inv_advance_adj_flg.equalsIgnoreCase("AA") || TAX_ADV_ADJ_CODE_GST.size()>0){
    	    	            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
    	    	            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
    	    	            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
    	    	            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
    	    	            if(payment_type.equalsIgnoreCase("AP")){
    	    	            	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+compo_abbr.elementAt(i)+" Advance",small_black_normal)));
    	    	            }else{
    	    	            	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+compo_abbr.elementAt(i)+" On Special Payment",small_black_normal)));
    	    	            }
    	    	                        
    	    	            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
    	    	            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
    	    	            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
    	    	            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
    	    	            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+TAX_TOTAL_COLLECTION.get(compo_cd.elementAt(i)),small_black_normal)));
    	    	            
    	    	            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
    	    	            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
    	    	            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
    	    	            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
    	    	            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+TAX_BALANCE_ASON.get(compo_cd.elementAt(i)),small_black_normal)));
    	    	           
    	    	            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
    	    	            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
    	    	            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
    	    	            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
    	    	            String val = ""+TAX_ADJ_BAL.get(compo_cd.elementAt(i)+":"+TAX_INVOICE_NO.get(compo_cd.elementAt(i)));
    						if(val=="null" || val==null || val.equals("null") || val.equals(null))
    							val = "0.00";
    	    	            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+val,small_black_normal)));
    	    	            
    	    	            AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
    	    	            AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
    	    	            AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
    	    	            AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
    	    	            AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+TAX_TOTAL_CURRENCY.get(compo_cd.elementAt(i)),small_black_normal)));
    	                }
                	}
                	
                }
                //---KKC---//
                String inv_pay_modes="";
                if(payment_type.equalsIgnoreCase("AP")){ //HS20160726
            		inv_pay_modes="Advance";
            	}else{
            		inv_pay_modes="Special Payment";
            	}
                
                String item1="";
                String item2="";
                if(contract_type.equalsIgnoreCase("R"))
    			{
                	item1="Cumulative Adjustments against Regas Invoices";
                	item2="Advance Adjusted against Regas Charges";
    			}
                else if(contract_type.equalsIgnoreCase("T"))
    			{
                	item1="Cumulative Adjustments against LTCORA Invoices";
                	item2="Advance Adjusted against LTCORA Charges";
    			}
                else if(contract_type.equalsIgnoreCase("C"))
    			{
                	item1="Cumulative Adjustments against LTCORA Invoices";
                	item2=inv_pay_modes +" Adjusted against LTCORA Charges";
    			}
    			else
    			{
    				item1="Cumulative Adjustments against Invoices";
    				item2="Advance Adjusted against Charges";
    			}
                
                //float[] CumulativeAdjustments = { 0.08f, 0.45f, 0.35f, 0.20f,0.20f,0.20f};
                
                if(inv_advance_adj_flg.equalsIgnoreCase("AA")){
                	float[] CumulativeAdjustments = { 0.08f, 0.45f, 0.35f};
                	CumulativeAdjustmentsTable = new PdfPTable(CumulativeAdjustments);
                } else if(date_flag) {
//                	float[compo_cd.size()+3] CumulativeAdjustments = { 0.08f, 0.45f, 0.35f, 0.20f,0.20f,0.20f};
                	CumulativeAdjustmentsTable = new PdfPTable(3+compo_cd.size());
                } else {
                	CumulativeAdjustmentsTable = new PdfPTable(3+compo_cd.size());
                }
                //CumulativeAdjustmentsTable = new PdfPTable(CumulativeAdjustments);
                CumulativeAdjustmentsTable.setWidthPercentage(100);
                CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                if(!inv_advance_adj_flg.equalsIgnoreCase("AA")){
                	if(date_flag) {
                		CumulativeAdjustmentsTable.getDefaultCell().setColspan(3+compo_cd.size());
                	} 
                } else {
                	CumulativeAdjustmentsTable.getDefaultCell().setColspan(3);
                }
                CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(item1,small_black_bold)));
                
                CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("Sr No.",small_black_normal)));
                
                CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("Invoice Details",small_black_normal)));
                
                CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(item2+" ("+pdfFinal_Total_Currency+")",small_black_normal)));
                
                	if(contract_type.equalsIgnoreCase("C") || contract_type.equalsIgnoreCase("T")) {
    	            	if(!inv_advance_adj_flg.equalsIgnoreCase("AA") || TAX_ADV_ADJ_CODE_GST.size()>0){
    	            		for(int k=0;k<compo_cd.size();k++) {
    	            	
    				            CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
    				            CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
    				            CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
    				            CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
    				            CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(inv_pay_modes + " Adjusted against "+compo_abbr.elementAt(k)+" ("+TAX_TOTAL_CURRENCY.get(compo_cd.elementAt(k))+")",small_black_normal)));
    	            		}
    	            	}
    	            }
                
                
                double total=0,total_tax=0,total_SBC=0,total_KKC=0;
                Map total_tax_amt = new HashMap();
                
              //  //System.out.println("Invoice_no"+Invoice_no.size());
                
                if(Invoice_no.size()>0 || TAX_INVOICE_NO.size()>0) {
                	
            		for(int i=0;i<Invoice_no.size();i++) {
            			total+=NumberFormat.getInstance().parse(""+Invoice_adj_amt.elementAt(i)).doubleValue();
            			
            			int item=i+1;
            			
            			CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                        CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                        CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                        CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                        CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(item+"",small_black_normal)));
            			
                        CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                        CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                        CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                        CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                        CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(Invoice_no.elementAt(i)+" dated "+Invoice_dt.elementAt(i),small_black_normal)));
            			
                        CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                        CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                        CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                        CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                        CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(Invoice_adj_amt.elementAt(i).toString(),small_black_normal)));
                        
                        for(int k=0;k<compo_cd.size();k++) { 
    			    	if(!inv_advance_adj_flg.equalsIgnoreCase("AA") || TAX_ADV_ADJ_CODE_GST.size()>0) {
    			    		String invoice_no = ""+TAX_INVOICE_NO.get(compo_cd.elementAt(k));
    			    		String i_value = ""+TAX_ADJ_AMT.get(compo_cd.elementAt(k)+":"+Invoice_no.elementAt(i));
    			    		if(i_value=="null" || i_value==null || i_value.equals("null") || i_value.equals(null)) {
    			    			i_value = "0";
    			    		} else {
    			    			i_value = ""+NumberFormat.getInstance().parse(i_value);
    			    		}
    			    		String i_map = ""+total_tax_amt.get(compo_cd.elementAt(k));
    			    		if(i_map=="null" || i_map==null || i_map.equals("null") || i_map.equals(null)) {
    			    			i_map = "0";
    			    		} else {
    			    			i_map = ""+NumberFormat.getInstance().parse(i_map);
    			    		}
    			    		
    			    		double value_invoice = Double.parseDouble(i_value);
    			    		double value_map = Double.parseDouble(i_map); 
    			    		total_tax_amt.put(compo_cd.elementAt(k),(value_invoice+value_map));
    			    		String adj_value = ""+TAX_ADJ_AMT.get(compo_cd.elementAt(k)+":"+Invoice_no.elementAt(i));
    			    		if(adj_value==null || adj_value=="null" || adj_value.equals("null") || adj_value.equals(null)) {
    			    			adj_value = "0.00";
    			    		}
    			    		
    			    		CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
    	                    CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
    	                    CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
    	                    CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
    	                    CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(adj_value,small_black_normal)));
    			    	}}
                        
                	}
            	
            		CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
                    CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                    CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                    CumulativeAdjustmentsTable.getDefaultCell().setColspan(3+compo_cd.size());
                    CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("",small_black_normal)));
                    
                    CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
                    CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                    CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                    CumulativeAdjustmentsTable.getDefaultCell().setColspan(3+compo_cd.size());
                    CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("",small_black_normal)));
                    
                    CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
                    CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                    CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                    CumulativeAdjustmentsTable.getDefaultCell().setColspan(3+compo_cd.size());
                    CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("",small_black_normal)));
                    
                    CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
                    CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                    CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                    CumulativeAdjustmentsTable.getDefaultCell().setColspan(3+compo_cd.size());
                    CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("",small_black_normal)));

                    CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                    CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                    CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                    CumulativeAdjustmentsTable.getDefaultCell().setColspan(2);
                    CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("Total Adjustment in This Billing Period",small_black_normal)));
                    
                    CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                    CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                    CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                    CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                    CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(nf3.format(total)+"",small_black_normal)));
                    
                		if(!inv_advance_adj_flg.equalsIgnoreCase("AA") || TAX_ADV_ADJ_CODE_GST.size()>0){
                			for(int k=0;k<compo_cd.size();k++) {
    	    	                CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
    	    	                CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
    	    	                CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
    	    	                CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
    	    	                CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(nf3.format(total_tax_amt.get(compo_cd.elementAt(k)))+"",small_black_normal)));
        	                }
                		}
                } 
                
            } else {
            	 
                 AdvanceAmountPaidTable.setWidthPercentage(70);
                 
                 AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
                 AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                 AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                 AdvanceAmountPaidTable.getDefaultCell().setColspan(4);
                 AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Reconciliation of Advance Amount",small_black_bold)));
                 AdvanceAmountPaidTable.setWidthPercentage(70);
                 
                 AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
                 AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                 AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
                 AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
                 AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Total Advance Received",small_black_normal)));
                 AdvanceAmountPaidTable.setWidthPercentage(70);
                 AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
                 AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                 AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
                 AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
                 AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Balance Amount after adjustment till last billing period",small_black_normal)));
                 AdvanceAmountPaidTable.setWidthPercentage(70);
                 AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
                 AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                 AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
                 AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
                 AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Outstanding balance available for adjustment in next billing period",small_black_normal)));
                 AdvanceAmountPaidTable.setWidthPercentage(70);
                
                 AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
                 AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                 AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
                 AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
                 AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("Currency",small_black_normal)));
                 AdvanceAmountPaidTable.setWidthPercentage(70);
                 
                 
                 AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
                 AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                 AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                 AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
                 AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(pdfFinal_Total_Collection,small_black_normal)));
                 
                 AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
                 AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                 AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                 AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
                 AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(balanceason,small_black_normal)));
                
                 AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
                 AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                 AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                 AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
                 if(advance_payment_flag && Invoice_Adj_bal.size()>=1){
                 AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+Invoice_Adj_bal.elementAt(Invoice_Adj_bal.size()-1),small_black_normal)));
                 }else {
                 	AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(""+balanceason,small_black_normal)));
                 }
                 AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
                 AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                 AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                 AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
                 AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(pdfFinal_Total_Currency,small_black_normal)));
                
                 /*if(flagINR)
                 {
                 AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
                 AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                 AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                 AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
                 AdvanceAmountPaidTable.addCell(new Phrase(new Chunk(Total_Collection_INR,small_black_bold)));
                 
                 AdvanceAmountPaidTable.getDefaultCell().setBorder(Rectangle.BOX);
                 AdvanceAmountPaidTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                 AdvanceAmountPaidTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                 AdvanceAmountPaidTable.getDefaultCell().setColspan(1);
                 AdvanceAmountPaidTable.addCell(new Phrase(new Chunk("INR",small_black_bold)));
                 }*/
                 
                 String item1="";
                 String item2="";
                 if(contract_type.equalsIgnoreCase("R"))
     			{
                 	item1="Cumulative Adjustments against Regas Invoices";
                 	item2="Advance Adjusted against Regas Charges";
     			}
                 else if(contract_type.equalsIgnoreCase("T"))
     			{
                 	item1="Cumulative Adjustments against LTCORA Invoices";
                 	item2="Advance Adjusted against LTCORA Charges";
     			}
                 else if(contract_type.equalsIgnoreCase("C"))
     			{
                 	item1="Cumulative Adjustments against LTCORA Invoices";
                 	item2="Advance Adjusted against LTCORA Charges";
     			}
     			else
     			{
     				item1="Cumulative Adjustments against Invoices";
     				item2="Advance Adjusted against Charges";
     			}
                 
                 float[] CumulativeAdjustments = { 0.08f, 0.45f, 0.35f, 0.20f};
                 CumulativeAdjustmentsTable = new PdfPTable(CumulativeAdjustments);
                 CumulativeAdjustmentsTable.setWidthPercentage(70);
                 CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                 CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                 CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                 CumulativeAdjustmentsTable.getDefaultCell().setColspan(5);
                 CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(item1,small_black_bold)));
                 CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                 CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                 CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                 CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                 CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("Sr No.",small_black_normal)));
                 CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                 CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                 CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                 CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                 CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("Invoice Details",small_black_normal)));
                 CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                 CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                 CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                 CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                 CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(item2,small_black_normal)));
                 CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                 CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                 CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                 CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                 CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("Currency",small_black_normal)));
//                 CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
//                 CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
//                 CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
//                 CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
//                 CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("Balance",small_black_bold)));
                 double total=0;
                 
                 if(Invoice_no.size()>0) {
             		for(int i=0;i<Invoice_no.size();i++) { 
             			
             			try
             			{
             				total+=NumberFormat.getInstance().parse(""+Invoice_adj_amt.elementAt(i)).doubleValue();
             			}
             			catch(Exception e)
             			{
             				e.printStackTrace();
             			}
             			String cur="USD";
             			if(Invoice_adj_cur.elementAt(i).toString().equalsIgnoreCase("INR")) 
             				cur="INR";
             			else if(Invoice_adj_cur.elementAt(i).toString().equalsIgnoreCase("USD"))
             				cur="USD";
             			else
             				cur="-";
             			
             			int item=i+1;
             			
             			CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                         CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                         CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                         CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                         CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(item+"",small_black_normal)));
             			
                         CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                         CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                         CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                         CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                         CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(Invoice_no.elementAt(i)+" dated "+Invoice_dt.elementAt(i),small_black_normal)));
             			
                         CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                         CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                         CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                         CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                         CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(Invoice_adj_amt.elementAt(i).toString(),small_black_normal)));
             			
                         CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                         CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                         CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                         CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                         CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(cur,small_black_normal)));
                         
//                         CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
//                         CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
//                         CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
//                         CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
//                         CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(Invoice_Adj_bal.elementAt(i).toString(),small_black_bold)));
             			
             	}
             		
             		CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
                     CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                     CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                     CumulativeAdjustmentsTable.getDefaultCell().setColspan(4);
                     CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("",small_black_normal)));
                     
                     CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
                     CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                     CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                     CumulativeAdjustmentsTable.getDefaultCell().setColspan(4);
                     CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("",small_black_normal)));
                     
                     CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
                     CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                     CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                     CumulativeAdjustmentsTable.getDefaultCell().setColspan(4);
                     CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("",small_black_normal)));
                     
                     CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
                     CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                     CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                     CumulativeAdjustmentsTable.getDefaultCell().setColspan(4);
                     CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("",small_black_normal)));
                     
                     
                     CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                     CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                     CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                     CumulativeAdjustmentsTable.getDefaultCell().setColspan(2);
                     CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk("Total Adjustment in This Billing Period",small_black_normal)));
                     
                     CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                     CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
                     CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                     CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                     CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(nf3.format(total)+"",small_black_normal)));
                     
                     CumulativeAdjustmentsTable.getDefaultCell().setBorder(Rectangle.BOX);
                     CumulativeAdjustmentsTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
                     CumulativeAdjustmentsTable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
                     CumulativeAdjustmentsTable.getDefaultCell().setColspan(1);
                     CumulativeAdjustmentsTable.addCell(new Phrase(new Chunk(pdfFinal_Total_Currency,small_black_normal)));
                 }
            }
           
            
            
//          Adding All Cells To PDF Document - One By One ...
            if(advance_payment_flag){
			document.add(new Paragraph("              "));
			document.add(hlpl_logo_table);
			document.add(contact_addr_table);                        
            document.add(new Paragraph("              "));
            document.add(title_note_table);
            document.add(new Paragraph("              "));
            document.add(InvoiceDateInfoTable);
            document.add(InvoiceDueDateInfoTable);
            document.add(InvoiceNOInfoTable);
            //document.add(InvoiceDateInfoTable);
            document.add(BillingPeriodInfoTable);
            document.add(new Paragraph("              "));
            document.add(AdvanceAmountPaidTable);
            document.add(new Paragraph("              "));
            document.add(new Paragraph("              "));
            document.add(CumulativeAdjustmentsTable);
            }
            
            
        }
		catch(DocumentException de)
		{
			System.err.println("DocumentException in printAllPdfFileForInvoice() Method :\n"+de.getMessage());
			de.printStackTrace();
		}
		catch(IOException ioe)
		{
			System.err.println("IOException in printAllPdfFileForInvoice() Method :\n"+ioe.getMessage());
			ioe.printStackTrace();
		}
		finally
		{
			document.close();
		}
	}
	//---xx
	String fileName="",f_nm="",inv_type_pdf="";
	public String createPdfFileForInvoice()
	{
		try
		{
			HttpSession sess = request.getSession();
			invoice_pdf_path = sess.getAttribute("invoice_pdf_path").toString();
			////System.out.println("invoice_title------aj---"+invoice_title);
			String inv_title="";
			if(invoice_title.equalsIgnoreCase("ORIGINAL"))
			{
				inv_title="O";
			}
			else if(invoice_title.equalsIgnoreCase("DUPLICATE"))
			{
				inv_title="D";
			}
			else if(invoice_title.equalsIgnoreCase("TRIPLICATE"))
			{
				inv_title="T";
			}
			else if(invoice_title.equalsIgnoreCase("QUADRICATE"))
			{
				inv_title="Q";
			}
			else if(invoice_title.equalsIgnoreCase("CREDIT") || invoice_title.equalsIgnoreCase("CANCEL"))//SB20160404
			{
				inv_title="C";
			}
			
			String curr_date="";
			
			String q="select to_char(invoice_dt,'dd/mm/yyyy') from DLNG_INVOICE_MST where contract_type='"+contract_type+"' " +
			"and financial_year='"+invFinancialYear+"' and hlpl_inv_seq_no='"+hlpl_inv_seq_no+"'  AND FLAG='Y' ";
			rset=stmt.executeQuery(q);
			if(rset.next())
			{
				curr_date=rset.getString(1);
			}
			
			//Date d1=new Date(invoice_bench_date);
			//Date d2=new Date(curr_date);
			String tempD1[]=invoice_bench_date.split("/");
			String d1=tempD1[2]+tempD1[1]+tempD1[0];
			
			String tempD2[]=curr_date.split("/");
			String d2=tempD2[2]+tempD2[1]+tempD2[0];
			
			////System.out.println("INVOICE 22-----------"+invoice_pdf_path);
			////System.out.println("INVOICE 22---00--------"+invoice_date);
			
			//if(Integer.parseInt(d2)>Integer.parseInt(d1))
			//{
				/*String[] file_bunch_qtr= null;
				File lst_qtr= new File(invoice_pdf_path);
				file_bunch_qtr=lst_qtr.list();
				for ( int i=0;i<file_bunch_qtr.length;i++ )
			    {
					String file=file_bunch_qtr[i];
					String f1="INVOICE-"+invoice_date.trim().substring(0,2)+invoice_date.trim().substring(3,5)+invoice_date.trim().substring(6)+"-"+customer_abbr+"-"+customer_plant_nm+"-"+contract_type+"-"+hlpl_inv_seq_no+"-"+inv_title;
					if(file.startsWith(f1))
					{
						File n=new File(invoice_pdf_path+lst_qtr.separator+file);
						n.delete();
					}
			    }
				
				String t=""+new Timestamp(System.currentTimeMillis());
				String time_temp=t.substring(0,t.lastIndexOf(".") );
				time_temp=time_temp.replaceAll(":", "-");
				time_temp=time_temp.replaceAll(" ", "-");*/
				
				//fileName = "INVOICE-"+invoice_date.trim().substring(0,2)+invoice_date.trim().substring(3,5)+invoice_date.trim().substring(6)+"-"+customer_abbr+"-"+customer_plant_nm+"-"+contract_type+"-"+hlpl_inv_seq_no+"-"+inv_title+"-"+time_temp+".pdf";//HS20160603
				fileName = "INVOICE-"+invoice_date.trim().substring(0,2)+invoice_date.trim().substring(3,5)+invoice_date.trim().substring(6)+"-"+customer_abbr+"-"+customer_plant_nm+"-"+contract_type+"-"+hlpl_inv_seq_no+"-"+inv_title+".pdf";
				f_nm="INVOICE-"+invoice_date.trim().substring(0,2)+invoice_date.trim().substring(3,5)+invoice_date.trim().substring(6)+"-"+customer_abbr+"-"+customer_plant_nm+"-"+contract_type+"-"+hlpl_inv_seq_no;
				inv_type_pdf=inv_title;
				invoice_pdf_path = invoice_pdf_path+"//"+fileName;
			//}
			//else
			//{
				/*String[] file_bunch_qtr= null;
				File lst_qtr= new File(invoice_pdf_path);
				file_bunch_qtr=lst_qtr.list();
				for ( int i=0;i<file_bunch_qtr.length;i++ )
			    {
					String file=file_bunch_qtr[i];
					String f1="INVOICE-"+invoice_date.trim().substring(0,2)+invoice_date.trim().substring(3,5)+invoice_date.trim().substring(6)+"-"+customer_abbr+"-"+customer_plant_nm;
					if(file.startsWith(f1))
					{
						File n=new File(invoice_pdf_path+lst_qtr.separator+file);
						n.delete();
					}
			    }
				
				String t=""+new Timestamp(System.currentTimeMillis());
				String time_temp=t.substring(0,t.lastIndexOf(".") );
				time_temp=time_temp.replaceAll(":", "-");*/
				
				//fileName = "INVOICE-"+invoice_date.trim().substring(0,2)+invoice_date.trim().substring(3,5)+invoice_date.trim().substring(6)+"-"+customer_abbr+"-"+customer_plant_nm+"-"+time_temp+".pdf";//HS20160603
				/*fileName = "INVOICE-"+invoice_date.trim().substring(0,2)+invoice_date.trim().substring(3,5)+invoice_date.trim().substring(6)+"-"+customer_abbr+"-"+customer_plant_nm+"-"+inv_title+".pdf";
				f_nm= "INVOICE-"+invoice_date.trim().substring(0,2)+invoice_date.trim().substring(3,5)+invoice_date.trim().substring(6)+"-"+customer_abbr+"-"+customer_plant_nm;
				inv_type_pdf=inv_title;
				invoice_pdf_path = invoice_pdf_path+"//"+fileName;
			}*/
		}
		catch(Exception e)
		{
			//System.out.println("Exception in createPdfFileForInvoice() Method :\n"+e.getMessage());
			e.printStackTrace();
		}
		return invoice_pdf_path;
	}
	
//	public void ADJUSTMENT_DTL()
//	{
//		Vector tempYr=new Vector();
//		Vector tempYr1=new Vector();
//		Vector tempDt=new Vector();
//		
//		try
//		{
//			String query="SELECT FGSA_NO || '-' || FGSA_REV_NO || '-' || SN_NO || '-' || SN_REV_NO," +
//					"HLPL_INV_SEQ_NO,FINANCIAL_YEAR,ADV_ADJ_AMT,ADV_ADJ_CUR,TO_CHAR(INVOICE_DT,'DD/MM/YYYY') " +
//					"FROM DLNG_INVOICE_MST WHERE ADV_ADJ_FLAG='Y' AND CUSTOMER_CD='"+party_cd+"' " +
//					"ORDER BY INVOICE_DT";
//		//	//System.out.println("fetching data...."+query);
//			rset=stmt.executeQuery(query);
//			while(rset.next())
//			{
//				String tempNo=rset.getString(2);
//				if(tempNo.length()==1)
//					tempNo="000"+tempNo;
//				else if(tempNo.length()==2)
//					tempNo="00"+tempNo;
//				else if(tempNo.length()==3)
//					tempNo="0"+tempNo;
//				
//				String yr=rset.getString(3);
//				
//				invoice_unique_seq_no.add(rset.getString(1));
//				invoice_seq_no.add(tempNo);
//				tempYr.add(yr.substring(2,4)+"-"+yr.substring(7));
//				adv_adj_amt_invoice.add(rset.getString(4));
//				adv_adj_cur_invoice.add(rset.getString(5));
//				tempDt.add(rset.getString(6));
//				tempYr1.add(yr);
//			}
//			
//			NumberFormat nf=new DecimalFormat("###,###,##0.00##");
//			
//			for(int i=0;i<invoice_seq_no.size();i++)
//			{
//				query="SELECT DISTINCT(C.SEQ_NO),C.PLANT_NAME,A.ADV_ADJ_AMT,TO_CHAR(A.ADV_ADJ_DT,'DD/MM/YYYY')," +
//						"A.ADV_CUR_INR_USD,A.ADV_SEQ_NO,B.AMT,B.CUR_INR_USD,TO_CHAR(B.RECV_DT,'DD/MM/YYYY'),INV_NO,A.ADV_ADJ_SIGN " +
//						"FROM FMS7_PARTY_ADV_ADJ_DTL A,FMS7_PARTY_ADV_DTL B,FMS7_CUSTOMER_PLANT_DTL C " +
//						"WHERE INV_NO='"+invoice_unique_seq_no.elementAt(i)+"' AND FINANCIAL_YEAR='"+tempYr1.elementAt(i)+"' AND A.ADV_SEQ_NO=B.ADV_SEQ_NO " +
//						"AND A.CUSTOMER_CD=B.CUSTOMER_CD AND C.SEQ_NO=A.PLANT_SEQ_NO " +
//						"AND B.CUSTOMER_CD=C.CUSTOMER_CD AND A.CUSTOMER_CD='"+party_cd+"' " +
//						"ORDER BY C.SEQ_NO,INV_NO ";
//			//	//System.out.println("Fetching data..."+query);
//				rset=stmt.executeQuery(query);
//				while(rset.next())
//				{
//					String sign=rset.getString(11);
//					plant_name.add(rset.getString(2));
//					invoice_adj_amt1.add(nf.format(Double.parseDouble(""+rset.getString(3))));
//					invoice_adj_dt.add(rset.getString(4));
//					invoice_adj_cur1.add(rset.getString(5));
//					adv_amt.add(nf.format(Double.parseDouble(""+rset.getString(7))));
//					adv_amt_cur.add(rset.getString(8));
//					adv_rec_dt.add(rset.getString(9));
//					invoice_no1.add(invoice_seq_no.elementAt(i));
//					double bal=0;
//				//	//System.out.println("sign..."+sign+"..and"+bal);
//					if(sign.equalsIgnoreCase("1"))
//					{
//						bal=Double.parseDouble(rset.getString(7))-Double.parseDouble(rset.getString(3));
//					}
//					else if(sign.equalsIgnoreCase("2"))
//					{
//						bal=Double.parseDouble(rset.getString(7))+Double.parseDouble(rset.getString(3));
//					}
//				//	//System.out.println("sign..1."+sign+"..1and"+bal);
//					total_bal.add(nf.format(bal));
//					financial_yr.add(tempYr.elementAt(i));
//					invoice_dt_adj.add(tempDt.elementAt(i));
//				}
//			}
//		}
//		catch(Exception e)
//		{
//			//System.out.println("Exception in ..."+e.getMessage());
//			e.printStackTrace();
//		}
//	}
//	

//	public void Collection_Detail_CustomerWise()
//	{
//		NumberFormat nf=new DecimalFormat("###,###,###,###,##0.00##");
//		try
//		{
//			String query="SELECT A.CUSTOMER_CD,CUR_INR_USD,SUM(AMT),B.CUSTOMER_NAME " +
//					" FROM FMS7_PARTY_ADV_DTL A,FMS7_CUSTOMER_MST B " +
//					" WHERE TO_DATE(RECV_DT,'DD/MM/YYYY') < SYSDATE AND A.CUSTOMER_CD=B.CUSTOMER_CD " +
//					" GROUP BY A.CUSTOMER_CD,CUR_INR_USD,B.CUSTOMER_NAME ORDER BY A.CUSTOMER_CD ";
//		//	//System.out.println("Fetching...."+query);
//			rset=stmt.executeQuery(query);
//			while(rset.next())
//			{
//				advance_customer_cd.add(rset.getString(1));
//				advance_customer_cur.add(rset.getString(2));
//				advance_customer_amt.add(nf.format(Double.parseDouble(""+rset.getString(3))));
//				advance_customer_nm.add(rset.getString(4));
//			}
//			
//			if(advance_customer_cd.size()>0)
//			{
//				for(int i=0;i<advance_customer_cd.size();i++)
//				{
//					String avail_balance="";
//					String advance_customer_amt_temp=advance_customer_amt.elementAt(i).toString();
//					
//					String query_amt="select adv_adj_amt,adv_adj_sign " +
//							" from fms7_party_adv_adj_dtl where customer_cd='"+advance_customer_cd.elementAt(i)+"' " +
//							" and to_date(adv_adj_dt,'dd/mm/yyyy') <= sysdate and adv_cur_inr_usd='"+advance_customer_cur.elementAt(i)+"' ";
//				//	//System.out.println("Fetching...available balance..."+query_amt);
//					rset=stmt.executeQuery(query_amt);
//					while(rset.next())
//					{
//						avail_balance=rset.getString(1);
//						if(rset.getString(2).equalsIgnoreCase("1"))
//						{
//							advance_customer_amt_temp=""+(Double.parseDouble(""+NumberFormat.getInstance().parse(advance_customer_amt_temp))-Double.parseDouble(""+NumberFormat.getInstance().parse(avail_balance)));
//						}
//						else if(rset.getString(2).equalsIgnoreCase("2"))
//						{
//							advance_customer_amt_temp=""+(Double.parseDouble(""+NumberFormat.getInstance().parse(advance_customer_amt_temp))+Double.parseDouble(""+NumberFormat.getInstance().parse(avail_balance)));
//						}
//					}
//					advance_customer_aval_balance.add(advance_customer_amt_temp);
//				}
//			}
//		}
//		catch(Exception e)
//		{
//			//System.out.println("Exception in Fetching Advance Collection..."+e.getMessage());
//			e.printStackTrace();
//		}
//	}
//	

	public void FetchAdjustmentofInvoiceDetailsforviewinvoice2()
	{	
		try
		{ 
			String invadjrecv="";
			String invgrossamt_inr="";
			String invgrossamt_usd="";
			String invnetamtinr="";
			String invgrossadjustedinr="";
			String invgrossadjustedusd="";
			String invadjustmentamtinr="";
			String invtaxstructcd="";
			String tempinvadjustamt="";
			
			
			String invadjustsign="";
			String invtariff_flag="";
			String invtariff_inr="";
			String invtariff_total_inr="";
			String invtariff_inv_amt_inr="";
			String invdiscount_flag="";
			String invdiscount_price="";
			String invinv_amt_inr="";
			String invinv_amt_usd="";
			String invtotal_qty="";
			String Invoice_Sequence_Flag="";
			
			
			String First_gross_amt_usd="";
			String First_gross_amt_inr="";
			String adjust_gross_amt_usd="";
			String adjust_gross_amt_inr="";
			String invdiscount_price_usd="";
			String invdiscount_price_inr="";
			String rate_usd="";
			String rate_inr="";
			String adjust_amt_usd="";
			String adjust_amt_inr="";
			
			queryString = "select adv_adj_amt, adv_adj_cur, adv_adj_flag, adv_adj_recv," +
					" adv_adj_remark ," +
					" gross_amt_usd,gross_amt_inr," +
					" net_amt_inr,exchg_rate_value, tax_struct_cd, " +
					" adv_adj_sign, tariff_flag, tariff_inr, tariff_total_inr, "+
					" tariff_inv_amt_inr, discount_flag, discount_price, "+
					" inv_amt_usd, inv_amt_inr, total_qty"+
					" FROM DLNG_INVOICE_MST WHERE " +
					" financial_year='"+invFinancialYear+"' AND " +
					" hlpl_inv_seq_no="+invHlplinvseqno+" AND " +
					" contract_type='"+invContractType+"'  AND FLAG='Y' ";
		//		//System.out.println("Invoice & Due Dates Fetch Query = "+queryString);
					rset = stmt.executeQuery(queryString);
					if(rset.next())
					{
						invadjustmentamt=rset.getString(1)==null?"0":rset.getString(1);
						invadjustcur=rset.getString(2)==null?"":rset.getString(2);
						invadjflag=rset.getString(3)==null?"N":rset.getString(3);
						invadjrecv=rset.getString(4)==null?"":rset.getString(4);
						invadjremark=rset.getString(5)==null?"":rset.getString(5);
						invgrossamt_usd=rset.getString(6)==null?"0":rset.getString(6);
						invgrossamt_inr=rset.getString(7)==null?"0":rset.getString(7);
						invnetamtinr=rset.getString(8)==null?"0":rset.getString(8);
						invexchngrt=rset.getString(9)==null?"0":rset.getString(9);
						invtaxstructcd=rset.getString(10)==null?"0":rset.getString(10);
						invadjustsign=rset.getString(11)==null?"0":rset.getString(11);
						invtariff_flag=rset.getString(12)==null?"N":rset.getString(12);
						invtariff_inr=rset.getString(13)==null?"0":rset.getString(13);
						invtariff_total_inr=rset.getString(14)==null?"0":rset.getString(14);
						invtariff_inv_amt_inr=rset.getString(15)==null?"0":rset.getString(15);
						invdiscount_flag=rset.getString(16)==null?"N":rset.getString(16);
						invdiscount_price=rset.getString(17)==null?"0":rset.getString(17);
						invinv_amt_usd=rset.getString(18)==null?"0":rset.getString(18);
						invinv_amt_inr=rset.getString(19)==null?"0":rset.getString(19);
						invtotal_qty=rset.getString(20)==null?"0":rset.getString(20);
						
				//	}	
						
					
					/*
					if(invtariff_flag.equalsIgnoreCase("Y"))
					{
						if(invadjflag.equalsIgnoreCase("Y"))
						{
							
							if(invdiscount_flag.equalsIgnoreCase("Y"))
							{
								//tariff+adjustment+discount
								
								
								
								
								
								
								
								Invoice_Sequence_Flag="1";
								
							}
							else
							{
								//tariff+adjustment
								
								
								if(invadjustcur.equalsIgnoreCase("U"))
								{
									adjust_amt_inr=""+(Double.parseDouble(invadjustmentamt)*Double.parseDouble(invexchngrt));
									adjust_amt_usd=invadjustmentamt;	
									
									if(invadjustsign.equalsIgnoreCase("1"))
									{
										String adjusted_usd=""+(Double.parseDouble(invinv_amt_usd)-Double.parseDouble(adjust_amt_usd));
										String adjusted_inr=""+(Double.parseDouble(adjusted_usd)*Double.parseDouble(invexchngrt));
										adjust_gross_amt_inr=""+(Double.parseDouble(adjusted_inr)+(Double.parseDouble(invtariff_inr)*Double.parseDouble(invtotal_qty)));
									}
									else if(invadjustsign.equalsIgnoreCase("2"))
									{
										String adjusted_usd=""+(Double.parseDouble(invinv_amt_usd)+Double.parseDouble(adjust_amt_usd));
										String adjusted_inr=""+(Double.parseDouble(adjusted_usd)*Double.parseDouble(invexchngrt));
										adjust_gross_amt_inr=""+(Double.parseDouble(adjusted_inr)+(Double.parseDouble(invtariff_inr)*Double.parseDouble(invtotal_qty)));
									}
								
								
								}
								else if(invadjustcur.equalsIgnoreCase("I"))
								{
									adjust_amt_inr=invadjustmentamt;
									adjust_amt_usd=""+(Double.parseDouble(invadjustmentamt)/Double.parseDouble(invexchngrt));
									if(invadjustsign.equalsIgnoreCase("1"))
									{
										String adjusted_inr=""+(Double.parseDouble(invinv_amt_inr)-Double.parseDouble(adjust_amt_inr));
										adjust_gross_amt_inr=""+(Double.parseDouble(adjusted_inr));
									}
									else if(invadjustsign.equalsIgnoreCase("2"))
									{
										String adjusted_inr=""+(Double.parseDouble(invinv_amt_inr)+Double.parseDouble(adjust_amt_inr));
										adjust_gross_amt_inr=""+(Double.parseDouble(adjusted_inr));
									}
								
								
								}
								
								
								
								
								
								rate_inr=invtariff_total_inr;
								First_gross_amt_inr=invtariff_inv_amt_inr;
								Invoice_Sequence_Flag="2";
							}
							
						}
						else if(invadjflag.equalsIgnoreCase("N"))
						{
							if(invdiscount_flag.equalsIgnoreCase("Y"))
							{
								//tariff+discount
								invdiscount_price_usd=invdiscount_price;
								invdiscount_price_inr=""+(Double.parseDouble(invdiscount_price)*Double.parseDouble(invexchngrt));
								
								rate_inr=invtariff_total_inr;
								First_gross_amt_inr=invgrossamt_inr;
								Invoice_Sequence_Flag="3";
							}
							else
							{
								//only tariff
								invtariff_inr=invtariff_inr;
								invtariff_total_inr=invtariff_total_inr;
								invtariff_inv_amt_inr=invtariff_inv_amt_inr;
								
								rate_inr=invtariff_total_inr;
								First_gross_amt_inr=invtariff_inv_amt_inr;
								Invoice_Sequence_Flag="4";
								
							}
							
						}
						
					}
					else
					{
						if(invadjflag.equalsIgnoreCase("Y"))
						{
							
							if(invdiscount_flag.equalsIgnoreCase("Y"))
							{
								//adjustment+discount
								Invoice_Sequence_Flag="5";
							}
							else
							{
								//only adjustment
								Invoice_Sequence_Flag="6";
							}
							
						}
						else if(invadjflag.equalsIgnoreCase("N"))
						{
							if(invdiscount_flag.equalsIgnoreCase("Y"))
							{
								//only discount
								Invoice_Sequence_Flag="7";
							}
							else
							{
								//NONE.....
								Invoice_Sequence_Flag="8";
							}
							
						}
					}
					
					
					
					*/
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
						
					tempinvadjustamt=invadjustmentamt;
						
						if(invadjustcur.equalsIgnoreCase("U"))
						{
							invadjustmentamt=invadjustmentamt;
						}
						else
						{
							invadjustmentamt=""+(Double.parseDouble(invadjustmentamt)/Double.parseDouble(invexchngrt));
						}
						
						invgrossamt=""+(Double.parseDouble(invgrossamt_usd)-Double.parseDouble(invadjustmentamt));
						invgrossamt=nf3.format(Double.parseDouble(invgrossamt));
				//		//System.out.println("AFTER----222-33-----------");
					}	
					if(invadjustcur.equalsIgnoreCase("U"))
					{
						invadjustmentamtinr=""+(Double.parseDouble(tempinvadjustamt)*Double.parseDouble(invexchngrt));
					}
					else
					{
						invadjustmentamtinr=tempinvadjustamt;
					}
					invgrossadjustedusd=""+(Double.parseDouble(invgrossamt_usd)-Double.parseDouble(invadjustmentamt));
					invgrossadjustedinr=""+(Double.parseDouble(invgrossamt_inr)-Double.parseDouble(invadjustmentamtinr));
					
						
						
					customer_Invoice_Gross_Amt_INR=invgrossamt_inr;
					// calculate tax details for adjusted gross
					double tax_amt = 0;
					String tax_cd = "0";
					String tax_factor = "0.00";
					
					queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
								  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+invtaxstructcd+" AND " +
								  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+invtaxstructcd+" AND " +
								  "B.app_date<=TO_DATE('"+invbill_period_end_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code";
			//		//System.out.println("Query For Finding Out Correct Tax Structure Details = "+queryString);
					rset=stmt.executeQuery(queryString);
					while(rset.next())
					{
						tax_cd = rset.getString(1);
						tax_factor = rset.getString(2);
						
						if(rset.getString(3).equals("1"))
						{
							tax_amt = (Double.parseDouble(customer_Invoice_Gross_Amt_INR)*Double.parseDouble(rset.getString(2)))/100;
						}
						else if(rset.getString(3).equals("2"))
						{
							queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
										  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+invtaxstructcd+" AND " +
										  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+invtaxstructcd+" AND " +
										  "B.app_date<=TO_DATE('"+invbill_period_end_dt+"','DD/MM/YYYY')) AND A.tax_code="+rset.getString(4)+"";
				//			//System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
					 		rset1=stmt1.executeQuery(queryString1);
					 		if(rset1.next())
					 		{
						 			if(rset1.getString(3).equals("1"))
									{
										tax_amt = (Double.parseDouble(customer_Invoice_Gross_Amt_INR)*Double.parseDouble(rset1.getString(2)))/100;
									}
									
						 			tax_amt = (tax_amt*Double.parseDouble(rset.getString(2)))/100;
					 		}
					 		else
					 		{
					 			tax_amt = 0;
					 		}
						}
						else
						{
							tax_amt = 0;
						}
						
						customer_Invoice_Tax_Code.add(tax_cd);
						customer_Invoice_Tax_Rate.add(nf.format(Double.parseDouble(tax_factor)));
						customer_Invoice_Tax_Amt.add(nf3.format(tax_amt));
					}
								
					customer_Invoice_Gross_Amt_INR = nf3.format(Double.parseDouble(customer_Invoice_Gross_Amt_INR));
					
					
					invadjustmentamt=nf3.format(Double.parseDouble(invadjustmentamt));
		}
		catch(Exception e)
		{
			//System.out.println("In databean advance pament");
			e.printStackTrace();
		}
	}
	

//	public void fetchinvadjustmentdetails()
//	{	
//		try
//		{ 
//			NumberFormat nf=new DecimalFormat("#0.00");
//			
//			cust_cd.clear();
//			cust_nm.clear();
//			cust_amt.clear();
//			cust_cur.clear();
//			cust_recv_dt.clear();
//			cust_valid_dt.clear();
//			cust_bal.clear();
//			
//			
//			
//			/*queryString="SELECT B.CUSTOMER_CD,A.CUSTOMER_ABBR, b.amt, b.cur_inr_usd,to_char(b.recv_dt,'dd/mm/yyyy'),to_char(b.validity_dt,'dd/mm/yyyy'),adv_seq_no " +
//					" FROM FMS7_CUSTOMER_MST A, fms7_party_adv_dtl B WHERE b.customer_cd='"+party_cd+"' " +
//					" and a.customer_cd= b.customer_cd order by b.recv_dt desc";*/
//			
//			queryString="SELECT B.CUSTOMER_CD,A.CUSTOMER_ABBR, b.amt, b.cur_inr_usd,to_char(b.recv_dt,'dd/mm/yyyy'),to_char(b.validity_dt,'dd/mm/yyyy'),adv_seq_no " +
//			" FROM FMS7_CUSTOMER_MST A, fms7_party_adv_dtl B WHERE b.customer_cd='"+party_cd+"' " +
//			" and a.customer_cd= b.customer_cd and b.recv_dt < to_date('"+invoicedt+"','dd/mm/yyyy') " +
//			" and (b.validity_dt > to_date('"+invoicedt+"','dd/mm/yyyy') or b.validity_dt is null)  " +
//			"order by b.recv_dt desc";
//			
//	//		//System.out.println("Fetching Advance details 11111111= "+queryString);
//			rset = stmt.executeQuery(queryString);				
//			while(rset.next())
//			{
//				cust_cd.add(rset.getString(1)==null?"":rset.getString(1));	
//				cust_nm.add(rset.getString(2)==null?"":rset.getString(2));
//				String temp1=rset.getString(3)==null?"":rset.getString(3);
//				temp1=nf.format(Double.parseDouble(temp1));
//				cust_amt.add(temp1);
//				//cust_amt.add(rset.getString(3)==null?"":rset.getString(3));
//				cust_cur.add(rset.getString(4)==null?"":rset.getString(4));
//				cust_recv_dt.add(rset.getString(5)==null?"":rset.getString(5));
//				cust_valid_dt.add(rset.getString(6)==null?"":rset.getString(6));
//				cust_seq_no.add(rset.getString(7)==null?"":rset.getString(7));
//				
//			}
//			
//			Vector cust_cut_bal=new Vector();
//			
//			for(int i=0;i<cust_cd.size();i++)
//			{
//				double tempbal=0;
//				
//				queryString1="select adv_adj_amt,adv_adj_sign from fms7_party_adv_adj_dtl where" +
//						" customer_cd='"+cust_cd.elementAt(i)+"' and adv_seq_no='"+cust_seq_no.elementAt(i)+"'";
//				rset1=stmt1.executeQuery(queryString1);
//				while(rset1.next())
//				{
//					
//					if(rset1.getString(2).equalsIgnoreCase("1"))
//					{
//						tempbal-=java.lang.Double.parseDouble(rset1.getString(1));
//					}
//					else if(rset1.getString(2).equalsIgnoreCase("2"))
//					{
//						tempbal+=java.lang.Double.parseDouble(rset1.getString(1));
//					}
//					
//				}
//				cust_cut_bal.add(""+tempbal);
//				
//		//		//System.out.println("tempbal...."+tempbal);
//		//		//System.out.println("......"+cust_amt.elementAt(i));
//		//		//System.out.println("......"+cust_cut_bal.elementAt(i));
//				
//				double temp1 = Double.parseDouble(cust_amt.elementAt(i).toString())+tempbal;
//				String temp2=nf.format(temp1);
//				cust_bal.add(temp2);
//			}
//			
//		//	//System.out.println("CUST CD"+cust_cd);
//		//	//System.out.println("CUST AMT"+cust_amt);
//			
//		}
//		catch(Exception e)
//		{
//			//System.out.println("In databean advance pament");
//			e.printStackTrace();
//		}
//	}
//	
	
//	public void fetchadvancepaymentdetails()
//	{	
//		try
//		{ 
//			Vector cust_cut_bal=new Vector();
//			
//			cust_cd.clear();
//			cust_nm.clear();
//			cust_amt.clear();
//			cust_cur.clear();
//			cust_recv_dt.clear();
//			cust_valid_dt.clear();
//			cust_seq_no1.clear();
//			cust_bal1.clear();
//			cust_adjust_amt.clear();
//			cust_adjust_sign.clear();
//			
//			
//			queryString="SELECT B.CUSTOMER_CD,A.CUSTOMER_ABBR, b.amt, b.cur_inr_usd,to_char(b.recv_dt,'dd/mm/yyyy'),to_char(b.validity_dt,'dd/mm/yyyy'), adv_seq_no " +
//					" FROM FMS7_CUSTOMER_MST A, fms7_party_adv_dtl B WHERE b.customer_cd='"+party_cd+"' " +
//					" and a.customer_cd= b.customer_cd order by b.recv_dt desc";
//			
//		//	//System.out.println("Fetching Advance details = "+queryString);
//			rset = stmt.executeQuery(queryString);				
//			while(rset.next())
//			{
//				cust_cd.add(rset.getString(1)==null?"":rset.getString(1));	
//				cust_nm.add(rset.getString(2)==null?"":rset.getString(2));
//				cust_amt.add(rset.getString(3)==null?"":rset.getString(3));
//				cust_cur.add(rset.getString(4)==null?"":rset.getString(4));
//				cust_recv_dt.add(rset.getString(5)==null?"":rset.getString(5));
//				cust_valid_dt.add(rset.getString(6)==null?"":rset.getString(6));
//				cust_seq_no1.add(rset.getString(7)==null?"":rset.getString(7));
//				
//			}
//		//	//System.out.println("CUST CD"+cust_cd);
//		//	//System.out.println("CUST AMT"+cust_amt);
//			
//			
//			for(int i=0;i<cust_cd.size();i++)
//			{
//				double tempbal=0;
//				
//				queryString1="select adv_adj_amt,adv_adj_sign,adv_seq_no from fms7_party_adv_adj_dtl where" +
//						" customer_cd='"+cust_cd.elementAt(i)+"' and adv_seq_no='"+cust_seq_no1.elementAt(i)+"'";
//				rset1=stmt1.executeQuery(queryString1);
//				while(rset1.next())
//				{
//					cust_adjust_amt.add(rset1.getString(1));
//					cust_adjust_sign.add(rset1.getString(2));
//					
//					if(rset1.getString(2).equalsIgnoreCase("1"))
//					{
//						tempbal-=java.lang.Double.parseDouble(rset1.getString(1));
//					}
//					else if(rset1.getString(2).equalsIgnoreCase("2"))
//					{
//						tempbal+=java.lang.Double.parseDouble(rset1.getString(1));
//					}
//					
//				}
//				cust_cut_bal.add(""+tempbal);
//
//				double temp1 = Double.parseDouble(cust_amt.elementAt(i).toString())+tempbal;
//				String temp2=nf.format(temp1);
//				cust_bal1.add(temp2);
//			}
//		}
//		catch(Exception e)
//		{
//			//System.out.println("In databean advance pament");
//			e.printStackTrace();
//		}
//	}
//	
	
	public void invoice_adjustment_attachment_dtls1()
	{
		double USD=0;
		double INR=0;
		
		NumberFormat nf=new DecimalFormat("##,###,###,###,###0.00##");
		try
		{
			String query="SELECT AMT,CUR_INR_USD FROM FMS7_PARTY_ADV_DTL " +
					"WHERE CUSTOMER_CD='"+CustomerCd+"' AND TO_DATE(RECV_DT,'DD/MM/YYYY') <= TO_DATE('"+DueDate+"','dd/mm/yyyy') ";
		//	//System.out.println("Fetching advance adjusted..."+query);
			rset=stmt.executeQuery(query);
			while(rset.next())
			{
				if(rset.getString(2).toString().equalsIgnoreCase("U"))
				{
					flagUSD=true;
					USD=USD+Double.parseDouble(rset.getString(1));
				}
				else if(rset.getString(2).toString().equalsIgnoreCase("I"))
				{
					flagINR=true;
					INR=INR+Double.parseDouble(rset.getString(1));
				}
			}
			Total_Collection_INR=nf.format(Double.parseDouble(""+INR));
			Total_Collection_USD=nf.format(Double.parseDouble(""+USD));
		
			query="SELECT ADV_ADJ_AMT,NVL(ADV_ADJ_CUR,'-'),TO_CHAR(INVOICE_DT,'DD/MM/YYYY'),HLPL_INV_SEQ_NO,FINANCIAL_YEAR " +
					"FROM DLNG_INVOICE_MST WHERE CUSTOMER_CD='"+CustomerCd+"' AND SN_NO='"+SnNo+"' "+ //AND SN_REV_NO='"+SnRevNo+"' " +
					"AND FGSA_NO='"+FgsaNo+"' AND FGSA_REV_NO='"+FgsaRevNo+"' AND CONTRACT_TYPE='"+ContractType+"' AND PLANT_SEQ_NO='"+CustomerPlantSeqNo+"'  AND FLAG='Y' ";
			////System.out.println("Fetching adjusted amount..."+query);
			rset=stmt.executeQuery(query);
			while(rset.next())
			{
				String yr=rset.getString(5);
				String no=rset.getString(4).toString();
				String amt=rset.getString(1)==null?"0":rset.getString(1);
				if(no.length()==1)
					no="000"+no;
				else if(no.length()==2)
					no="00"+no;
				else if(no.length()==3)
					no="0"+no;
				else
					no=no;
				Invoice_adj_amt.add(""+nf.format(Double.parseDouble(amt)));
				Invoice_adj_cur.add(rset.getString(2)==null?"-":rset.getString(2));
				Invoice_dt.add(rset.getString(3));
				Invoice_no.add(no+"/"+yr.substring(2,4)+"-"+yr.substring(7));
				if(rset.getString(2).toString().equalsIgnoreCase("U"))
				{
					USD=USD-Double.parseDouble(""+rset.getString(1));
					Invoice_Adj_bal.add(""+nf.format(Double.parseDouble(""+USD)));
				}
				else if(rset.getString(2).toString().equalsIgnoreCase("I"))
				{
					INR=INR-Double.parseDouble(""+rset.getString(1));
					Invoice_Adj_bal.add(""+nf.format(Double.parseDouble(""+INR)));
				}
				else
				{	
					Invoice_Adj_bal.add("-");
				}
			}
		}
		catch(Exception e)
		{
			//System.out.println("Exception in Fetching Data..."+e.getMessage());
			e.printStackTrace();
		}
	}
	
	public void fetchtaxstructuredetails()
	{	
		try
		{ 
			customer_Invoice_Tax_Amt.clear();
			customer_Invoice_Tax_Rate.clear();
			customer_Invoice_Tax_Code.clear();
			customer_Invoice_Tax_Abbr.clear();
			customer_Invoice_Tax_Name.clear();
			
			
			if(contract_type.equalsIgnoreCase("S") || contract_type.equalsIgnoreCase("L"))
			{
				queryString = "SELECT A.TAX_STRUCT_DTL,A.TAX_STRUCT_CD FROM FMS7_CUSTOMER_TAX_STRUCT_DTL A WHERE " +
							  "A.customer_cd="+customer_cd_tax+" AND " +
							  "A.plant_seq_no="+customer_plant_seq_no+" AND " +
					 		  "A.tax_struct_dt=(SELECT MAX(B.tax_struct_dt) FROM FMS7_CUSTOMER_TAX_STRUCT_DTL B WHERE " +
					 		  "A.customer_cd=B.customer_cd AND A.plant_seq_no=B.plant_seq_no AND " +
					 		  "B.tax_struct_dt<=TO_DATE('"+bill_period_end_date+"','DD/MM/YYYY'))";
		//		//System.out.println("TAX-------------"+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					tax_Structure_Dtl = rset.getString(1)==null?"":rset.getString(1);
					tax_struct_cd = rset.getString(2)==null?"0":rset.getString(2);
				}
				else
				{
					tax_Structure_Dtl = "";
					tax_struct_cd = "0";
				}
			}
			else if(contract_type.equalsIgnoreCase("R") || contract_type.equalsIgnoreCase("T") || contract_type.equalsIgnoreCase("C"))
			{
				queryString = "SELECT A.TAX_STRUCT_DTL,A.TAX_STRUCT_CD FROM FMS7_CUSTOMER_SERVICE_TAX_DTL A WHERE " +
							  "A.customer_cd="+customer_cd_tax+" AND " +
							  "A.plant_seq_no="+customer_plant_seq_no+" AND " +
					 		  "A.tax_struct_dt=(SELECT MAX(B.tax_struct_dt) FROM FMS7_CUSTOMER_SERVICE_TAX_DTL B WHERE " +
					 		  "A.customer_cd=B.customer_cd AND A.plant_seq_no=B.plant_seq_no AND " +
					 		  "B.tax_struct_dt<=TO_DATE('"+bill_period_end_date+"','DD/MM/YYYY'))";
				
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					tax_Structure_Dtl = rset.getString(1)==null?"":rset.getString(1);
					tax_struct_cd = rset.getString(2)==null?"0":rset.getString(2);
				}
				else
				{
					tax_Structure_Dtl = "";
					tax_struct_cd = "0";
				}
			}
			else
			{
				tax_Structure_Dtl = "";
				tax_struct_cd = "0";
			}
			
			if(tax_Structure_Dtl.contains("GST")) {
				date_flag = true;
			}
			
			double total_tax_amt = 0;
			double tax_amt = 0;
			String tax_cd = "0";
			String tax_factor = "0.00";
	//		//System.out.println("CUSTOMER INVOICE---------------"+customer_Invoice_Gross_Amt_INR);
			
			queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
						  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_struct_cd+" AND " +
						  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_struct_cd+" AND " +
						  "B.app_date<=TO_DATE('"+bill_period_end_date+"','DD/MM/YYYY')) ORDER BY A.tax_code";
	//		//System.out.println("Query For Finding Out Correct Tax Structure Details = "+queryString);
			rset=stmt.executeQuery(queryString);
			while(rset.next())
			{
				tax_cd = rset.getString(1);
				tax_factor = rset.getString(2);
				
				if(rset.getString(3).equals("1"))
				{
					tax_amt = (Double.parseDouble(""+NumberFormat.getInstance().parse(customer_Invoice_Gross_Amt_INR))*Double.parseDouble(rset.getString(2)))/100;
				}
				else if(rset.getString(3).equals("2"))
				{
					queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
								  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+tax_struct_cd+" AND " +
								  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+tax_struct_cd+" AND " +
								  "B.app_date<=TO_DATE('"+bill_period_end_date+"','DD/MM/YYYY')) AND A.tax_code="+rset.getString(4)+"";
			//		//System.out.println("Query For Finding Out Tax Which Is Dependent On Other Tax Value = "+queryString1);
					rset1=stmt1.executeQuery(queryString1);
					if(rset1.next())
					{
				 			if(rset1.getString(3).equals("1"))
							{
								tax_amt = (Double.parseDouble(customer_Invoice_Gross_Amt_INR)*Double.parseDouble(rset1.getString(2)))/100;
							}
							
				 			tax_amt = (tax_amt*Double.parseDouble(rset.getString(2)))/100;
					}
					else
					{
						tax_amt = 0;
					}
				}
				else
				{
					tax_amt = 0;
				}
				
				customer_Invoice_Tax_Code.add(tax_cd);
				customer_Invoice_Tax_Rate.add(nf.format(Double.parseDouble(tax_factor)));
				if(date_flag && contract_type.equals("C")) {
					customer_Invoice_Tax_Amt.add(Math.round(tax_amt));
					total_tax_amt += Math.round(tax_amt);
				} else {
					customer_Invoice_Tax_Amt.add(nf3.format(tax_amt));
					total_tax_amt += Double.parseDouble(nf.format(tax_amt));
				}
			}
			System.out.println("customer_Invoice_Tax_Amt---------------------"+customer_Invoice_Tax_Amt+"=="+date_flag);
			if(!customer_Invoice_Gross_Amt_INR.equalsIgnoreCase(""))
			{
				if(date_flag && contract_type.equals("C")) {
					customer_Invoice_Net_Amt_INR = ""+Math.round(total_tax_amt+Double.parseDouble(""+NumberFormat.getInstance().parse(customer_Invoice_Gross_Amt_INR)));
				} else {
					customer_Invoice_Net_Amt_INR = nf3.format(total_tax_amt+Double.parseDouble(""+NumberFormat.getInstance().parse(customer_Invoice_Gross_Amt_INR)));
				}
			}
			else
			{
				customer_Invoice_Net_Amt_INR="";
			}
			for(int i=0; i<customer_Invoice_Tax_Code.size(); i++)
			{
				queryString = "SELECT sht_nm,tax_name FROM FMS7_TAX_MST WHERE " +
							  "tax_code="+customer_Invoice_Tax_Code.elementAt(i)+"";
		//		//System.out.println("Query For Fetching Tax Name = "+queryString);
				rset = stmt.executeQuery(queryString);
				if(rset.next())
				{
					String tax_abbr = rset.getString(1).trim()==null?"":rset.getString(1).trim();
					String tax_nm = rset.getString(2).trim()==null?"":rset.getString(2).trim();
					customer_Invoice_Tax_Abbr.add(tax_abbr);
					customer_Invoice_Tax_Name.add(tax_nm);
				}
				else
				{
					customer_Invoice_Tax_Abbr.add("");
					customer_Invoice_Tax_Name.add("");
				}
			}
			
		}
		catch(Exception e)
		{
			//System.out.println("In databean advance pament");
			e.printStackTrace();
		}
	}
	
	public void fetchadvancepaymentdetails1()
	{	
		try
		{ 
			cust_cd.clear();
			cust_nm.clear();
			cust_amt.clear();
			cust_cur.clear();
			cust_recv_dt.clear();
			cust_valid_dt.clear();
			
			queryString="SELECT B.CUSTOMER_CD,A.CUSTOMER_ABBR, b.amt, b.cur_inr_usd,to_char(b.recv_dt,'dd/mm/yyyy'),to_char(b.validity_dt,'dd/mm/yyyy') " +
					" FROM FMS7_CUSTOMER_MST A, fms7_party_adv_dtl B WHERE b.customer_cd='"+party_cd+"' " +
					" and a.customer_cd= b.customer_cd order by b.recv_dt desc";
			
		//	//System.out.println("Fetching Advance details = "+queryString);
			rset = stmt.executeQuery(queryString);				
			while(rset.next())
			{
				cust_cd.add(rset.getString(1)==null?"":rset.getString(1));	
				cust_nm.add(rset.getString(2)==null?"":rset.getString(2));
				cust_amt.add(rset.getString(3)==null?"":rset.getString(3));
				cust_cur.add(rset.getString(4)==null?"":rset.getString(4));
				cust_recv_dt.add(rset.getString(5)==null?"":rset.getString(5));
				cust_valid_dt.add(rset.getString(6)==null?"":rset.getString(6));
				
			}
	//		//System.out.println("CUST CD"+cust_cd);
	//		//System.out.println("CUST AMT"+cust_amt);
			
		}
		catch(Exception e)
		{
			//System.out.println("In databean advance pament");
			e.printStackTrace();
		}
	}

	public void fetch_customer_details()
	{	
		try
		{ 
			queryString = "SELECT CUSTOMER_CD,CUSTOMER_NAME,CUSTOMER_ABBR FROM FMS7_CUSTOMER_MST ORDER BY CUSTOMER_CD";
		//	//System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
			rset = stmt.executeQuery(queryString);				
			while(rset.next())
			{
				Customer_cd.add(rset.getString(1)==null?"":rset.getString(1));	
				Customer_nm.add(rset.getString(3)==null?"":rset.getString(3));
			}
			
		}
		catch(Exception e)
		{
			//System.out.println("In databean advance pament");
			e.printStackTrace();
		}
	}
	
	public void fetch_customer_details_WITH_ACCESS()
	{	
		try
		{ 
			queryString = "SELECT A.CUSTOMER_CD,CUSTOMER_NAME,CUSTOMER_ABBR FROM "
					+ "FMS7_CUSTOMER_MST A,SEC_EMP_CUSTOMER_ALLOC_MST B WHERE A.CUSTOMER_CD=B.CUSTOMER_CD "
					+ "AND B.EMP_CD='"+Emp_cd+"' ORDER BY A.CUSTOMER_CD";
		//	//System.out.println("FMS7_CUSTOMER_MST Fetch Query = "+queryString);
			rset = stmt.executeQuery(queryString);				
			while(rset.next())
			{
				Customer_cd.add(rset.getString(1)==null?"":rset.getString(1));	
				Customer_nm.add(rset.getString(3)==null?"":rset.getString(3));
			}
			
		}
		catch(Exception e)
		{
			//System.out.println("In databean advance pament");
			e.printStackTrace();
		}
	}
	/////////////SB20160518: New Fn to accomodate all Advances///////////////
	public void AllAdjInvDtl()
	{	
		try
		{   //System.out.println("STEP-1: GET All Adjustment DETAILS: ");
			String invadjrecv="";
			String invgrossamt_inr="";
			String invgrossamt_usd="";
			String invnetamtinr="";
			String invgrossadjustedinr="";
			String invgrossadjustedusd="";
			String invadjustmentamtinr="";
			String invtaxstructcd="";
			String tempinvadjustamt="";
			
			
			String invadjustsign="";
			
			String invtariff_inr="";
			
			String invtariff_inv_amt_inr="";
			
			String invinv_amt_inr="";
			String invinv_amt_usd="";
			String invtotal_qty="";
			String Invoice_Sequence_Flag="";
			
			
			String First_gross_amt_usd="";
			String First_gross_amt_inr="";
			//String Final_first_gross_amt="0";
			
			
			String invdiscount_price_usd="";
			String invdiscount_price_inr="";
			String rate_usd="";
			String rate_inr="";
			String adjust_amt_usd="";
			String adjust_amt_inr="";
			
			String basic_amt_usd="0";
			String basic_amt_inr="0";
			
			String raw_amt_usd="0";
			String raw_amt_inr="0";
			
			String invsaleprice="";
			String invinvoicedt="";
			String invadvinvno="";
			String invadvinvdt="";
			
			int SrNo=1;
			String Net_Inv_Amt="";
			String Sale_Price="";
			String Total_Qty="";
			String Inv_Amt_INR="";
			String Inv_Amt_USD="";
			
			queryString = "select gross_amt_usd,gross_amt_inr," +
			" net_amt_inr,exchg_rate_value, tax_struct_cd, " +
			" total_qty, sale_price,to_char(invoice_dt,'dd/mm/yyyy')" +
			" ,ADV_INV_NO,TO_CHAR(ADV_INV_DT,'DD/MM/YYYY') "+//ADDED FOR ADVANCE INV NO
			" ,INV_AMT_INR,INV_AMT_USD  " +
			" FROM DLNG_INVOICE_MST WHERE " +
			" financial_year='"+invFinancialYear+"' AND " +
			" hlpl_inv_seq_no='"+invHlplinvseqno+"' AND " +
			" contract_type='"+invContractType+"'  AND FLAG='Y' ";
			////System.out.println("STEP-2A:DLNG_INVOICE_MST: "+queryString);
		//	//System.out.println("Invoice Details Fetch Query = "+queryString);
			rset = stmt.executeQuery(queryString);
			if(rset.next())
			{
				invgrossamt_usd=rset.getString(1)==null?"0":rset.getString(1);
				invgrossamt_inr=rset.getString(2)==null?"0":rset.getString(2);
				Net_Inv_Amt=rset.getString(3)==null?"0":rset.getString(3);
				invexchngrt=rset.getString(4)==null?"0":rset.getString(4);
				invtaxstructcd=rset.getString(5)==null?"0":rset.getString(5);
				Total_Qty=rset.getString(6)==null?"0":rset.getString(6);
				Sale_Price=rset.getString(7)==null?"0":rset.getString(7);
				invinvoicedt=rset.getString(8)==null?"":rset.getString(8);
				invadvinvno=rset.getString(9)==null?"":rset.getString(9);
				invadvinvdt=rset.getString(10)==null?"":rset.getString(10);
				raw_amt_inr=rset.getString(11)==null?"0":rset.getString(11);
				raw_amt_usd=rset.getString(12)==null?"0":rset.getString(12);
			}
			if(invContractType.trim().equalsIgnoreCase("R") || invContractType.trim().equalsIgnoreCase("T") || invContractType.trim().equalsIgnoreCase("C")) //ADDED FOR LTCORA AND CN
			{
				//////////		Gas Regasified ////////
				VQty.add(nf.format(Double.parseDouble(""+Total_Qty)));
				VSr_No.add(SrNo++);
				VPrice_Cd.add("0");	//Code for Gross Amt (Rupees)
				VAmount.add("");
				VCurrency_Cd.add("0");
					VCurrency.add("");
				VRate.add("");
				VTotal_Tariff.add("0");
				VInv_Amt_INR.add(raw_amt_inr);
				VInv_Amt_USD.add(raw_amt_usd);
				VRec_Flag.add("Y");
				VItem_Desc_default.add("00");
				VFlag.add("Att1");
				VOperation.add("1");
					VOperation_Sign.add("+");
				VBasic_Inv_Amt_INR.add(raw_amt_inr);
				VBasic_Inv_Amt_USD.add(raw_amt_usd);
				VItem_Desc.add("Natural Gas (Regasified)");
				////System.out.println("1. LINE_NO: "+SrNo);
				//ItemSrNo2RateTariff = "LTCORA Tarriff(USD/mmbtu)";
				//////////		LTCORA Tariff (USD/mmbtu)////////
				VQty.add("");
				VSr_No.add(SrNo++);
				VPrice_Cd.add("0");	//Code for Gross Amt (Rupees)
				VAmount.add("");
				VCurrency_Cd.add("2");
					VCurrency.add("USD");
				VRate.add((nf2.format(Double.parseDouble(""+Sale_Price))));
				VTotal_Tariff.add("0");
				VInv_Amt_INR.add(raw_amt_inr);
				VInv_Amt_USD.add(raw_amt_usd);
				VRec_Flag.add("Y");
				VItem_Desc_default.add("00");
				VFlag.add("");
				VOperation.add("1");
					VOperation_Sign.add("+");
				VBasic_Inv_Amt_INR.add(raw_amt_inr);
				VBasic_Inv_Amt_USD.add(raw_amt_usd);
				VItem_Desc.add("LTCORA Tariff (USD/mmbtu)");
			//	//System.out.println("2. LINE_NO: "+SrNo);
//////////		Gross Amt(USD)////////
				Inv_Amt_USD = raw_amt_usd;
				Inv_Amt_INR = raw_amt_inr;
				
			}
			else
			{
				VQty.add(nf.format(Double.parseDouble(""+Total_Qty)));
				VSr_No.add(SrNo++);
				VPrice_Cd.add("0");	//Code for Gross Amt (Rupees)
				VAmount.add((nf.format(Double.parseDouble(""+invgrossamt_usd))));
				VCurrency_Cd.add("2");
					VCurrency.add("USD");
				VRate.add((nf2.format(Double.parseDouble(""+Sale_Price))));
				VTotal_Tariff.add("0");
				VInv_Amt_INR.add(raw_amt_inr);
				VInv_Amt_USD.add(raw_amt_usd);
				VRec_Flag.add("Y");
				VItem_Desc_default.add("00");
				VFlag.add("Att1");
				VOperation.add("1");
					VOperation_Sign.add("+");
				VBasic_Inv_Amt_INR.add(raw_amt_inr);
				VBasic_Inv_Amt_USD.add(raw_amt_usd);
				VItem_Desc.add("Natural Gas (Delivered) (USD)"); 
			//	customer_Invoice_Tax_Amt_INR="";
//////////		Gross Amt(USD)////////
				Inv_Amt_USD = invgrossamt_usd;
				Inv_Amt_INR = invgrossamt_inr;
				
			//	//System.out.println("3. LINE_NO: "+SrNo);
			}
			
//////////	Gross Amt(USD)////////
			VQty.add("");
			VSr_No.add(SrNo++);
			VPrice_Cd.add("0");	//Code for Gross Amt (Rupees)
			VAmount.add((nf.format(Double.parseDouble(""+Inv_Amt_USD))));
			VCurrency_Cd.add("2");
				VCurrency.add("USD");
			VRate.add("");
			VTotal_Tariff.add("0");
			VInv_Amt_INR.add(raw_amt_inr);
			VInv_Amt_USD.add(raw_amt_usd);
			VRec_Flag.add("Y");
			VItem_Desc_default.add("00");
			VFlag.add("");
			VOperation.add("1");
				VOperation_Sign.add("+");
			VBasic_Inv_Amt_INR.add(raw_amt_inr);
			VBasic_Inv_Amt_USD.add(raw_amt_usd);
			VItem_Desc.add("Gross Amount(USD)");			
		//	//System.out.println("3. LINE_NO: "+SrNo);

			//////////Exchange Rate////////
			VQty.add("");
			VSr_No.add(SrNo++);
			VPrice_Cd.add("0");	//Code for Gross Amt (Rupees)
			VAmount.add("");
			VCurrency_Cd.add("1");
				VCurrency.add("Rupees");
			VRate.add((nf2.format(Double.parseDouble(""+invexchngrt))));
			VTotal_Tariff.add("0");
			VInv_Amt_INR.add(raw_amt_inr);
			VInv_Amt_USD.add(raw_amt_usd);
			VRec_Flag.add("Y");
			VItem_Desc_default.add("00");
			VFlag.add("Att2");
			VOperation.add("1");
				VOperation_Sign.add("+");
			VBasic_Inv_Amt_INR.add(raw_amt_inr);
			VBasic_Inv_Amt_USD.add(raw_amt_usd);
			VItem_Desc.add("Exchange Rate");			
		//	//System.out.println("4. LINE_NO: "+SrNo);
			//////////Gross Amount (Rupees)
			int GrossAmtSrNo=SrNo;
			VQty.add("");
			VSr_No.add(SrNo++);
			VPrice_Cd.add("00");	//Code for Gross Amt (Rupees)
			VAmount.add((nf3.format(Double.parseDouble(""+Inv_Amt_INR))));
			VCurrency_Cd.add("1");
				VCurrency.add("Rupees");
			VRate.add("");
			VTotal_Tariff.add("0");
			VInv_Amt_INR.add(raw_amt_inr);
			VInv_Amt_USD.add(raw_amt_usd);
			VRec_Flag.add("Y");
			VItem_Desc_default.add("00");
			VFlag.add("");
			VOperation.add("2");
				VOperation_Sign.add("+");
			VBasic_Inv_Amt_INR.add(raw_amt_inr);
			VBasic_Inv_Amt_USD.add(raw_amt_usd);
			VItem_Desc.add("Gross Amount (Rupees)");
		//	//System.out.println("5. LINE_NO: "+SrNo);
			
			////System.out.println("VSr_No: "+VSr_No);
			////System.out.println("GrossAmtSrNo: "+GrossAmtSrNo);
			//////////Actual Tax Component wise Amount /////////////
			double tax_amt = 0;
			String tax_cd = "0";
			String tax_factor = "0.00";
			double total_tax=0;
			
			queryString = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0.00'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
						  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+invtaxstructcd+" AND " +
						  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+invtaxstructcd+" AND " +
						  "B.app_date<=TO_DATE('"+invbill_period_end_dt+"','DD/MM/YYYY')) ORDER BY A.tax_code";
			////System.out.println("QRY-A: Correct Tax Structure Details = "+queryString);
			rset=stmt.executeQuery(queryString);
			while(rset.next())
			{
				tax_cd = rset.getString(1);
				tax_factor = rset.getString(2);
			//	//System.out.println("TAX-CD: "+tax_cd);	//System.out.println("TAX-FACTOR: "+tax_factor);//System.out.println("TAX-raw_amt_inr: "+raw_amt_inr);		
				if(rset.getString(3).equals("1"))
				{
					tax_amt = (Double.parseDouble(Inv_Amt_INR)*Double.parseDouble(rset.getString(2)))/100;	
				}
				else if(rset.getString(3).equals("2"))
				{
					queryString1 = "SELECT NVL(A.tax_code,'0'), NVL(A.factor,'0'), NVL(A.tax_on,'1'), NVL(A.tax_on_cd,'0'), " +
								  "TO_CHAR(A.app_date,'DD/MM/YYYY') FROM FMS7_TAX_STRUCTURE_DTL A WHERE A.tax_str_cd="+invtaxstructcd+" AND " +
								  "A.app_date=(SELECT MAX(B.app_date) FROM FMS7_TAX_STRUCTURE_DTL B WHERE B.tax_str_cd="+invtaxstructcd+" AND " +
								  "B.app_date<=TO_DATE('"+invbill_period_end_dt+"','DD/MM/YYYY')) AND A.tax_code="+rset.getString(4)+"";
					////System.out.println("QRY-B: Tax Which Is Dependent On Other Tax Value = "+queryString1);
			 		rset1=stmt1.executeQuery(queryString1);
			 		if(rset1.next())
			 		{
				 			if(rset1.getString(3).equals("1"))
							{
								tax_amt = (Double.parseDouble(Inv_Amt_INR)*Double.parseDouble(rset1.getString(2)))/100;
							}
							
				 			tax_amt = (tax_amt*Double.parseDouble(rset.getString(2)))/100;
			 		}
			 		else
			 		{
			 			tax_amt = 0;
			 		}
				}
				else
				{
					tax_amt = 0;
				}
				total_tax+=tax_amt;
				///customer_Invoice_Tax_Code.add(tax_cd);
				///customer_Invoice_Tax_Rate.add(nf.format(Double.parseDouble(tax_factor)));
				///customer_Invoice_Tax_Amt.add((nf3.format(Double.parseDouble(""+tax_amt))));
				VQty.add("");
				VSr_No.add(SrNo++);
				VPrice_Cd.add(tax_cd);	
				VAmount.add((nf3.format(Double.parseDouble(""+tax_amt))));
				VCurrency_Cd.add("1");
					VCurrency.add("Rupees");
				VRate.add(nf3.format(Double.parseDouble(""+tax_factor))+"%");
				VTotal_Tariff.add("0");
				VInv_Amt_INR.add(tax_amt);
				VInv_Amt_USD.add("");
				VRec_Flag.add("Y");
				VItem_Desc_default.add(tax_cd);
				VFlag.add("");
				VOperation.add("2");
					VOperation_Sign.add("+");
				VBasic_Inv_Amt_INR.add(raw_amt_inr);
				VBasic_Inv_Amt_USD.add(raw_amt_usd);
			}
			for(int i=0; i<VPrice_Cd.size(); i++) 
			{
				queryString = "SELECT TAX_NAME, SHT_NM FROM FMS7_TAX_MST WHERE TAX_CODE="+VPrice_Cd.elementAt(i)+" ";
		//		////System.out.println("QRY-A: Correct Tax Structure Details = "+queryString);
				rset=stmt.executeQuery(queryString);
				while(rset.next())
				{
					VItem_Desc.add(rset.getString(1)==null?"":rset.getString(1));
					VTax_SHT_NM.add(rset.getString(2)==null?"":rset.getString(2));
					
					VTax_CompoDesc.add(rset.getString(1)==null?"":rset.getString(1));
					VTax_Amt.add(VInv_Amt_INR.elementAt(i));
				}
			}
			///////IF Tax Component is only 1, then no need to show Total-Tax in Invoice////
			if(VTax_SHT_NM.size()>1)
			{
				VQty.add("");	
				VSr_No.add("");	
				VPrice_Cd.add("99");	//Code for Total Tax Amt
				VAmount.add((nf3.format(Double.parseDouble(""+total_tax))));
				VCurrency_Cd.add("1");
					VCurrency.add("Rupees");
				VRate.add("");
				VTotal_Tariff.add("0");
				VInv_Amt_INR.add(raw_amt_inr);
				VInv_Amt_USD.add(raw_amt_usd);
				VRec_Flag.add("Y");
				VItem_Desc_default.add("99");
				VFlag.add("");
				VOperation.add("2");
					VOperation_Sign.add("+");
				VBasic_Inv_Amt_INR.add(raw_amt_inr);
				VBasic_Inv_Amt_USD.add(raw_amt_usd);
				VItem_Desc.add("Total Tax");
				////System.out.println("VSr_No: "+VSr_No);
			}
			////////////////////////////////////////////////////////
			String Mapping_seq_no=invContractType+":"+invFinancialYear+":"+invHlplinvseqno+":"+invinvoicedt;
			String mapid[]=customer_inv_mapping_id.split("-");
			String queryString1="select price_cd, AMOUNT, CURRENCY, TOTAL_TARIFF, INV_AMT_INR, " +
					" INV_AMT_USD, REC_FLAG, REMARK, FLAG, OPERATION, BASIC_INV_AMT_INR, BASIC_INV_AMT_USD from " +
					" FMS7_INV_COMPO_DTL" +
					" where INV_SEQ_NO='"+Mapping_seq_no+"'  and (flag_temp not like 'T' or flag_temp is null)" +
					" AND AMOUNT !='0' ";
			if(modifycontract_type.equalsIgnoreCase("T") || modifycontract_type.equalsIgnoreCase("C"))
			{
				queryString1+=" AND LTCORA_NO='"+mapid[1]+"' AND LTCORA_REV_NO='"+mapid[2]+"'";
			}
		//	//System.out.println("STEP-2A.1:DLNG_INVOICE_MST: "+queryString1);
			rset1=stmt1.executeQuery(queryString1);
			while(rset1.next())
			{
				invdiscount_price=""+nf3a.format((Double.parseDouble(invdiscount_price)*Double.parseDouble(invexchngrt)));
				First_gross_amt_inr=nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(discount_gross_amt_inr)));
				
				VQty.add("");
				VSr_No.add(SrNo++);
				VPrice_Cd.add(rset1.getString(1)==null?"":rset1.getString(1));	
				VAmount.add(nf3.format(Double.parseDouble(""+NumberFormat.getInstance().parse(rset1.getString(2)))));
				VCurrency_Cd.add(rset1.getString(3)==null?"":rset1.getString(3));
				if(rset1.getString(3).equals("1"))
					VCurrency.add("Rupees");
				else
					VCurrency.add("USD");
				VTotal_Tariff.add(rset1.getString(4)==null?"":rset1.getString(4));
					VRate.add("");
				VInv_Amt_INR.add(rset1.getString(5)==null?"":rset1.getString(5));
				VInv_Amt_USD.add(rset1.getString(6)==null?"":rset1.getString(6));
				VRec_Flag.add(rset1.getString(7)==null?"":rset1.getString(7));
				VItem_Desc_default.add(rset1.getString(8)==null?"":rset1.getString(8));
			//	VFlag.add(rset1.getString(9)==null?"":rset1.getString(9));
				VFlag.add("Att3");
				VOperation.add(rset1.getString(10)==null?"":rset1.getString(10));
				if(rset1.getString(10).equals("1"))
					VOperation_Sign.add("-");
				else
					VOperation_Sign.add("+");
				VBasic_Inv_Amt_INR.add(rset1.getString(11)==null?"":rset1.getString(11));
				VBasic_Inv_Amt_USD.add(rset1.getString(12)==null?"":rset1.getString(12));
			}
		//	//System.out.println("VPrice_Cd: "+VPrice_Cd);
			int TotInvAmtPayableSrNo=0;
			for(int i=0; i<VPrice_Cd.size(); i++) 
			{
				if(VPrice_Cd.elementAt(i).equals("1") && VItem_Desc_default.elementAt(i).equals(""))
					VItem_Desc.add("Adjustment for advance amount paid against Receipt Voucher No. "+invadvinvno);
				else if(VPrice_Cd.elementAt(i).equals("6") && VItem_Desc_default.elementAt(i).equals(""))
					VItem_Desc.add("Adjustment for Service Tax paid on advance amount paid against Receipt Voucher No. "+invadvinvno);
				else if(VPrice_Cd.elementAt(i).equals("7") && VItem_Desc_default.elementAt(i).equals(""))
					VItem_Desc.add("Adjustment for Swachh Bharat Cess paid on advance amount paid against Receipt Voucher No. "+invadvinvno);
			}
			//////Effective Payable: ///////////
			for(int i=0; i<VPrice_Cd.size(); i++) 
			{
				if(VPrice_Cd.elementAt(i).equals("1") )
				{////System.out.println(i+" VPrice_Cd: ");
					VPrice_Cd.add("100");	//Code for Gross Amt Payable(Rupees)
					VQty.add("");
					VSr_No.add(SrNo++);
					VAmount.add((nf3.format(Double.parseDouble(""+VInv_Amt_INR.elementAt(i)))));
					VCurrency_Cd.add("1");
						VCurrency.add("Rupees");
					VRate.add("");
					VTotal_Tariff.add("0");
					VInv_Amt_INR.add(VInv_Amt_INR.elementAt(i));
					VInv_Amt_USD.add(VInv_Amt_USD.elementAt(i));
					VRec_Flag.add("Y");
					VItem_Desc_default.add("100");
					VFlag.add("");
					VOperation.add("0");
						VOperation_Sign.add("");
					VBasic_Inv_Amt_INR.add(VBasic_Inv_Amt_INR.elementAt(i));
					VBasic_Inv_Amt_USD.add(VBasic_Inv_Amt_USD.elementAt(i));
					VItem_Desc.add("Total Invoice Amount payable("+VSr_No.elementAt(GrossAmtSrNo-1)+"-"+VSr_No.elementAt(i)+")");
					////System.out.println("8. LINE_NO: "+VSr_No.elementAt(GrossAmtSrNo));
					TotInvAmtPayableSrNo=SrNo;
					break;
				}	
			}
			
			////System.out.println("VSr_No: "+VSr_No);
			////System.out.println("TotInvAmtPayableSrNo: "+TotInvAmtPayableSrNo);
		double total_tax_payable=0;	 double tax_payable=0;
		String compo_cd="0";
		for (int j=0; j<VTax_SHT_NM.size(); j++)
		{			
			queryString = "SELECT COMPO_CD, COMPO_NM FROM FMS7_COMPO_MST " +
					" WHERE COMPO_ABR='"+VTax_SHT_NM.elementAt(j)+"' AND FLAG='Y' ";
			////System.out.println("QRY-A1: ADV-COMPO-CD = "+queryString);
			rset=stmt.executeQuery(queryString);
			while(rset.next())
			{
				compo_cd=rset.getString(1);
			}
			
			for(int i=0; i<VPrice_Cd.size(); i++) 
			{
				if(VPrice_Cd.elementAt(i).equals(compo_cd) && !compo_cd.equals("0"))
				{
					VPrice_Cd.add("");	//Code for ST Payable(Rupees)
					VQty.add("");
					VSr_No.add(SrNo++);
					tax_payable=(Double.parseDouble(""+VTax_Amt.elementAt(j))-Double.parseDouble(""+VAmount.elementAt(i)));
					VAmount.add((nf3.format(Double.parseDouble(""+VTax_Amt.elementAt(j))-Double.parseDouble(""+VAmount.elementAt(i)))));
					VCurrency_Cd.add("1");
						VCurrency.add("Rupees");
					VRate.add("");
					VTotal_Tariff.add("");
					VInv_Amt_INR.add(VInv_Amt_INR.elementAt(i));
					VInv_Amt_USD.add(VInv_Amt_USD.elementAt(i));
					VRec_Flag.add("Y");
					VItem_Desc_default.add("");
					VFlag.add("");
					VOperation.add("0");
						VOperation_Sign.add("");
					VBasic_Inv_Amt_INR.add(VBasic_Inv_Amt_INR.elementAt(i));
					VBasic_Inv_Amt_USD.add(VBasic_Inv_Amt_USD.elementAt(i));
					VItem_Desc.add(VTax_CompoDesc.elementAt(j)+" payable ("+VSr_No.elementAt(GrossAmtSrNo+j)+"-"+VSr_No.elementAt(i)+")");
					////System.out.println("9. LINE_NO: "+SrNo);
					break;
				}
			}
			
			total_tax_payable+=tax_payable;
		}
		////System.out.println("VSr_No: "+VSr_No);
		if(!compo_cd.equals("0"))
		{
		////Total Tax Payable	
			VQty.add("");
			VSr_No.add(SrNo++);		
			VAmount.add((nf3.format(Double.parseDouble(""+total_tax_payable))));
			VCurrency_Cd.add("1");
				VCurrency.add("Rupees");
			VRate.add("");
			VTotal_Tariff.add("");
			VInv_Amt_INR.add("");
			VInv_Amt_USD.add("");
			VRec_Flag.add("Y");
			VItem_Desc_default.add("");
			VFlag.add("");
			VOperation.add("0");
				VOperation_Sign.add("");
			VBasic_Inv_Amt_INR.add("");
			VBasic_Inv_Amt_USD.add("");
			if((TotInvAmtPayableSrNo+2)==SrNo) {
				VItem_Desc.add("Total Tax payable ("+(TotInvAmtPayableSrNo)+")");
			}
			else
			{
				VItem_Desc.add("Total Tax payable ("+(TotInvAmtPayableSrNo)+"+"+(VSr_No.size()-2)+")");
			}
			VPrice_Cd.add("");	//Code for ST Payable(Rupees)
		}
	//		//System.out.println("10. LINE_NO: "+SrNo);
			//Invoice Amount Payable
			VQty.add("");
			VSr_No.add(SrNo++);		
			VAmount.add((nf3.format(Double.parseDouble(""+Net_Inv_Amt))));
			VCurrency_Cd.add("1");
				VCurrency.add("Rupees");
			VRate.add("");
			VTotal_Tariff.add("");
			VInv_Amt_INR.add("");
			VInv_Amt_USD.add("");
			VRec_Flag.add("Y");
			VItem_Desc_default.add("");
			VFlag.add("");
			VOperation.add("0");
				VOperation_Sign.add("");
			VBasic_Inv_Amt_INR.add("");
			VBasic_Inv_Amt_USD.add("");
			VItem_Desc.add("Invoice Amount");
			VPrice_Cd.add("");	//Code for ST Payable(Rupees)
		//	//System.out.println("11. LINE_NO: "+SrNo);
//			Net Amount Payable
			VQty.add("");
			VSr_No.add(SrNo++);		
			VAmount.add((nf3.format(Double.parseDouble(""+Net_Inv_Amt))));
			VCurrency_Cd.add("1");
				VCurrency.add("Rupees");
			VRate.add("");
			VTotal_Tariff.add("");
			VInv_Amt_INR.add("");
			VInv_Amt_USD.add("");
			VRec_Flag.add("Y");
			VItem_Desc_default.add("");
			VFlag.add("");
			VOperation.add("0");
				VOperation_Sign.add("");
			VBasic_Inv_Amt_INR.add("");
			VBasic_Inv_Amt_USD.add("");
			VItem_Desc.add("Net Amount Payable");
			VPrice_Cd.add("");	//Code for ST Payable(Rupees)

			////System.out.println("VSr_No: "+VSr_No);
		}
		catch(Exception e)
		{
			//System.out.println("In databean advance pament");
			e.printStackTrace();
		}
	}
	
	Vector VSr_No=new Vector();
	Vector VPrice_Cd=new Vector();
	Vector VAmount=new Vector();
	Vector VQty=new Vector();
	Vector VCurrency_Cd=new Vector();
	Vector VCurrency=new Vector();
	Vector VTotal_Tariff=new Vector();
	Vector VRate=new Vector();
	Vector VInv_Amt_INR=new Vector();
	Vector VInv_Amt_USD=new Vector();
	Vector VRec_Flag=new Vector();
	Vector VFlag=new Vector();
	Vector VItem_Desc=new Vector();
	Vector VItem_Desc_default=new Vector();
	Vector VOperation=new Vector();
	Vector VOperation_Sign=new Vector();
	Vector VBasic_Inv_Amt_INR=new Vector();
	Vector VBasic_Inv_Amt_USD=new Vector();
	Vector VLTCORA_NO=new Vector();
	Vector VLTCORA_REV_NO=new Vector();
	Vector VFlag_Temp=new Vector();
	
	Vector VTax_CompoDesc=new Vector();
	Vector VTax_Amt=new Vector();
	Vector VTax_SHT_NM=new Vector();
	Vector VCOMPO_ABR=new Vector();
	
	public Vector getVSr_No() {return VSr_No;}
	public Vector getVAmount() {return VAmount;}
	public Vector getVQty() {return VQty;}
	public Vector getVCurrency_Cd() {return VCurrency_Cd;}
	public Vector getVCurrency() {return VCurrency;}
	public Vector getVRate() {return VRate;}
	public Vector getVInv_Amt_INR() {return VInv_Amt_INR;}
	public Vector getVInv_Amt_USD() {return VInv_Amt_USD;}
	public Vector getVRec_Flag() {return VRec_Flag;}
	public Vector getVFlag() {return VFlag;}
	public Vector getVItem_Desc() {return VItem_Desc;}
	public Vector getVOperation() {return VOperation;}
	public Vector getVOperation_Sign() {return VOperation_Sign;}
	public Vector getVBasic_Inv_Amt_INR() {return VBasic_Inv_Amt_INR;}
	public Vector getVBasic_Inv_Amt_USD() {return VBasic_Inv_Amt_USD;}
	public Vector getVLTCORA_NO() {return VLTCORA_NO;}
	public Vector getVLTCORA_REV_NO() {return VLTCORA_REV_NO;}
	/////////////////////////////////////////////////////////////////////////
	public void setCallFlag(String callFlag) {
		this.callFlag = callFlag;
	}


	public Vector getCustomer_cd() {
		return Customer_cd;
	}


	public Vector getCustomer_nm() {
		return Customer_nm;
	}

	public void setParty_cd(String party_cd) {
		this.party_cd = party_cd;
	}

	public Vector getCust_amt() {
		return cust_amt;
	}

	public Vector getCust_cd() {
		return cust_cd;
	}

	public Vector getCust_cur() {
		return cust_cur;
	}

	public Vector getCust_nm() {
		return cust_nm;
	}

	public Vector getCust_recv_dt() {
		return cust_recv_dt;
	}

	public Vector getCust_valid_dt() {
		return cust_valid_dt;
	}
	
	public String getBill_period_end_date() {
		return bill_period_end_date;
	}

	public void setBill_period_end_date(String bill_period_end_date) {
		this.bill_period_end_date = bill_period_end_date;
	}

	public String getTax_struct_cd() {
		return tax_struct_cd;
	}

	public void setTax_struct_cd(String tax_struct_cd) {
		this.tax_struct_cd = tax_struct_cd;
	}
	public String getCustomer_Invoice_Gross_Amt_INR() {
		return customer_Invoice_Gross_Amt_INR;
	}


	public void setCustomer_Invoice_Gross_Amt_INR(
			String customer_Invoice_Gross_Amt_INR) {
		this.customer_Invoice_Gross_Amt_INR = customer_Invoice_Gross_Amt_INR;
	}


	public String getCustomer_Invoice_Net_Amt_INR() {
		return customer_Invoice_Net_Amt_INR;
	}


	public void setCustomer_Invoice_Net_Amt_INR(String customer_Invoice_Net_Amt_INR) {
		this.customer_Invoice_Net_Amt_INR = customer_Invoice_Net_Amt_INR;
	}


	public Vector getCustomer_Invoice_Tax_Abbr() {
		return customer_Invoice_Tax_Abbr;
	}


	public void setCustomer_Invoice_Tax_Abbr(Vector customer_Invoice_Tax_Abbr) {
		this.customer_Invoice_Tax_Abbr = customer_Invoice_Tax_Abbr;
	}


	public Vector getCustomer_Invoice_Tax_Amt() {
		return customer_Invoice_Tax_Amt;
	}


	public void setCustomer_Invoice_Tax_Amt(Vector customer_Invoice_Tax_Amt) {
		this.customer_Invoice_Tax_Amt = customer_Invoice_Tax_Amt;
	}


	public Vector getCustomer_Invoice_Tax_Code() {
		return customer_Invoice_Tax_Code;
	}


	public void setCustomer_Invoice_Tax_Code(Vector customer_Invoice_Tax_Code) {
		this.customer_Invoice_Tax_Code = customer_Invoice_Tax_Code;
	}


	public Vector getCustomer_Invoice_Tax_Name() {
		return customer_Invoice_Tax_Name;
	}


	public void setCustomer_Invoice_Tax_Name(Vector customer_Invoice_Tax_Name) {
		this.customer_Invoice_Tax_Name = customer_Invoice_Tax_Name;
	}


	public Vector getCustomer_Invoice_Tax_Rate() {
		return customer_Invoice_Tax_Rate;
	}


	public void setCustomer_Invoice_Tax_Rate(Vector customer_Invoice_Tax_Rate) {
		this.customer_Invoice_Tax_Rate = customer_Invoice_Tax_Rate;
	}


	public String getContract_type() {
		return contract_type;
	}


	public void setContract_type(String contract_type) {
		this.contract_type = contract_type;
	}


	public String getCustomer_cd_tax() {
		return customer_cd_tax;
	}


	public void setCustomer_cd_tax(String customer_cd_tax) {
		this.customer_cd_tax = customer_cd_tax;
	}


	public String getCustomer_plant_seq_no() {
		return customer_plant_seq_no;
	}


	public void setCustomer_plant_seq_no(String customer_plant_seq_no) {
		this.customer_plant_seq_no = customer_plant_seq_no;
	}

	public String getContractType() {
		return ContractType;
	}

	public void setContractType(String contractType) {
		ContractType = contractType;
	}

	public String getCustomerCd() {
		return CustomerCd;
	}

	public void setCustomerCd(String customerCd) {
		CustomerCd = customerCd;
	}

	public String getCustomerPlantSeqNo() {
		return CustomerPlantSeqNo;
	}

	public void setCustomerPlantSeqNo(String customerPlantSeqNo) {
		CustomerPlantSeqNo = customerPlantSeqNo;
	}

	public String getFgsaNo() {
		return FgsaNo;
	}

	public void setFgsaNo(String fgsaNo) {
		FgsaNo = fgsaNo;
	}

	public String getFgsaRevNo() {
		return FgsaRevNo;
	}

	public void setFgsaRevNo(String fgsaRevNo) {
		FgsaRevNo = fgsaRevNo;
	}

	public String getSnNo() {
		return SnNo;
	}

	public void setSnNo(String snNo) {
		SnNo = snNo;
	}

	public String getSnRevNo() {
		return SnRevNo;
	}

	public void setSnRevNo(String snRevNo) {
		SnRevNo = snRevNo;
	}

	public String getDueDate() {
		return DueDate;
	}

	public void setDueDate(String dueDate) {
		DueDate = dueDate;
	}

	public String getTotal_Collection_INR() {
		return Total_Collection_INR;
	}

	public void setTotal_Collection_INR(String total_Collection_INR) {
		Total_Collection_INR = total_Collection_INR;
	}

	public String getTotal_Collection_USD() {
		return Total_Collection_USD;
	}

	public void setTotal_Collection_USD(String total_Collection_USD) {
		Total_Collection_USD = total_Collection_USD;
	}

	public Vector getInvoice_adj_amt() {
		return Invoice_adj_amt;
	}

	public void setInvoice_adj_amt(Vector invoice_adj_amt) {
		Invoice_adj_amt = invoice_adj_amt;
	}

	public Vector getInvoice_Adj_bal() {
		return Invoice_Adj_bal;
	}

	public void setInvoice_Adj_bal(Vector invoice_Adj_bal) {
		Invoice_Adj_bal = invoice_Adj_bal;
	}

	public Vector getInvoice_adj_cur() {
		return Invoice_adj_cur;
	}

	public void setInvoice_adj_cur(Vector invoice_adj_cur) {
		Invoice_adj_cur = invoice_adj_cur;
	}

	public Vector getInvoice_dt() {
		return Invoice_dt;
	}

	public void setInvoice_dt(Vector invoice_dt) {
		Invoice_dt = invoice_dt;
	}

	public Vector getInvoice_no() {
		return Invoice_no;
	}

	public void setInvoice_no(Vector invoice_no) {
		Invoice_no = invoice_no;
	}

	public boolean isFlagINR() {
		return flagINR;
	}

	public void setFlagINR(boolean flagINR) {
		this.flagINR = flagINR;
	}

	public boolean isFlagUSD() {
		return flagUSD;
	}

	public void setFlagUSD(boolean flagUSD) {
		this.flagUSD = flagUSD;
	}

	public Vector getCust_adjust_amt() {
		return cust_adjust_amt;
	}

	public void setCust_adjust_amt(Vector cust_adjust_amt) {
		this.cust_adjust_amt = cust_adjust_amt;
	}

	public Vector getCust_adjust_sign() {
		return cust_adjust_sign;
	}

	public void setCust_adjust_sign(Vector cust_adjust_sign) {
		this.cust_adjust_sign = cust_adjust_sign;
	}

	public Vector getCust_bal() {
		return cust_bal;
	}

	public void setCust_bal(Vector cust_bal) {
		this.cust_bal = cust_bal;
	}

	public Vector getCust_bal1() {
		return cust_bal1;
	}

	public void setCust_bal1(Vector cust_bal1) {
		this.cust_bal1 = cust_bal1;
	}

	public Vector getCust_seq_no() {
		return cust_seq_no;
	}

	public void setCust_seq_no(Vector cust_seq_no) {
		this.cust_seq_no = cust_seq_no;
	}

	public Vector getCust_seq_no1() {
		return cust_seq_no1;
	}

	public void setCust_seq_no1(Vector cust_seq_no1) {
		this.cust_seq_no1 = cust_seq_no1;
	}

	public String getInvadjflag() {
		return invadjflag;
	}

	public void setInvadjflag(String invadjflag) {
		this.invadjflag = invadjflag;
	}

	public String getInvadjremark() {
		return invadjremark;
	}

	public void setInvadjremark(String invadjremark) {
		this.invadjremark = invadjremark;
	}

	public String getInvadjustcur() {
		return invadjustcur;
	}

	public void setInvadjustcur(String invadjustcur) {
		this.invadjustcur = invadjustcur;
	}

	public String getInvadjustmentamt() {
		return invadjustmentamt;
	}

	public void setInvadjustmentamt(String invadjustmentamt) {
		this.invadjustmentamt = invadjustmentamt;
	}

	public String getInvbill_period_end_dt() {
		return invbill_period_end_dt;
	}

	public void setInvbill_period_end_dt(String invbill_period_end_dt) {
		this.invbill_period_end_dt = invbill_period_end_dt;
	}

	public String getInvContractType() {
		return invContractType;
	}

	public void setInvContractType(String invContractType) {
		this.invContractType = invContractType;
	}

	public String getInvexchngrt() {
		return invexchngrt;
	}

	public void setInvexchngrt(String invexchngrt) {
		this.invexchngrt = invexchngrt;
	}

	public String getInvFinancialYear() {
		return invFinancialYear;
	}

	public void setInvFinancialYear(String invFinancialYear) {
		this.invFinancialYear = invFinancialYear;
	}

	public String getInvgrossamt() {
		return invgrossamt;
	}

	public void setInvgrossamt(String invgrossamt) {
		this.invgrossamt = invgrossamt;
	}

	public String getInvHlplinvseqno() {
		return invHlplinvseqno;
	}

	public void setInvHlplinvseqno(String invHlplinvseqno) {
		this.invHlplinvseqno = invHlplinvseqno;
	}

	public String getCallFlag() {
		return callFlag;
	}

	public void setCust_amt(Vector cust_amt) {
		this.cust_amt = cust_amt;
	}

	public void setCust_cd(Vector cust_cd) {
		this.cust_cd = cust_cd;
	}

	public void setCust_cur(Vector cust_cur) {
		this.cust_cur = cust_cur;
	}

	public void setCust_nm(Vector cust_nm) {
		this.cust_nm = cust_nm;
	}

	public void setCust_recv_dt(Vector cust_recv_dt) {
		this.cust_recv_dt = cust_recv_dt;
	}

	public void setCust_valid_dt(Vector cust_valid_dt) {
		this.cust_valid_dt = cust_valid_dt;
	}

	public void setCustomer_cd(Vector customer_cd) {
		Customer_cd = customer_cd;
	}

	public void setCustomer_nm(Vector customer_nm) {
		Customer_nm = customer_nm;
	}

	public Vector getAdvance_customer_amt() {
		return advance_customer_amt;
	}

	public void setAdvance_customer_amt(Vector advance_customer_amt) {
		this.advance_customer_amt = advance_customer_amt;
	}

	public Vector getAdvance_customer_cd() {
		return advance_customer_cd;
	}

	public void setAdvance_customer_cd(Vector advance_customer_cd) {
		this.advance_customer_cd = advance_customer_cd;
	}

	public Vector getAdvance_customer_cur() {
		return advance_customer_cur;
	}

	public void setAdvance_customer_cur(Vector advance_customer_cur) {
		this.advance_customer_cur = advance_customer_cur;
	}

	public Vector getAdvance_customer_nm() {
		return advance_customer_nm;
	}

	public void setAdvance_customer_nm(Vector advance_customer_nm) {
		this.advance_customer_nm = advance_customer_nm;
	}

	public Vector getAdv_amt() {
		return adv_amt;
	}

	public void setAdv_amt(Vector adv_amt) {
		this.adv_amt = adv_amt;
	}

	public Vector getAdv_amt_cur() {
		return adv_amt_cur;
	}

	public void setAdv_amt_cur(Vector adv_amt_cur) {
		this.adv_amt_cur = adv_amt_cur;
	}

	public Vector getAdv_rec_dt() {
		return adv_rec_dt;
	}

	public void setAdv_rec_dt(Vector adv_rec_dt) {
		this.adv_rec_dt = adv_rec_dt;
	}

	public Vector getInvoice_adj_dt() {
		return invoice_adj_dt;
	}

	public void setInvoice_adj_dt(Vector invoice_adj_dt) {
		this.invoice_adj_dt = invoice_adj_dt;
	}

	public Vector getPlant_name() {
		return plant_name;
	}

	public void setPlant_name(Vector plant_name) {
		this.plant_name = plant_name;
	}

	public Vector getInvoice_adj_amt1() {
		return invoice_adj_amt1;
	}

	public void setInvoice_adj_amt1(Vector invoice_adj_amt1) {
		this.invoice_adj_amt1 = invoice_adj_amt1;
	}

	public Vector getInvoice_adj_cur1() {
		return invoice_adj_cur1;
	}

	public void setInvoice_adj_cur1(Vector invoice_adj_cur1) {
		this.invoice_adj_cur1 = invoice_adj_cur1;
	}

	public Vector getAdv_adj_amt_invoice() {
		return adv_adj_amt_invoice;
	}

	public void setAdv_adj_amt_invoice(Vector adv_adj_amt_invoice) {
		this.adv_adj_amt_invoice = adv_adj_amt_invoice;
	}

	public Vector getAdv_adj_cur_invoice() {
		return adv_adj_cur_invoice;
	}

	public void setAdv_adj_cur_invoice(Vector adv_adj_cur_invoice) {
		this.adv_adj_cur_invoice = adv_adj_cur_invoice;
	}

	public Vector getFinancial_yr() {
		return financial_yr;
	}

	public void setFinancial_yr(Vector financial_yr) {
		this.financial_yr = financial_yr;
	}

	public Vector getInvoice_seq_no() {
		return invoice_seq_no;
	}

	public void setInvoice_seq_no(Vector invoice_seq_no) {
		this.invoice_seq_no = invoice_seq_no;
	}

	public Vector getInvoice_unique_seq_no() {
		return invoice_unique_seq_no;
	}

	public void setInvoice_unique_seq_no(Vector invoice_unique_seq_no) {
		this.invoice_unique_seq_no = invoice_unique_seq_no;
	}

	public Vector getInvoice_no1() {
		return invoice_no1;
	}

	public void setInvoice_no1(Vector invoice_no1) {
		this.invoice_no1 = invoice_no1;
	}

	public Vector getTotal_bal() {
		return total_bal;
	}

	public void setTotal_bal(Vector total_bal) {
		this.total_bal = total_bal;
	}

	public Vector getInvoice_dt_adj() {
		return invoice_dt_adj;
	}

	public void setInvoice_dt_adj(Vector invoice_dt_adj) {
		this.invoice_dt_adj = invoice_dt_adj;
	}
	public String getBuyer_Nom_Qty_Total() {
		return Buyer_Nom_Qty_Total;
	}

	public void setBuyer_Nom_Qty_Total(String buyer_Nom_Qty_Total) {
		Buyer_Nom_Qty_Total = buyer_Nom_Qty_Total;
	}

	public String getBuyer_Off_Spec_Qty_Total() {
		return Buyer_Off_Spec_Qty_Total;
	}

	public void setBuyer_Off_Spec_Qty_Total(String buyer_Off_Spec_Qty_Total) {
		Buyer_Off_Spec_Qty_Total = buyer_Off_Spec_Qty_Total;
	}

	public String getBuyer_Shortfall_Qty_Total() {
		return Buyer_Shortfall_Qty_Total;
	}

	public void setBuyer_Shortfall_Qty_Total(String buyer_Shortfall_Qty_Total) {
		Buyer_Shortfall_Qty_Total = buyer_Shortfall_Qty_Total;
	}

	public String getBuyer_Suspension_Qty_Total() {
		return Buyer_Suspension_Qty_Total;
	}

	public void setBuyer_Suspension_Qty_Total(String buyer_Suspension_Qty_Total) {
		Buyer_Suspension_Qty_Total = buyer_Suspension_Qty_Total;
	}

	public String getContact_Customer_CST_DT() {
		return contact_Customer_CST_DT;
	}

	public void setContact_Customer_CST_DT(String contact_Customer_CST_DT) {
		this.contact_Customer_CST_DT = contact_Customer_CST_DT;
	}

	public String getContact_Customer_CST_NO() {
		return contact_Customer_CST_NO;
	}

	public void setContact_Customer_CST_NO(String contact_Customer_CST_NO) {
		this.contact_Customer_CST_NO = contact_Customer_CST_NO;
	}

	public String getContact_Customer_GST_DT() {
		return contact_Customer_GST_DT;
	}

	public void setContact_Customer_GST_DT(String contact_Customer_GST_DT) {
		this.contact_Customer_GST_DT = contact_Customer_GST_DT;
	}

	public String getContact_Customer_GST_NO() {
		return contact_Customer_GST_NO;
	}

	public void setContact_Customer_GST_NO(String contact_Customer_GST_NO) {
		this.contact_Customer_GST_NO = contact_Customer_GST_NO;
	}

	public String getContact_Customer_GVAT_DT() {
		return contact_Customer_GVAT_DT;
	}

	public void setContact_Customer_GVAT_DT(String contact_Customer_GVAT_DT) {
		this.contact_Customer_GVAT_DT = contact_Customer_GVAT_DT;
	}

	public String getContact_Customer_GVAT_NO() {
		return contact_Customer_GVAT_NO;
	}

	public void setContact_Customer_GVAT_NO(String contact_Customer_GVAT_NO) {
		this.contact_Customer_GVAT_NO = contact_Customer_GVAT_NO;
	}

	public String getContact_Customer_Name() {
		return contact_Customer_Name;
	}

	public void setContact_Customer_Name(String contact_Customer_Name) {
		this.contact_Customer_Name = contact_Customer_Name;
	}

	public String getContact_Customer_Person_Address() {
		return contact_Customer_Person_Address;
	}

	public void setContact_Customer_Person_Address(
			String contact_Customer_Person_Address) {
		this.contact_Customer_Person_Address = contact_Customer_Person_Address;
	}

	public String getContact_Customer_Person_City() {
		return contact_Customer_Person_City;
	}

	public void setContact_Customer_Person_City(String contact_Customer_Person_City) {
		this.contact_Customer_Person_City = contact_Customer_Person_City;
	}

	public String getContact_Customer_Person_Pin() {
		return contact_Customer_Person_Pin;
	}

	public void setContact_Customer_Person_Pin(String contact_Customer_Person_Pin) {
		this.contact_Customer_Person_Pin = contact_Customer_Person_Pin;
	}

	public String getContact_Person_Name_And_Designation() {
		return contact_Person_Name_And_Designation;
	}

	public void setContact_Person_Name_And_Designation(
			String contact_Person_Name_And_Designation) {
		this.contact_Person_Name_And_Designation = contact_Person_Name_And_Designation;
	}

	public String getContact_Suppl_CST_DT() {
		return contact_Suppl_CST_DT;
	}

	public void setContact_Suppl_CST_DT(String contact_Suppl_CST_DT) {
		this.contact_Suppl_CST_DT = contact_Suppl_CST_DT;
	}

	public String getContact_Suppl_CST_NO() {
		return contact_Suppl_CST_NO;
	}

	public void setContact_Suppl_CST_NO(String contact_Suppl_CST_NO) {
		this.contact_Suppl_CST_NO = contact_Suppl_CST_NO;
	}

	public String getContact_Suppl_GST_DT() {
		return contact_Suppl_GST_DT;
	}

	public void setContact_Suppl_GST_DT(String contact_Suppl_GST_DT) {
		this.contact_Suppl_GST_DT = contact_Suppl_GST_DT;
	}

	public String getContact_Suppl_GST_NO() {
		return contact_Suppl_GST_NO;
	}

	public void setContact_Suppl_GST_NO(String contact_Suppl_GST_NO) {
		this.contact_Suppl_GST_NO = contact_Suppl_GST_NO;
	}

	public String getContact_Suppl_Name() {
		return contact_Suppl_Name;
	}

	public void setContact_Suppl_Name(String contact_Suppl_Name) {
		this.contact_Suppl_Name = contact_Suppl_Name;
	}

	public String getContact_Suppl_Person_Address() {
		return contact_Suppl_Person_Address;
	}

	public void setContact_Suppl_Person_Address(String contact_Suppl_Person_Address) {
		this.contact_Suppl_Person_Address = contact_Suppl_Person_Address;
	}

	public String getContact_Suppl_Person_City() {
		return contact_Suppl_Person_City;
	}

	public void setContact_Suppl_Person_City(String contact_Suppl_Person_City) {
		this.contact_Suppl_Person_City = contact_Suppl_Person_City;
	}

	public String getContact_Suppl_Person_Pin() {
		return contact_Suppl_Person_Pin;
	}

	public void setContact_Suppl_Person_Pin(String contact_Suppl_Person_Pin) {
		this.contact_Suppl_Person_Pin = contact_Suppl_Person_Pin;
	}

	public String getContact_Suppl_Service_Tax_DT() {
		return contact_Suppl_Service_Tax_DT;
	}

	public void setContact_Suppl_Service_Tax_DT(String contact_Suppl_Service_Tax_DT) {
		this.contact_Suppl_Service_Tax_DT = contact_Suppl_Service_Tax_DT;
	}

	public String getContact_Suppl_Service_Tax_NO() {
		return contact_Suppl_Service_Tax_NO;
	}

	public void setContact_Suppl_Service_Tax_NO(String contact_Suppl_Service_Tax_NO) {
		this.contact_Suppl_Service_Tax_NO = contact_Suppl_Service_Tax_NO;
	}

	public String getCustomer_abbr() {
		return customer_abbr;
	}

	public void setCustomer_abbr(String customer_abbr) {
		this.customer_abbr = customer_abbr;
	}

	public String getCustomer_Invoice_DT() {
		return customer_Invoice_DT;
	}

	public void setCustomer_Invoice_DT(String customer_Invoice_DT) {
		this.customer_Invoice_DT = customer_Invoice_DT;
	}

	public String getCustomer_Invoice_Due_DT() {
		return customer_Invoice_Due_DT;
	}

	public void setCustomer_Invoice_Due_DT(String customer_Invoice_Due_DT) {
		this.customer_Invoice_Due_DT = customer_Invoice_Due_DT;
	}

	public String getCustomer_Invoice_End_DT() {
		return customer_Invoice_End_DT;
	}

	public void setCustomer_Invoice_End_DT(String customer_Invoice_End_DT) {
		this.customer_Invoice_End_DT = customer_Invoice_End_DT;
	}

	public String getCustomer_Invoice_Exchg_Rate() {
		return customer_Invoice_Exchg_Rate;
	}

	public void setCustomer_Invoice_Exchg_Rate(String customer_Invoice_Exchg_Rate) {
		this.customer_Invoice_Exchg_Rate = customer_Invoice_Exchg_Rate;
	}

	public Vector getCustomer_Invoice_Exchg_Rate_Code() {
		return customer_Invoice_Exchg_Rate_Code;
	}

	public void setCustomer_Invoice_Exchg_Rate_Code(
			Vector customer_Invoice_Exchg_Rate_Code) {
		this.customer_Invoice_Exchg_Rate_Code = customer_Invoice_Exchg_Rate_Code;
	}

	public Vector getCustomer_Invoice_Exchg_Rate_Date() {
		return customer_Invoice_Exchg_Rate_Date;
	}

	public void setCustomer_Invoice_Exchg_Rate_Date(
			Vector customer_Invoice_Exchg_Rate_Date) {
		this.customer_Invoice_Exchg_Rate_Date = customer_Invoice_Exchg_Rate_Date;
	}

	public Vector getCustomer_Invoice_Exchg_Rate_Name() {
		return customer_Invoice_Exchg_Rate_Name;
	}

	public void setCustomer_Invoice_Exchg_Rate_Name(
			Vector customer_Invoice_Exchg_Rate_Name) {
		this.customer_Invoice_Exchg_Rate_Name = customer_Invoice_Exchg_Rate_Name;
	}

	public Vector getCustomer_Invoice_Exchg_Rate_Value() {
		return customer_Invoice_Exchg_Rate_Value;
	}

	public void setCustomer_Invoice_Exchg_Rate_Value(
			Vector customer_Invoice_Exchg_Rate_Value) {
		this.customer_Invoice_Exchg_Rate_Value = customer_Invoice_Exchg_Rate_Value;
	}

	public String getCustomer_Invoice_FGSA_Dt() {
		return customer_Invoice_FGSA_Dt;
	}

	public void setCustomer_Invoice_FGSA_Dt(String customer_Invoice_FGSA_Dt) {
		this.customer_Invoice_FGSA_Dt = customer_Invoice_FGSA_Dt;
	}

	public String getCustomer_Invoice_Gross_Amt_USD() {
		return customer_Invoice_Gross_Amt_USD;
	}

	public void setCustomer_Invoice_Gross_Amt_USD(
			String customer_Invoice_Gross_Amt_USD) {
		this.customer_Invoice_Gross_Amt_USD = customer_Invoice_Gross_Amt_USD;
	}

	public String getCustomer_Invoice_SN_Dt() {
		return customer_Invoice_SN_Dt;
	}

	public void setCustomer_Invoice_SN_Dt(String customer_Invoice_SN_Dt) {
		this.customer_Invoice_SN_Dt = customer_Invoice_SN_Dt;
	}

	public String getCustomer_Invoice_Start_DT() {
		return customer_Invoice_Start_DT;
	}

	public void setCustomer_Invoice_Start_DT(String customer_Invoice_Start_DT) {
		this.customer_Invoice_Start_DT = customer_Invoice_Start_DT;
	}

	public String getCustomer_Invoice_Tax_Flag() {
		return customer_Invoice_Tax_Flag;
	}

	public void setCustomer_Invoice_Tax_Flag(String customer_Invoice_Tax_Flag) {
		this.customer_Invoice_Tax_Flag = customer_Invoice_Tax_Flag;
	}

	public String getCustomer_plant_nm() {
		return customer_plant_nm;
	}

	public void setCustomer_plant_nm(String customer_plant_nm) {
		this.customer_plant_nm = customer_plant_nm;
	}

	public String getDatabeanName() {
		return databeanName;
	}

	public void setDatabeanName(String databeanName) {
		this.databeanName = databeanName;
	}

	public String getDCQ_Total() {
		return DCQ_Total;
	}

	public void setDCQ_Total(String total) {
		DCQ_Total = total;
	}

	public String getDelivered_Total_Qty_Total() {
		return Delivered_Total_Qty_Total;
	}

	public void setDelivered_Total_Qty_Total(String delivered_Total_Qty_Total) {
		Delivered_Total_Qty_Total = delivered_Total_Qty_Total;
	}

	public String getDelv_Failure_Qty_Total() {
		return Delv_Failure_Qty_Total;
	}

	public void setDelv_Failure_Qty_Total(String delv_Failure_Qty_Total) {
		Delv_Failure_Qty_Total = delv_Failure_Qty_Total;
	}

	public String getFM_Qty_Total() {
		return FM_Qty_Total;
	}

	public void setFM_Qty_Total(String qty_Total) {
		FM_Qty_Total = qty_Total;
	}

	public String getGas_Delivered_Amt_USD() {
		return gas_Delivered_Amt_USD;
	}

	public void setGas_Delivered_Amt_USD(String gas_Delivered_Amt_USD) {
		this.gas_Delivered_Amt_USD = gas_Delivered_Amt_USD;
	}

	public String getGas_Delivered_PNQ_Total() {
		return Gas_Delivered_PNQ_Total;
	}

	public void setGas_Delivered_PNQ_Total(String gas_Delivered_PNQ_Total) {
		Gas_Delivered_PNQ_Total = gas_Delivered_PNQ_Total;
	}

	public String getGas_Delivered_Re_Qty_Total() {
		return Gas_Delivered_Re_Qty_Total;
	}

	public void setGas_Delivered_Re_Qty_Total(String gas_Delivered_Re_Qty_Total) {
		Gas_Delivered_Re_Qty_Total = gas_Delivered_Re_Qty_Total;
	}

	public String getHlpl_inv_no() {
		return hlpl_inv_no;
	}

	public void setHlpl_inv_no(String hlpl_inv_no) {
		this.hlpl_inv_no = hlpl_inv_no;
	}


	public String getInvoice_att1_file_name() {
		return invoice_att1_file_name;
	}

	public void setInvoice_att1_file_name(String invoice_att1_file_name) {
		this.invoice_att1_file_name = invoice_att1_file_name;
	}

	public String getInvoice_att1_pdf_path() {
		return invoice_att1_pdf_path;
	}

	public void setInvoice_att1_pdf_path(String invoice_att1_pdf_path) {
		this.invoice_att1_pdf_path = invoice_att1_pdf_path;
	}

	public String getInvoice_att2_file_name() {
		return invoice_att2_file_name;
	}

	public void setInvoice_att2_file_name(String invoice_att2_file_name) {
		this.invoice_att2_file_name = invoice_att2_file_name;
	}

	public String getInvoice_att2_pdf_path() {
		return invoice_att2_pdf_path;
	}

	public void setInvoice_att2_pdf_path(String invoice_att2_pdf_path) {
		this.invoice_att2_pdf_path = invoice_att2_pdf_path;
	}

	public String getInvoice_date() {
		return invoice_date;
	}

	public void setInvoice_date(String invoice_date) {
		this.invoice_date = invoice_date;
	}

	public String getInvoice_pdf_path() {
		return invoice_pdf_path;
	}

	public void setInvoice_pdf_path(String invoice_pdf_path) {
		this.invoice_pdf_path = invoice_pdf_path;
	}

	public Vector getInvoice_Period_Buyer_Nom_Qty() {
		return invoice_Period_Buyer_Nom_Qty;
	}

	public void setInvoice_Period_Buyer_Nom_Qty(Vector invoice_Period_Buyer_Nom_Qty) {
		this.invoice_Period_Buyer_Nom_Qty = invoice_Period_Buyer_Nom_Qty;
	}

	public Vector getInvoice_Period_Buyer_Off_Spec_Qty() {
		return invoice_Period_Buyer_Off_Spec_Qty;
	}

	public void setInvoice_Period_Buyer_Off_Spec_Qty(
			Vector invoice_Period_Buyer_Off_Spec_Qty) {
		this.invoice_Period_Buyer_Off_Spec_Qty = invoice_Period_Buyer_Off_Spec_Qty;
	}

	public Vector getInvoice_Period_Buyer_Shortfall_Qty() {
		return invoice_Period_Buyer_Shortfall_Qty;
	}

	public void setInvoice_Period_Buyer_Shortfall_Qty(
			Vector invoice_Period_Buyer_Shortfall_Qty) {
		this.invoice_Period_Buyer_Shortfall_Qty = invoice_Period_Buyer_Shortfall_Qty;
	}

	public Vector getInvoice_Period_Buyer_Suspension_Qty() {
		return invoice_Period_Buyer_Suspension_Qty;
	}

	public void setInvoice_Period_Buyer_Suspension_Qty(
			Vector invoice_Period_Buyer_Suspension_Qty) {
		this.invoice_Period_Buyer_Suspension_Qty = invoice_Period_Buyer_Suspension_Qty;
	}

	public Vector getInvoice_Period_Cumulative_Qty() {
		return invoice_Period_Cumulative_Qty;
	}

	public void setInvoice_Period_Cumulative_Qty(
			Vector invoice_Period_Cumulative_Qty) {
		this.invoice_Period_Cumulative_Qty = invoice_Period_Cumulative_Qty;
	}

	public Vector getInvoice_Period_Cumulative_SN_Qty() {
		return invoice_Period_Cumulative_SN_Qty;
	}

	public void setInvoice_Period_Cumulative_SN_Qty(
			Vector invoice_Period_Cumulative_SN_Qty) {
		this.invoice_Period_Cumulative_SN_Qty = invoice_Period_Cumulative_SN_Qty;
	}

	public Vector getInvoice_Period_Dates() {
		return invoice_Period_Dates;
	}

	public void setInvoice_Period_Dates(Vector invoice_Period_Dates) {
		this.invoice_Period_Dates = invoice_Period_Dates;
	}

	public Vector getInvoice_Period_DCQ() {
		return invoice_Period_DCQ;
	}

	public void setInvoice_Period_DCQ(Vector invoice_Period_DCQ) {
		this.invoice_Period_DCQ = invoice_Period_DCQ;
	}

	public Vector getInvoice_Period_Delv_Failure_Qty() {
		return invoice_Period_Delv_Failure_Qty;
	}

	public void setInvoice_Period_Delv_Failure_Qty(
			Vector invoice_Period_Delv_Failure_Qty) {
		this.invoice_Period_Delv_Failure_Qty = invoice_Period_Delv_Failure_Qty;
	}

	public Vector getInvoice_Period_FM_Qty() {
		return invoice_Period_FM_Qty;
	}

	public void setInvoice_Period_FM_Qty(Vector invoice_Period_FM_Qty) {
		this.invoice_Period_FM_Qty = invoice_Period_FM_Qty;
	}

	public Vector getInvoice_Period_Gas_Delivered_PNQ() {
		return invoice_Period_Gas_Delivered_PNQ;
	}

	public void setInvoice_Period_Gas_Delivered_PNQ(
			Vector invoice_Period_Gas_Delivered_PNQ) {
		this.invoice_Period_Gas_Delivered_PNQ = invoice_Period_Gas_Delivered_PNQ;
	}

	public Vector getInvoice_Period_Gas_Delivered_Re_Qty() {
		return invoice_Period_Gas_Delivered_Re_Qty;
	}

	public void setInvoice_Period_Gas_Delivered_Re_Qty(
			Vector invoice_Period_Gas_Delivered_Re_Qty) {
		this.invoice_Period_Gas_Delivered_Re_Qty = invoice_Period_Gas_Delivered_Re_Qty;
	}

	public Vector getInvoice_Period_Gas_Delivered_Total_Qty() {
		return invoice_Period_Gas_Delivered_Total_Qty;
	}

	public void setInvoice_Period_Gas_Delivered_Total_Qty(
			Vector invoice_Period_Gas_Delivered_Total_Qty) {
		this.invoice_Period_Gas_Delivered_Total_Qty = invoice_Period_Gas_Delivered_Total_Qty;
	}

	public Vector getInvoice_Period_LD_Credit_Payable() {
		return invoice_Period_LD_Credit_Payable;
	}

	public void setInvoice_Period_LD_Credit_Payable(
			Vector invoice_Period_LD_Credit_Payable) {
		this.invoice_Period_LD_Credit_Payable = invoice_Period_LD_Credit_Payable;
	}

	public Vector getInvoice_Period_Seller_Nom_PNQ() {
		return invoice_Period_Seller_Nom_PNQ;
	}

	public void setInvoice_Period_Seller_Nom_PNQ(
			Vector invoice_Period_Seller_Nom_PNQ) {
		this.invoice_Period_Seller_Nom_PNQ = invoice_Period_Seller_Nom_PNQ;
	}

	public Vector getInvoice_Period_Seller_Nom_RE_Qty() {
		return invoice_Period_Seller_Nom_RE_Qty;
	}

	public void setInvoice_Period_Seller_Nom_RE_Qty(
			Vector invoice_Period_Seller_Nom_RE_Qty) {
		this.invoice_Period_Seller_Nom_RE_Qty = invoice_Period_Seller_Nom_RE_Qty;
	}

	public Vector getInvoice_Period_Total_Shortfall_Qty() {
		return invoice_Period_Total_Shortfall_Qty;
	}

	public void setInvoice_Period_Total_Shortfall_Qty(
			Vector invoice_Period_Total_Shortfall_Qty) {
		this.invoice_Period_Total_Shortfall_Qty = invoice_Period_Total_Shortfall_Qty;
	}

	public String getInvoice_Sales_Rate() {
		return invoice_Sales_Rate;
	}

	public void setInvoice_Sales_Rate(String invoice_Sales_Rate) {
		this.invoice_Sales_Rate = invoice_Sales_Rate;
	}

	public String getInvoice_title() {
		return invoice_title;
	}

	public void setInvoice_title(String invoice_title) {
		this.invoice_title = invoice_title;
	}

	public String getLD_Credit_Payable_Total() {
		return LD_Credit_Payable_Total;
	}

	public void setLD_Credit_Payable_Total(String credit_Payable_Total) {
		LD_Credit_Payable_Total = credit_Payable_Total;
	}

	public String getLiability_exist_flag() {
		return liability_exist_flag;
	}

	public void setLiability_exist_flag(String liability_exist_flag) {
		this.liability_exist_flag = liability_exist_flag;
	}

	public String getMethodName() {
		return methodName;
	}

	public void setMethodName(String methodName) {
		this.methodName = methodName;
	}

	public String getMstadjust_flag() {
		return mstadjust_flag;
	}

	public void setMstadjust_flag(String mstadjust_flag) {
		this.mstadjust_flag = mstadjust_flag;
	}

	public String getMstcontract_type() {
		return mstcontract_type;
	}

	public void setMstcontract_type(String mstcontract_type) {
		this.mstcontract_type = mstcontract_type;
	}

	public String getMstcustomer_cd() {
		return mstcustomer_cd;
	}

	public void setMstcustomer_cd(String mstcustomer_cd) {
		this.mstcustomer_cd = mstcustomer_cd;
	}

	public String getMstfgsa_no() {
		return mstfgsa_no;
	}

	public void setMstfgsa_no(String mstfgsa_no) {
		this.mstfgsa_no = mstfgsa_no;
	}

	public String getMstfgsa_rev_no() {
		return mstfgsa_rev_no;
	}

	public void setMstfgsa_rev_no(String mstfgsa_rev_no) {
		this.mstfgsa_rev_no = mstfgsa_rev_no;
	}

	public String getMstsn_no() {
		return mstsn_no;
	}

	public void setMstsn_no(String mstsn_no) {
		this.mstsn_no = mstsn_no;
	}

	public String getMstsn_rev_no() {
		return mstsn_rev_no;
	}

	public void setMstsn_rev_no(String mstsn_rev_no) {
		this.mstsn_rev_no = mstsn_rev_no;
	}

	public String getOffspec_Amt_USD() {
		return offspec_Amt_USD;
	}

	public void setOffspec_Amt_USD(String offspec_Amt_USD) {
		this.offspec_Amt_USD = offspec_Amt_USD;
	}

	public String getOffspec_Flag() {
		return offspec_Flag;
	}

	public void setOffspec_Flag(String offspec_Flag) {
		this.offspec_Flag = offspec_Flag;
	}

	public String getOffspec_Sales_Rate() {
		return offspec_Sales_Rate;
	}

	public void setOffspec_Sales_Rate(String offspec_Sales_Rate) {
		this.offspec_Sales_Rate = offspec_Sales_Rate;
	}

	public String getRemark_1() {
		return remark_1;
	}

	public void setRemark_1(String remark_1) {
		this.remark_1 = remark_1;
	}

	public String getRemark_2() {
		return remark_2;
	}

	public void setRemark_2(String remark_2) {
		this.remark_2 = remark_2;
	}

	public String getRemark_3() {
		return remark_3;
	}

	public void setRemark_3(String remark_3) {
		this.remark_3 = remark_3;
	}

	public String getRemarks() {
		return remarks;
	}

	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}

	public HttpServletRequest getRequest() {
		return request;
	}

	public void setRequest(HttpServletRequest request) {
		this.request = request;
	}

	public String getSeller_Nom_PNQ_Total() {
		return Seller_Nom_PNQ_Total;
	}

	public void setSeller_Nom_PNQ_Total(String seller_Nom_PNQ_Total) {
		Seller_Nom_PNQ_Total = seller_Nom_PNQ_Total;
	}

	public String getSeller_Nom_RE_Qty_Total() {
		return Seller_Nom_RE_Qty_Total;
	}

	public void setSeller_Nom_RE_Qty_Total(String seller_Nom_RE_Qty_Total) {
		Seller_Nom_RE_Qty_Total = seller_Nom_RE_Qty_Total;
	}

	public String getSn_no() {
		return sn_no;
	}

	public void setSn_no(String sn_no) {
		this.sn_no = sn_no;
	}

	public String getSn_ref_no() {
		return sn_ref_no;
	}

	public void setSn_ref_no(String sn_ref_no) {
		this.sn_ref_no = sn_ref_no;
	}

	public int getSr_no() {
		return sr_no;
	}

	public void setSr_no(int sr_no) {
		this.sr_no = sr_no;
	}

	public String getTotal_Gas_Delivered() {
		return total_Gas_Delivered;
	}

	public void setTotal_Gas_Delivered(String total_Gas_Delivered) {
		this.total_Gas_Delivered = total_Gas_Delivered;
	}

	public String getTotal_Invoice_Qty() {
		return total_Invoice_Qty;
	}

	public void setTotal_Invoice_Qty(String total_Invoice_Qty) {
		this.total_Invoice_Qty = total_Invoice_Qty;
	}

	public String getTotal_Offspec_Qty() {
		return total_Offspec_Qty;
	}

	public void setTotal_Offspec_Qty(String total_Offspec_Qty) {
		this.total_Offspec_Qty = total_Offspec_Qty;
	}

	public String getTotal_Shortfall_Qty_Total() {
		return Total_Shortfall_Qty_Total;
	}

	public void setTotal_Shortfall_Qty_Total(String total_Shortfall_Qty_Total) {
		Total_Shortfall_Qty_Total = total_Shortfall_Qty_Total;
	}

	public String getTotal_tax_amt() {
		return total_tax_amt;
	}

	public void setTotal_tax_amt(String total_tax_amt) {
		this.total_tax_amt = total_tax_amt;
	}

	public String getUrl_start() {
		return url_start;
	}

	public void setUrl_start(String url_start) {
		this.url_start = url_start;
	}

	public Vector getVSTAT_CD() {
		return vSTAT_CD;
	}

	public void setVSTAT_CD(Vector vstat_cd) {
		vSTAT_CD = vstat_cd;
	}

	public Vector getVSTAT_EFF_DT() {
		return vSTAT_EFF_DT;
	}

	public void setVSTAT_EFF_DT(Vector vstat_eff_dt) {
		vSTAT_EFF_DT = vstat_eff_dt;
	}

	public Vector getVSTAT_NM() {
		return vSTAT_NM;
	}

	public void setVSTAT_NM(Vector vstat_nm) {
		vSTAT_NM = vstat_nm;
	}

	public Vector getVSTAT_NO() {
		return vSTAT_NO;
	}

	public void setVSTAT_NO(Vector vstat_no) {
		vSTAT_NO = vstat_no;
	}

	public String getParty_cd() {
		return party_cd;
	}

	public Vector getModifycustomer_Invoice_Tax_Abbr() {
		return modifycustomer_Invoice_Tax_Abbr;
	}

	public void setModifycustomer_Invoice_Tax_Abbr(
			Vector modifycustomer_Invoice_Tax_Abbr) {
		this.modifycustomer_Invoice_Tax_Abbr = modifycustomer_Invoice_Tax_Abbr;
	}

	public Vector getModifycustomer_Invoice_Tax_Amt() {
		return modifycustomer_Invoice_Tax_Amt;
	}

	public void setModifycustomer_Invoice_Tax_Amt(
			Vector modifycustomer_Invoice_Tax_Amt) {
		this.modifycustomer_Invoice_Tax_Amt = modifycustomer_Invoice_Tax_Amt;
	}

	public Vector getModifycustomer_Invoice_Tax_Code() {
		return modifycustomer_Invoice_Tax_Code;
	}

	public void setModifycustomer_Invoice_Tax_Code(
			Vector modifycustomer_Invoice_Tax_Code) {
		this.modifycustomer_Invoice_Tax_Code = modifycustomer_Invoice_Tax_Code;
	}

	public Vector getModifycustomer_Invoice_Tax_Name() {
		return modifycustomer_Invoice_Tax_Name;
	}

	public void setModifycustomer_Invoice_Tax_Name(
			Vector modifycustomer_Invoice_Tax_Name) {
		this.modifycustomer_Invoice_Tax_Name = modifycustomer_Invoice_Tax_Name;
	}

	public Vector getModifycustomer_Invoice_Tax_Rate() {
		return modifycustomer_Invoice_Tax_Rate;
	}

	public void setModifycustomer_Invoice_Tax_Rate(
			Vector modifycustomer_Invoice_Tax_Rate) {
		this.modifycustomer_Invoice_Tax_Rate = modifycustomer_Invoice_Tax_Rate;
	}

	public String getModifycustomercd() {
		return modifycustomercd;
	}

	public void setModifycustomercd(String modifycustomercd) {
		this.modifycustomercd = modifycustomercd;
	}

	public String getModifyexchngratevalue() {
		return modifyexchngratevalue;
	}

	public void setModifyexchngratevalue(String modifyexchngratevalue) {
		this.modifyexchngratevalue = modifyexchngratevalue;
	}

	public String getModifyFinancialYear() {
		return modifyFinancialYear;
	}

	public void setModifyFinancialYear(String modifyFinancialYear) {
		this.modifyFinancialYear = modifyFinancialYear;
	}

	public String getModifygrossamtadjusted() {
		return modifygrossamtadjusted;
	}

	public void setModifygrossamtadjusted(String modifygrossamtadjusted) {
		this.modifygrossamtadjusted = modifygrossamtadjusted;
	}

	public String getModifygrossamtinr() {
		return modifygrossamtinr;
	}

	public void setModifygrossamtinr(String modifygrossamtinr) {
		this.modifygrossamtinr = modifygrossamtinr;
	}

	public String getModifygrossamtinradjusted() {
		return modifygrossamtinradjusted;
	}

	public void setModifygrossamtinradjusted(String modifygrossamtinradjusted) {
		this.modifygrossamtinradjusted = modifygrossamtinradjusted;
	}

	public String getModifygrossamtusd() {
		return modifygrossamtusd;
	}

	public void setModifygrossamtusd(String modifygrossamtusd) {
		this.modifygrossamtusd = modifygrossamtusd;
	}

	public String getModifyhlplInvoiceNo() {
		return modifyhlplInvoiceNo;
	}

	public void setModifyhlplInvoiceNo(String modifyhlplInvoiceNo) {
		this.modifyhlplInvoiceNo = modifyhlplInvoiceNo;
	}

	public String getModifynetamtinr() {
		return modifynetamtinr;
	}

	public void setModifynetamtinr(String modifynetamtinr) {
		this.modifynetamtinr = modifynetamtinr;
	}

	public String getModifyplantseqno() {
		return modifyplantseqno;
	}

	public void setModifyplantseqno(String modifyplantseqno) {
		this.modifyplantseqno = modifyplantseqno;
	}

	public String getModifytaxaminr() {
		return modifytaxaminr;
	}

	public void setModifytaxaminr(String modifytaxaminr) {
		this.modifytaxaminr = modifytaxaminr;
	}

	public String getModifyadjamt() {
		return modifyadjamt;
	}

	public void setModifyadjamt(String modifyadjamt) {
		this.modifyadjamt = modifyadjamt;
	}

	public String getModifyadjcur() {
		return modifyadjcur;
	}

	public void setModifyadjcur(String modifyadjcur) {
		this.modifyadjcur = modifyadjcur;
	}

	public String getModifyadjflag() {
		return modifyadjflag;
	}

	public void setModifyadjflag(String modifyadjflag) {
		this.modifyadjflag = modifyadjflag;
	}

	public String getModifyadjrecv() {
		return modifyadjrecv;
	}

	public void setModifyadjrecv(String modifyadjrecv) {
		this.modifyadjrecv = modifyadjrecv;
	}

	public String getModifyadjremark() {
		return modifyadjremark;
	}

	public void setModifyadjremark(String modifyadjremark) {
		this.modifyadjremark = modifyadjremark;
	}

	public String getModifyadjsign() {
		return modifyadjsign;
	}

	public void setModifyadjsign(String modifyadjsign) {
		this.modifyadjsign = modifyadjsign;
	}

	public String getModifybillperiodenddate() {
		return modifybillperiodenddate;
	}

	public void setModifybillperiodenddate(String modifybillperiodenddate) {
		this.modifybillperiodenddate = modifybillperiodenddate;
	}

	public String getModifycontract_type() {
		return modifycontract_type;
	}

	public void setModifycontract_type(String modifycontract_type) {
		this.modifycontract_type = modifycontract_type;
	}

	public String getModifycustomer_Invoice_Gross_Amt_INR() {
		return modifycustomer_Invoice_Gross_Amt_INR;
	}

	public void setModifycustomer_Invoice_Gross_Amt_INR(
			String modifycustomer_Invoice_Gross_Amt_INR) {
		this.modifycustomer_Invoice_Gross_Amt_INR = modifycustomer_Invoice_Gross_Amt_INR;
	}

	public String getModifycustomer_Invoice_Net_Amt_INR() {
		return modifycustomer_Invoice_Net_Amt_INR;
	}

	public void setModifycustomer_Invoice_Net_Amt_INR(
			String modifycustomer_Invoice_Net_Amt_INR) {
		this.modifycustomer_Invoice_Net_Amt_INR = modifycustomer_Invoice_Net_Amt_INR;
	}

	public String getModifytotalavailbal1() {
		return modifytotalavailbal1;
	}

	public void setModifytotalavailbal1(String modifytotalavailbal1) {
		this.modifytotalavailbal1 = modifytotalavailbal1;
	}

	public String getModifyexchangerateselected() {
		return modifyexchangerateselected;
	}

	public void setModifyexchangerateselected(String modifyexchangerateselected) {
		this.modifyexchangerateselected = modifyexchangerateselected;
	}

	public String getInvoicedt() {
		return invoicedt;
	}

	public void setInvoicedt(String invoicedt) {
		this.invoicedt = invoicedt;
	}




	public Vector getAdjusted_amt_invoice() {
		return adjusted_amt_invoice;
	}




	public void setAdjusted_amt_invoice(Vector adjusted_amt_invoice) {
		this.adjusted_amt_invoice = adjusted_amt_invoice;
	}




	public Vector getAdjusted_seq_no_invoice() {
		return adjusted_seq_no_invoice;
	}




	public void setAdjusted_seq_no_invoice(Vector adjusted_seq_no_invoice) {
		this.adjusted_seq_no_invoice = adjusted_seq_no_invoice;
	}




	public String getContract_type_update() {
		return Contract_type_update;
	}




	public void setContract_type_update(String contract_type_update) {
		Contract_type_update = contract_type_update;
	}




	public String getCustomer_cd_update() {
		return Customer_cd_update;
	}




	public void setCustomer_cd_update(String customer_cd_update) {
		Customer_cd_update = customer_cd_update;
	}




	public String getCustomer_plant_seq_no_update() {
		return Customer_plant_seq_no_update;
	}




	public void setCustomer_plant_seq_no_update(String customer_plant_seq_no_update) {
		Customer_plant_seq_no_update = customer_plant_seq_no_update;
	}




	public String getHlpl_inv_seq_no2_update() {
		return Hlpl_inv_seq_no2_update;
	}




	public void setHlpl_inv_seq_no2_update(String hlpl_inv_seq_no2_update) {
		Hlpl_inv_seq_no2_update = hlpl_inv_seq_no2_update;
	}




	public String getInv_financial_year_update() {
		return Inv_financial_year_update;
	}




	public void setInv_financial_year_update(String inv_financial_year_update) {
		Inv_financial_year_update = inv_financial_year_update;
	}

	public Vector getAdjusted_sign_invoice() {
		return adjusted_sign_invoice;
	}

	public void setAdjusted_sign_invoice(Vector adjusted_sign_invoice) {
		this.adjusted_sign_invoice = adjusted_sign_invoice;
	}

	public Vector getAdvance_customer_aval_balance() {
		return advance_customer_aval_balance;
	}

	public void setAdvance_customer_aval_balance(
			Vector advance_customer_aval_balance) {
		this.advance_customer_aval_balance = advance_customer_aval_balance;
	}

	public String getInvoice_adj_remark() {
		return Invoice_adj_remark;
	}

	public void setInvoice_adj_remark(String invoice_adj_remark) {
		Invoice_adj_remark = invoice_adj_remark;
	}

	public String getInvoice_att3_pdf_path() {
		return invoice_att3_pdf_path;
	}

	public void setInvoice_att3_pdf_path(String invoice_att3_pdf_path) {
		this.invoice_att3_pdf_path = invoice_att3_pdf_path;
	}

	public String getInvoice_att3_file_name() {
		return invoice_att3_file_name;
	}

	public void setInvoice_att3_file_name(String invoice_att3_file_name) {
		this.invoice_att3_file_name = invoice_att3_file_name;
	}


	public Vector getDRCRcust_cd() {
		return DRCRcust_cd;
	}


	public void setDRCRcust_cd(Vector rcust_cd) {
		DRCRcust_cd = rcust_cd;
	}


	public Vector getDRCRcust_nm() {
		return DRCRcust_nm;
	}


	public void setDRCRcust_nm(Vector rcust_nm) {
		DRCRcust_nm = rcust_nm;
	}


	public Vector getDRCRcust_abbr() {
		return DRCRcust_abbr;
	}


	public void setDRCRcust_abbr(Vector rcust_abbr) {
		DRCRcust_abbr = rcust_abbr;
	}


	public String getDRCRcontact_customer_name() {
		return DRCRcontact_customer_name;
	}


	public void setDRCRcontact_customer_name(String rcontact_customer_name) {
		DRCRcontact_customer_name = rcontact_customer_name;
	}


	public String getDRCRcontact_Customer_Person_Address() {
		return DRCRcontact_Customer_Person_Address;
	}


	public void setDRCRcontact_Customer_Person_Address(
			String rcontact_Customer_Person_Address) {
		DRCRcontact_Customer_Person_Address = rcontact_Customer_Person_Address;
	}


	public String getDRCRcontact_Customer_Person_City() {
		return DRCRcontact_Customer_Person_City;
	}


	public void setDRCRcontact_Customer_Person_City(
			String rcontact_Customer_Person_City) {
		DRCRcontact_Customer_Person_City = rcontact_Customer_Person_City;
	}


	public String getDRCRcontact_Customer_Person_Pin() {
		return DRCRcontact_Customer_Person_Pin;
	}


	public void setDRCRcontact_Customer_Person_Pin(
			String rcontact_Customer_Person_Pin) {
		DRCRcontact_Customer_Person_Pin = rcontact_Customer_Person_Pin;
	}


	public String getDRCRcustomer_cd() {
		return DRCRcustomer_cd;
	}


	public void setDRCRcustomer_cd(String rcustomer_cd) {
		DRCRcustomer_cd = rcustomer_cd;
	}


	public String getDRCRcontact_Suppl_CST_DT() {
		return DRCRcontact_Suppl_CST_DT;
	}


	public void setDRCRcontact_Suppl_CST_DT(String rcontact_Suppl_CST_DT) {
		DRCRcontact_Suppl_CST_DT = rcontact_Suppl_CST_DT;
	}


	public String getDRCRcontact_Suppl_CST_NO() {
		return DRCRcontact_Suppl_CST_NO;
	}


	public void setDRCRcontact_Suppl_CST_NO(String rcontact_Suppl_CST_NO) {
		DRCRcontact_Suppl_CST_NO = rcontact_Suppl_CST_NO;
	}


	public String getDRCRcontact_Suppl_GST_DT() {
		return DRCRcontact_Suppl_GST_DT;
	}


	public void setDRCRcontact_Suppl_GST_DT(String rcontact_Suppl_GST_DT) {
		DRCRcontact_Suppl_GST_DT = rcontact_Suppl_GST_DT;
	}


	public String getDRCRcontact_Suppl_GST_NO() {
		return DRCRcontact_Suppl_GST_NO;
	}


	public void setDRCRcontact_Suppl_GST_NO(String rcontact_Suppl_GST_NO) {
		DRCRcontact_Suppl_GST_NO = rcontact_Suppl_GST_NO;
	}


	public String getDRCRcontact_Suppl_Name() {
		return DRCRcontact_Suppl_Name;
	}


	public void setDRCRcontact_Suppl_Name(String rcontact_Suppl_Name) {
		DRCRcontact_Suppl_Name = rcontact_Suppl_Name;
	}


	public String getDRCRcontact_Suppl_Service_Tax_DT() {
		return DRCRcontact_Suppl_Service_Tax_DT;
	}


	public void setDRCRcontact_Suppl_Service_Tax_DT(
			String rcontact_Suppl_Service_Tax_DT) {
		DRCRcontact_Suppl_Service_Tax_DT = rcontact_Suppl_Service_Tax_DT;
	}


	public String getDRCRcontact_Suppl_Service_Tax_NO() {
		return DRCRcontact_Suppl_Service_Tax_NO;
	}


	public void setDRCRcontact_Suppl_Service_Tax_NO(
			String rcontact_Suppl_Service_Tax_NO) {
		DRCRcontact_Suppl_Service_Tax_NO = rcontact_Suppl_Service_Tax_NO;
	}


	public String getDRCRcontact_Suppl_Person_Address() {
		return DRCRcontact_Suppl_Person_Address;
	}


	public void setDRCRcontact_Suppl_Person_Address(
			String rcontact_Suppl_Person_Address) {
		DRCRcontact_Suppl_Person_Address = rcontact_Suppl_Person_Address;
	}


	public String getDRCRcontact_Suppl_Person_City() {
		return DRCRcontact_Suppl_Person_City;
	}


	public void setDRCRcontact_Suppl_Person_City(String rcontact_Suppl_Person_City) {
		DRCRcontact_Suppl_Person_City = rcontact_Suppl_Person_City;
	}


	public String getDRCRcontact_Suppl_Person_Pin() {
		return DRCRcontact_Suppl_Person_Pin;
	}


	public void setDRCRcontact_Suppl_Person_Pin(String rcontact_Suppl_Person_Pin) {
		DRCRcontact_Suppl_Person_Pin = rcontact_Suppl_Person_Pin;
	}


	public String getDRCRcustomer_Invoice_Exchg_Rate_Cd() {
		return DRCRcustomer_Invoice_Exchg_Rate_Cd;
	}


	public void setDRCRcustomer_Invoice_Exchg_Rate_Cd(
			String rcustomer_Invoice_Exchg_Rate_Cd) {
		DRCRcustomer_Invoice_Exchg_Rate_Cd = rcustomer_Invoice_Exchg_Rate_Cd;
	}


	public Vector getDRCRcustomer_Invoice_Exchg_Rate_Code() {
		return DRCRcustomer_Invoice_Exchg_Rate_Code;
	}


	public void setDRCRcustomer_Invoice_Exchg_Rate_Code(
			Vector rcustomer_Invoice_Exchg_Rate_Code) {
		DRCRcustomer_Invoice_Exchg_Rate_Code = rcustomer_Invoice_Exchg_Rate_Code;
	}


	public Vector getDRCRcustomer_Invoice_Exchg_Rate_Value() {
		return DRCRcustomer_Invoice_Exchg_Rate_Value;
	}


	public void setDRCRcustomer_Invoice_Exchg_Rate_Value(
			Vector rcustomer_Invoice_Exchg_Rate_Value) {
		DRCRcustomer_Invoice_Exchg_Rate_Value = rcustomer_Invoice_Exchg_Rate_Value;
	}


	public String getDRCRexchg_rate_dt() {
		return DRCRexchg_rate_dt;
	}


	public void setDRCRexchg_rate_dt(String rexchg_rate_dt) {
		DRCRexchg_rate_dt = rexchg_rate_dt;
	}


	public String getDRCRrbi_ref_cd() {
		return DRCRrbi_ref_cd;
	}


	public void setDRCRrbi_ref_cd(String rrbi_ref_cd) {
		DRCRrbi_ref_cd = rrbi_ref_cd;
	}


	public String getDRCRsbi_avg_tt_selling_buying_cd() {
		return DRCRsbi_avg_tt_selling_buying_cd;
	}


	public void setDRCRsbi_avg_tt_selling_buying_cd(
			String rsbi_avg_tt_selling_buying_cd) {
		DRCRsbi_avg_tt_selling_buying_cd = rsbi_avg_tt_selling_buying_cd;
	}


	public String getDRCRsbi_tt_buying_cd() {
		return DRCRsbi_tt_buying_cd;
	}


	public void setDRCRsbi_tt_buying_cd(String rsbi_tt_buying_cd) {
		DRCRsbi_tt_buying_cd = rsbi_tt_buying_cd;
	}


	public String getDRCRsbi_tt_selling_cd() {
		return DRCRsbi_tt_selling_cd;
	}


	public void setDRCRsbi_tt_selling_cd(String rsbi_tt_selling_cd) {
		DRCRsbi_tt_selling_cd = rsbi_tt_selling_cd;
	}


	public Vector getDRCRcustomer_Invoice_Exchg_Rate_Name() {
		return DRCRcustomer_Invoice_Exchg_Rate_Name;
	}


	public void setDRCRcustomer_Invoice_Exchg_Rate_Name(
			Vector rcustomer_Invoice_Exchg_Rate_Name) {
		DRCRcustomer_Invoice_Exchg_Rate_Name = rcustomer_Invoice_Exchg_Rate_Name;
	}


	public Vector getDRCRcustomer_Invoice_Exchg_Rate_Date() {
		return DRCRcustomer_Invoice_Exchg_Rate_Date;
	}


	public void setDRCRcustomer_Invoice_Exchg_Rate_Date(
			Vector rcustomer_Invoice_Exchg_Rate_Date) {
		DRCRcustomer_Invoice_Exchg_Rate_Date = rcustomer_Invoice_Exchg_Rate_Date;
	}


	public String getDRCR_attach_exchngrate_dt() {
		return DRCR_attach_exchngrate_dt;
	}


	public void setDRCR_attach_exchngrate_dt(String drcr_attach_exchngrate_dt) {
		DRCR_attach_exchngrate_dt = drcr_attach_exchngrate_dt;
	}


	public String getDRCRcustomer_Attach_Exchg_Rate_Cd() {
		return DRCRcustomer_Attach_Exchg_Rate_Cd;
	}


	public void setDRCRcustomer_Attach_Exchg_Rate_Cd(
			String rcustomer_Attach_Exchg_Rate_Cd) {
		DRCRcustomer_Attach_Exchg_Rate_Cd = rcustomer_Attach_Exchg_Rate_Cd;
	}


	public String getDRCRcustomer_Attach_Exchg_Rate_Value() {
		return DRCRcustomer_Attach_Exchg_Rate_Value;
	}


	public void setDRCRcustomer_Attach_Exchg_Rate_Value(
			String rcustomer_Attach_Exchg_Rate_Value) {
		DRCRcustomer_Attach_Exchg_Rate_Value = rcustomer_Attach_Exchg_Rate_Value;
	}


	public String getDRCR_tax_customer_cd() {
		return DRCR_tax_customer_cd;
	}


	public void setDRCR_tax_customer_cd(String drcr_tax_customer_cd) {
		DRCR_tax_customer_cd = drcr_tax_customer_cd;
	}


	public String getDRCR_tax_customer_tax() {
		return DRCR_tax_customer_tax;
	}


	public void setDRCR_tax_customer_tax(String drcr_tax_customer_tax) {
		DRCR_tax_customer_tax = drcr_tax_customer_tax;
	}


	public String getDRCR_tax_note_date() {
		return DRCR_tax_note_date;
	}


	public void setDRCR_tax_note_date(String drcr_tax_note_date) {
		DRCR_tax_note_date = drcr_tax_note_date;
	}


	public String getDRCR_tax_struct_cd() {
		return DRCR_tax_struct_cd;
	}


	public void setDRCR_tax_struct_cd(String drcr_tax_struct_cd) {
		DRCR_tax_struct_cd = drcr_tax_struct_cd;
	}


	public String getDRCR_tax_structure_dtl() {
		return DRCR_tax_structure_dtl;
	}


	public void setDRCR_tax_structure_dtl(String drcr_tax_structure_dtl) {
		DRCR_tax_structure_dtl = drcr_tax_structure_dtl;
	}


	public String getDRCRcustomer_Invoice_Gross_Amt_INR() {
		return DRCRcustomer_Invoice_Gross_Amt_INR;
	}


	public void setDRCRcustomer_Invoice_Gross_Amt_INR(
			String rcustomer_Invoice_Gross_Amt_INR) {
		DRCRcustomer_Invoice_Gross_Amt_INR = rcustomer_Invoice_Gross_Amt_INR;
	}


	public String getDRCRcustomer_Invoice_Net_Amt_INR() {
		return DRCRcustomer_Invoice_Net_Amt_INR;
	}


	public void setDRCRcustomer_Invoice_Net_Amt_INR(
			String rcustomer_Invoice_Net_Amt_INR) {
		DRCRcustomer_Invoice_Net_Amt_INR = rcustomer_Invoice_Net_Amt_INR;
	}


	public Vector getDRCRcustomer_Invoice_Tax_Abbr() {
		return DRCRcustomer_Invoice_Tax_Abbr;
	}


	public void setDRCRcustomer_Invoice_Tax_Abbr(Vector rcustomer_Invoice_Tax_Abbr) {
		DRCRcustomer_Invoice_Tax_Abbr = rcustomer_Invoice_Tax_Abbr;
	}


	public Vector getDRCRcustomer_Invoice_Tax_Amt() {
		return DRCRcustomer_Invoice_Tax_Amt;
	}


	public void setDRCRcustomer_Invoice_Tax_Amt(Vector rcustomer_Invoice_Tax_Amt) {
		DRCRcustomer_Invoice_Tax_Amt = rcustomer_Invoice_Tax_Amt;
	}


	public Vector getDRCRcustomer_Invoice_Tax_Code() {
		return DRCRcustomer_Invoice_Tax_Code;
	}


	public void setDRCRcustomer_Invoice_Tax_Code(Vector rcustomer_Invoice_Tax_Code) {
		DRCRcustomer_Invoice_Tax_Code = rcustomer_Invoice_Tax_Code;
	}


	public Vector getDRCRcustomer_Invoice_Tax_Name() {
		return DRCRcustomer_Invoice_Tax_Name;
	}


	public void setDRCRcustomer_Invoice_Tax_Name(Vector rcustomer_Invoice_Tax_Name) {
		DRCRcustomer_Invoice_Tax_Name = rcustomer_Invoice_Tax_Name;
	}


	public Vector getDRCRcustomer_Invoice_Tax_Rate() {
		return DRCRcustomer_Invoice_Tax_Rate;
	}


	public void setDRCRcustomer_Invoice_Tax_Rate(Vector rcustomer_Invoice_Tax_Rate) {
		DRCRcustomer_Invoice_Tax_Rate = rcustomer_Invoice_Tax_Rate;
	}


	public String getDRCRcustomer_Invoice_Tax_Net_Amt_INR() {
		return DRCRcustomer_Invoice_Tax_Net_Amt_INR;
	}


	public void setDRCRcustomer_Invoice_Tax_Net_Amt_INR(
			String rcustomer_Invoice_Tax_Net_Amt_INR) {
		DRCRcustomer_Invoice_Tax_Net_Amt_INR = rcustomer_Invoice_Tax_Net_Amt_INR;
	}


	public String getModifyfgsano() {
		return modifyfgsano;
	}


	public void setModifyfgsano(String modifyfgsano) {
		this.modifyfgsano = modifyfgsano;
	}


	public String getModifysnno() {
		return modifysnno;
	}


	public void setModifysnno(String modifysnno) {
		this.modifysnno = modifysnno;
	}


	public String getModifyadjustamtmst() {
		return modifyadjustamtmst;
	}


	public void setModifyadjustamtmst(String modifyadjustamtmst) {
		this.modifyadjustamtmst = modifyadjustamtmst;
	}

	public String getModifydiscount_flag() {
		return modifydiscount_flag;
	}

	public void setModifydiscount_flag(String modifydiscount_flag) {
		this.modifydiscount_flag = modifydiscount_flag;
	}

	public String getModifytariff_flag() {
		return modifytariff_flag;
	}

	public void setModifytariff_flag(String modifytariff_flag) {
		this.modifytariff_flag = modifytariff_flag;
	}

	public String getAdjust_gross_amt_inr() {
		return adjust_gross_amt_inr;
	}

	public void setAdjust_gross_amt_inr(String adjust_gross_amt_inr) {
		this.adjust_gross_amt_inr = adjust_gross_amt_inr;
	}

	public String getAdjust_gross_amt_usd() {
		return adjust_gross_amt_usd;
	}

	public void setAdjust_gross_amt_usd(String adjust_gross_amt_usd) {
		this.adjust_gross_amt_usd = adjust_gross_amt_usd;
	}

	public String getDiscount_gross_amt_inr() {
		return discount_gross_amt_inr;
	}

	public void setDiscount_gross_amt_inr(String discount_gross_amt_inr) {
		this.discount_gross_amt_inr = discount_gross_amt_inr;
	}

	public String getDiscount_gross_amt_usd() {
		return discount_gross_amt_usd;
	}

	public void setDiscount_gross_amt_usd(String discount_gross_amt_usd) {
		this.discount_gross_amt_usd = discount_gross_amt_usd;
	}

	public String getDisplay_rate() {
		return display_rate;
	}

	public void setDisplay_rate(String display_rate) {
		this.display_rate = display_rate;
	}

	public String getFinal_adjust_gross_amt() {
		return Final_adjust_gross_amt;
	}

	public void setFinal_adjust_gross_amt(String final_adjust_gross_amt) {
		Final_adjust_gross_amt = final_adjust_gross_amt;
	}

	public String getFinal_first_gross_amt() {
		return Final_first_gross_amt;
	}

	public void setFinal_first_gross_amt(String final_first_gross_amt) {
		Final_first_gross_amt = final_first_gross_amt;
	}

	public String getInvdiscount_flag() {
		return invdiscount_flag;
	}

	public void setInvdiscount_flag(String invdiscount_flag) {
		this.invdiscount_flag = invdiscount_flag;
	}

	public String getInvdiscount_price() {
		return invdiscount_price;
	}

	public void setInvdiscount_price(String invdiscount_price) {
		this.invdiscount_price = invdiscount_price;
	}

	public String getInvtariff_flag() {
		return invtariff_flag;
	}

	public void setInvtariff_flag(String invtariff_flag) {
		this.invtariff_flag = invtariff_flag;
	}

	public String getInvtariff_total_inr() {
		return invtariff_total_inr;
	}

	public void setInvtariff_total_inr(String invtariff_total_inr) {
		this.invtariff_total_inr = invtariff_total_inr;
	}

	public String getTariff_gross_amt_inr() {
		return tariff_gross_amt_inr;
	}

	public void setTariff_gross_amt_inr(String tariff_gross_amt_inr) {
		this.tariff_gross_amt_inr = tariff_gross_amt_inr;
	}

	public String getTariff_gross_amt_usd() {
		return tariff_gross_amt_usd;
	}

	public void setTariff_gross_amt_usd(String tariff_gross_amt_usd) {
		this.tariff_gross_amt_usd = tariff_gross_amt_usd;
	}

	public String getFinal_Total_Collection() {
		return Final_Total_Collection;
	}

	public void setFinal_Total_Collection(String final_Total_Collection) {
		Final_Total_Collection = final_Total_Collection;
	}

	public String getFinal_Total_Currency() {
		return Final_Total_Currency;
	}

	public void setFinal_Total_Currency(String final_Total_Currency) {
		Final_Total_Currency = final_Total_Currency;
	}

	public Vector getCust_plant_cd() {
		return cust_plant_cd;
	}

	public void setCust_plant_cd(Vector cust_plant_cd) {
		this.cust_plant_cd = cust_plant_cd;
	}

	public Vector getCust_plant_nm() {
		return cust_plant_nm;
	}

	public void setCust_plant_nm(Vector cust_plant_nm) {
		this.cust_plant_nm = cust_plant_nm;
	}

	public String getDRCRcontact_customer_cst_tin_dt() {
		return DRCRcontact_customer_cst_tin_dt;
	}

	public void setDRCRcontact_customer_cst_tin_dt(
			String rcontact_customer_cst_tin_dt) {
		DRCRcontact_customer_cst_tin_dt = rcontact_customer_cst_tin_dt;
	}

	public String getDRCRcontact_customer_cst_tin_no() {
		return DRCRcontact_customer_cst_tin_no;
	}

	public void setDRCRcontact_customer_cst_tin_no(
			String rcontact_customer_cst_tin_no) {
		DRCRcontact_customer_cst_tin_no = rcontact_customer_cst_tin_no;
	}

	public String getDRCRcontact_customer_gst_tin_dt() {
		return DRCRcontact_customer_gst_tin_dt;
	}

	public void setDRCRcontact_customer_gst_tin_dt(
			String rcontact_customer_gst_tin_dt) {
		DRCRcontact_customer_gst_tin_dt = rcontact_customer_gst_tin_dt;
	}

	public String getDRCRcontact_customer_gst_tin_no() {
		return DRCRcontact_customer_gst_tin_no;
	}

	public void setDRCRcontact_customer_gst_tin_no(
			String rcontact_customer_gst_tin_no) {
		DRCRcontact_customer_gst_tin_no = rcontact_customer_gst_tin_no;
	}

	public String getDRCRcontact_Customer_Person_State() {
		return DRCRcontact_Customer_Person_State;
	}

	public void setDRCRcontact_Customer_Person_State(
			String rcontact_Customer_Person_State) {
		DRCRcontact_Customer_Person_State = rcontact_Customer_Person_State;
	}

	public String getCustomer_cd_crdr_rpt() {
		return Customer_cd_crdr_rpt;
	}

	public void setCustomer_cd_crdr_rpt(String customer_cd_crdr_rpt) {
		Customer_cd_crdr_rpt = customer_cd_crdr_rpt;
	}

	public String getPlant_cd_crdr_rpt() {
		return Plant_cd_crdr_rpt;
	}

	public void setPlant_cd_crdr_rpt(String plant_cd_crdr_rpt) {
		Plant_cd_crdr_rpt = plant_cd_crdr_rpt;
	}

	public String getCr_dr_rpt() {
		return cr_dr_rpt;
	}

	public void setCr_dr_rpt(String cr_dr_rpt) {
		this.cr_dr_rpt = cr_dr_rpt;
	}

	public Vector getCR_DR_DT() {
		return CR_DR_DT;
	}

	public void setCR_DR_DT(Vector cr_dr_dt) {
		CR_DR_DT = cr_dr_dt;
	}

	public Vector getCR_DR_EXCHG_RT_DIFF() {
		return CR_DR_EXCHG_RT_DIFF;
	}

	public void setCR_DR_EXCHG_RT_DIFF(Vector cr_dr_exchg_rt_diff) {
		CR_DR_EXCHG_RT_DIFF = cr_dr_exchg_rt_diff;
	}

	public Vector getCR_DR_INV_DT() {
		return CR_DR_INV_DT;
	}

	public void setCR_DR_INV_DT(Vector cr_dr_inv_dt) {
		CR_DR_INV_DT = cr_dr_inv_dt;
	}

	public Vector getCR_DR_INV_NO() {
		return CR_DR_INV_NO;
	}

	public void setCR_DR_INV_NO(Vector cr_dr_inv_no) {
		CR_DR_INV_NO = cr_dr_inv_no;
	}

	public Vector getCR_DR_NET_AMT_INR() {
		return CR_DR_NET_AMT_INR;
	}

	public void setCR_DR_NET_AMT_INR(Vector cr_dr_net_amt_inr) {
		CR_DR_NET_AMT_INR = cr_dr_net_amt_inr;
	}

	public Vector getCR_DR_NO() {
		return CR_DR_NO;
	}

	public void setCR_DR_NO(Vector cr_dr_no) {
		CR_DR_NO = cr_dr_no;
	}

	public Vector getCR_DR() {
		return CR_DR;
	}

	public void setCR_DR(Vector cr_dr) {
		CR_DR = cr_dr;
	}

	public Vector getCR_DR_PLANT_SEQ_NO() {
		return CR_DR_PLANT_SEQ_NO;
	}

	public void setCR_DR_PLANT_SEQ_NO(Vector cr_dr_plant_seq_no) {
		CR_DR_PLANT_SEQ_NO = cr_dr_plant_seq_no;
	}

	public Vector getCR_DR_PLANT_NAME() {
		return CR_DR_PLANT_NAME;
	}

	public void setCR_DR_PLANT_NAME(Vector cr_dr_plant_name) {
		CR_DR_PLANT_NAME = cr_dr_plant_name;
	}

	public Vector getCR_DR_SEQ_NO() {
		return CR_DR_SEQ_NO;
	}

	public void setCR_DR_SEQ_NO(Vector cr_dr_seq_no) {
		CR_DR_SEQ_NO = cr_dr_seq_no;
	}

	public String getCrdr() {
		return crdr;
	}

	public void setCrdr(String crdr) {
		this.crdr = crdr;
	}

	public String getCustcd() {
		return custcd;
	}

	public void setCustcd(String custcd) {
		this.custcd = custcd;
	}

	public String getPlant_cd() {
		return plant_cd;
	}

	public void setPlant_cd(String plant_cd) {
		this.plant_cd = plant_cd;
	}

	public String getSeqno() {
		return seqno;
	}

	public void setSeqno(String seqno) {
		this.seqno = seqno;
	}

	public String getCr_dr_exch_cd() {
		return cr_dr_exch_cd;
	}

	public void setCr_dr_exch_cd(String cr_dr_exch_cd) {
		this.cr_dr_exch_cd = cr_dr_exch_cd;
	}

	public String getCr_dr_exchg_rate_diff() {
		return cr_dr_exchg_rate_diff;
	}

	public void setCr_dr_exchg_rate_diff(String cr_dr_exchg_rate_diff) {
		this.cr_dr_exchg_rate_diff = cr_dr_exchg_rate_diff;
	}

	public String getCr_dr_exchg_rate_dt1() {
		return cr_dr_exchg_rate_dt1;
	}

	public void setCr_dr_exchg_rate_dt1(String cr_dr_exchg_rate_dt1) {
		this.cr_dr_exchg_rate_dt1 = cr_dr_exchg_rate_dt1;
	}

	public String getCr_dr_exchg_rate_dt2() {
		return cr_dr_exchg_rate_dt2;
	}

	public void setCr_dr_exchg_rate_dt2(String cr_dr_exchg_rate_dt2) {
		this.cr_dr_exchg_rate_dt2 = cr_dr_exchg_rate_dt2;
	}

	public String getCr_dr_exchg_rate_dt3() {
		return cr_dr_exchg_rate_dt3;
	}

	public void setCr_dr_exchg_rate_dt3(String cr_dr_exchg_rate_dt3) {
		this.cr_dr_exchg_rate_dt3 = cr_dr_exchg_rate_dt3;
	}

	public String getCr_dr_exchg_rate_dt4() {
		return cr_dr_exchg_rate_dt4;
	}

	public void setCr_dr_exchg_rate_dt4(String cr_dr_exchg_rate_dt4) {
		this.cr_dr_exchg_rate_dt4 = cr_dr_exchg_rate_dt4;
	}

	public String getCr_dr_gross_amt_inr() {
		return cr_dr_gross_amt_inr;
	}

	public void setCr_dr_gross_amt_inr(String cr_dr_gross_amt_inr) {
		this.cr_dr_gross_amt_inr = cr_dr_gross_amt_inr;
	}

	public String getCr_dr_gross_amt_usd() {
		return cr_dr_gross_amt_usd;
	}

	public void setCr_dr_gross_amt_usd(String cr_dr_gross_amt_usd) {
		this.cr_dr_gross_amt_usd = cr_dr_gross_amt_usd;
	}

	public String getCr_dr_header() {
		return cr_dr_header;
	}

	public void setCr_dr_header(String cr_dr_header) {
		this.cr_dr_header = cr_dr_header;
	}

	public String getCr_dr_inv_dt() {
		return cr_dr_inv_dt;
	}

	public void setCr_dr_inv_dt(String cr_dr_inv_dt) {
		this.cr_dr_inv_dt = cr_dr_inv_dt;
	}

	public String getCr_dr_inv_no() {
		return cr_dr_inv_no;
	}

	public void setCr_dr_inv_no(String cr_dr_inv_no) {
		this.cr_dr_inv_no = cr_dr_inv_no;
	}

	public String getCr_dr_net_amt_inr() {
		return cr_dr_net_amt_inr;
	}

	public void setCr_dr_net_amt_inr(String cr_dr_net_amt_inr) {
		this.cr_dr_net_amt_inr = cr_dr_net_amt_inr;
	}

	public String getCr_dr_no() {
		return cr_dr_no;
	}

	public void setCr_dr_no(String cr_dr_no) {
		this.cr_dr_no = cr_dr_no;
	}

	public String getCr_dr_prd_end_dt() {
		return cr_dr_prd_end_dt;
	}

	public void setCr_dr_prd_end_dt(String cr_dr_prd_end_dt) {
		this.cr_dr_prd_end_dt = cr_dr_prd_end_dt;
	}

	public String getCr_dr_prd_st_dt() {
		return cr_dr_prd_st_dt;
	}

	public void setCr_dr_prd_st_dt(String cr_dr_prd_st_dt) {
		this.cr_dr_prd_st_dt = cr_dr_prd_st_dt;
	}

	public String getCr_dr_qty() {
		return cr_dr_qty;
	}

	public void setCr_dr_qty(String cr_dr_qty) {
		this.cr_dr_qty = cr_dr_qty;
	}

	public String getCr_dr_rate() {
		return cr_dr_rate;
	}

	public void setCr_dr_rate(String cr_dr_rate) {
		this.cr_dr_rate = cr_dr_rate;
	}

	public String getCr_dr_tax_structure_cd() {
		return cr_dr_tax_structure_cd;
	}

	public void setCr_dr_tax_structure_cd(String cr_dr_tax_structure_cd) {
		this.cr_dr_tax_structure_cd = cr_dr_tax_structure_cd;
	}

	public String getCr_dr_year() {
		return cr_dr_year;
	}

	public void setCr_dr_year(String cr_dr_year) {
		this.cr_dr_year = cr_dr_year;
	}

	public String getCr_dr_dt() {
		return cr_dr_dt;
	}

	public void setCr_dr_dt(String cr_dr_dt) {
		this.cr_dr_dt = cr_dr_dt;
	}

	public String getBoe_dt() {
		return boe_dt;
	}

	public void setBoe_dt(String boe_dt) {
		this.boe_dt = boe_dt;
	}

	public String getBoe_no() {
		return boe_no;
	}

	public void setBoe_no(String boe_no) {
		this.boe_no = boe_no;
	}

	public String getFlag() {
		return flag;
	}

	public void setFlag(String flag) {
		this.flag = flag;
	}

	public String getDRCR_attach_exchngrate_dt1() {
		return DRCR_attach_exchngrate_dt1;
	}

	public void setDRCR_attach_exchngrate_dt1(String drcr_attach_exchngrate_dt1) {
		DRCR_attach_exchngrate_dt1 = drcr_attach_exchngrate_dt1;
	}

	public String getDRCRcustomer_Attach_Exchg_Rate_Cd1() {
		return DRCRcustomer_Attach_Exchg_Rate_Cd1;
	}

	public void setDRCRcustomer_Attach_Exchg_Rate_Cd1(
			String rcustomer_Attach_Exchg_Rate_Cd1) {
		DRCRcustomer_Attach_Exchg_Rate_Cd1 = rcustomer_Attach_Exchg_Rate_Cd1;
	}

	public Vector getDRCRcustomer_Attach_Exchg_Rate_Value1() {
		return DRCRcustomer_Attach_Exchg_Rate_Value1;
	}

	public void setDRCRcustomer_Attach_Exchg_Rate_Value1(
			Vector rcustomer_Attach_Exchg_Rate_Value1) {
		DRCRcustomer_Attach_Exchg_Rate_Value1 = rcustomer_Attach_Exchg_Rate_Value1;
	}

	public Vector getDRCRcustomer_Attach_Exchng_Rate_Dts1() {
		return DRCRcustomer_Attach_Exchng_Rate_Dts1;
	}

	public void setDRCRcustomer_Attach_Exchng_Rate_Dts1(
			Vector rcustomer_Attach_Exchng_Rate_Dts1) {
		DRCRcustomer_Attach_Exchng_Rate_Dts1 = rcustomer_Attach_Exchng_Rate_Dts1;
	}

	public String getDRCR_tax_customer_cd_rpt() {
		return DRCR_tax_customer_cd_rpt;
	}

	public void setDRCR_tax_customer_cd_rpt(String drcr_tax_customer_cd_rpt) {
		DRCR_tax_customer_cd_rpt = drcr_tax_customer_cd_rpt;
	}

	public String getDRCR_tax_note_date_rpt() {
		return DRCR_tax_note_date_rpt;
	}

	public void setDRCR_tax_note_date_rpt(String drcr_tax_note_date_rpt) {
		DRCR_tax_note_date_rpt = drcr_tax_note_date_rpt;
	}

	public String getDRCR_tax_struct_cd_rpt() {
		return DRCR_tax_struct_cd_rpt;
	}

	public void setDRCR_tax_struct_cd_rpt(String drcr_tax_struct_cd_rpt) {
		DRCR_tax_struct_cd_rpt = drcr_tax_struct_cd_rpt;
	}

	public String getDRCRcustomer_Invoice_Gross_Amt_INR_rpt() {
		return DRCRcustomer_Invoice_Gross_Amt_INR_rpt;
	}

	public void setDRCRcustomer_Invoice_Gross_Amt_INR_rpt(
			String rcustomer_Invoice_Gross_Amt_INR_rpt) {
		DRCRcustomer_Invoice_Gross_Amt_INR_rpt = rcustomer_Invoice_Gross_Amt_INR_rpt;
	}

	public Vector getDRCR_CUST_APPLICABLE_TAX() {
		return DRCR_CUST_APPLICABLE_TAX;
	}

	public void setDRCR_CUST_APPLICABLE_TAX(Vector drcr_cust_applicable_tax) {
		DRCR_CUST_APPLICABLE_TAX = drcr_cust_applicable_tax;
	}

	public Vector getDRCRcustomer_Invoice_Exchg_Rate_Code1() {
		return DRCRcustomer_Invoice_Exchg_Rate_Code1;
	}

	public void setDRCRcustomer_Invoice_Exchg_Rate_Code1(
			Vector rcustomer_Invoice_Exchg_Rate_Code1) {
		DRCRcustomer_Invoice_Exchg_Rate_Code1 = rcustomer_Invoice_Exchg_Rate_Code1;
	}

	public Vector getDRCRcustomer_Invoice_Exchg_Rate_Date1() {
		return DRCRcustomer_Invoice_Exchg_Rate_Date1;
	}

	public void setDRCRcustomer_Invoice_Exchg_Rate_Date1(
			Vector rcustomer_Invoice_Exchg_Rate_Date1) {
		DRCRcustomer_Invoice_Exchg_Rate_Date1 = rcustomer_Invoice_Exchg_Rate_Date1;
	}

	public Vector getDRCRcustomer_Invoice_Exchg_Rate_Name1() {
		return DRCRcustomer_Invoice_Exchg_Rate_Name1;
	}

	public void setDRCRcustomer_Invoice_Exchg_Rate_Name1(
			Vector rcustomer_Invoice_Exchg_Rate_Name1) {
		DRCRcustomer_Invoice_Exchg_Rate_Name1 = rcustomer_Invoice_Exchg_Rate_Name1;
	}

	public String getDRCRcustomer_Attach_Exchg_Rate_Value2() {
		return DRCRcustomer_Attach_Exchg_Rate_Value2;
	}

	public void setDRCRcustomer_Attach_Exchg_Rate_Value2(
			String rcustomer_Attach_Exchg_Rate_Value2) {
		DRCRcustomer_Attach_Exchg_Rate_Value2 = rcustomer_Attach_Exchg_Rate_Value2;
	}

	public Vector getDRCRexchg_rate_dt_1() {
		return DRCRexchg_rate_dt_1;
	}

	public void setDRCRexchg_rate_dt_1(Vector rexchg_rate_dt_1) {
		DRCRexchg_rate_dt_1 = rexchg_rate_dt_1;
	}

	public String getDRCRloopSize() {
		return DRCRloopSize;
	}

	public void setDRCRloopSize(String rloopSize) {
		DRCRloopSize = rloopSize;
	}

	public String getDRCRplant_cd() {
		return DRCRplant_cd;
	}

	public void setDRCRplant_cd(String rplant_cd) {
		DRCRplant_cd = rplant_cd;
	}

	public String getModifyfgsarevno() {
		return modifyfgsarevno;
	}

	public void setModifyfgsarevno(String modifyfgsarevno) {
		this.modifyfgsarevno = modifyfgsarevno;
	}
	public String getBoe_dt_pdf() {
		return Boe_dt_pdf;
	}
	public void setBoe_dt_pdf(String boe_dt_pdf) {
		Boe_dt_pdf = boe_dt_pdf;
	}
	public String getBoe_no_pdf() {
		return Boe_no_pdf;
	}
	public void setBoe_no_pdf(String boe_no_pdf) {
		Boe_no_pdf = boe_no_pdf;
	}
	public String getCr_dr_exchg_rate_diff_pdf() {
		return Cr_dr_exchg_rate_diff_pdf;
	}
	public void setCr_dr_exchg_rate_diff_pdf(String cr_dr_exchg_rate_diff_pdf) {
		Cr_dr_exchg_rate_diff_pdf = cr_dr_exchg_rate_diff_pdf;
	}
	public String getCr_dr_gross_amt_inr_pdf() {
		return Cr_dr_gross_amt_inr_pdf;
	}
	public void setCr_dr_gross_amt_inr_pdf(String cr_dr_gross_amt_inr_pdf) {
		Cr_dr_gross_amt_inr_pdf = cr_dr_gross_amt_inr_pdf;
	}
	public String getCr_dr_gross_amt_usd_pdf() {
		return Cr_dr_gross_amt_usd_pdf;
	}
	public void setCr_dr_gross_amt_usd_pdf(String cr_dr_gross_amt_usd_pdf) {
		Cr_dr_gross_amt_usd_pdf = cr_dr_gross_amt_usd_pdf;
	}
	public String getCr_dr_inv_dt_pdf() {
		return Cr_dr_inv_dt_pdf;
	}
	public void setCr_dr_inv_dt_pdf(String cr_dr_inv_dt_pdf) {
		Cr_dr_inv_dt_pdf = cr_dr_inv_dt_pdf;
	}
	public String getCr_dr_inv_no_pdf() {
		return Cr_dr_inv_no_pdf;
	}
	public void setCr_dr_inv_no_pdf(String cr_dr_inv_no_pdf) {
		Cr_dr_inv_no_pdf = cr_dr_inv_no_pdf;
	}
	public String getCr_dr_net_amt_inr_pdf() {
		return Cr_dr_net_amt_inr_pdf;
	}
	public void setCr_dr_net_amt_inr_pdf(String cr_dr_net_amt_inr_pdf) {
		Cr_dr_net_amt_inr_pdf = cr_dr_net_amt_inr_pdf;
	}
	public String getCr_dr_no_pdf() {
		return Cr_dr_no_pdf;
	}
	public void setCr_dr_no_pdf(String cr_dr_no_pdf) {
		Cr_dr_no_pdf = cr_dr_no_pdf;
	}
	public String getCr_dr_prd_end_dt_pdf() {
		return Cr_dr_prd_end_dt_pdf;
	}
	public void setCr_dr_prd_end_dt_pdf(String cr_dr_prd_end_dt_pdf) {
		Cr_dr_prd_end_dt_pdf = cr_dr_prd_end_dt_pdf;
	}
	public String getCr_dr_prd_st_dt_pdf() {
		return Cr_dr_prd_st_dt_pdf;
	}
	public void setCr_dr_prd_st_dt_pdf(String cr_dr_prd_st_dt_pdf) {
		Cr_dr_prd_st_dt_pdf = cr_dr_prd_st_dt_pdf;
	}
	public String getCr_dr_qty_pdf() {
		return Cr_dr_qty_pdf;
	}
	public void setCr_dr_qty_pdf(String cr_dr_qty_pdf) {
		Cr_dr_qty_pdf = cr_dr_qty_pdf;
	}
	public String getCr_dr_rate_pdf() {
		return Cr_dr_rate_pdf;
	}
	public void setCr_dr_rate_pdf(String cr_dr_rate_pdf) {
		Cr_dr_rate_pdf = cr_dr_rate_pdf;
	}
	public String getCredit_Debit_pdf() {
		return Credit_Debit_pdf;
	}
	public void setCredit_Debit_pdf(String credit_Debit_pdf) {
		Credit_Debit_pdf = credit_Debit_pdf;
	}
	public String getCredit_debit_pdf_path() {
		return credit_debit_pdf_path;
	}
	public void setCredit_debit_pdf_path(String credit_debit_pdf_path) {
		this.credit_debit_pdf_path = credit_debit_pdf_path;
	}
	public String getDRCRcontact_customer_cst_tin_dt_pdf() {
		return DRCRcontact_customer_cst_tin_dt_pdf;
	}
	public void setDRCRcontact_customer_cst_tin_dt_pdf(
			String rcontact_customer_cst_tin_dt_pdf) {
		DRCRcontact_customer_cst_tin_dt_pdf = rcontact_customer_cst_tin_dt_pdf;
	}
	public String getDRCRcontact_customer_cst_tin_no_pdf() {
		return DRCRcontact_customer_cst_tin_no_pdf;
	}
	public void setDRCRcontact_customer_cst_tin_no_pdf(
			String rcontact_customer_cst_tin_no_pdf) {
		DRCRcontact_customer_cst_tin_no_pdf = rcontact_customer_cst_tin_no_pdf;
	}
	public String getDRCRcontact_customer_gst_tin_dt_pdf() {
		return DRCRcontact_customer_gst_tin_dt_pdf;
	}
	public void setDRCRcontact_customer_gst_tin_dt_pdf(
			String rcontact_customer_gst_tin_dt_pdf) {
		DRCRcontact_customer_gst_tin_dt_pdf = rcontact_customer_gst_tin_dt_pdf;
	}
	public String getDRCRcontact_customer_gst_tin_no_pdf() {
		return DRCRcontact_customer_gst_tin_no_pdf;
	}
	public void setDRCRcontact_customer_gst_tin_no_pdf(
			String rcontact_customer_gst_tin_no_pdf) {
		DRCRcontact_customer_gst_tin_no_pdf = rcontact_customer_gst_tin_no_pdf;
	}
	public String getDRCRcontact_customer_name_pdf() {
		return DRCRcontact_customer_name_pdf;
	}
	public void setDRCRcontact_customer_name_pdf(String rcontact_customer_name_pdf) {
		DRCRcontact_customer_name_pdf = rcontact_customer_name_pdf;
	}
	public String getDRCRcontact_Customer_Person_Address_pdf() {
		return DRCRcontact_Customer_Person_Address_pdf;
	}
	public void setDRCRcontact_Customer_Person_Address_pdf(
			String rcontact_Customer_Person_Address_pdf) {
		DRCRcontact_Customer_Person_Address_pdf = rcontact_Customer_Person_Address_pdf;
	}
	public String getDRCRcontact_Customer_Person_City_pdf() {
		return DRCRcontact_Customer_Person_City_pdf;
	}
	public void setDRCRcontact_Customer_Person_City_pdf(
			String rcontact_Customer_Person_City_pdf) {
		DRCRcontact_Customer_Person_City_pdf = rcontact_Customer_Person_City_pdf;
	}
	public String getDRCRcontact_Customer_Person_Pin_pdf() {
		return DRCRcontact_Customer_Person_Pin_pdf;
	}
	public void setDRCRcontact_Customer_Person_Pin_pdf(
			String rcontact_Customer_Person_Pin_pdf) {
		DRCRcontact_Customer_Person_Pin_pdf = rcontact_Customer_Person_Pin_pdf;
	}
	public String getDRCRcontact_Suppl_CST_DT_pdf() {
		return DRCRcontact_Suppl_CST_DT_pdf;
	}
	public void setDRCRcontact_Suppl_CST_DT_pdf(String rcontact_Suppl_CST_DT_pdf) {
		DRCRcontact_Suppl_CST_DT_pdf = rcontact_Suppl_CST_DT_pdf;
	}
	public String getDRCRcontact_Suppl_CST_NO_pdf() {
		return DRCRcontact_Suppl_CST_NO_pdf;
	}
	public void setDRCRcontact_Suppl_CST_NO_pdf(String rcontact_Suppl_CST_NO_pdf) {
		DRCRcontact_Suppl_CST_NO_pdf = rcontact_Suppl_CST_NO_pdf;
	}
	public String getDRCRcontact_Suppl_GST_DT_pdf() {
		return DRCRcontact_Suppl_GST_DT_pdf;
	}
	public void setDRCRcontact_Suppl_GST_DT_pdf(String rcontact_Suppl_GST_DT_pdf) {
		DRCRcontact_Suppl_GST_DT_pdf = rcontact_Suppl_GST_DT_pdf;
	}
	public String getDRCRcontact_Suppl_GST_NO_pdf() {
		return DRCRcontact_Suppl_GST_NO_pdf;
	}
	public void setDRCRcontact_Suppl_GST_NO_pdf(String rcontact_Suppl_GST_NO_pdf) {
		DRCRcontact_Suppl_GST_NO_pdf = rcontact_Suppl_GST_NO_pdf;
	}
	public String getDRCRcontact_Suppl_Name_pdf() {
		return DRCRcontact_Suppl_Name_pdf;
	}
	public void setDRCRcontact_Suppl_Name_pdf(String rcontact_Suppl_Name_pdf) {
		DRCRcontact_Suppl_Name_pdf = rcontact_Suppl_Name_pdf;
	}
	public String getDRCRcontact_Suppl_Person_Address_pdf() {
		return DRCRcontact_Suppl_Person_Address_pdf;
	}
	public void setDRCRcontact_Suppl_Person_Address_pdf(
			String rcontact_Suppl_Person_Address_pdf) {
		DRCRcontact_Suppl_Person_Address_pdf = rcontact_Suppl_Person_Address_pdf;
	}
	public String getDRCRcontact_Suppl_Person_City_pdf() {
		return DRCRcontact_Suppl_Person_City_pdf;
	}
	public void setDRCRcontact_Suppl_Person_City_pdf(
			String rcontact_Suppl_Person_City_pdf) {
		DRCRcontact_Suppl_Person_City_pdf = rcontact_Suppl_Person_City_pdf;
	}
	public String getDRCRcontact_Suppl_Person_Pin_pdf() {
		return DRCRcontact_Suppl_Person_Pin_pdf;
	}
	public void setDRCRcontact_Suppl_Person_Pin_pdf(
			String rcontact_Suppl_Person_Pin_pdf) {
		DRCRcontact_Suppl_Person_Pin_pdf = rcontact_Suppl_Person_Pin_pdf;
	}
	public String getDRCRcontact_Suppl_Service_Tax_NO_pdf() {
		return DRCRcontact_Suppl_Service_Tax_NO_pdf;
	}
	public void setDRCRcontact_Suppl_Service_Tax_NO_pdf(
			String rcontact_Suppl_Service_Tax_NO_pdf) {
		DRCRcontact_Suppl_Service_Tax_NO_pdf = rcontact_Suppl_Service_Tax_NO_pdf;
	}
	public Vector getDRCRcust_tax_amt_pdf() {
		return DRCRcust_tax_amt_pdf;
	}
	public void setDRCRcust_tax_amt_pdf(Vector rcust_tax_amt_pdf) {
		DRCRcust_tax_amt_pdf = rcust_tax_amt_pdf;
	}
	public Vector getDRCRcust_tax_code_pdf() {
		return DRCRcust_tax_code_pdf;
	}
	public void setDRCRcust_tax_code_pdf(Vector rcust_tax_code_pdf) {
		DRCRcust_tax_code_pdf = rcust_tax_code_pdf;
	}
	public Vector getDRCRcust_tax_nm_pdf() {
		return DRCRcust_tax_nm_pdf;
	}
	public void setDRCRcust_tax_nm_pdf(Vector rcust_tax_nm_pdf) {
		DRCRcust_tax_nm_pdf = rcust_tax_nm_pdf;
	}
	public Vector getDRCRcust_tax_rate_pdf() {
		return DRCRcust_tax_rate_pdf;
	}
	public void setDRCRcust_tax_rate_pdf(Vector rcust_tax_rate_pdf) {
		DRCRcust_tax_rate_pdf = rcust_tax_rate_pdf;
	}
	public String getDRCRcustomer_Invoice_Tax_Net_Amt_INR_pdf() {
		return DRCRcustomer_Invoice_Tax_Net_Amt_INR_pdf;
	}
	public void setDRCRcustomer_Invoice_Tax_Net_Amt_INR_pdf(
			String rcustomer_Invoice_Tax_Net_Amt_INR_pdf) {
		DRCRcustomer_Invoice_Tax_Net_Amt_INR_pdf = rcustomer_Invoice_Tax_Net_Amt_INR_pdf;
	}
	public String getPlant_nm_pdf() {
		return Plant_nm_pdf;
	}
	public void setPlant_nm_pdf(String plant_nm_pdf) {
		Plant_nm_pdf = plant_nm_pdf;
	}
	public String getCustomer_tax_pdf() {
		return Customer_tax_pdf;
	}
	public void setCustomer_tax_pdf(String customer_tax_pdf) {
		Customer_tax_pdf = customer_tax_pdf;
	}
	public String getCust_nm_pdf() {
		return Cust_nm_pdf;
	}
	public void setCust_nm_pdf(String cust_nm_pdf) {
		Cust_nm_pdf = cust_nm_pdf;
	}
	public String getCr_dr_header_pdf() {
		return Cr_dr_header_pdf;
	}
	public void setCr_dr_header_pdf(String cr_dr_header_pdf) {
		Cr_dr_header_pdf = cr_dr_header_pdf;
	}
	public String getCr_dr_dt_pdf() {
		return Cr_dr_dt_pdf;
	}
	public void setCr_dr_dt_pdf(String cr_dr_dt_pdf) {
		Cr_dr_dt_pdf = cr_dr_dt_pdf;
	}
	public Map getCR_DR_YEAR() {
		return CR_DR_YEAR;
	}
	public void setCR_DR_YEAR(Map cr_dr_year) {
		CR_DR_YEAR = cr_dr_year;
	}
	public Vector getCR_DR_YEAR_DIS() {
		return CR_DR_YEAR_DIS;
	}
	public void setCR_DR_YEAR_DIS(Vector cr_dr_year_dis) {
		CR_DR_YEAR_DIS = cr_dr_year_dis;
	}

	public String getReport_customer_cd() {
		return report_customer_cd;
	}

	public void setReport_customer_cd(String report_customer_cd) {
		this.report_customer_cd = report_customer_cd;
	}

	public Vector getReport_fgsa_no() {
		return report_fgsa_no;
	}

	public void setReport_fgsa_no(Vector report_fgsa_no) {
		this.report_fgsa_no = report_fgsa_no;
	}

	public Vector getReport_fgsa_rev_no() {
		return report_fgsa_rev_no;
	}

	public void setReport_fgsa_rev_no(Vector report_fgsa_rev_no) {
		this.report_fgsa_rev_no = report_fgsa_rev_no;
	}

	public Vector getReport_loa_adjusted_amt() {
		return report_loa_adjusted_amt;
	}

	public void setReport_loa_adjusted_amt(Vector report_loa_adjusted_amt) {
		this.report_loa_adjusted_amt = report_loa_adjusted_amt;
	}

	public Vector getReport_loa_balance() {
		return report_loa_balance;
	}

	public void setReport_loa_balance(Vector report_loa_balance) {
		this.report_loa_balance = report_loa_balance;
	}

	public Vector getReport_loa_inv_date() {
		return report_loa_inv_date;
	}

	public void setReport_loa_inv_date(Vector report_loa_inv_date) {
		this.report_loa_inv_date = report_loa_inv_date;
	}

	public Vector getReport_loa_inv_seq_no() {
		return report_loa_inv_seq_no;
	}

	public void setReport_loa_inv_seq_no(Vector report_loa_inv_seq_no) {
		this.report_loa_inv_seq_no = report_loa_inv_seq_no;
	}

	public Vector getReport_loa_plant_nm() {
		return report_loa_plant_nm;
	}

	public void setReport_loa_plant_nm(Vector report_loa_plant_nm) {
		this.report_loa_plant_nm = report_loa_plant_nm;
	}

	public Vector getReport_regas_adjusted_amt() {
		return report_regas_adjusted_amt;
	}

	public void setReport_regas_adjusted_amt(Vector report_regas_adjusted_amt) {
		this.report_regas_adjusted_amt = report_regas_adjusted_amt;
	}

	public Vector getReport_regas_balance() {
		return report_regas_balance;
	}

	public void setReport_regas_balance(Vector report_regas_balance) {
		this.report_regas_balance = report_regas_balance;
	}

	public Vector getReport_regas_inv_date() {
		return report_regas_inv_date;
	}

	public void setReport_regas_inv_date(Vector report_regas_inv_date) {
		this.report_regas_inv_date = report_regas_inv_date;
	}

	public Vector getReport_regas_inv_seq_no() {
		return report_regas_inv_seq_no;
	}

	public void setReport_regas_inv_seq_no(Vector report_regas_inv_seq_no) {
		this.report_regas_inv_seq_no = report_regas_inv_seq_no;
	}

	public Vector getReport_regas_plant_nm() {
		return report_regas_plant_nm;
	}

	public void setReport_regas_plant_nm(Vector report_regas_plant_nm) {
		this.report_regas_plant_nm = report_regas_plant_nm;
	}

	public Vector getReport_sn_adjusted_amt() {
		return report_sn_adjusted_amt;
	}

	public void setReport_sn_adjusted_amt(Vector report_sn_adjusted_amt) {
		this.report_sn_adjusted_amt = report_sn_adjusted_amt;
	}

	public Vector getReport_sn_balance() {
		return report_sn_balance;
	}

	public void setReport_sn_balance(Vector report_sn_balance) {
		this.report_sn_balance = report_sn_balance;
	}

	public Vector getReport_sn_inv_date() {
		return report_sn_inv_date;
	}

	public void setReport_sn_inv_date(Vector report_sn_inv_date) {
		this.report_sn_inv_date = report_sn_inv_date;
	}

	public Vector getReport_sn_inv_seq_no() {
		return report_sn_inv_seq_no;
	}

	public void setReport_sn_inv_seq_no(Vector report_sn_inv_seq_no) {
		this.report_sn_inv_seq_no = report_sn_inv_seq_no;
	}

	public Vector getReport_sn_no() {
		return report_sn_no;
	}

	public void setReport_sn_no(Vector report_sn_no) {
		this.report_sn_no = report_sn_no;
	}

	public Vector getReport_sn_plant_nm() {
		return report_sn_plant_nm;
	}

	public void setReport_sn_plant_nm(Vector report_sn_plant_nm) {
		this.report_sn_plant_nm = report_sn_plant_nm;
	}

	public Vector getReport_sn_rev_no() {
		return report_sn_rev_no;
	}

	public void setReport_sn_rev_no(Vector report_sn_rev_no) {
		this.report_sn_rev_no = report_sn_rev_no;
	}

	public String getReport_year() {
		return report_year;
	}

	public void setReport_year(String report_year) {
		this.report_year = report_year;
	}

	public Vector getRpt_fgsa_no() {
		return rpt_fgsa_no;
	}

	public void setRpt_fgsa_no(Vector rpt_fgsa_no) {
		this.rpt_fgsa_no = rpt_fgsa_no;
	}

	public Vector getRpt_fgsa_rev_no() {
		return rpt_fgsa_rev_no;
	}

	public void setRpt_fgsa_rev_no(Vector rpt_fgsa_rev_no) {
		this.rpt_fgsa_rev_no = rpt_fgsa_rev_no;
	}

	public Vector getRpt_loa_adv_amt() {
		return rpt_loa_adv_amt;
	}

	public void setRpt_loa_adv_amt(Vector rpt_loa_adv_amt) {
		this.rpt_loa_adv_amt = rpt_loa_adv_amt;
	}

	public Vector getRpt_loa_adv_cur() {
		return rpt_loa_adv_cur;
	}

	public void setRpt_loa_adv_cur(Vector rpt_loa_adv_cur) {
		this.rpt_loa_adv_cur = rpt_loa_adv_cur;
	}

	public Vector getRpt_loa_no() {
		return rpt_loa_no;
	}

	public void setRpt_loa_no(Vector rpt_loa_no) {
		this.rpt_loa_no = rpt_loa_no;
	}

	public Vector getRpt_loa_rev_no() {
		return rpt_loa_rev_no;
	}

	public void setRpt_loa_rev_no(Vector rpt_loa_rev_no) {
		this.rpt_loa_rev_no = rpt_loa_rev_no;
	}

	public Vector getRpt_loa_total_adj_amt() {
		return rpt_loa_total_adj_amt;
	}

	public void setRpt_loa_total_adj_amt(Vector rpt_loa_total_adj_amt) {
		this.rpt_loa_total_adj_amt = rpt_loa_total_adj_amt;
	}

	public Vector getRpt_regas_adv_amt() {
		return rpt_regas_adv_amt;
	}

	public void setRpt_regas_adv_amt(Vector rpt_regas_adv_amt) {
		this.rpt_regas_adv_amt = rpt_regas_adv_amt;
	}

	public Vector getRpt_regas_adv_cur() {
		return rpt_regas_adv_cur;
	}

	public void setRpt_regas_adv_cur(Vector rpt_regas_adv_cur) {
		this.rpt_regas_adv_cur = rpt_regas_adv_cur;
	}

	public Vector getRpt_regas_cargo_no() {
		return rpt_regas_cargo_no;
	}

	public void setRpt_regas_cargo_no(Vector rpt_regas_cargo_no) {
		this.rpt_regas_cargo_no = rpt_regas_cargo_no;
	}

	public Vector getRpt_regas_cargo_rev_no() {
		return rpt_regas_cargo_rev_no;
	}

	public void setRpt_regas_cargo_rev_no(Vector rpt_regas_cargo_rev_no) {
		this.rpt_regas_cargo_rev_no = rpt_regas_cargo_rev_no;
	}

	public Vector getRpt_regas_no() {
		return rpt_regas_no;
	}

	public void setRpt_regas_no(Vector rpt_regas_no) {
		this.rpt_regas_no = rpt_regas_no;
	}

	public Vector getRpt_regas_rev_no() {
		return rpt_regas_rev_no;
	}

	public void setRpt_regas_rev_no(Vector rpt_regas_rev_no) {
		this.rpt_regas_rev_no = rpt_regas_rev_no;
	}

	public Vector getRpt_regas_total_adj_amt() {
		return rpt_regas_total_adj_amt;
	}

	public void setRpt_regas_total_adj_amt(Vector rpt_regas_total_adj_amt) {
		this.rpt_regas_total_adj_amt = rpt_regas_total_adj_amt;
	}

	public Vector getRpt_sn_adv_amt() {
		return rpt_sn_adv_amt;
	}

	public void setRpt_sn_adv_amt(Vector rpt_sn_adv_amt) {
		this.rpt_sn_adv_amt = rpt_sn_adv_amt;
	}

	public Vector getRpt_sn_adv_cur() {
		return rpt_sn_adv_cur;
	}

	public void setRpt_sn_adv_cur(Vector rpt_sn_adv_cur) {
		this.rpt_sn_adv_cur = rpt_sn_adv_cur;
	}

	public Vector getRpt_sn_no() {
		return rpt_sn_no;
	}

	public void setRpt_sn_no(Vector rpt_sn_no) {
		this.rpt_sn_no = rpt_sn_no;
	}

	public Vector getRpt_sn_rev_no() {
		return rpt_sn_rev_no;
	}

	public void setRpt_sn_rev_no(Vector rpt_sn_rev_no) {
		this.rpt_sn_rev_no = rpt_sn_rev_no;
	}

	public Vector getRpt_sn_total_adj_amt() {
		return rpt_sn_total_adj_amt;
	}

	public void setRpt_sn_total_adj_amt(Vector rpt_sn_total_adj_amt) {
		this.rpt_sn_total_adj_amt = rpt_sn_total_adj_amt;
	}

	public Vector getRpt_tender_no() {
		return rpt_tender_no;
	}

	public void setRpt_tender_no(Vector rpt_tender_no) {
		this.rpt_tender_no = rpt_tender_no;
	}

	public Vector getRpt_tender_rev_no() {
		return rpt_tender_rev_no;
	}

	public void setRpt_tender_rev_no(Vector rpt_tender_rev_no) {
		this.rpt_tender_rev_no = rpt_tender_rev_no;
	}

	public String getCustomer_inv_mapping_id() {
		return customer_inv_mapping_id;
	}

	public void setCustomer_inv_mapping_id(String customer_inv_mapping_id) {
		this.customer_inv_mapping_id = customer_inv_mapping_id;
	}

	public boolean isAdvance_payment_flag() {
		return advance_payment_flag;
	}

	public void setAdvance_payment_flag(boolean advance_payment_flag) {
		this.advance_payment_flag = advance_payment_flag;
	}

	public boolean isDiscount_flag() {
		return Discount_flag;
	}

	public void setDiscount_flag(boolean discount_flag) {
		Discount_flag = discount_flag;
	}

	public String getPdfFinal_adjust_gross_amt() {
		return pdfFinal_adjust_gross_amt;
	}

	public void setPdfFinal_adjust_gross_amt(String pdfFinal_adjust_gross_amt) {
		this.pdfFinal_adjust_gross_amt = pdfFinal_adjust_gross_amt;
	}

	public String getPdfFinal_first_gross_amt() {
		return pdfFinal_first_gross_amt;
	}

	public void setPdfFinal_first_gross_amt(String pdfFinal_first_gross_amt) {
		this.pdfFinal_first_gross_amt = pdfFinal_first_gross_amt;
	}

	public String getPdfinv_discount_price() {
		return pdfinv_discount_price;
	}

	public void setPdfinv_discount_price(String pdfinv_discount_price) {
		this.pdfinv_discount_price = pdfinv_discount_price;
	}

	public String getPdfinv_display_rate() {
		return pdfinv_display_rate;
	}

	public void setPdfinv_display_rate(String pdfinv_display_rate) {
		this.pdfinv_display_rate = pdfinv_display_rate;
	}

	public String getPdfinvadjflag() {
		return pdfinvadjflag;
	}

	public void setPdfinvadjflag(String pdfinvadjflag) {
		this.pdfinvadjflag = pdfinvadjflag;
	}

	public String getPdfinvadjremark() {
		return pdfinvadjremark;
	}

	public void setPdfinvadjremark(String pdfinvadjremark) {
		this.pdfinvadjremark = pdfinvadjremark;
	}

	public String getPdfinvadjust_gross_inr() {
		return pdfinvadjust_gross_inr;
	}

	public void setPdfinvadjust_gross_inr(String pdfinvadjust_gross_inr) {
		this.pdfinvadjust_gross_inr = pdfinvadjust_gross_inr;
	}

	public String getPdfinvadjust_gross_usd() {
		return pdfinvadjust_gross_usd;
	}

	public void setPdfinvadjust_gross_usd(String pdfinvadjust_gross_usd) {
		this.pdfinvadjust_gross_usd = pdfinvadjust_gross_usd;
	}

	public String getPdfinvadjustcur() {
		return pdfinvadjustcur;
	}

	public void setPdfinvadjustcur(String pdfinvadjustcur) {
		this.pdfinvadjustcur = pdfinvadjustcur;
	}

	public String getPdfinvadjustmentamt() {
		return pdfinvadjustmentamt;
	}

	public void setPdfinvadjustmentamt(String pdfinvadjustmentamt) {
		this.pdfinvadjustmentamt = pdfinvadjustmentamt;
	}

	public String getPdfinvdiscount_gross_inr() {
		return pdfinvdiscount_gross_inr;
	}

	public void setPdfinvdiscount_gross_inr(String pdfinvdiscount_gross_inr) {
		this.pdfinvdiscount_gross_inr = pdfinvdiscount_gross_inr;
	}

	public String getPdfinvdiscount_gross_usd() {
		return pdfinvdiscount_gross_usd;
	}

	public void setPdfinvdiscount_gross_usd(String pdfinvdiscount_gross_usd) {
		this.pdfinvdiscount_gross_usd = pdfinvdiscount_gross_usd;
	}

	public String getPdfinvdiscountflag() {
		return pdfinvdiscountflag;
	}

	public void setPdfinvdiscountflag(String pdfinvdiscountflag) {
		this.pdfinvdiscountflag = pdfinvdiscountflag;
	}

	public String getPdfinvexchngrt() {
		return pdfinvexchngrt;
	}

	public void setPdfinvexchngrt(String pdfinvexchngrt) {
		this.pdfinvexchngrt = pdfinvexchngrt;
	}

	public String getPdfinvgrossamt() {
		return pdfinvgrossamt;
	}

	public void setPdfinvgrossamt(String pdfinvgrossamt) {
		this.pdfinvgrossamt = pdfinvgrossamt;
	}

	public String getPdfinvtariff_gross_inr() {
		return pdfinvtariff_gross_inr;
	}

	public void setPdfinvtariff_gross_inr(String pdfinvtariff_gross_inr) {
		this.pdfinvtariff_gross_inr = pdfinvtariff_gross_inr;
	}

	public String getPdfinvtariff_gross_usd() {
		return pdfinvtariff_gross_usd;
	}

	public void setPdfinvtariff_gross_usd(String pdfinvtariff_gross_usd) {
		this.pdfinvtariff_gross_usd = pdfinvtariff_gross_usd;
	}

	public String getPdfinvtariffflag() {
		return pdfinvtariffflag;
	}

	public void setPdfinvtariffflag(String pdfinvtariffflag) {
		this.pdfinvtariffflag = pdfinvtariffflag;
	}

	public String getPdftotal_tariff_discount() {
		return pdftotal_tariff_discount;
	}

	public void setPdftotal_tariff_discount(String pdftotal_tariff_discount) {
		this.pdftotal_tariff_discount = pdftotal_tariff_discount;
	}

	public boolean isTariff_flag() {
		return Tariff_flag;
	}

	public void setTariff_flag(boolean tariff_flag) {
		Tariff_flag = tariff_flag;
	}

	public String getPdfCurrency() {
		return pdfCurrency;
	}

	public void setPdfCurrency(String pdfCurrency) {
		this.pdfCurrency = pdfCurrency;
	}

	public String getPdfFinal_first_gross_amt_inr() {
		return pdfFinal_first_gross_amt_inr;
	}

	public void setPdfFinal_first_gross_amt_inr(String pdfFinal_first_gross_amt_inr) {
		this.pdfFinal_first_gross_amt_inr = pdfFinal_first_gross_amt_inr;
	}

	public String getPdfFinal_Total_Collection() {
		return pdfFinal_Total_Collection;
	}

	public void setPdfFinal_Total_Collection(String pdfFinal_Total_Collection) {
		this.pdfFinal_Total_Collection = pdfFinal_Total_Collection;
	}

	public String getPdfFinal_Total_Currency() {
		return pdfFinal_Total_Currency;
	}

	public void setPdfFinal_Total_Currency(String pdfFinal_Total_Currency) {
		this.pdfFinal_Total_Currency = pdfFinal_Total_Currency;
	}

	public String getModifyadvinvno() {
		return modifyadvinvno;
	}

	public void setModifyadvinvno(String modifyadvinvno) {
		this.modifyadvinvno = modifyadvinvno;
	}

	public String getInvoice_financial_year() {
		return invoice_financial_year;
	}

	public void setInvoice_financial_year(String invoice_financial_year) {
		this.invoice_financial_year = invoice_financial_year;
	}

	public String getInvoice_hlpl_inv_no() {
		return invoice_hlpl_inv_no;
	}

	public void setInvoice_hlpl_inv_no(String invoice_hlpl_inv_no) {
		this.invoice_hlpl_inv_no = invoice_hlpl_inv_no;
	}

	public String getInvoice_advance_inv_no() {
		return invoice_advance_inv_no;
	}

	public void setInvoice_advance_inv_no(String invoice_advance_inv_no) {
		this.invoice_advance_inv_no = invoice_advance_inv_no;
	}

	public String getDelete_code() {
		return delete_code;
	}

	public void setDelete_code(String delete_code) {
		this.delete_code = delete_code;
	}

	public Vector getFgsano1() {
		return fgsano1;
	}

	public void setFgsano1(Vector fgsano1) {
		this.fgsano1 = fgsano1;
	}

	public Vector getRegasno1() {
		return regasno1;
	}

	public void setRegasno1(Vector regasno1) {
		this.regasno1 = regasno1;
	}

	public Vector getTenderno1() {
		return tenderno1;
	}

	public void setTenderno1(Vector tenderno1) {
		this.tenderno1 = tenderno1;
	}

	public Vector getReport_loa_no() {
		return report_loa_no;
	}

	public void setReport_loa_no(Vector report_loa_no) {
		this.report_loa_no = report_loa_no;
	}

	public Vector getReport_loa_rev_no() {
		return report_loa_rev_no;
	}

	public void setReport_loa_rev_no(Vector report_loa_rev_no) {
		this.report_loa_rev_no = report_loa_rev_no;
	}

	public Vector getReport_tender_no() {
		return report_tender_no;
	}

	public void setReport_tender_no(Vector report_tender_no) {
		this.report_tender_no = report_tender_no;
	}

	public Vector getReport_tender_rev_no() {
		return report_tender_rev_no;
	}

	public void setReport_tender_rev_no(Vector report_tender_rev_no) {
		this.report_tender_rev_no = report_tender_rev_no;
	}

	public Vector getReport_sn_adv_inv_dt() {
		return report_sn_adv_inv_dt;
	}

	public void setReport_sn_adv_inv_dt(Vector report_sn_adv_inv_dt) {
		this.report_sn_adv_inv_dt = report_sn_adv_inv_dt;
	}

	public Vector getReport_sn_adv_inv_no() {
		return report_sn_adv_inv_no;
	}

	public void setReport_sn_adv_inv_no(Vector report_sn_adv_inv_no) {
		this.report_sn_adv_inv_no = report_sn_adv_inv_no;
	}

	public Vector getMst_report_sn_adv_inv_no() {
		return mst_report_sn_adv_inv_no;
	}

	public void setMst_report_sn_adv_inv_no(Vector mst_report_sn_adv_inv_no) {
		this.mst_report_sn_adv_inv_no = mst_report_sn_adv_inv_no;
	}

	public Vector getMst_report_loa_adv_inv_no() {
		return mst_report_loa_adv_inv_no;
	}

	public void setMst_report_loa_adv_inv_no(Vector mst_report_loa_adv_inv_no) {
		this.mst_report_loa_adv_inv_no = mst_report_loa_adv_inv_no;
	}

	public Vector getReport_loa_adv_inv_dt() {
		return report_loa_adv_inv_dt;
	}

	public void setReport_loa_adv_inv_dt(Vector report_loa_adv_inv_dt) {
		this.report_loa_adv_inv_dt = report_loa_adv_inv_dt;
	}

	public Vector getReport_loa_adv_inv_no() {
		return report_loa_adv_inv_no;
	}

	public void setReport_loa_adv_inv_no(Vector report_loa_adv_inv_no) {
		this.report_loa_adv_inv_no = report_loa_adv_inv_no;
	}

	public Vector getMst_report_regas_adv_inv_no() {
		return mst_report_regas_adv_inv_no;
	}

	public void setMst_report_regas_adv_inv_no(Vector mst_report_regas_adv_inv_no) {
		this.mst_report_regas_adv_inv_no = mst_report_regas_adv_inv_no;
	}

	public Vector getReport_regas_adv_inv_dt() {
		return report_regas_adv_inv_dt;
	}

	public void setReport_regas_adv_inv_dt(Vector report_regas_adv_inv_dt) {
		this.report_regas_adv_inv_dt = report_regas_adv_inv_dt;
	}

	public Vector getReport_regas_adv_inv_no() {
		return report_regas_adv_inv_no;
	}

	public void setReport_regas_adv_inv_no(Vector report_regas_adv_inv_no) {
		this.report_regas_adv_inv_no = report_regas_adv_inv_no;
	}

	public Vector getReport_regas_cargo_no() {
		return report_regas_cargo_no;
	}

	public void setReport_regas_cargo_no(Vector report_regas_cargo_no) {
		this.report_regas_cargo_no = report_regas_cargo_no;
	}

	public Vector getReport_regas_cargo_rev_no() {
		return report_regas_cargo_rev_no;
	}

	public void setReport_regas_cargo_rev_no(Vector report_regas_cargo_rev_no) {
		this.report_regas_cargo_rev_no = report_regas_cargo_rev_no;
	}

	public Vector getReport_regas_no() {
		return report_regas_no;
	}

	public void setReport_regas_no(Vector report_regas_no) {
		this.report_regas_no = report_regas_no;
	}

	public Vector getReport_regas_rev_no() {
		return report_regas_rev_no;
	}

	public void setReport_regas_rev_no(Vector report_regas_rev_no) {
		this.report_regas_rev_no = report_regas_rev_no;
	}

	public Vector getRpt_ltcora_adv_amt() {
		return rpt_ltcora_adv_amt;
	}

	public void setRpt_ltcora_adv_amt(Vector rpt_ltcora_adv_amt) {
		this.rpt_ltcora_adv_amt = rpt_ltcora_adv_amt;
	}

	public Vector getRpt_ltcora_adv_cur() {
		return rpt_ltcora_adv_cur;
	}

	public void setRpt_ltcora_adv_cur(Vector rpt_ltcora_adv_cur) {
		this.rpt_ltcora_adv_cur = rpt_ltcora_adv_cur;
	}

	public Vector getRpt_ltcora_cargo_no() {
		return rpt_ltcora_cargo_no;
	}

	public void setRpt_ltcora_cargo_no(Vector rpt_ltcora_cargo_no) {
		this.rpt_ltcora_cargo_no = rpt_ltcora_cargo_no;
	}

	public Vector getRpt_ltcora_cargo_rev_no() {
		return rpt_ltcora_cargo_rev_no;
	}

	public void setRpt_ltcora_cargo_rev_no(Vector rpt_ltcora_cargo_rev_no) {
		this.rpt_ltcora_cargo_rev_no = rpt_ltcora_cargo_rev_no;
	}

	public Vector getRpt_ltcora_no() {
		return rpt_ltcora_no;
	}

	public void setRpt_ltcora_no(Vector rpt_ltcora_no) {
		this.rpt_ltcora_no = rpt_ltcora_no;
	}

	public Vector getRpt_ltcora_rev_no() {
		return rpt_ltcora_rev_no;
	}

	public void setRpt_ltcora_rev_no(Vector rpt_ltcora_rev_no) {
		this.rpt_ltcora_rev_no = rpt_ltcora_rev_no;
	}

	public Vector getMst_ltcora_regas_adv_inv_no() {
		return mst_ltcora_regas_adv_inv_no;
	}

	public void setMst_ltcora_regas_adv_inv_no(Vector mst_ltcora_regas_adv_inv_no) {
		this.mst_ltcora_regas_adv_inv_no = mst_ltcora_regas_adv_inv_no;
	}

	public Vector getReport_ltcora_adjusted_amt() {
		return report_ltcora_adjusted_amt;
	}

	public void setReport_ltcora_adjusted_amt(Vector report_ltcora_adjusted_amt) {
		this.report_ltcora_adjusted_amt = report_ltcora_adjusted_amt;
	}

	public Vector getReport_ltcora_adv_inv_dt() {
		return report_ltcora_adv_inv_dt;
	}

	public void setReport_ltcora_adv_inv_dt(Vector report_ltcora_adv_inv_dt) {
		this.report_ltcora_adv_inv_dt = report_ltcora_adv_inv_dt;
	}

	public Vector getReport_ltcora_adv_inv_no() {
		return report_ltcora_adv_inv_no;
	}

	public void setReport_ltcora_adv_inv_no(Vector report_ltcora_adv_inv_no) {
		this.report_ltcora_adv_inv_no = report_ltcora_adv_inv_no;
	}

	public Vector getReport_ltcora_balance() {
		return report_ltcora_balance;
	}

	public void setReport_ltcora_balance(Vector report_ltcora_balance) {
		this.report_ltcora_balance = report_ltcora_balance;
	}

	public Vector getReport_ltcora_cargo_no() {
		return report_ltcora_cargo_no;
	}

	public void setReport_ltcora_cargo_no(Vector report_ltcora_cargo_no) {
		this.report_ltcora_cargo_no = report_ltcora_cargo_no;
	}

	public Vector getReport_ltcora_cargo_rev_no() {
		return report_ltcora_cargo_rev_no;
	}

	public void setReport_ltcora_cargo_rev_no(Vector report_ltcora_cargo_rev_no) {
		this.report_ltcora_cargo_rev_no = report_ltcora_cargo_rev_no;
	}

	public Vector getReport_ltcora_inv_date() {
		return report_ltcora_inv_date;
	}

	public void setReport_ltcora_inv_date(Vector report_ltcora_inv_date) {
		this.report_ltcora_inv_date = report_ltcora_inv_date;
	}

	public Vector getReport_ltcora_inv_seq_no() {
		return report_ltcora_inv_seq_no;
	}

	public void setReport_ltcora_inv_seq_no(Vector report_ltcora_inv_seq_no) {
		this.report_ltcora_inv_seq_no = report_ltcora_inv_seq_no;
	}

	public Vector getReport_ltcora_no() {
		return report_ltcora_no;
	}

	public void setReport_ltcora_no(Vector report_ltcora_no) {
		this.report_ltcora_no = report_ltcora_no;
	}

	public Vector getReport_ltcora_plant_nm() {
		return report_ltcora_plant_nm;
	}

	public void setReport_ltcora_plant_nm(Vector report_ltcora_plant_nm) {
		this.report_ltcora_plant_nm = report_ltcora_plant_nm;
	}

	public Vector getReport_ltcora_rev_no() {
		return report_ltcora_rev_no;
	}

	public void setReport_ltcora_rev_no(Vector report_ltcora_rev_no) {
		this.report_ltcora_rev_no = report_ltcora_rev_no;
	}

	public Vector getRpt_ltcora_total_adj_amt() {
		return rpt_ltcora_total_adj_amt;
	}

	public void setRpt_ltcora_total_adj_amt(Vector rpt_ltcora_total_adj_amt) {
		this.rpt_ltcora_total_adj_amt = rpt_ltcora_total_adj_amt;
	}

	public Vector getReport_cn_adjusted_amt() {
		return report_cn_adjusted_amt;
	}

	public void setReport_cn_adjusted_amt(Vector report_cn_adjusted_amt) {
		this.report_cn_adjusted_amt = report_cn_adjusted_amt;
	}

	public Vector getReport_cn_adv_inv_dt() {
		return report_cn_adv_inv_dt;
	}

	public void setReport_cn_adv_inv_dt(Vector report_cn_adv_inv_dt) {
		this.report_cn_adv_inv_dt = report_cn_adv_inv_dt;
	}

	public Vector getReport_cn_adv_inv_no() {
		return report_cn_adv_inv_no;
	}

	public void setReport_cn_adv_inv_no(Vector report_cn_adv_inv_no) {
		this.report_cn_adv_inv_no = report_cn_adv_inv_no;
	}

	public Vector getReport_cn_balance() {
		return report_cn_balance;
	}

	public void setReport_cn_balance(Vector report_cn_balance) {
		this.report_cn_balance = report_cn_balance;
	}

	public Vector getReport_cn_cargo_no() {
		return report_cn_cargo_no;
	}

	public void setReport_cn_cargo_no(Vector report_cn_cargo_no) {
		this.report_cn_cargo_no = report_cn_cargo_no;
	}

	public Vector getReport_cn_cargo_rev_no() {
		return report_cn_cargo_rev_no;
	}

	public void setReport_cn_cargo_rev_no(Vector report_cn_cargo_rev_no) {
		this.report_cn_cargo_rev_no = report_cn_cargo_rev_no;
	}

	public Vector getReport_cn_inv_date() {
		return report_cn_inv_date;
	}

	public void setReport_cn_inv_date(Vector report_cn_inv_date) {
		this.report_cn_inv_date = report_cn_inv_date;
	}

	public Vector getReport_cn_inv_seq_no() {
		return report_cn_inv_seq_no;
	}

	public void setReport_cn_inv_seq_no(Vector report_cn_inv_seq_no) {
		this.report_cn_inv_seq_no = report_cn_inv_seq_no;
	}

	public Vector getReport_cn_no() {
		return report_cn_no;
	}

	public void setReport_cn_no(Vector report_cn_no) {
		this.report_cn_no = report_cn_no;
	}

	public Vector getReport_cn_plant_nm() {
		return report_cn_plant_nm;
	}

	public void setReport_cn_plant_nm(Vector report_cn_plant_nm) {
		this.report_cn_plant_nm = report_cn_plant_nm;
	}

	public Vector getReport_cn_rev_no() {
		return report_cn_rev_no;
	}

	public void setReport_cn_rev_no(Vector report_cn_rev_no) {
		this.report_cn_rev_no = report_cn_rev_no;
	}

	public Vector getRpt_cn_adv_amt() {
		return rpt_cn_adv_amt;
	}

	public void setRpt_cn_adv_amt(Vector rpt_cn_adv_amt) {
		this.rpt_cn_adv_amt = rpt_cn_adv_amt;
	}

	public Vector getRpt_cn_adv_cur() {
		return rpt_cn_adv_cur;
	}

	public void setRpt_cn_adv_cur(Vector rpt_cn_adv_cur) {
		this.rpt_cn_adv_cur = rpt_cn_adv_cur;
	}

	public Vector getRpt_cn_cargo_no() {
		return rpt_cn_cargo_no;
	}

	public void setRpt_cn_cargo_no(Vector rpt_cn_cargo_no) {
		this.rpt_cn_cargo_no = rpt_cn_cargo_no;
	}

	public Vector getRpt_cn_cargo_rev_no() {
		return rpt_cn_cargo_rev_no;
	}

	public void setRpt_cn_cargo_rev_no(Vector rpt_cn_cargo_rev_no) {
		this.rpt_cn_cargo_rev_no = rpt_cn_cargo_rev_no;
	}

	public Vector getRpt_cn_no() {
		return rpt_cn_no;
	}

	public void setRpt_cn_no(Vector rpt_cn_no) {
		this.rpt_cn_no = rpt_cn_no;
	}

	public Vector getRpt_cn_rev_no() {
		return rpt_cn_rev_no;
	}

	public void setRpt_cn_rev_no(Vector rpt_cn_rev_no) {
		this.rpt_cn_rev_no = rpt_cn_rev_no;
	}

	public Vector getRpt_cn_total_adj_amt() {
		return rpt_cn_total_adj_amt;
	}

	public void setRpt_cn_total_adj_amt(Vector rpt_cn_total_adj_amt) {
		this.rpt_cn_total_adj_amt = rpt_cn_total_adj_amt;
	}

	public Vector getMst_cn_regas_adv_inv_no() {
		return mst_cn_regas_adv_inv_no;
	}

	public void setMst_cn_regas_adv_inv_no(Vector mst_cn_regas_adv_inv_no) {
		this.mst_cn_regas_adv_inv_no = mst_cn_regas_adv_inv_no;
	}

	public Vector getReport_cn_adv_amt() {
		return report_cn_adv_amt;
	}

	public void setReport_cn_adv_amt(Vector report_cn_adv_amt) {
		this.report_cn_adv_amt = report_cn_adv_amt;
	}

	public Vector getReport_cn_adv_cur() {
		return report_cn_adv_cur;
	}

	public void setReport_cn_adv_cur(Vector report_cn_adv_cur) {
		this.report_cn_adv_cur = report_cn_adv_cur;
	}

	public Vector getReport_loa_adv_amt() {
		return report_loa_adv_amt;
	}

	public void setReport_loa_adv_amt(Vector report_loa_adv_amt) {
		this.report_loa_adv_amt = report_loa_adv_amt;
	}

	public Vector getReport_loa_adv_cur() {
		return report_loa_adv_cur;
	}

	public void setReport_loa_adv_cur(Vector report_loa_adv_cur) {
		this.report_loa_adv_cur = report_loa_adv_cur;
	}

	public Vector getReport_ltcora_adv_amt() {
		return report_ltcora_adv_amt;
	}

	public void setReport_ltcora_adv_amt(Vector report_ltcora_adv_amt) {
		this.report_ltcora_adv_amt = report_ltcora_adv_amt;
	}

	public Vector getReport_ltcora_adv_cur() {
		return report_ltcora_adv_cur;
	}

	public void setReport_ltcora_adv_cur(Vector report_ltcora_adv_cur) {
		this.report_ltcora_adv_cur = report_ltcora_adv_cur;
	}

	public Vector getReport_regas_adv_amt() {
		return report_regas_adv_amt;
	}

	public void setReport_regas_adv_amt(Vector report_regas_adv_amt) {
		this.report_regas_adv_amt = report_regas_adv_amt;
	}

	public Vector getReport_regas_adv_cur() {
		return report_regas_adv_cur;
	}

	public void setReport_regas_adv_cur(Vector report_regas_adv_cur) {
		this.report_regas_adv_cur = report_regas_adv_cur;
	}

	public Vector getReport_sn_adv_amt() {
		return report_sn_adv_amt;
	}

	public void setReport_sn_adv_amt(Vector report_sn_adv_amt) {
		this.report_sn_adv_amt = report_sn_adv_amt;
	}

	public Vector getReport_sn_adv_cur() {
		return report_sn_adv_cur;
	}

	public void setReport_sn_adv_cur(Vector report_sn_adv_cur) {
		this.report_sn_adv_cur = report_sn_adv_cur;
	}

	public String getInvoice_advance_inv_dt() {
		return Invoice_advance_inv_dt;
	}

	public void setInvoice_advance_inv_dt(String invoice_advance_inv_dt) {
		Invoice_advance_inv_dt = invoice_advance_inv_dt;
	}

	public String getSave_customer_cd() {
		return save_customer_cd;
	}

	public void setSave_customer_cd(String save_customer_cd) {
		this.save_customer_cd = save_customer_cd;
	}

	public String getSave_fgsa_no() {
		return save_fgsa_no;
	}

	public void setSave_fgsa_no(String save_fgsa_no) {
		this.save_fgsa_no = save_fgsa_no;
	}

	public String getSave_fgsa_rev_no() {
		return save_fgsa_rev_no;
	}

	public void setSave_fgsa_rev_no(String save_fgsa_rev_no) {
		this.save_fgsa_rev_no = save_fgsa_rev_no;
	}

	public String getSave_sn_no() {
		return save_sn_no;
	}

	public void setSave_sn_no(String save_sn_no) {
		this.save_sn_no = save_sn_no;
	}

	public String getSave_sn_rev_no() {
		return save_sn_rev_no;
	}

	public void setSave_sn_rev_no(String save_sn_rev_no) {
		this.save_sn_rev_no = save_sn_rev_no;
	}

	public String getSave_contract_type() {
		return save_contract_type;
	}

	public void setSave_contract_type(String save_contract_type) {
		this.save_contract_type = save_contract_type;
	}

	public String getSave_customer_plant_seq_no() {
		return save_customer_plant_seq_no;
	}

	public void setSave_customer_plant_seq_no(String save_customer_plant_seq_no) {
		this.save_customer_plant_seq_no = save_customer_plant_seq_no;
	}

	public String getSave_bill_period_end_dt() {
		return save_bill_period_end_dt;
	}

	public void setSave_bill_period_end_dt(String save_bill_period_end_dt) {
		this.save_bill_period_end_dt = save_bill_period_end_dt;
	}

	public String getSave_hlpl_Inv_Seq_No() {
		return save_hlpl_Inv_Seq_No;
	}

	public void setSave_hlpl_Inv_Seq_No(String save_hlpl_Inv_Seq_No) {
		this.save_hlpl_Inv_Seq_No = save_hlpl_Inv_Seq_No;
	}

	public String getSave_financial_Year() {
		return save_financial_Year;
	}

	public void setSave_financial_Year(String save_financial_Year) {
		this.save_financial_Year = save_financial_Year;
	}

	public String getSave_invoice_date() {
		return save_invoice_date;
	}

	public void setSave_invoice_date(String save_invoice_date) {
		this.save_invoice_date = save_invoice_date;
	}

	public String getSave_raw_amt_usd() {
		return save_raw_amt_usd;
	}

	public void setSave_raw_amt_usd(String save_raw_amt_usd) {
		this.save_raw_amt_usd = save_raw_amt_usd;
	}

	public String getSave_raw_amt_inr() {
		return save_raw_amt_inr;
	}

	public void setSave_raw_amt_inr(String save_raw_amt_inr) {
		this.save_raw_amt_inr = save_raw_amt_inr;
	}

	public String getSave_mapping_id_LTCORA_CN() {
		return save_mapping_id_LTCORA_CN;
	}

	public void setSave_mapping_id_LTCORA_CN(String save_mapping_id_LTCORA_CN) {
		this.save_mapping_id_LTCORA_CN = save_mapping_id_LTCORA_CN;
	}

	public String getSave_exch_rate_val() {
		return save_exch_rate_val;
	}

	public void setSave_exch_rate_val(String save_exch_rate_val) {
		this.save_exch_rate_val = save_exch_rate_val;
	}

	public String getSave_adv_inv_no() {
		return save_adv_inv_no;
	}

	public void setSave_adv_inv_no(String save_adv_inv_no) {
		this.save_adv_inv_no = save_adv_inv_no;
	}

	public String getSave_adv_inv_dt() {
		return save_adv_inv_dt;
	}

	public void setSave_adv_inv_dt(String save_adv_inv_dt) {
		this.save_adv_inv_dt = save_adv_inv_dt;
	}

	public String getSave_currency() {
		return save_currency;
	}

	public void setSave_currency(String save_currency) {
		this.save_currency = save_currency;
	}

	public String getSave_advrecevial() {
		return save_advrecevial;
	}

	public void setSave_advrecevial(String save_advrecevial) {
		this.save_advrecevial = save_advrecevial;
	}

	public String getSave_adjustamt() {
		return save_adjustamt;
	}

	public void setSave_adjustamt(String save_adjustamt) {
		this.save_adjustamt = save_adjustamt;
	}

	public String getSave_priceINR2_advance_adjust() {
		return save_priceINR2_advance_adjust;
	}

	public void setSave_priceINR2_advance_adjust(String save_priceINR2_advance_adjust) {
		this.save_priceINR2_advance_adjust = save_priceINR2_advance_adjust;
	}

	public String getSave_adjustsign() {
		return save_adjustsign;
	}

	public void setSave_adjustsign(String save_adjustsign) {
		this.save_adjustsign = save_adjustsign;
	}

	public String getSave_activity() {
		return save_activity;
	}

	public void setSave_activity(String save_activity) {
		this.save_activity = save_activity;
	}

	public String getInv_customer_Invoice_DT() {
		return Inv_customer_Invoice_DT;
	}

	public void setInv_customer_Invoice_DT(String inv_customer_Invoice_DT) {
		Inv_customer_Invoice_DT = inv_customer_Invoice_DT;
	}

	public String getBalanceason() {
		return balanceason;
	}

	public void setBalanceason(String balanceason) {
		this.balanceason = balanceason;
	}

	public String getFormatted_Date() {
		return formatted_Date;
	}

	public void setFormatted_Date(String formatted_Date) {
		this.formatted_Date = formatted_Date;
	}

	public String getInput_date() {
		return input_date;
	}

	public void setInput_date(String input_date) {
		this.input_date = input_date;
	}

	public Vector getReport_cn_ltcora_no() {
		return report_cn_ltcora_no;
	}

	public void setReport_cn_ltcora_no(Vector report_cn_ltcora_no) {
		this.report_cn_ltcora_no = report_cn_ltcora_no;
	}

	public Vector getReport_cn_ltcora_rev_no() {
		return report_cn_ltcora_rev_no;
	}

	public void setReport_cn_ltcora_rev_no(Vector report_cn_ltcora_rev_no) {
		this.report_cn_ltcora_rev_no = report_cn_ltcora_rev_no;
	}

	public String getHlpl_inv_seq_no() {
		return hlpl_inv_seq_no;
	}

	public void setHlpl_inv_seq_no(String hlpl_inv_seq_no) {
		this.hlpl_inv_seq_no = hlpl_inv_seq_no;
	}

	public Vector getCargowise_rpt_fgsa_no() {
		return cargowise_rpt_fgsa_no;
	}

	public void setCargowise_rpt_fgsa_no(Vector cargowise_rpt_fgsa_no) {
		this.cargowise_rpt_fgsa_no = cargowise_rpt_fgsa_no;
	}

	public Vector getCargowise_rpt_fgsa_rev_no() {
		return cargowise_rpt_fgsa_rev_no;
	}

	public void setCargowise_rpt_fgsa_rev_no(Vector cargowise_rpt_fgsa_rev_no) {
		this.cargowise_rpt_fgsa_rev_no = cargowise_rpt_fgsa_rev_no;
	}

	public Vector getCargowise_rpt_sn_no() {
		return cargowise_rpt_sn_no;
	}

	public void setCargowise_rpt_sn_no(Vector cargowise_rpt_sn_no) {
		this.cargowise_rpt_sn_no = cargowise_rpt_sn_no;
	}

	public Vector getCargowise_rpt_sn_rev_no() {
		return cargowise_rpt_sn_rev_no;
	}

	public void setCargowise_rpt_sn_rev_no(Vector cargowise_rpt_sn_rev_no) {
		this.cargowise_rpt_sn_rev_no = cargowise_rpt_sn_rev_no;
	}

	public Vector getCargowise_rpt_start_dt() {
		return cargowise_rpt_start_dt;
	}

	public void setCargowise_rpt_start_dt(Vector cargowise_rpt_start_dt) {
		this.cargowise_rpt_start_dt = cargowise_rpt_start_dt;
	}

	public Vector getCargowise_rpt_end_dt() {
		return cargowise_rpt_end_dt;
	}

	public void setCargowise_rpt_end_dt(Vector cargowise_rpt_end_dt) {
		this.cargowise_rpt_end_dt = cargowise_rpt_end_dt;
	}

	public String getCargo_rpt_fgsa_no() {
		return cargo_rpt_fgsa_no;
	}

	public void setCargo_rpt_fgsa_no(String cargo_rpt_fgsa_no) {
		this.cargo_rpt_fgsa_no = cargo_rpt_fgsa_no;
	}

	public String getCargo_rpt_fgsa_rev_no() {
		return cargo_rpt_fgsa_rev_no;
	}

	public void setCargo_rpt_fgsa_rev_no(String cargo_rpt_fgsa_rev_no) {
		this.cargo_rpt_fgsa_rev_no = cargo_rpt_fgsa_rev_no;
	}

	public String getCargo_rpt_sn_no() {
		return cargo_rpt_sn_no;
	}

	public void setCargo_rpt_sn_no(String cargo_rpt_sn_no) {
		this.cargo_rpt_sn_no = cargo_rpt_sn_no;
	}

	public String getCargo_rpt_sn_rev_no() {
		return cargo_rpt_sn_rev_no;
	}

	public void setCargo_rpt_sn_rev_no(String cargo_rpt_sn_rev_no) {
		this.cargo_rpt_sn_rev_no = cargo_rpt_sn_rev_no;
	}

	public Vector getCargowise_advance_amt() {
		return cargowise_advance_amt;
	}

	public void setCargowise_advance_amt(Vector cargowise_advance_amt) {
		this.cargowise_advance_amt = cargowise_advance_amt;
	}

	public Vector getCargowise_advance_cur() {
		return cargowise_advance_cur;
	}

	public void setCargowise_advance_cur(Vector cargowise_advance_cur) {
		this.cargowise_advance_cur = cargowise_advance_cur;
	}

	public Vector getCargowise_advance_flag() {
		return cargowise_advance_flag;
	}

	public void setCargowise_advance_flag(Vector cargowise_advance_flag) {
		this.cargowise_advance_flag = cargowise_advance_flag;
	}

	public Vector getCargowise_advance_cargo() {
		return cargowise_advance_cargo;
	}

	public void setCargowise_advance_cargo(Vector cargowise_advance_cargo) {
		this.cargowise_advance_cargo = cargowise_advance_cargo;
	}



	public String getBillCycle() {
		return billCycle;
	}



	public void setBillCycle(String billCycle) {
		this.billCycle = billCycle;
	}



	public String getTAX_ADV_ADJ_AMT() {
		return TAX_ADV_ADJ_AMT;
	}



	public void setTAX_ADV_ADJ_AMT(String tax_adv_adj_amt) {
		TAX_ADV_ADJ_AMT = tax_adv_adj_amt;
	}



	public String getTAX_ADV_ADJ_CUR() {
		return TAX_ADV_ADJ_CUR;
	}



	public void setTAX_ADV_ADJ_CUR(String tax_adv_adj_cur) {
		TAX_ADV_ADJ_CUR = tax_adv_adj_cur;
	}



	public String getTAX_ADV_ADJ_FLAG() {
		return TAX_ADV_ADJ_FLAG;
	}



	public void setTAX_ADV_ADJ_FLAG(String tax_adv_adj_flag) {
		TAX_ADV_ADJ_FLAG = tax_adv_adj_flag;
	}



	public String getTAX_ADV_ADJ_GROSS_INR() {
		return TAX_ADV_ADJ_GROSS_INR;
	}



	public void setTAX_ADV_ADJ_GROSS_INR(String tax_adv_adj_gross_inr) {
		TAX_ADV_ADJ_GROSS_INR = tax_adv_adj_gross_inr;
	}



	public String getTAX_ADV_ADJ_GROSS_USD() {
		return TAX_ADV_ADJ_GROSS_USD;
	}



	public void setTAX_ADV_ADJ_GROSS_USD(String tax_adv_adj_gross_usd) {
		TAX_ADV_ADJ_GROSS_USD = tax_adv_adj_gross_usd;
	}



	public String getTAX_ADV_ADJ_SIGN() {
		return TAX_ADV_ADJ_SIGN;
	}



	public void setTAX_ADV_ADJ_SIGN(String tax_adv_adj_sign) {
		TAX_ADV_ADJ_SIGN = tax_adv_adj_sign;
	}



	public String getTAX_ADV_ADJ_remark() {
		return TAX_ADV_ADJ_remark;
	}



	public void setTAX_ADV_ADJ_remark(String tax_adv_adj_remark) {
		TAX_ADV_ADJ_remark = tax_adv_adj_remark;
	}



	public String getTotal_invoice_payable_inr() {
		return total_invoice_payable_inr;
	}



	public void setTotal_invoice_payable_inr(String total_invoice_payable_inr) {
		this.total_invoice_payable_inr = total_invoice_payable_inr;
	}



	public String getTotal_invoice_payable_usd() {
		return total_invoice_payable_usd;
	}



	public void setTotal_invoice_payable_usd(String total_invoice_payable_usd) {
		this.total_invoice_payable_usd = total_invoice_payable_usd;
	}



	public String getTotal_tax_payable() {
		return total_tax_payable;
	}



	public void setTotal_tax_payable(String total_tax_payable) {
		this.total_tax_payable = total_tax_payable;
	}



	public String getBalanceason_tax() {
		return balanceason_tax;
	}



	public void setBalanceason_tax(String balanceason_tax) {
		this.balanceason_tax = balanceason_tax;
	}



	public String getFinal_Total_Tax_Collection() {
		return Final_Total_Tax_Collection;
	}



	public void setFinal_Total_Tax_Collection(String final_Total_Tax_Collection) {
		Final_Total_Tax_Collection = final_Total_Tax_Collection;
	}



	public String getFinal_Total_Tax_Currency() {
		return Final_Total_Tax_Currency;
	}



	public void setFinal_Total_Tax_Currency(String final_Total_Tax_Currency) {
		Final_Total_Tax_Currency = final_Total_Tax_Currency;
	}



	public Vector getInvoice_Tax_adj_amt() {
		return Invoice_Tax_adj_amt;
	}



	public void setInvoice_Tax_adj_amt(Vector invoice_Tax_adj_amt) {
		Invoice_Tax_adj_amt = invoice_Tax_adj_amt;
	}



	public Vector getInvoice_Tax_Adj_bal() {
		return Invoice_Tax_Adj_bal;
	}



	public void setInvoice_Tax_Adj_bal(Vector invoice_Tax_Adj_bal) {
		Invoice_Tax_Adj_bal = invoice_Tax_Adj_bal;
	}



	public Vector getInvoice_Tax_adj_cur() {
		return Invoice_Tax_adj_cur;
	}



	public void setInvoice_Tax_adj_cur(Vector invoice_Tax_adj_cur) {
		Invoice_Tax_adj_cur = invoice_Tax_adj_cur;
	}



	public String getPdfinvadjustmentamt_inr() {
		return Pdfinvadjustmentamt_inr;
	}



	public void setPdfinvadjustmentamt_inr(String pdfinvadjustmentamt_inr) {
		Pdfinvadjustmentamt_inr = pdfinvadjustmentamt_inr;
	}



	public String getPdfinvoice_tax_adj() {
		return Pdfinvoice_tax_adj;
	}



	public void setPdfinvoice_tax_adj(String pdfinvoice_tax_adj) {
		Pdfinvoice_tax_adj = pdfinvoice_tax_adj;
	}



	public String getPdfTAX_ADV_ADJ_AMT() {
		return PdfTAX_ADV_ADJ_AMT;
	}



	public void setPdfTAX_ADV_ADJ_AMT(String pdfTAX_ADV_ADJ_AMT) {
		PdfTAX_ADV_ADJ_AMT = pdfTAX_ADV_ADJ_AMT;
	}



	public String getPdfTAX_ADV_ADJ_CUR() {
		return PdfTAX_ADV_ADJ_CUR;
	}



	public void setPdfTAX_ADV_ADJ_CUR(String pdfTAX_ADV_ADJ_CUR) {
		PdfTAX_ADV_ADJ_CUR = pdfTAX_ADV_ADJ_CUR;
	}



	public String getPdfTAX_ADV_ADJ_FLAG() {
		return PdfTAX_ADV_ADJ_FLAG;
	}



	public void setPdfTAX_ADV_ADJ_FLAG(String pdfTAX_ADV_ADJ_FLAG) {
		PdfTAX_ADV_ADJ_FLAG = pdfTAX_ADV_ADJ_FLAG;
	}



	public String getPdfTAX_ADV_ADJ_GROSS_INR() {
		return PdfTAX_ADV_ADJ_GROSS_INR;
	}



	public void setPdfTAX_ADV_ADJ_GROSS_INR(String pdfTAX_ADV_ADJ_GROSS_INR) {
		PdfTAX_ADV_ADJ_GROSS_INR = pdfTAX_ADV_ADJ_GROSS_INR;
	}



	public String getPdfTAX_ADV_ADJ_GROSS_USD() {
		return PdfTAX_ADV_ADJ_GROSS_USD;
	}



	public void setPdfTAX_ADV_ADJ_GROSS_USD(String pdfTAX_ADV_ADJ_GROSS_USD) {
		PdfTAX_ADV_ADJ_GROSS_USD = pdfTAX_ADV_ADJ_GROSS_USD;
	}



	public String getPdfTAX_ADV_ADJ_remark() {
		return PdfTAX_ADV_ADJ_remark;
	}



	public void setPdfTAX_ADV_ADJ_remark(String pdfTAX_ADV_ADJ_remark) {
		PdfTAX_ADV_ADJ_remark = pdfTAX_ADV_ADJ_remark;
	}



	public String getPdfTAX_ADV_ADJ_SIGN() {
		return PdfTAX_ADV_ADJ_SIGN;
	}



	public void setPdfTAX_ADV_ADJ_SIGN(String pdfTAX_ADV_ADJ_SIGN) {
		PdfTAX_ADV_ADJ_SIGN = pdfTAX_ADV_ADJ_SIGN;
	}



	public String getPdftotal_invoice_payable_inr() {
		return Pdftotal_invoice_payable_inr;
	}



	public void setPdftotal_invoice_payable_inr(String pdftotal_invoice_payable_inr) {
		Pdftotal_invoice_payable_inr = pdftotal_invoice_payable_inr;
	}



	public String getPdftotal_invoice_payable_usd() {
		return Pdftotal_invoice_payable_usd;
	}



	public void setPdftotal_invoice_payable_usd(String pdftotal_invoice_payable_usd) {
		Pdftotal_invoice_payable_usd = pdftotal_invoice_payable_usd;
	}



	public String getPdftotal_tax_payable() {
		return Pdftotal_tax_payable;
	}



	public void setPdftotal_tax_payable(String pdftotal_tax_payable) {
		Pdftotal_tax_payable = pdftotal_tax_payable;
	}

	public Vector getInvoice_adj_amt_tax() {
		return Invoice_adj_amt_tax;
	}

	public void setInvoice_adj_amt_tax(Vector invoice_adj_amt_tax) {
		Invoice_adj_amt_tax = invoice_adj_amt_tax;
	}

	public Vector getInvoice_Adj_bal_tax() {
		return Invoice_Adj_bal_tax;
	}

	public void setInvoice_Adj_bal_tax(Vector invoice_Adj_bal_tax) {
		Invoice_Adj_bal_tax = invoice_Adj_bal_tax;
	}

	public Vector getInvoice_adj_cur_tax() {
		return Invoice_adj_cur_tax;
	}

	public void setInvoice_adj_cur_tax(Vector invoice_adj_cur_tax) {
		Invoice_adj_cur_tax = invoice_adj_cur_tax;
	}

	public String getInvoice_bench_date() {
		return invoice_bench_date;
	}

	public void setInvoice_bench_date(String invoice_bench_date) {
		this.invoice_bench_date = invoice_bench_date;
	}

	public String getPdfFinal_Total_Collection_tax() {
		return PdfFinal_Total_Collection_tax;
	}

	public void setPdfFinal_Total_Collection_tax(
			String pdfFinal_Total_Collection_tax) {
		PdfFinal_Total_Collection_tax = pdfFinal_Total_Collection_tax;
	}

	public String getPdfFinal_Total_Currency_tax() {
		return PdfFinal_Total_Currency_tax;
	}

	public void setPdfFinal_Total_Currency_tax(String pdfFinal_Total_Currency_tax) {
		PdfFinal_Total_Currency_tax = pdfFinal_Total_Currency_tax;
	}

	public String getMODIFY_TAX_ADV_ADJUSTMENT() {
		return MODIFY_TAX_ADV_ADJUSTMENT;
	}

	public void setMODIFY_TAX_ADV_ADJUSTMENT(String modify_tax_adv_adjustment) {
		MODIFY_TAX_ADV_ADJUSTMENT = modify_tax_adv_adjustment;
	}

	public String getMODIFY_TAX_ADV_CURR() {
		return MODIFY_TAX_ADV_CURR;
	}

	public void setMODIFY_TAX_ADV_CURR(String modify_tax_adv_curr) {
		MODIFY_TAX_ADV_CURR = modify_tax_adv_curr;
	}

	public String getMODIFY_TAX_ADV_FLAG() {
		return MODIFY_TAX_ADV_FLAG;
	}

	public void setMODIFY_TAX_ADV_FLAG(String modify_tax_adv_flag) {
		MODIFY_TAX_ADV_FLAG = modify_tax_adv_flag;
	}

	public String getMODIFY_TAX_INV_AMT_INR() {
		return MODIFY_TAX_INV_AMT_INR;
	}

	public void setMODIFY_TAX_INV_AMT_INR(String modify_tax_inv_amt_inr) {
		MODIFY_TAX_INV_AMT_INR = modify_tax_inv_amt_inr;
	}

	public Vector getCargowise_advance_tax_amt() {
		return cargowise_advance_tax_amt;
	}

	public void setCargowise_advance_tax_amt(Vector cargowise_advance_tax_amt) {
		this.cargowise_advance_tax_amt = cargowise_advance_tax_amt;
	}

	public Vector getReport_cn_adjusted_amt_tax() {
		return report_cn_adjusted_amt_tax;
	}

	public void setReport_cn_adjusted_amt_tax(Vector report_cn_adjusted_amt_tax) {
		this.report_cn_adjusted_amt_tax = report_cn_adjusted_amt_tax;
	}

	public Vector getReport_cn_adv_amt_tax() {
		return report_cn_adv_amt_tax;
	}

	public void setReport_cn_adv_amt_tax(Vector report_cn_adv_amt_tax) {
		this.report_cn_adv_amt_tax = report_cn_adv_amt_tax;
	}

	public Vector getReport_cn_balance_tax() {
		return report_cn_balance_tax;
	}

	public void setReport_cn_balance_tax(Vector report_cn_balance_tax) {
		this.report_cn_balance_tax = report_cn_balance_tax;
	}

	public Vector getRpt_cn_adv_amt_tax() {
		return rpt_cn_adv_amt_tax;
	}

	public void setRpt_cn_adv_amt_tax(Vector rpt_cn_adv_amt_tax) {
		this.rpt_cn_adv_amt_tax = rpt_cn_adv_amt_tax;
	}

	public Vector getRpt_cn_total_adj_amt_tax() {
		return rpt_cn_total_adj_amt_tax;
	}

	public void setRpt_cn_total_adj_amt_tax(Vector rpt_cn_total_adj_amt_tax) {
		this.rpt_cn_total_adj_amt_tax = rpt_cn_total_adj_amt_tax;
	}

	public String getEmp_cd() {
		return Emp_cd;
	}

	public void setEmp_cd(String emp_cd) {
		Emp_cd = emp_cd;
	}

	public String getCustomer_access_flag() {
		return Customer_access_flag;
	}

	public void setCustomer_access_flag(String customer_access_flag) {
		Customer_access_flag = customer_access_flag;
	}

	public String getContact_Suppl_PAN_NO() {
		return contact_Suppl_PAN_NO;
	}

	public void setContact_Suppl_PAN_NO(String contact_Suppl_PAN_NO) {
		this.contact_Suppl_PAN_NO = contact_Suppl_PAN_NO;
	}

	public String getContact_Suppl_PAN_DT() {
		return contact_Suppl_PAN_DT;
	}

	public void setContact_Suppl_PAN_DT(String contact_Suppl_PAN_DT) {
		this.contact_Suppl_PAN_DT = contact_Suppl_PAN_DT;
	}

	public String getSBC_ADV_ADJ_AMT() {
		return SBC_ADV_ADJ_AMT;
	}

	public String getSBC_ADV_ADJ_CUR() {
		return SBC_ADV_ADJ_CUR;
	}

	public String getSBC_ADV_ADJ_FLAG() {
		return SBC_ADV_ADJ_FLAG;
	}

	public String getSBC_ADV_ADJ_GROSS_INR() {
		return SBC_ADV_ADJ_GROSS_INR;
	}

	public String getSBC_ADV_ADJ_GROSS_USD() {
		return SBC_ADV_ADJ_GROSS_USD;
	}

	public String getSBC_ADV_ADJ_remark() {
		return SBC_ADV_ADJ_remark;
	}

	public String getSBC_ADV_ADJ_SIGN() {
		return SBC_ADV_ADJ_SIGN;
	}

	public String getPdfSBC_ADV_ADJ_AMT() {
		return PdfSBC_ADV_ADJ_AMT;
	}

	public void setPdfSBC_ADV_ADJ_AMT(String pdfSBC_ADV_ADJ_AMT) {
		PdfSBC_ADV_ADJ_AMT = pdfSBC_ADV_ADJ_AMT;
	}

	public String getPdfSBC_ADV_ADJ_CUR() {
		return PdfSBC_ADV_ADJ_CUR;
	}

	public void setPdfSBC_ADV_ADJ_CUR(String pdfSBC_ADV_ADJ_CUR) {
		PdfSBC_ADV_ADJ_CUR = pdfSBC_ADV_ADJ_CUR;
	}

	public String getPdfSBC_ADV_ADJ_FLAG() {
		return PdfSBC_ADV_ADJ_FLAG;
	}

	public void setPdfSBC_ADV_ADJ_FLAG(String pdfSBC_ADV_ADJ_FLAG) {
		PdfSBC_ADV_ADJ_FLAG = pdfSBC_ADV_ADJ_FLAG;
	}

	public String getPdfSBC_ADV_ADJ_GROSS_INR() {
		return PdfSBC_ADV_ADJ_GROSS_INR;
	}

	public void setPdfSBC_ADV_ADJ_GROSS_INR(String pdfSBC_ADV_ADJ_GROSS_INR) {
		PdfSBC_ADV_ADJ_GROSS_INR = pdfSBC_ADV_ADJ_GROSS_INR;
	}

	public String getPdfSBC_ADV_ADJ_GROSS_USD() {
		return PdfSBC_ADV_ADJ_GROSS_USD;
	}

	public void setPdfSBC_ADV_ADJ_GROSS_USD(String pdfSBC_ADV_ADJ_GROSS_USD) {
		PdfSBC_ADV_ADJ_GROSS_USD = pdfSBC_ADV_ADJ_GROSS_USD;
	}

	public String getPdfSBC_ADV_ADJ_remark() {
		return PdfSBC_ADV_ADJ_remark;
	}

	public void setPdfSBC_ADV_ADJ_remark(String pdfSBC_ADV_ADJ_remark) {
		PdfSBC_ADV_ADJ_remark = pdfSBC_ADV_ADJ_remark;
	}

	public String getPdfSBC_ADV_ADJ_SIGN() {
		return PdfSBC_ADV_ADJ_SIGN;
	}

	public void setPdfSBC_ADV_ADJ_SIGN(String pdfSBC_ADV_ADJ_SIGN) {
		PdfSBC_ADV_ADJ_SIGN = pdfSBC_ADV_ADJ_SIGN;
	}

	public String getFinal_Total_SBC_Collection() {
		return Final_Total_SBC_Collection;
	}

	public String getFinal_Total_SBC_Currency() {
		return Final_Total_SBC_Currency;
	}

	public Vector getInvoice_SBC_adj_amt() {
		return Invoice_SBC_adj_amt;
	}

	public Vector getInvoice_SBC_Adj_bal() {
		return Invoice_SBC_Adj_bal;
	}

	public Vector getInvoice_SBC_adj_cur() {
		return Invoice_SBC_adj_cur;
	}

	public String getBalanceason_SBC() {
		return balanceason_SBC;
	}

	public Vector getInvoice_adj_amt_SBC() {
		return Invoice_adj_amt_SBC;
	}

	public void setInvoice_adj_amt_SBC(Vector invoice_adj_amt_SBC) {
		Invoice_adj_amt_SBC = invoice_adj_amt_SBC;
	}

	public Vector getInvoice_Adj_bal_SBC() {
		return Invoice_Adj_bal_SBC;
	}

	public void setInvoice_Adj_bal_SBC(Vector invoice_Adj_bal_SBC) {
		Invoice_Adj_bal_SBC = invoice_Adj_bal_SBC;
	}

	public Vector getInvoice_adj_cur_SBC() {
		return Invoice_adj_cur_SBC;
	}

	public void setInvoice_adj_cur_SBC(Vector invoice_adj_cur_SBC) {
		Invoice_adj_cur_SBC = invoice_adj_cur_SBC;
	}

	public void setInvoice_SBC_adj_amt(Vector invoice_SBC_adj_amt) {
		Invoice_SBC_adj_amt = invoice_SBC_adj_amt;
	}

	public void setInvoice_SBC_Adj_bal(Vector invoice_SBC_Adj_bal) {
		Invoice_SBC_Adj_bal = invoice_SBC_Adj_bal;
	}

	public void setInvoice_SBC_adj_cur(Vector invoice_SBC_adj_cur) {
		Invoice_SBC_adj_cur = invoice_SBC_adj_cur;
	}

	public String getPdfFinal_Total_Collection_SBC() {
		return PdfFinal_Total_Collection_SBC;
	}

	public void setPdfFinal_Total_Collection_SBC(
			String pdfFinal_Total_Collection_SBC) {
		PdfFinal_Total_Collection_SBC = pdfFinal_Total_Collection_SBC;
	}

	public String getPdfFinal_Total_Currency_SBC() {
		return PdfFinal_Total_Currency_SBC;
	}

	public void setPdfFinal_Total_Currency_SBC(String pdfFinal_Total_Currency_SBC) {
		PdfFinal_Total_Currency_SBC = pdfFinal_Total_Currency_SBC;
	}

	public void setBalanceason_SBC(String balanceason_SBC) {
		this.balanceason_SBC = balanceason_SBC;
	}

	public void setFinal_Total_SBC_Collection(String final_Total_SBC_Collection) {
		Final_Total_SBC_Collection = final_Total_SBC_Collection;
	}

	public void setFinal_Total_SBC_Currency(String final_Total_SBC_Currency) {
		Final_Total_SBC_Currency = final_Total_SBC_Currency;
	}

	public String getTotal_adv_sbc_payable() {
		return total_adv_sbc_payable;
	}

	public String getTotal_adv_tax_payable() {
		return total_adv_tax_payable;
	}

	public String getPdftotal_adv_sbc_payable() {
		return pdftotal_adv_sbc_payable;
	}

	public void setPdftotal_adv_sbc_payable(String pdftotal_adv_sbc_payable) {
		this.pdftotal_adv_sbc_payable = pdftotal_adv_sbc_payable;
	}

	public String getPdftotal_adv_tax_payable() {
		return pdftotal_adv_tax_payable;
	}

	public void setPdftotal_adv_tax_payable(String pdftotal_adv_tax_payable) {
		this.pdftotal_adv_tax_payable = pdftotal_adv_tax_payable;
	}

	public void setTotal_adv_sbc_payable(String total_adv_sbc_payable) {
		this.total_adv_sbc_payable = total_adv_sbc_payable;
	}

	public void setTotal_adv_tax_payable(String total_adv_tax_payable) {
		this.total_adv_tax_payable = total_adv_tax_payable;
	}

	public boolean isSBC_flag() {
		return SBC_flag;
	}

	public boolean isSER_flag() {
		return SER_flag;
	}
////SB20160516///////
	public String getTAX_ADV_ADJ_RMK() {return TAX_ADV_ADJ_RMK;}
	public String getTAX_ADV_ADJ_CUR_ABR() {return TAX_ADV_ADJ_CUR_ABR;}
	public String getSBC_ADV_ADJ_RMK() {return SBC_ADV_ADJ_RMK;}
	public String getSBC_ADV_ADJ_CUR_ABR() {return SBC_ADV_ADJ_CUR_ABR;}
	
	public void setHlpl_drcr_docno(String hlpl_drcr_docNo) {this.hlpl_drcr_docNo = hlpl_drcr_docNo;}
	public void setHlpl_drcr_dt(String hlpl_drcr_dt) {this.hlpl_drcr_dt = hlpl_drcr_dt;}
	
	public void setPdf_type(String pdf_type) {
		this.pdf_type = pdf_type;
	}
	public String getInvoice_path() {
		return invoice_path;
	}
	public boolean isKKC_flag() {
		return KKC_flag;
	}
	public String getFinal_Total_KKC_Collection() {
		return Final_Total_KKC_Collection;
	}
	public String getFinal_Total_KKC_Currency() {
		return Final_Total_KKC_Currency;
	}
	public Vector getInvoice_KKC_adj_amt() {
		return Invoice_KKC_adj_amt;
	}
	public Vector getInvoice_KKC_Adj_bal() {
		return Invoice_KKC_Adj_bal;
	}
	public Vector getInvoice_KKC_adj_cur() {
		return Invoice_KKC_adj_cur;
	}
	public String getBalanceason_KKC() {
		return balanceason_KKC;
	}
	public String getKKC_ADV_ADJ_AMT() {
		return KKC_ADV_ADJ_AMT;
	}
	public String getKKC_ADV_ADJ_CUR() {
		return KKC_ADV_ADJ_CUR;
	}
	public String getKKC_ADV_ADJ_CUR_ABR() {
		return KKC_ADV_ADJ_CUR_ABR;
	}
	public String getKKC_ADV_ADJ_FLAG() {
		return KKC_ADV_ADJ_FLAG;
	}
	public String getKKC_ADV_ADJ_GROSS_INR() {
		return KKC_ADV_ADJ_GROSS_INR;
	}
	public String getKKC_ADV_ADJ_GROSS_USD() {
		return KKC_ADV_ADJ_GROSS_USD;
	}
	public String getKKC_ADV_ADJ_remark() {
		return KKC_ADV_ADJ_remark;
	}
	public String getKKC_ADV_ADJ_RMK() {
		return KKC_ADV_ADJ_RMK;
	}
	public String getKKC_ADV_ADJ_SIGN() {
		return KKC_ADV_ADJ_SIGN;
	}
	public String getTotal_adv_kkc_payable() {
		return total_adv_kkc_payable;
	}
	public String getPdftotal_adv_kkc_payable() {
		return pdftotal_adv_kkc_payable;
	}
	public void setPdftotal_adv_kkc_payable(String pdftotal_adv_kkc_payable) {
		this.pdftotal_adv_kkc_payable = pdftotal_adv_kkc_payable;
	}
	public Vector getInvoice_adj_amt_KKC() {
		return Invoice_adj_amt_KKC;
	}
	public void setInvoice_adj_amt_KKC(Vector invoice_adj_amt_KKC) {
		Invoice_adj_amt_KKC = invoice_adj_amt_KKC;
	}
	public Vector getInvoice_Adj_bal_KKC() {
		return Invoice_Adj_bal_KKC;
	}
	public void setInvoice_Adj_bal_KKC(Vector invoice_Adj_bal_KKC) {
		Invoice_Adj_bal_KKC = invoice_Adj_bal_KKC;
	}
	public Vector getInvoice_adj_cur_KKC() {
		return Invoice_adj_cur_KKC;
	}
	public void setInvoice_adj_cur_KKC(Vector invoice_adj_cur_KKC) {
		Invoice_adj_cur_KKC = invoice_adj_cur_KKC;
	}
	public String getPdfFinal_Total_Collection_KKC() {
		return PdfFinal_Total_Collection_KKC;
	}
	public void setPdfFinal_Total_Collection_KKC(
			String pdfFinal_Total_Collection_KKC) {
		PdfFinal_Total_Collection_KKC = pdfFinal_Total_Collection_KKC;
	}
	public String getPdfFinal_Total_Currency_KKC() {
		return PdfFinal_Total_Currency_KKC;
	}
	public void setPdfFinal_Total_Currency_KKC(String pdfFinal_Total_Currency_KKC) {
		PdfFinal_Total_Currency_KKC = pdfFinal_Total_Currency_KKC;
	}
	public void setInvoice_KKC_adj_amt(Vector invoice_KKC_adj_amt) {
		Invoice_KKC_adj_amt = invoice_KKC_adj_amt;
	}
	public void setInvoice_KKC_Adj_bal(Vector invoice_KKC_Adj_bal) {
		Invoice_KKC_Adj_bal = invoice_KKC_Adj_bal;
	}
	public void setInvoice_KKC_adj_cur(Vector invoice_KKC_adj_cur) {
		Invoice_KKC_adj_cur = invoice_KKC_adj_cur;
	}
	public void setBalanceason_KKC(String balanceason_KKC) {
		this.balanceason_KKC = balanceason_KKC;
	}
	public String getPdfKKC_ADV_ADJ_AMT() {
		return PdfKKC_ADV_ADJ_AMT;
	}
	public void setPdfKKC_ADV_ADJ_AMT(String pdfKKC_ADV_ADJ_AMT) {
		PdfKKC_ADV_ADJ_AMT = pdfKKC_ADV_ADJ_AMT;
	}
	public String getPdfKKC_ADV_ADJ_CUR() {
		return PdfKKC_ADV_ADJ_CUR;
	}
	public void setPdfKKC_ADV_ADJ_CUR(String pdfKKC_ADV_ADJ_CUR) {
		PdfKKC_ADV_ADJ_CUR = pdfKKC_ADV_ADJ_CUR;
	}
	public String getPdfKKC_ADV_ADJ_FLAG() {
		return PdfKKC_ADV_ADJ_FLAG;
	}
	public void setPdfKKC_ADV_ADJ_FLAG(String pdfKKC_ADV_ADJ_FLAG) {
		PdfKKC_ADV_ADJ_FLAG = pdfKKC_ADV_ADJ_FLAG;
	}
	public String getPdfKKC_ADV_ADJ_GROSS_INR() {
		return PdfKKC_ADV_ADJ_GROSS_INR;
	}
	public void setPdfKKC_ADV_ADJ_GROSS_INR(String pdfKKC_ADV_ADJ_GROSS_INR) {
		PdfKKC_ADV_ADJ_GROSS_INR = pdfKKC_ADV_ADJ_GROSS_INR;
	}
	public String getPdfKKC_ADV_ADJ_GROSS_USD() {
		return PdfKKC_ADV_ADJ_GROSS_USD;
	}
	public void setPdfKKC_ADV_ADJ_GROSS_USD(String pdfKKC_ADV_ADJ_GROSS_USD) {
		PdfKKC_ADV_ADJ_GROSS_USD = pdfKKC_ADV_ADJ_GROSS_USD;
	}
	public String getPdfKKC_ADV_ADJ_remark() {
		return PdfKKC_ADV_ADJ_remark;
	}
	public void setPdfKKC_ADV_ADJ_remark(String pdfKKC_ADV_ADJ_remark) {
		PdfKKC_ADV_ADJ_remark = pdfKKC_ADV_ADJ_remark;
	}
	public String getPdfKKC_ADV_ADJ_SIGN() {
		return PdfKKC_ADV_ADJ_SIGN;
	}
	public void setPdfKKC_ADV_ADJ_SIGN(String pdfKKC_ADV_ADJ_SIGN) {
		PdfKKC_ADV_ADJ_SIGN = pdfKKC_ADV_ADJ_SIGN;
	}
	public String getMsg() {return msg; }//HS20160619

	public String getSave_adv_inv_value() {
		return save_adv_inv_value;
	}

	public void setSave_adv_inv_value(String save_adv_inv_value) {
		this.save_adv_inv_value = save_adv_inv_value;
	}

	public void setSave_chk_mul_adv_inv(String save_chk_mul_adv_inv) {
		this.save_chk_mul_adv_inv = save_chk_mul_adv_inv;
	}

	public Vector getMultiple_adv_inv_no() {
		return multiple_adv_inv_no;
	}

	public void setMultiple_adv_inv_no(Vector multiple_adv_inv_no) {
		this.multiple_adv_inv_no = multiple_adv_inv_no;
	}

	public Vector getMultiple_adv_inv_dt() {
		return multiple_adv_inv_dt;
	}

	public void setMultiple_adv_inv_dt(Vector multiple_adv_inv_dt) {
		this.multiple_adv_inv_dt = multiple_adv_inv_dt;
	}

	public String getSave_adv_inv_date() {
		return save_adv_inv_date;
	}

	public void setSave_adv_inv_date(String save_adv_inv_date) {
		this.save_adv_inv_date = save_adv_inv_date;
	}

	public String getFirst_gross_amt_inr() {
		return First_gross_amt_inr;
	}

	public void setFirst_gross_amt_inr(String first_gross_amt_inr) {
		First_gross_amt_inr = first_gross_amt_inr;
	}

	public String getContact_Suppl_GSTIN_NO() {
		return contact_Suppl_GSTIN_NO;
	}

	public void setContact_Suppl_GSTIN_NO(String contact_Suppl_GSTIN_NO) {
		this.contact_Suppl_GSTIN_NO = contact_Suppl_GSTIN_NO;
	}

	public String getContact_Suppl_GSTIN_DT() {
		return contact_Suppl_GSTIN_DT;
	}

	public void setContact_Suppl_GSTIN_DT(String contact_Suppl_GSTIN_DT) {
		this.contact_Suppl_GSTIN_DT = contact_Suppl_GSTIN_DT;
	}

	public String getContact_Suppl_State_Code() {
		return contact_Suppl_State_Code;
	}

	public void setContact_Suppl_State_Code(String contact_Suppl_State_Code) {
		this.contact_Suppl_State_Code = contact_Suppl_State_Code;
	}

	public String getContact_Suppl_State() {
		return contact_Suppl_State;
	}

	public void setContact_Suppl_State(String contact_Suppl_State) {
		this.contact_Suppl_State = contact_Suppl_State;
	}

	public String getContact_customer_State() {
		return contact_customer_State;
	}

	public void setContact_customer_State(String contact_customer_State) {
		this.contact_customer_State = contact_customer_State;
	}

	public String getContact_customer_State_Code() {
		return contact_customer_State_Code;
	}

	public void setContact_customer_State_Code(String contact_customer_State_Code) {
		this.contact_customer_State_Code = contact_customer_State_Code;
	}

	public String getRule_remark() {
		return Rule_remark;
	}

	public void setRule_remark(String rule_remark) {
		Rule_remark = rule_remark;
	}

	public String getSac_code() {
		return sac_code;
	}

	public void setSac_code(String sac_code) {
		this.sac_code = sac_code;
	}

	public String getSac_name() {
		return sac_name;
	}

	public void setSac_name(String sac_name) {
		this.sac_name = sac_name;
	}

	public boolean isDate_flag() {
		return date_flag;
	}

	public void setDate_flag(boolean date_flag) {
		this.date_flag = date_flag;
	}

	public String getSave_tax_code() {
		return save_tax_code;
	}

	public void setSave_tax_code(String save_tax_code) {
		this.save_tax_code = save_tax_code;
	}

	public Vector getTAX_CODE() {
		return TAX_CODE;
	}

	public void setTAX_CODE(Vector tAX_CODE) {
		TAX_CODE = tAX_CODE;
	}

	public Map getAdjust_total_avail_bal_gst() {
		return Adjust_total_avail_bal_gst;
	}

	public void setAdjust_total_avail_bal_gst(Map adjust_total_avail_bal_gst) {
		Adjust_total_avail_bal_gst = adjust_total_avail_bal_gst;
	}

	public Map getTax_adv_flag() {
		return tax_adv_flag;
	}

	public void setTax_adv_flag(Map tax_adv_flag) {
		this.tax_adv_flag = tax_adv_flag;
	}

	public Map getTax_adv_curr() {
		return tax_adv_curr;
	}

	public void setTax_adv_curr(Map tax_adv_curr) {
		this.tax_adv_curr = tax_adv_curr;
	}

	public Map getTax_inv_amt_inr() {
		return tax_inv_amt_inr;
	}

	public void setTax_inv_amt_inr(Map tax_inv_amt_inr) {
		this.tax_inv_amt_inr = tax_inv_amt_inr;
	}

	public Map getTax_adv_adjustment() {
		return tax_adv_adjustment;
	}

	public void setTax_adv_adjustment(Map tax_adv_adjustment) {
		this.tax_adv_adjustment = tax_adv_adjustment;
	}

	public Map getTAX_ADV_ADJ_FLAG_GST() {
		return TAX_ADV_ADJ_FLAG_GST;
	}

	public void setTAX_ADV_ADJ_FLAG_GST(Map tAX_ADV_ADJ_FLAG_GST) {
		TAX_ADV_ADJ_FLAG_GST = tAX_ADV_ADJ_FLAG_GST;
	}

	public Map getTAX_ADV_ADJ_AMT_GST() {
		return TAX_ADV_ADJ_AMT_GST;
	}

	public void setTAX_ADV_ADJ_AMT_GST(Map tAX_ADV_ADJ_AMT_GST) {
		TAX_ADV_ADJ_AMT_GST = tAX_ADV_ADJ_AMT_GST;
	}

	public Map getTAX_ADV_ADJ_CUR_GST() {
		return TAX_ADV_ADJ_CUR_GST;
	}

	public void setTAX_ADV_ADJ_CUR_GST(Map tAX_ADV_ADJ_CUR_GST) {
		TAX_ADV_ADJ_CUR_GST = tAX_ADV_ADJ_CUR_GST;
	}

	public Map getTAX_ADV_ADJ_GROSS_INR_GST() {
		return TAX_ADV_ADJ_GROSS_INR_GST;
	}

	public void setTAX_ADV_ADJ_GROSS_INR_GST(Map tAX_ADV_ADJ_GROSS_INR_GST) {
		TAX_ADV_ADJ_GROSS_INR_GST = tAX_ADV_ADJ_GROSS_INR_GST;
	}

	public Map getTAX_ADV_ADJ_GROSS_USD_GST() {
		return TAX_ADV_ADJ_GROSS_USD_GST;
	}

	public void setTAX_ADV_ADJ_GROSS_USD_GST(Map tAX_ADV_ADJ_GROSS_USD_GST) {
		TAX_ADV_ADJ_GROSS_USD_GST = tAX_ADV_ADJ_GROSS_USD_GST;
	}

	public Map getTAX_ADV_ADJ_SIGN_GST() {
		return TAX_ADV_ADJ_SIGN_GST;
	}

	public void setTAX_ADV_ADJ_SIGN_GST(Map tAX_ADV_ADJ_SIGN_GST) {
		TAX_ADV_ADJ_SIGN_GST = tAX_ADV_ADJ_SIGN_GST;
	}

	public Map getTAX_ADV_ADJ_REMARK_GST() {
		return TAX_ADV_ADJ_REMARK_GST;
	}

	public void setTAX_ADV_ADJ_REMARK_GST(Map tAX_ADV_ADJ_REMARK_GST) {
		TAX_ADV_ADJ_REMARK_GST = tAX_ADV_ADJ_REMARK_GST;
	}

	public Vector getTAX_ADV_ADJ_CODE_GST() {
		return TAX_ADV_ADJ_CODE_GST;
	}

	public void setTAX_ADV_ADJ_CODE_GST(Vector tAX_ADV_ADJ_CODE_GST) {
		TAX_ADV_ADJ_CODE_GST = tAX_ADV_ADJ_CODE_GST;
	}

	public Vector getTotal_compo_tax_payable() {
		return total_compo_tax_payable;
	}

	public void setTotal_compo_tax_payable(Vector total_compo_tax_payable) {
		this.total_compo_tax_payable = total_compo_tax_payable;
	}

	public Map getTAX_ADV_ADJ_ABBR_GST() {
		return TAX_ADV_ADJ_ABBR_GST;
	}

	public void setTAX_ADV_ADJ_ABBR_GST(Map tAX_ADV_ADJ_ABBR_GST) {
		TAX_ADV_ADJ_ABBR_GST = tAX_ADV_ADJ_ABBR_GST;
	}

	public String getTax_Structure_Dtl() {
		return tax_Structure_Dtl;
	}

	public void setTax_Structure_Dtl(String tax_Structure_Dtl) {
		this.tax_Structure_Dtl = tax_Structure_Dtl;
	}

	public Map getTAX_FLAG() {
		return TAX_FLAG;
	}

	public void setTAX_FLAG(Map tAX_FLAG) {
		TAX_FLAG = tAX_FLAG;
	}

	public Map getTAX_TOTAL_COLLECTION() {
		return TAX_TOTAL_COLLECTION;
	}

	public void setTAX_TOTAL_COLLECTION(Map tAX_TOTAL_COLLECTION) {
		TAX_TOTAL_COLLECTION = tAX_TOTAL_COLLECTION;
	}

	public Map getTAX_TOTAL_CURRENCY() {
		return TAX_TOTAL_CURRENCY;
	}

	public void setTAX_TOTAL_CURRENCY(Map tAX_TOTAL_CURRENCY) {
		TAX_TOTAL_CURRENCY = tAX_TOTAL_CURRENCY;
	}

	public Map getTAX_PAYMENT_TYPE() {
		return TAX_PAYMENT_TYPE;
	}

	public void setTAX_PAYMENT_TYPE(Map tAX_PAYMENT_TYPE) {
		TAX_PAYMENT_TYPE = tAX_PAYMENT_TYPE;
	}

	public Map getTAX_BALANCE_ASON() {
		return TAX_BALANCE_ASON;
	}

	public void setTAX_BALANCE_ASON(Map tAX_BALANCE_ASON) {
		TAX_BALANCE_ASON = tAX_BALANCE_ASON;
	}

	public Map getTAX_INVOICE_DT() {
		return TAX_INVOICE_DT;
	}

	public void setTAX_INVOICE_DT(Map tAX_INVOICE_DT) {
		TAX_INVOICE_DT = tAX_INVOICE_DT;
	}

	public Map getTAX_INVOICE_NO() {
		return TAX_INVOICE_NO;
	}

	public void setTAX_INVOICE_NO(Map tAX_INVOICE_NO) {
		TAX_INVOICE_NO = tAX_INVOICE_NO;
	}

	public Map getTAX_ADJ_AMT() {
		return TAX_ADJ_AMT;
	}

	public void setTAX_ADJ_AMT(Map tAX_ADJ_AMT) {
		TAX_ADJ_AMT = tAX_ADJ_AMT;
	}

	public Map getTAX_ADJ_CUR() {
		return TAX_ADJ_CUR;
	}

	public void setTAX_ADJ_CUR(Map tAX_ADJ_CUR) {
		TAX_ADJ_CUR = tAX_ADJ_CUR;
	}

	public Map getTAX_ADJ_BAL() {
		return TAX_ADJ_BAL;
	}

	public void setTAX_ADJ_BAL(Map tAX_ADJ_BAL) {
		TAX_ADJ_BAL = tAX_ADJ_BAL;
	}

	public Vector getCompo_cd() {
		return compo_cd;
	}

	public void setCompo_cd(Vector compo_cd) {
		this.compo_cd = compo_cd;
	}

	public Vector getCompo_abbr() {
		return compo_abbr;
	}

	public void setCompo_abbr(Vector compo_abbr) {
		this.compo_abbr = compo_abbr;
	}


	public String getNew_inv_seq_no() {
		return new_inv_seq_no;
	}


	public void setNew_inv_seq_no(String new_inv_seq_no) {
		this.new_inv_seq_no = new_inv_seq_no;
	}


	public boolean isTax_gst() {
		return tax_gst;
	}


	public void setTax_gst(boolean tax_gst) {
		this.tax_gst = tax_gst;
	}


	public String getService_desc() {
		return service_desc;
	}


	public void setService_desc(String service_desc) {
		this.service_desc = service_desc;
	}


	public Map getTOTAL_TAX_PAYABLE() {
		return TOTAL_TAX_PAYABLE;
	}


	public void setTOTAL_TAX_PAYABLE(Map tOTAL_TAX_PAYABLE) {
		TOTAL_TAX_PAYABLE = tOTAL_TAX_PAYABLE;
	}


	public Vector getCustomer_Invoice_Bank_Name() {
		return customer_Invoice_Bank_Name;
	}


	public void setCustomer_Invoice_Bank_Name(Vector customer_Invoice_Bank_Name) {
		this.customer_Invoice_Bank_Name = customer_Invoice_Bank_Name;
	}
	public String getInv_title() {
		return inv_title;
	}
	public void setInv_title(String inv_title) {
		this.inv_title = inv_title;
	}
}
	